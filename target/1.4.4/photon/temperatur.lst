
/home/aridder/Particle/temperatur/target/1.4.4/photon/temperatur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000eec0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080aeee0  080aeee0  0001eee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080aeee8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000017c  20000000  080aeeec  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000007d4  2000017c  2000017c  0004017c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080af068  080af068  0003f068  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080af090  080af090  0003f090  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001ee5b4  00000000  00000000  0003f094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00028ba7  00000000  00000000  0022d648  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000038b0  00000000  00000000  002561ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0004af84  00000000  00000000  00259a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0006500f  00000000  00000000  002a4a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000c6775  00000000  00000000  00309a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0002dca7  00000000  00000000  003d01a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00005970  00000000  00000000  003fde4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00011f8c  00000000  00000000  004037c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f008 fd88 	bl	80a8b46 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f008 fda8 	bl	80a8b92 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080aeeec 	.word	0x080aeeec
 80a0050:	2000017c 	.word	0x2000017c
 80a0054:	2000017c 	.word	0x2000017c
 80a0058:	20000950 	.word	0x20000950
 80a005c:	20000950 	.word	0x20000950

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f005 f9ed 	bl	80a5440 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080aee2c 	.word	0x080aee2c
 80a0088:	080aeed8 	.word	0x080aeed8

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b91c 	b.w	80a02c8 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f8e5 	bl	80a0260 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f005 b993 	b.w	80a53c4 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f004 b871 	b.w	80a4184 <malloc>

080a00a2 <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a00a2:	f004 b86f 	b.w	80a4184 <malloc>

080a00a6 <_ZdlPv>:
 80a00a6:	f004 b875 	b.w	80a4194 <free>
	...

080a00ac <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00ae:	4a03      	ldr	r2, [pc, #12]	; (80a00bc <__cxa_pure_virtual+0x10>)
 80a00b0:	2100      	movs	r1, #0
 80a00b2:	200c      	movs	r0, #12
 80a00b4:	f003 ff7a 	bl	80a3fac <panic_>
 80a00b8:	e7fe      	b.n	80a00b8 <__cxa_pure_virtual+0xc>
 80a00ba:	bf00      	nop
 80a00bc:	080a3e1d 	.word	0x080a3e1d

080a00c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00c0:	7800      	ldrb	r0, [r0, #0]
 80a00c2:	fab0 f080 	clz	r0, r0
 80a00c6:	0940      	lsrs	r0, r0, #5
 80a00c8:	4770      	bx	lr

080a00ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ca:	2301      	movs	r3, #1
 80a00cc:	7003      	strb	r3, [r0, #0]
 80a00ce:	4770      	bx	lr

080a00d0 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
 80a00d0:	4770      	bx	lr

080a00d2 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80a00d2:	6a00      	ldr	r0, [r0, #32]
 80a00d4:	6803      	ldr	r3, [r0, #0]
 80a00d6:	68db      	ldr	r3, [r3, #12]
 80a00d8:	4718      	bx	r3

080a00da <_ZN9GyroscopeD1Ev>:
#define GYROSCOPE_H
#include "MPU6050.h"
#include "acceleration_measurements.h"
#include <queue>

class Gyroscope {
 80a00da:	b570      	push	{r4, r5, r6, lr}

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 80a00dc:	6843      	ldr	r3, [r0, #4]
 80a00de:	4604      	mov	r4, r0
      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
 80a00e0:	6985      	ldr	r5, [r0, #24]
 80a00e2:	6a86      	ldr	r6, [r0, #40]	; 0x28

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 80a00e4:	b153      	cbz	r3, 80a00fc <_ZN9GyroscopeD1Ev+0x22>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80a00e6:	3604      	adds	r6, #4
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80a00e8:	42ae      	cmp	r6, r5
 80a00ea:	d904      	bls.n	80a00f6 <_ZN9GyroscopeD1Ev+0x1c>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a00ec:	f855 0b04 	ldr.w	r0, [r5], #4
 80a00f0:	f7ff ffd9 	bl	80a00a6 <_ZdlPv>
 80a00f4:	e7f8      	b.n	80a00e8 <_ZN9GyroscopeD1Ev+0xe>
 80a00f6:	6860      	ldr	r0, [r4, #4]
 80a00f8:	f7ff ffd5 	bl	80a00a6 <_ZdlPv>
 80a00fc:	4620      	mov	r0, r4
 80a00fe:	bd70      	pop	{r4, r5, r6, pc}

080a0100 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a0100:	b510      	push	{r4, lr}
 80a0102:	4604      	mov	r4, r0
 80a0104:	4b09      	ldr	r3, [pc, #36]	; (80a012c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80a0106:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80a0108:	f005 fc34 	bl	80a5974 <_ZN5spark10LogManager8instanceEv>
 80a010c:	4621      	mov	r1, r4
 80a010e:	f005 fe30 	bl	80a5d72 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80a0112:	f004 fd49 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a0116:	f004 fd29 	bl	80a4b6c <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
 80a011a:	4620      	mov	r0, r4
 80a011c:	4b04      	ldr	r3, [pc, #16]	; (80a0130 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80a011e:	f840 3b04 	str.w	r3, [r0], #4
 80a0122:	f005 fd2d 	bl	80a5b80 <_ZN5spark6detail9LogFilterD1Ev>
    }
 80a0126:	4620      	mov	r0, r4
 80a0128:	bd10      	pop	{r4, pc}
 80a012a:	bf00      	nop
 80a012c:	080abab0 	.word	0x080abab0
 80a0130:	080aba98 	.word	0x080aba98

080a0134 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a0134:	b510      	push	{r4, lr}
 80a0136:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
 80a0138:	f7ff ffe2 	bl	80a0100 <_ZN5spark16SerialLogHandlerD1Ev>
 80a013c:	4620      	mov	r0, r4
 80a013e:	2124      	movs	r1, #36	; 0x24
 80a0140:	f006 fe58 	bl	80a6df4 <_ZdlPvj>
 80a0144:	4620      	mov	r0, r4
 80a0146:	bd10      	pop	{r4, pc}

080a0148 <_ZN17SerialDebugOutputD1Ev>:
#endif // Wiring_Rtt

} // namespace spark

// Compatibility API
class SerialDebugOutput: public spark::SerialLogHandler {
 80a0148:	b510      	push	{r4, lr}
 80a014a:	4604      	mov	r4, r0
 80a014c:	4b02      	ldr	r3, [pc, #8]	; (80a0158 <_ZN17SerialDebugOutputD1Ev+0x10>)
 80a014e:	6003      	str	r3, [r0, #0]
 80a0150:	f7ff ffd6 	bl	80a0100 <_ZN5spark16SerialLogHandlerD1Ev>
 80a0154:	4620      	mov	r0, r4
 80a0156:	bd10      	pop	{r4, pc}
 80a0158:	080abac8 	.word	0x080abac8

080a015c <_ZN17SerialDebugOutputD0Ev>:
 80a015c:	b510      	push	{r4, lr}
 80a015e:	4604      	mov	r4, r0
 80a0160:	f7ff fff2 	bl	80a0148 <_ZN17SerialDebugOutputD1Ev>
 80a0164:	4620      	mov	r0, r4
 80a0166:	2124      	movs	r1, #36	; 0x24
 80a0168:	f006 fe44 	bl	80a6df4 <_ZdlPvj>
 80a016c:	4620      	mov	r0, r4
 80a016e:	bd10      	pop	{r4, pc}

080a0170 <_Z30readFromTempAndHumiditySensorsm>:
    tft.drawAcc();
  }
  light.setRedLight();
}

void readFromTempAndHumiditySensors(unsigned long currentMillis) {
 80a0170:	b510      	push	{r4, lr}
  if (currentMillis - update_intervals.lastUpdateTempHum >= update_intervals.UPDATE_INTERVAL_TEMP_HUM) {
 80a0172:	4c0a      	ldr	r4, [pc, #40]	; (80a019c <_Z30readFromTempAndHumiditySensorsm+0x2c>)
 80a0174:	6963      	ldr	r3, [r4, #20]
 80a0176:	1ac0      	subs	r0, r0, r3
 80a0178:	6863      	ldr	r3, [r4, #4]
 80a017a:	4298      	cmp	r0, r3
 80a017c:	d30d      	bcc.n	80a019a <_Z30readFromTempAndHumiditySensorsm+0x2a>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a017e:	f003 fe5d 	bl	80a3e3c <HAL_Timer_Get_Milli_Seconds>
    update_intervals.lastUpdateTempHum = millis();
 80a0182:	6160      	str	r0, [r4, #20]

    waterTempSensor.readCelsiusTempFromSensor();
 80a0184:	4806      	ldr	r0, [pc, #24]	; (80a01a0 <_Z30readFromTempAndHumiditySensorsm+0x30>)
 80a0186:	f000 f9ff 	bl	80a0588 <_ZN15WaterTempSensor25readCelsiusTempFromSensorEv>
    airtempAndHumiditySensor.readHumidityFromSensor();
 80a018a:	4806      	ldr	r0, [pc, #24]	; (80a01a4 <_Z30readFromTempAndHumiditySensorsm+0x34>)
 80a018c:	f000 fed4 	bl	80a0f38 <_ZN24AirtempAndHumiditySensor22readHumidityFromSensorEv>
    airtempAndHumiditySensor.readCelsiusFromSensor();
  }
}
 80a0190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if (currentMillis - update_intervals.lastUpdateTempHum >= update_intervals.UPDATE_INTERVAL_TEMP_HUM) {
    update_intervals.lastUpdateTempHum = millis();

    waterTempSensor.readCelsiusTempFromSensor();
    airtempAndHumiditySensor.readHumidityFromSensor();
    airtempAndHumiditySensor.readCelsiusFromSensor();
 80a0194:	4803      	ldr	r0, [pc, #12]	; (80a01a4 <_Z30readFromTempAndHumiditySensorsm+0x34>)
 80a0196:	f000 beb5 	b.w	80a0f04 <_ZN24AirtempAndHumiditySensor21readCelsiusFromSensorEv>
 80a019a:	bd10      	pop	{r4, pc}
 80a019c:	20000048 	.word	0x20000048
 80a01a0:	200001e0 	.word	0x200001e0
 80a01a4:	20000228 	.word	0x20000228

080a01a8 <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm>:
  }
}

void readFromGyrometerAndDrawTheAccelerationDataOnTFT(unsigned long currentMillis) {
 80a01a8:	b510      	push	{r4, lr}
  if (currentMillis - update_intervals.lastUpdateGyroscope >= update_intervals.UPDATE_INTERVAL_GYROSCOPE) {
 80a01aa:	4c0c      	ldr	r4, [pc, #48]	; (80a01dc <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm+0x34>)
 80a01ac:	6923      	ldr	r3, [r4, #16]
 80a01ae:	1ac0      	subs	r0, r0, r3
 80a01b0:	6823      	ldr	r3, [r4, #0]
 80a01b2:	4298      	cmp	r0, r3
 80a01b4:	d310      	bcc.n	80a01d8 <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm+0x30>
 80a01b6:	f003 fe41 	bl	80a3e3c <HAL_Timer_Get_Milli_Seconds>
    update_intervals.lastUpdateGyroscope = millis();
 80a01ba:	6120      	str	r0, [r4, #16]

    gyroscope.readValuesFromSensor();

    acceleration_measurement.number_of_wave_measurments++;
 80a01bc:	4c08      	ldr	r4, [pc, #32]	; (80a01e0 <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm+0x38>)

void readFromGyrometerAndDrawTheAccelerationDataOnTFT(unsigned long currentMillis) {
  if (currentMillis - update_intervals.lastUpdateGyroscope >= update_intervals.UPDATE_INTERVAL_GYROSCOPE) {
    update_intervals.lastUpdateGyroscope = millis();

    gyroscope.readValuesFromSensor();
 80a01be:	4809      	ldr	r0, [pc, #36]	; (80a01e4 <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm+0x3c>)
 80a01c0:	f000 fff9 	bl	80a11b6 <_ZN9Gyroscope20readValuesFromSensorEv>

    acceleration_measurement.number_of_wave_measurments++;
 80a01c4:	68e3      	ldr	r3, [r4, #12]
 80a01c6:	3301      	adds	r3, #1
    if (acceleration_measurement.number_of_wave_measurments == 10) {
 80a01c8:	2b0a      	cmp	r3, #10
  if (currentMillis - update_intervals.lastUpdateGyroscope >= update_intervals.UPDATE_INTERVAL_GYROSCOPE) {
    update_intervals.lastUpdateGyroscope = millis();

    gyroscope.readValuesFromSensor();

    acceleration_measurement.number_of_wave_measurments++;
 80a01ca:	60e3      	str	r3, [r4, #12]
    if (acceleration_measurement.number_of_wave_measurments == 10) {
 80a01cc:	d104      	bne.n	80a01d8 <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm+0x30>
      gyroscope.set_wave_color_indicatior_from_z_axis_measurements();
 80a01ce:	4805      	ldr	r0, [pc, #20]	; (80a01e4 <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm+0x3c>)
 80a01d0:	f000 fefe 	bl	80a0fd0 <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv>
      acceleration_measurement.number_of_wave_measurments = 0;
 80a01d4:	2300      	movs	r3, #0
 80a01d6:	60e3      	str	r3, [r4, #12]
 80a01d8:	bd10      	pop	{r4, pc}
 80a01da:	bf00      	nop
 80a01dc:	20000048 	.word	0x20000048
 80a01e0:	20000068 	.word	0x20000068
 80a01e4:	200001f4 	.word	0x200001f4

080a01e8 <_Z23readChangeTFTScreenPagem>:
    }
  }
}

void readChangeTFTScreenPage(unsigned long currentMillis) {
 80a01e8:	b538      	push	{r3, r4, r5, lr}
  if (currentMillis - update_intervals.lastUpdateButton >= update_intervals.UPDATE_INTERVAL_BUTTON) {
 80a01ea:	4c0e      	ldr	r4, [pc, #56]	; (80a0224 <_Z23readChangeTFTScreenPagem+0x3c>)
      acceleration_measurement.number_of_wave_measurments = 0;
    }
  }
}

void readChangeTFTScreenPage(unsigned long currentMillis) {
 80a01ec:	4605      	mov	r5, r0
  if (currentMillis - update_intervals.lastUpdateButton >= update_intervals.UPDATE_INTERVAL_BUTTON) {
 80a01ee:	69a3      	ldr	r3, [r4, #24]
 80a01f0:	68a2      	ldr	r2, [r4, #8]
 80a01f2:	1ac3      	subs	r3, r0, r3
 80a01f4:	4293      	cmp	r3, r2
 80a01f6:	d314      	bcc.n	80a0222 <_Z23readChangeTFTScreenPagem+0x3a>
    buttonState = digitalRead(BUTTON_PIN);
 80a01f8:	2005      	movs	r0, #5
 80a01fa:	f006 fdc3 	bl	80a6d84 <digitalRead>
 80a01fe:	4b0a      	ldr	r3, [pc, #40]	; (80a0228 <_Z23readChangeTFTScreenPagem+0x40>)
    

    if (buttonState == HIGH) {
 80a0200:	2801      	cmp	r0, #1
  }
}

void readChangeTFTScreenPage(unsigned long currentMillis) {
  if (currentMillis - update_intervals.lastUpdateButton >= update_intervals.UPDATE_INTERVAL_BUTTON) {
    buttonState = digitalRead(BUTTON_PIN);
 80a0202:	6018      	str	r0, [r3, #0]
    

    if (buttonState == HIGH) {
 80a0204:	d10d      	bne.n	80a0222 <_Z23readChangeTFTScreenPagem+0x3a>
      sdCard.openFileToReadAndRead();
 80a0206:	4809      	ldr	r0, [pc, #36]	; (80a022c <_Z23readChangeTFTScreenPagem+0x44>)
 80a0208:	f000 fa60 	bl	80a06cc <_ZN6SDCard21openFileToReadAndReadEv>
      update_intervals.lastUpdateButton = currentMillis;
      shouldShowTempPage                = !shouldShowTempPage;
 80a020c:	4a08      	ldr	r2, [pc, #32]	; (80a0230 <_Z23readChangeTFTScreenPagem+0x48>)
    buttonState = digitalRead(BUTTON_PIN);
    

    if (buttonState == HIGH) {
      sdCard.openFileToReadAndRead();
      update_intervals.lastUpdateButton = currentMillis;
 80a020e:	61a5      	str	r5, [r4, #24]
      shouldShowTempPage                = !shouldShowTempPage;
 80a0210:	7813      	ldrb	r3, [r2, #0]
      tft.clearScreen();
 80a0212:	4808      	ldr	r0, [pc, #32]	; (80a0234 <_Z23readChangeTFTScreenPagem+0x4c>)
    

    if (buttonState == HIGH) {
      sdCard.openFileToReadAndRead();
      update_intervals.lastUpdateButton = currentMillis;
      shouldShowTempPage                = !shouldShowTempPage;
 80a0214:	f083 0301 	eor.w	r3, r3, #1
 80a0218:	7013      	strb	r3, [r2, #0]
      tft.clearScreen();
    }
  }
}
 80a021a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

    if (buttonState == HIGH) {
      sdCard.openFileToReadAndRead();
      update_intervals.lastUpdateButton = currentMillis;
      shouldShowTempPage                = !shouldShowTempPage;
      tft.clearScreen();
 80a021e:	f001 b8bd 	b.w	80a139c <_ZN3TFT11clearScreenEv>
 80a0222:	bd38      	pop	{r3, r4, r5, pc}
 80a0224:	20000048 	.word	0x20000048
 80a0228:	20000224 	.word	0x20000224
 80a022c:	200001e8 	.word	0x200001e8
 80a0230:	200001f0 	.word	0x200001f0
 80a0234:	200001c4 	.word	0x200001c4

080a0238 <_Z13publishEventsm>:
    }
  }
}

void publishEvents(unsigned long currentMillis) {
 80a0238:	b510      	push	{r4, lr}
  if (currentMillis - update_intervals.lastPublishData >= update_intervals.UPDATE_INTERVAL_PUBLISH) {
 80a023a:	4c07      	ldr	r4, [pc, #28]	; (80a0258 <_Z13publishEventsm+0x20>)
 80a023c:	69e3      	ldr	r3, [r4, #28]
 80a023e:	1ac0      	subs	r0, r0, r3
 80a0240:	68e3      	ldr	r3, [r4, #12]
 80a0242:	4298      	cmp	r0, r3
 80a0244:	d307      	bcc.n	80a0256 <_Z13publishEventsm+0x1e>
 80a0246:	f003 fdf9 	bl	80a3e3c <HAL_Timer_Get_Milli_Seconds>
    update_intervals.lastPublishData = millis();
 80a024a:	61e0      	str	r0, [r4, #28]
    particleCommunication.publishData();
  }
}
 80a024c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void publishEvents(unsigned long currentMillis) {
  if (currentMillis - update_intervals.lastPublishData >= update_intervals.UPDATE_INTERVAL_PUBLISH) {
    update_intervals.lastPublishData = millis();
    particleCommunication.publishData();
 80a0250:	4802      	ldr	r0, [pc, #8]	; (80a025c <_Z13publishEventsm+0x24>)
 80a0252:	f000 bc71 	b.w	80a0b38 <_ZN21ParticleCommunication11publishDataEv>
 80a0256:	bd10      	pop	{r4, pc}
 80a0258:	20000048 	.word	0x20000048
 80a025c:	20000180 	.word	0x20000180

080a0260 <loop>:
  airtempAndHumiditySensor.begin();

  tft.clearScreen();
}

void loop() {
 80a0260:	b510      	push	{r4, lr}
 80a0262:	f003 fdeb 	bl	80a3e3c <HAL_Timer_Get_Milli_Seconds>
 80a0266:	4604      	mov	r4, r0
  unsigned long currentMillis = millis();

  readChangeTFTScreenPage(currentMillis);
 80a0268:	f7ff ffbe 	bl	80a01e8 <_Z23readChangeTFTScreenPagem>
  readFromTempAndHumiditySensors(currentMillis);
 80a026c:	4620      	mov	r0, r4
 80a026e:	f7ff ff7f 	bl	80a0170 <_Z30readFromTempAndHumiditySensorsm>
  readFromGyrometerAndDrawTheAccelerationDataOnTFT(currentMillis);
 80a0272:	4620      	mov	r0, r4
 80a0274:	f7ff ff98 	bl	80a01a8 <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm>
  publishEvents(currentMillis);
 80a0278:	4620      	mov	r0, r4
 80a027a:	f7ff ffdd 	bl	80a0238 <_Z13publishEventsm>

  tft.drawTime();
 80a027e:	480a      	ldr	r0, [pc, #40]	; (80a02a8 <loop+0x48>)
 80a0280:	f001 f860 	bl	80a1344 <_ZN3TFT8drawTimeEv>

  if (shouldShowTempPage) {
 80a0284:	4b09      	ldr	r3, [pc, #36]	; (80a02ac <loop+0x4c>)
    tft.drawTempAndHumidity();
 80a0286:	4808      	ldr	r0, [pc, #32]	; (80a02a8 <loop+0x48>)
  readFromGyrometerAndDrawTheAccelerationDataOnTFT(currentMillis);
  publishEvents(currentMillis);

  tft.drawTime();

  if (shouldShowTempPage) {
 80a0288:	781b      	ldrb	r3, [r3, #0]
 80a028a:	b113      	cbz	r3, 80a0292 <loop+0x32>
    tft.drawTempAndHumidity();
 80a028c:	f001 f90e 	bl	80a14ac <_ZN3TFT19drawTempAndHumidityEv>
 80a0290:	e004      	b.n	80a029c <loop+0x3c>
  } else {
    tft.drawWaveIndicationColor();
 80a0292:	f001 f8d5 	bl	80a1440 <_ZN3TFT23drawWaveIndicationColorEv>
    tft.drawAcc();
 80a0296:	4804      	ldr	r0, [pc, #16]	; (80a02a8 <loop+0x48>)
 80a0298:	f001 f886 	bl	80a13a8 <_ZN3TFT7drawAccEv>
  }
  light.setRedLight();
}
 80a029c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tft.drawTempAndHumidity();
  } else {
    tft.drawWaveIndicationColor();
    tft.drawAcc();
  }
  light.setRedLight();
 80a02a0:	4803      	ldr	r0, [pc, #12]	; (80a02b0 <loop+0x50>)
 80a02a2:	f000 bd65 	b.w	80a0d70 <_ZN5Light11setRedLightEv>
 80a02a6:	bf00      	nop
 80a02a8:	200001c4 	.word	0x200001c4
 80a02ac:	200001f0 	.word	0x200001f0
 80a02b0:	200001b4 	.word	0x200001b4

080a02b4 <_Z11setupSerialv>:
    update_intervals.lastPublishData = millis();
    particleCommunication.publishData();
  }
}

void setupSerial() {
 80a02b4:	b508      	push	{r3, lr}
  while (!Serial) {
 80a02b6:	f004 fc77 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a02ba:	f004 fc5d 	bl	80a4b78 <_ZN9USBSerialcvbEv>
 80a02be:	b910      	cbnz	r0, 80a02c6 <_Z11setupSerialv+0x12>
#define digitalPinToInterrupt(P)      (P)
#endif

inline void yield() {
#if PLATFORM_THREADING
  os_thread_yield();
 80a02c0:	f003 fd6c 	bl	80a3d9c <os_thread_yield>
 80a02c4:	e7f7      	b.n	80a02b6 <_Z11setupSerialv+0x2>
 80a02c6:	bd08      	pop	{r3, pc}

080a02c8 <setup>:

const int     BUTTON_PIN         = D5;
int           buttonState        = 0;
volatile bool shouldShowTempPage = FALSE;

void setup() {
 80a02c8:	b510      	push	{r4, lr}
  setupSerial();
 80a02ca:	f7ff fff3 	bl	80a02b4 <_Z11setupSerialv>

  pinMode(BUTTON_PIN, INPUT);
 80a02ce:	2100      	movs	r1, #0
 80a02d0:	2005      	movs	r0, #5
 80a02d2:	f006 fd2d 	bl	80a6d30 <pinMode>
  delay(2000);
 80a02d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a02da:	f005 f83d 	bl	80a5358 <delay>

  sdCard.begin();
  particleCommunication.begin();
  tft.begin();
 80a02de:	4c0d      	ldr	r4, [pc, #52]	; (80a0314 <setup+0x4c>)
  setupSerial();

  pinMode(BUTTON_PIN, INPUT);
  delay(2000);

  sdCard.begin();
 80a02e0:	480d      	ldr	r0, [pc, #52]	; (80a0318 <setup+0x50>)
 80a02e2:	f000 fabf 	bl	80a0864 <_ZN6SDCard5beginEv>
  particleCommunication.begin();
 80a02e6:	480d      	ldr	r0, [pc, #52]	; (80a031c <setup+0x54>)
 80a02e8:	f000 fcac 	bl	80a0c44 <_ZN21ParticleCommunication5beginEv>
  tft.begin();
 80a02ec:	4620      	mov	r0, r4
 80a02ee:	f001 f81b 	bl	80a1328 <_ZN3TFT5beginEv>
  light.begin();
 80a02f2:	480b      	ldr	r0, [pc, #44]	; (80a0320 <setup+0x58>)
 80a02f4:	f000 fd2a 	bl	80a0d4c <_ZN5Light5beginEv>
  gyroscope.begin();
 80a02f8:	480a      	ldr	r0, [pc, #40]	; (80a0324 <setup+0x5c>)
 80a02fa:	f000 fe68 	bl	80a0fce <_ZN9Gyroscope5beginEv>
  waterTempSensor.begin();
 80a02fe:	480a      	ldr	r0, [pc, #40]	; (80a0328 <setup+0x60>)
 80a0300:	f000 f940 	bl	80a0584 <_ZN15WaterTempSensor5beginEv>
  airtempAndHumiditySensor.begin();
 80a0304:	4809      	ldr	r0, [pc, #36]	; (80a032c <setup+0x64>)
 80a0306:	f000 fdfb 	bl	80a0f00 <_ZN24AirtempAndHumiditySensor5beginEv>

  tft.clearScreen();
 80a030a:	4620      	mov	r0, r4
}
 80a030c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  light.begin();
  gyroscope.begin();
  waterTempSensor.begin();
  airtempAndHumiditySensor.begin();

  tft.clearScreen();
 80a0310:	f001 b844 	b.w	80a139c <_ZN3TFT11clearScreenEv>
 80a0314:	200001c4 	.word	0x200001c4
 80a0318:	200001e8 	.word	0x200001e8
 80a031c:	20000180 	.word	0x20000180
 80a0320:	200001b4 	.word	0x200001b4
 80a0324:	200001f4 	.word	0x200001f4
 80a0328:	200001e0 	.word	0x200001e0
 80a032c:	20000228 	.word	0x20000228

080a0330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a0330:	b570      	push	{r4, r5, r6, lr}
 80a0332:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 80a0334:	6804      	ldr	r4, [r0, #0]
 80a0336:	6843      	ldr	r3, [r0, #4]
 80a0338:	2614      	movs	r6, #20
 80a033a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a033e:	42a6      	cmp	r6, r4
 80a0340:	d004      	beq.n	80a034c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
 80a0342:	4620      	mov	r0, r4
 80a0344:	f006 fbca 	bl	80a6adc <_ZN6StringD1Ev>
 80a0348:	3414      	adds	r4, #20
 80a034a:	e7f8      	b.n	80a033e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a034c:	6828      	ldr	r0, [r5, #0]
 80a034e:	f003 ff21 	bl	80a4194 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 80a0352:	4628      	mov	r0, r5
 80a0354:	bd70      	pop	{r4, r5, r6, pc}

080a0356 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 80a0356:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 80a0358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a035a:	4606      	mov	r6, r0
 80a035c:	460c      	mov	r4, r1
 80a035e:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a0360:	d916      	bls.n	80a0390 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80a0362:	4290      	cmp	r0, r2
 80a0364:	d215      	bcs.n	80a0392 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
 80a0366:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80a036a:	1a6c      	subs	r4, r5, r1
 80a036c:	f1a1 0714 	sub.w	r7, r1, #20
 80a0370:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a0372:	42af      	cmp	r7, r5
 80a0374:	d01c      	beq.n	80a03b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80a0376:	b12c      	cbz	r4, 80a0384 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80a0378:	4629      	mov	r1, r5
 80a037a:	4620      	mov	r0, r4
 80a037c:	f006 fb9e 	bl	80a6abc <_ZN6StringC1EOS_>
 80a0380:	7c2b      	ldrb	r3, [r5, #16]
 80a0382:	7423      	strb	r3, [r4, #16]
 80a0384:	4628      	mov	r0, r5
 80a0386:	f006 fba9 	bl	80a6adc <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a038a:	3d14      	subs	r5, #20
 80a038c:	3c14      	subs	r4, #20
 80a038e:	e7f0      	b.n	80a0372 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 80a0390:	d00e      	beq.n	80a03b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80a0392:	42ac      	cmp	r4, r5
 80a0394:	d00c      	beq.n	80a03b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80a0396:	b12e      	cbz	r6, 80a03a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80a0398:	4621      	mov	r1, r4
 80a039a:	4630      	mov	r0, r6
 80a039c:	f006 fb8e 	bl	80a6abc <_ZN6StringC1EOS_>
 80a03a0:	7c23      	ldrb	r3, [r4, #16]
 80a03a2:	7433      	strb	r3, [r6, #16]
 80a03a4:	4620      	mov	r0, r4
 80a03a6:	f006 fb99 	bl	80a6adc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a03aa:	3414      	adds	r4, #20
 80a03ac:	3614      	adds	r6, #20
 80a03ae:	e7f0      	b.n	80a0392 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
 80a03b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a03b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a03b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a03b6:	2300      	movs	r3, #0
 80a03b8:	6003      	str	r3, [r0, #0]
 80a03ba:	6043      	str	r3, [r0, #4]
 80a03bc:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a03be:	684e      	ldr	r6, [r1, #4]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a03c0:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a03c2:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a03c4:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a03c6:	dd24      	ble.n	80a0412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 80a03c8:	f04f 0814 	mov.w	r8, #20
 80a03cc:	fb08 f006 	mul.w	r0, r8, r6
 80a03d0:	f003 fed8 	bl	80a4184 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 80a03d4:	4605      	mov	r5, r0
 80a03d6:	b1e0      	cbz	r0, 80a0412 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
 80a03d8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80a03dc:	fb08 1202 	mla	r2, r8, r2, r1
 80a03e0:	f7ff ffb9 	bl	80a0356 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a03e4:	6820      	ldr	r0, [r4, #0]
 80a03e6:	f003 fed5 	bl	80a4194 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80a03ea:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80a03ec:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80a03ee:	683e      	ldr	r6, [r7, #0]
 80a03f0:	687b      	ldr	r3, [r7, #4]
 80a03f2:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
 80a03f6:	4546      	cmp	r6, r8
 80a03f8:	d009      	beq.n	80a040e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
 80a03fa:	b12d      	cbz	r5, 80a0408 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
 80a03fc:	4631      	mov	r1, r6
 80a03fe:	4628      	mov	r0, r5
 80a0400:	f006 fbd5 	bl	80a6bae <_ZN6StringC1ERKS_>
 80a0404:	7c33      	ldrb	r3, [r6, #16]
 80a0406:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
 80a0408:	3614      	adds	r6, #20
 80a040a:	3514      	adds	r5, #20
 80a040c:	e7f3      	b.n	80a03f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
 80a040e:	687b      	ldr	r3, [r7, #4]
 80a0410:	6063      	str	r3, [r4, #4]
    }
}
 80a0412:	4620      	mov	r0, r4
 80a0414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0418 <_ZN17SerialDebugOutputC1Ei8LogLevel>:
public:
    explicit SerialDebugOutput(int baud = 9600, LogLevel level = LOG_LEVEL_ALL) :
 80a0418:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a041a:	4604      	mov	r4, r0
 80a041c:	b08d      	sub	sp, #52	; 0x34
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a041e:	2300      	movs	r3, #0
 80a0420:	4617      	mov	r7, r2
 80a0422:	9300      	str	r3, [sp, #0]
 80a0424:	9301      	str	r3, [sp, #4]
 80a0426:	9302      	str	r3, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
 80a0428:	f004 fbbe 	bl	80a4ba8 <_Z16_fetch_usbserialv>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
 80a042c:	4625      	mov	r5, r4
 80a042e:	4606      	mov	r6, r0
 80a0430:	4669      	mov	r1, sp
 80a0432:	a803      	add	r0, sp, #12
 80a0434:	f7ff ffbd 	bl	80a03b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a0438:	a903      	add	r1, sp, #12
 80a043a:	a806      	add	r0, sp, #24
 80a043c:	f7ff ffb9 	bl	80a03b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
 80a0440:	4b16      	ldr	r3, [pc, #88]	; (80a049c <_ZN17SerialDebugOutputC1Ei8LogLevel+0x84>)
 80a0442:	a906      	add	r1, sp, #24
 80a0444:	f845 3b04 	str.w	r3, [r5], #4
 80a0448:	a809      	add	r0, sp, #36	; 0x24
 80a044a:	f7ff ffb2 	bl	80a03b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a044e:	aa09      	add	r2, sp, #36	; 0x24
 80a0450:	4639      	mov	r1, r7
 80a0452:	4628      	mov	r0, r5
 80a0454:	f005 fdef 	bl	80a6036 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a0458:	a809      	add	r0, sp, #36	; 0x24
 80a045a:	f7ff ff69 	bl	80a0330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a045e:	a806      	add	r0, sp, #24
 80a0460:	f7ff ff66 	bl	80a0330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0464:	4b0e      	ldr	r3, [pc, #56]	; (80a04a0 <_ZN17SerialDebugOutputC1Ei8LogLevel+0x88>)
 80a0466:	6226      	str	r6, [r4, #32]
 80a0468:	6023      	str	r3, [r4, #0]
 80a046a:	a803      	add	r0, sp, #12
 80a046c:	f7ff ff60 	bl	80a0330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0470:	4b0c      	ldr	r3, [pc, #48]	; (80a04a4 <_ZN17SerialDebugOutputC1Ei8LogLevel+0x8c>)
 80a0472:	6023      	str	r3, [r4, #0]
        Serial.begin();
 80a0474:	f004 fb98 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a0478:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a047c:	f004 fb72 	bl	80a4b64 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80a0480:	f005 fa78 	bl	80a5974 <_ZN5spark10LogManager8instanceEv>
 80a0484:	4621      	mov	r1, r4
 80a0486:	f005 fd6a 	bl	80a5f5e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

// Compatibility API
class SerialDebugOutput: public spark::SerialLogHandler {
public:
    explicit SerialDebugOutput(int baud = 9600, LogLevel level = LOG_LEVEL_ALL) :
        SerialLogHandler(level) {
 80a048a:	4668      	mov	r0, sp
 80a048c:	f7ff ff50 	bl	80a0330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    }
 80a0490:	4620      	mov	r0, r4

// Compatibility API
class SerialDebugOutput: public spark::SerialLogHandler {
public:
    explicit SerialDebugOutput(int baud = 9600, LogLevel level = LOG_LEVEL_ALL) :
        SerialLogHandler(level) {
 80a0492:	4b05      	ldr	r3, [pc, #20]	; (80a04a8 <_ZN17SerialDebugOutputC1Ei8LogLevel+0x90>)
 80a0494:	6023      	str	r3, [r4, #0]
    }
 80a0496:	b00d      	add	sp, #52	; 0x34
 80a0498:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a049a:	bf00      	nop
 80a049c:	080aba98 	.word	0x080aba98
 80a04a0:	080ae4d4 	.word	0x080ae4d4
 80a04a4:	080abab0 	.word	0x080abab0
 80a04a8:	080abac8 	.word	0x080abac8

080a04ac <_GLOBAL__sub_I_debugOutput>:

void setupSerial() {
  while (!Serial) {
    SysCall::yield();
  }
 80a04ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
#include "particle_communication.h"
#include "sd_card.h"
#include "tft.h"
#include "watertemp_sensor.h"

SerialDebugOutput debugOutput;
 80a04b0:	4c20      	ldr	r4, [pc, #128]	; (80a0534 <_GLOBAL__sub_I_debugOutput+0x88>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a04b2:	f003 fd33 	bl	80a3f1c <HAL_Pin_Map>
 80a04b6:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80a0564 <_GLOBAL__sub_I_debugOutput+0xb8>
 80a04ba:	2201      	movs	r2, #1
 80a04bc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a04c0:	4620      	mov	r0, r4
 80a04c2:	f7ff ffa9 	bl	80a0418 <_ZN17SerialDebugOutputC1Ei8LogLevel>
    .az                                   = -1000,
    .number_of_wave_measurments           = 0,
    .diff_in_z_axis_last_ten_measurements = -10000,
};

SDCard                   sdCard(&calibration);
 80a04c6:	4f1c      	ldr	r7, [pc, #112]	; (80a0538 <_GLOBAL__sub_I_debugOutput+0x8c>)
#include "particle_communication.h"
#include "sd_card.h"
#include "tft.h"
#include "watertemp_sensor.h"

SerialDebugOutput debugOutput;
 80a04c8:	4620      	mov	r0, r4
    .az                                   = -1000,
    .number_of_wave_measurments           = 0,
    .diff_in_z_axis_last_ten_measurements = -10000,
};

SDCard                   sdCard(&calibration);
 80a04ca:	4c1c      	ldr	r4, [pc, #112]	; (80a053c <_GLOBAL__sub_I_debugOutput+0x90>)
TFT                      tft(&temperature, &acceleration_measurement, &calibration);
 80a04cc:	4d1c      	ldr	r5, [pc, #112]	; (80a0540 <_GLOBAL__sub_I_debugOutput+0x94>)
#include "particle_communication.h"
#include "sd_card.h"
#include "tft.h"
#include "watertemp_sensor.h"

SerialDebugOutput debugOutput;
 80a04ce:	464a      	mov	r2, r9
    .number_of_wave_measurments           = 0,
    .diff_in_z_axis_last_ten_measurements = -10000,
};

SDCard                   sdCard(&calibration);
TFT                      tft(&temperature, &acceleration_measurement, &calibration);
 80a04d0:	4e1c      	ldr	r6, [pc, #112]	; (80a0544 <_GLOBAL__sub_I_debugOutput+0x98>)
#include "particle_communication.h"
#include "sd_card.h"
#include "tft.h"
#include "watertemp_sensor.h"

SerialDebugOutput debugOutput;
 80a04d2:	491d      	ldr	r1, [pc, #116]	; (80a0548 <_GLOBAL__sub_I_debugOutput+0x9c>)
 80a04d4:	f006 fc80 	bl	80a6dd8 <__aeabi_atexit>
    .az                                   = -1000,
    .number_of_wave_measurments           = 0,
    .diff_in_z_axis_last_ten_measurements = -10000,
};

SDCard                   sdCard(&calibration);
 80a04d8:	4621      	mov	r1, r4
 80a04da:	4638      	mov	r0, r7
 80a04dc:	f000 f8cc 	bl	80a0678 <_ZN6SDCardC1EP12calibrations>
TFT                      tft(&temperature, &acceleration_measurement, &calibration);
 80a04e0:	4623      	mov	r3, r4
 80a04e2:	4632      	mov	r2, r6
 80a04e4:	4629      	mov	r1, r5
 80a04e6:	4819      	ldr	r0, [pc, #100]	; (80a054c <_GLOBAL__sub_I_debugOutput+0xa0>)
 80a04e8:	f000 ff03 	bl	80a12f2 <_ZN3TFTC1EP12temperaturesP25acceleration_measurementsP12calibrations>
WaterTempSensor          waterTempSensor(&temperature, &calibration);
 80a04ec:	4622      	mov	r2, r4
 80a04ee:	4629      	mov	r1, r5
 80a04f0:	4817      	ldr	r0, [pc, #92]	; (80a0550 <_GLOBAL__sub_I_debugOutput+0xa4>)
 80a04f2:	f000 f83f 	bl	80a0574 <_ZN15WaterTempSensorC1EP12temperaturesP12calibrations>
AirtempAndHumiditySensor airtempAndHumiditySensor(&temperature, &calibration);
Light                    light(&temperature, &calibration);
Gyroscope                gyroscope(&acceleration_measurement);
 80a04f6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80a0568 <_GLOBAL__sub_I_debugOutput+0xbc>
};

SDCard                   sdCard(&calibration);
TFT                      tft(&temperature, &acceleration_measurement, &calibration);
WaterTempSensor          waterTempSensor(&temperature, &calibration);
AirtempAndHumiditySensor airtempAndHumiditySensor(&temperature, &calibration);
 80a04fa:	4622      	mov	r2, r4
 80a04fc:	4629      	mov	r1, r5
 80a04fe:	4815      	ldr	r0, [pc, #84]	; (80a0554 <_GLOBAL__sub_I_debugOutput+0xa8>)
 80a0500:	f000 fcf2 	bl	80a0ee8 <_ZN24AirtempAndHumiditySensorC1EP12temperaturesP12calibrations>
Light                    light(&temperature, &calibration);
 80a0504:	4622      	mov	r2, r4
 80a0506:	4629      	mov	r1, r5
 80a0508:	4813      	ldr	r0, [pc, #76]	; (80a0558 <_GLOBAL__sub_I_debugOutput+0xac>)
 80a050a:	f000 fc29 	bl	80a0d60 <_ZN5LightC1EP12temperaturesP12calibrations>
Gyroscope                gyroscope(&acceleration_measurement);
 80a050e:	4631      	mov	r1, r6
 80a0510:	4640      	mov	r0, r8
 80a0512:	f000 fe7a 	bl	80a120a <_ZN9GyroscopeC1EP25acceleration_measurements>
 80a0516:	464a      	mov	r2, r9
 80a0518:	4910      	ldr	r1, [pc, #64]	; (80a055c <_GLOBAL__sub_I_debugOutput+0xb0>)
 80a051a:	4640      	mov	r0, r8
 80a051c:	f006 fc5c 	bl	80a6dd8 <__aeabi_atexit>
ParticleCommunication    particleCommunication(&temperature, &acceleration_measurement, &calibration, &sdCard);
 80a0520:	9700      	str	r7, [sp, #0]
 80a0522:	4623      	mov	r3, r4
 80a0524:	4632      	mov	r2, r6
 80a0526:	4629      	mov	r1, r5
 80a0528:	480d      	ldr	r0, [pc, #52]	; (80a0560 <_GLOBAL__sub_I_debugOutput+0xb4>)
 80a052a:	f000 faff 	bl	80a0b2c <_ZN21ParticleCommunicationC1EP12temperaturesP25acceleration_measurementsP12calibrationsP6SDCard>

void setupSerial() {
  while (!Serial) {
    SysCall::yield();
  }
 80a052e:	b003      	add	sp, #12
 80a0530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0534:	20000190 	.word	0x20000190
 80a0538:	200001e8 	.word	0x200001e8
 80a053c:	20000020 	.word	0x20000020
 80a0540:	20000000 	.word	0x20000000
 80a0544:	20000068 	.word	0x20000068
 80a0548:	080a0149 	.word	0x080a0149
 80a054c:	200001c4 	.word	0x200001c4
 80a0550:	200001e0 	.word	0x200001e0
 80a0554:	20000228 	.word	0x20000228
 80a0558:	200001b4 	.word	0x200001b4
 80a055c:	080a00db 	.word	0x080a00db
 80a0560:	20000180 	.word	0x20000180
 80a0564:	2000017c 	.word	0x2000017c
 80a0568:	200001f4 	.word	0x200001f4

080a056c <_ZN15WaterTempSensor5setupEv>:
  m_ptr_temperatures = ptr_temperatures;
  m_ptr_calibrations = ptr_calibration;
  setup();
}

void WaterTempSensor::setup() { pinMode(TEMP_SENSOR_INPUT, INPUT); }
 80a056c:	2100      	movs	r1, #0
 80a056e:	2011      	movs	r0, #17
 80a0570:	f006 bbde 	b.w	80a6d30 <pinMode>

080a0574 <_ZN15WaterTempSensorC1EP12temperaturesP12calibrations>:
#include "watertemp_sensor.h"
#include "application.h"

#define TEMP_SENSOR_INPUT A7

WaterTempSensor::WaterTempSensor(struct temperatures *ptr_temperatures, struct calibrations *ptr_calibration) {
 80a0574:	b510      	push	{r4, lr}
 80a0576:	4604      	mov	r4, r0
  m_ptr_temperatures = ptr_temperatures;
  m_ptr_calibrations = ptr_calibration;
 80a0578:	e880 0006 	stmia.w	r0, {r1, r2}
  setup();
 80a057c:	f7ff fff6 	bl	80a056c <_ZN15WaterTempSensor5setupEv>
}
 80a0580:	4620      	mov	r0, r4
 80a0582:	bd10      	pop	{r4, pc}

080a0584 <_ZN15WaterTempSensor5beginEv>:

void WaterTempSensor::setup() { pinMode(TEMP_SENSOR_INPUT, INPUT); }

void WaterTempSensor::begin() {
 80a0584:	4770      	bx	lr
	...

080a0588 <_ZN15WaterTempSensor25readCelsiusTempFromSensorEv>:

}

void WaterTempSensor::readCelsiusTempFromSensor() {
 80a0588:	b538      	push	{r3, r4, r5, lr}
 80a058a:	4604      	mov	r4, r0
  m_ptr_temperatures->currentWaterTemp = (double)analogRead(TEMP_SENSOR_INPUT) * 0.08 + m_ptr_calibrations->waterTempCalibration;
 80a058c:	6805      	ldr	r5, [r0, #0]
 80a058e:	2011      	movs	r0, #17
 80a0590:	f006 fc0b 	bl	80a6daa <analogRead>
 80a0594:	f007 f91a 	bl	80a77cc <__aeabi_i2d>
 80a0598:	a307      	add	r3, pc, #28	; (adr r3, 80a05b8 <_ZN15WaterTempSensor25readCelsiusTempFromSensorEv+0x30>)
 80a059a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a059e:	f007 f97b 	bl	80a7898 <__aeabi_dmul>
 80a05a2:	6864      	ldr	r4, [r4, #4]
 80a05a4:	4602      	mov	r2, r0
 80a05a6:	460b      	mov	r3, r1
 80a05a8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80a05ac:	f006 ffc2 	bl	80a7534 <__adddf3>
 80a05b0:	e9c5 0100 	strd	r0, r1, [r5]
 80a05b4:	bd38      	pop	{r3, r4, r5, pc}
 80a05b6:	bf00      	nop
 80a05b8:	47ae147b 	.word	0x47ae147b
 80a05bc:	3fb47ae1 	.word	0x3fb47ae1

080a05c0 <_GLOBAL__sub_I__ZN15WaterTempSensorC2EP12temperaturesP12calibrations>:
 80a05c0:	f003 bcac 	b.w	80a3f1c <HAL_Pin_Map>

080a05c4 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 80a05c4:	4770      	bx	lr
	...

080a05c8 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a05c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a05ca:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 80a05cc:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a05ce:	4608      	mov	r0, r1
 80a05d0:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 80a05d2:	b133      	cbz	r3, 80a05e2 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 80a05d4:	b93d      	cbnz	r5, 80a05e6 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 80a05d6:	490c      	ldr	r1, [pc, #48]	; (80a0608 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 80a05d8:	b004      	add	sp, #16
 80a05da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 80a05de:	f006 b869 	b.w	80a66b4 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 80a05e2:	4b0a      	ldr	r3, [pc, #40]	; (80a060c <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 80a05e4:	e000      	b.n	80a05e8 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 80a05e6:	4b0a      	ldr	r3, [pc, #40]	; (80a0610 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 80a05e8:	7b16      	ldrb	r6, [r2, #12]
 80a05ea:	4c0a      	ldr	r4, [pc, #40]	; (80a0614 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 80a05ec:	490a      	ldr	r1, [pc, #40]	; (80a0618 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a05ee:	7b52      	ldrb	r2, [r2, #13]
 80a05f0:	2e01      	cmp	r6, #1
 80a05f2:	bf08      	it	eq
 80a05f4:	4621      	moveq	r1, r4
 80a05f6:	9202      	str	r2, [sp, #8]
 80a05f8:	9101      	str	r1, [sp, #4]
 80a05fa:	9500      	str	r5, [sp, #0]
 80a05fc:	4a07      	ldr	r2, [pc, #28]	; (80a061c <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 80a05fe:	2100      	movs	r1, #0
 80a0600:	f006 f98a 	bl	80a6918 <_ZN5Print11printf_implEbPKcz>
  }
 80a0604:	b004      	add	sp, #16
 80a0606:	bd70      	pop	{r4, r5, r6, pc}
 80a0608:	080abb0d 	.word	0x080abb0d
 80a060c:	080ae498 	.word	0x080ae498
 80a0610:	080abafc 	.word	0x080abafc
 80a0614:	080abb05 	.word	0x080abb05
 80a0618:	080abb09 	.word	0x080abb09
 80a061c:	080abb23 	.word	0x080abb23

080a0620 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 80a0620:	3008      	adds	r0, #8
 80a0622:	f002 bcc7 	b.w	80a2fb4 <_ZN7FatFile5writeEPKvj>

080a0626 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 80a0626:	b507      	push	{r0, r1, r2, lr}
 80a0628:	ab02      	add	r3, sp, #8
 80a062a:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 80a062e:	2201      	movs	r2, #1
 80a0630:	4619      	mov	r1, r3
 80a0632:	3008      	adds	r0, #8
 80a0634:	f002 fcbe 	bl	80a2fb4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 80a0638:	b003      	add	sp, #12
 80a063a:	f85d fb04 	ldr.w	pc, [sp], #4

080a063e <_ZN6SdFileD0Ev>:
 80a063e:	b510      	push	{r4, lr}
 80a0640:	4604      	mov	r4, r0
 80a0642:	212c      	movs	r1, #44	; 0x2c
 80a0644:	f006 fbd6 	bl	80a6df4 <_ZdlPvj>
 80a0648:	4620      	mov	r0, r4
 80a064a:	bd10      	pop	{r4, pc}

080a064c <_ZN6SdFileC1EPKci>:
   *
   * \param[in] oflag Values for \a oflag are constructed by a
   * bitwise-inclusive OR of open flags. see
   * FatFile::open(FatFile*, const char*, oflag_t).
   */
  SdFile(const char* path, oflag_t oflag) : PrintFile(path, oflag) {}
 80a064c:	b538      	push	{r3, r4, r5, lr}
 80a064e:	4604      	mov	r4, r0
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
 80a0650:	4613      	mov	r3, r2
 80a0652:	460a      	mov	r2, r1
 80a0654:	4906      	ldr	r1, [pc, #24]	; (80a0670 <_ZN6SdFileC1EPKci+0x24>)
   *
   * \param[in] oflag Values for \a oflag are constructed by a bitwise-inclusive
   * OR of open flags. see FatFile::open(FatFile*, const char*, oflag_t).
   */
  FatFile(const char* path, oflag_t oflag) {
    m_attr = FILE_ATTR_CLOSED;
 80a0656:	2500      	movs	r5, #0
 80a0658:	7205      	strb	r5, [r0, #8]
    m_error = 0;
 80a065a:	7245      	strb	r5, [r0, #9]
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
 80a065c:	6809      	ldr	r1, [r1, #0]
 80a065e:	3008      	adds	r0, #8
 80a0660:	f002 fc45 	bl	80a2eee <_ZN7FatFile4openEPS_PKci>
 80a0664:	4b03      	ldr	r3, [pc, #12]	; (80a0674 <_ZN6SdFileC1EPKci+0x28>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0666:	6065      	str	r5, [r4, #4]
 80a0668:	6023      	str	r3, [r4, #0]
 80a066a:	4620      	mov	r0, r4
 80a066c:	bd38      	pop	{r3, r4, r5, pc}
 80a066e:	bf00      	nop
 80a0670:	20000250 	.word	0x20000250
 80a0674:	080abaec 	.word	0x080abaec

080a0678 <_ZN6SDCardC1EP12calibrations>:
#define SD_CS_PIN D4
#define SPI_SPEED SD_SCK_MHZ(4)

using namespace std;

SDCard::SDCard(struct calibrations *ptr_calibrations) {
 80a0678:	b510      	push	{r4, lr}
 80a067a:	4604      	mov	r4, r0
  m_ptr_calibrations = ptr_calibrations;
 80a067c:	6001      	str	r1, [r0, #0]
  SD                 = new SdFat();
 80a067e:	f240 4084 	movw	r0, #1156	; 0x484
 80a0682:	f7ff fd0c 	bl	80a009e <_Znwj>
 80a0686:	b1c8      	cbz	r0, 80a06bc <_ZN6SDCardC1EP12calibrations+0x44>
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 80a0688:	2264      	movs	r2, #100	; 0x64
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 80a068a:	2300      	movs	r3, #0
 80a068c:	f880 2460 	strb.w	r2, [r0, #1120]	; 0x460
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 80a0690:	4a0c      	ldr	r2, [pc, #48]	; (80a06c4 <_ZN6SDCardC1EP12calibrations+0x4c>)
 80a0692:	71c3      	strb	r3, [r0, #7]
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80a0694:	f880 343c 	strb.w	r3, [r0, #1084]	; 0x43c
 80a0698:	f880 343d 	strb.w	r3, [r0, #1085]	; 0x43d
 80a069c:	f880 346a 	strb.w	r3, [r0, #1130]	; 0x46a
 80a06a0:	f8c0 3478 	str.w	r3, [r0, #1144]	; 0x478
 80a06a4:	f880 347c 	strb.w	r3, [r0, #1148]	; 0x47c
 80a06a8:	f880 347d 	strb.w	r3, [r0, #1149]	; 0x47d
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
 80a06ac:	4b06      	ldr	r3, [pc, #24]	; (80a06c8 <_ZN6SDCardC1EP12calibrations+0x50>)
 80a06ae:	f8c0 2470 	str.w	r2, [r0, #1136]	; 0x470
 80a06b2:	2201      	movs	r2, #1
 80a06b4:	f880 2474 	strb.w	r2, [r0, #1140]	; 0x474
 80a06b8:	f8c0 346c 	str.w	r3, [r0, #1132]	; 0x46c
 80a06bc:	6060      	str	r0, [r4, #4]
}
 80a06be:	4620      	mov	r0, r4
 80a06c0:	bd10      	pop	{r4, pc}
 80a06c2:	bf00      	nop
 80a06c4:	080abae0 	.word	0x080abae0
 80a06c8:	20000764 	.word	0x20000764

080a06cc <_ZN6SDCard21openFileToReadAndReadEv>:
  Serial.println("Serial SDCard is ready");
  Serial.println("-------------------------");
  openFileToReadAndRead();
}

void SDCard::openFileToReadAndRead() {
 80a06cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a06d0:	b0ac      	sub	sp, #176	; 0xb0

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
      {
	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
	: allocator_type(__a), _M_p(__dat) { }
 80a06d2:	ab03      	add	r3, sp, #12
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }
 80a06d4:	2200      	movs	r2, #0

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
      {
	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
	: allocator_type(__a), _M_p(__dat) { }
 80a06d6:	9301      	str	r3, [sp, #4]
 80a06d8:	4605      	mov	r5, r0
 80a06da:	ab09      	add	r3, sp, #36	; 0x24
  char   line[30];
  int    n;
  string key;
  string value;
  SdFile calibrationsFile("calibrations-file.txt", O_RDONLY);
 80a06dc:	4959      	ldr	r1, [pc, #356]	; (80a0844 <_ZN6SDCard21openFileToReadAndReadEv+0x178>)
 80a06de:	a821      	add	r0, sp, #132	; 0x84
 80a06e0:	9307      	str	r3, [sp, #28]
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }
 80a06e2:	9202      	str	r2, [sp, #8]
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
 80a06e4:	f88d 200c 	strb.w	r2, [sp, #12]
 80a06e8:	9208      	str	r2, [sp, #32]
 80a06ea:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80a06ee:	f7ff ffad 	bl	80a064c <_ZN6SdFileC1EPKci>

  if (!calibrationsFile.isOpen()) {
 80a06f2:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
 80a06f6:	b92b      	cbnz	r3, 80a0704 <_ZN6SDCard21openFileToReadAndReadEv+0x38>
    Serial.println("Couldnt open file");
 80a06f8:	f004 fa56 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a06fc:	4952      	ldr	r1, [pc, #328]	; (80a0848 <_ZN6SDCard21openFileToReadAndReadEv+0x17c>)
 80a06fe:	f005 ffec 	bl	80a66da <_ZN5Print7printlnEPKc>
 80a0702:	e096      	b.n	80a0832 <_ZN6SDCard21openFileToReadAndReadEv+0x166>
    return;
  }

  Serial.println("Reading from sd:");
 80a0704:	f004 fa50 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a0708:	4950      	ldr	r1, [pc, #320]	; (80a084c <_ZN6SDCard21openFileToReadAndReadEv+0x180>)
 80a070a:	f005 ffe6 	bl	80a66da <_ZN5Print7printlnEPKc>

  while ((n = calibrationsFile.fgets(line, sizeof(line))) > 0) {
 80a070e:	2300      	movs	r3, #0
 80a0710:	221e      	movs	r2, #30
 80a0712:	a919      	add	r1, sp, #100	; 0x64
 80a0714:	a823      	add	r0, sp, #140	; 0x8c
 80a0716:	f002 faa1 	bl	80a2c5c <_ZN7FatFile5fgetsEPcsS0_>
 80a071a:	2800      	cmp	r0, #0
 80a071c:	f340 8089 	ble.w	80a0832 <_ZN6SDCard21openFileToReadAndReadEv+0x166>
    if (line[n - 1] == '\n') {
 80a0720:	ab2c      	add	r3, sp, #176	; 0xb0
 80a0722:	4418      	add	r0, r3
 80a0724:	f810 3c4d 	ldrb.w	r3, [r0, #-77]
 80a0728:	2b0a      	cmp	r3, #10
 80a072a:	d1f0      	bne.n	80a070e <_ZN6SDCard21openFileToReadAndReadEv+0x42>

      // Use empty-base optimization: http://www.cantrip.org/emptyopt.html
      struct _Alloc_hider : allocator_type // TODO check __is_final
      {
	_Alloc_hider(pointer __dat, const _Alloc& __a = _Alloc())
	: allocator_type(__a), _M_p(__dat) { }
 80a072c:	ab0f      	add	r3, sp, #60	; 0x3c
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }
 80a072e:	a819      	add	r0, sp, #100	; 0x64
 80a0730:	930d      	str	r3, [sp, #52]	; 0x34
 80a0732:	f008 fff3 	bl	80a971c <strlen>
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80a0736:	ac2c      	add	r4, sp, #176	; 0xb0
       *  @param  __s  Source C string.
       *  @param  __a  Allocator to use (default is default allocator).
       */
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
 80a0738:	ab19      	add	r3, sp, #100	; 0x64

	if (__dnew > size_type(_S_local_capacity))
 80a073a:	280f      	cmp	r0, #15
 80a073c:	eb03 0600 	add.w	r6, r3, r0
	// NB: Not required, but considered best practice.
	if (__gnu_cxx::__is_null_pointer(__beg) && __beg != __end)
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 80a0740:	f844 0d64 	str.w	r0, [r4, #-100]!

	if (__dnew > size_type(_S_local_capacity))
 80a0744:	d907      	bls.n	80a0756 <_ZN6SDCard21openFileToReadAndReadEv+0x8a>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
 80a0746:	2200      	movs	r2, #0
 80a0748:	4621      	mov	r1, r4
 80a074a:	a80d      	add	r0, sp, #52	; 0x34
 80a074c:	f006 fb9c 	bl	80a6e88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
#endif
      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }
 80a0750:	9b13      	ldr	r3, [sp, #76]	; 0x4c
	size_type        _M_allocated_capacity;
      };

      void
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }
 80a0752:	900d      	str	r0, [sp, #52]	; 0x34
#endif
      }

      void
      _M_capacity(size_type __capacity)
      { _M_allocated_capacity = __capacity; }
 80a0754:	930f      	str	r3, [sp, #60]	; 0x3c
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
 80a0756:	4632      	mov	r2, r6
 80a0758:	a919      	add	r1, sp, #100	; 0x64
 80a075a:	980d      	ldr	r0, [sp, #52]	; 0x34
 80a075c:	f006 fbcf 	bl	80a6efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
 80a0760:	9b13      	ldr	r3, [sp, #76]	; 0x4c
      typedef streamoff         off_type;
      typedef mbstate_t         state_type;

      static void
      assign(char_type& __c1, const char_type& __c2) _GLIBCXX_NOEXCEPT
      { __c1 = __c2; }
 80a0762:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a0764:	2600      	movs	r6, #0
      _M_data(pointer __p)
      { _M_dataplus._M_p = __p; }

      void
      _M_length(size_type __length)
      { _M_string_length = __length; }
 80a0766:	930e      	str	r3, [sp, #56]	; 0x38
      string s          = string(line);
      int    delimitter = s.find('=');
 80a0768:	213d      	movs	r1, #61	; 0x3d
 80a076a:	54d6      	strb	r6, [r2, r3]
 80a076c:	a80d      	add	r0, sp, #52	; 0x34
 80a076e:	4632      	mov	r2, r6
 80a0770:	f006 fc36 	bl	80a6fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
      int    end        = s.find('\n');
 80a0774:	4632      	mov	r2, r6
  Serial.println("Reading from sd:");

  while ((n = calibrationsFile.fgets(line, sizeof(line))) > 0) {
    if (line[n - 1] == '\n') {
      string s          = string(line);
      int    delimitter = s.find('=');
 80a0776:	4607      	mov	r7, r0
      int    end        = s.find('\n');
 80a0778:	210a      	movs	r1, #10
 80a077a:	a80d      	add	r0, sp, #52	; 0x34
 80a077c:	f006 fc30 	bl	80a6fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>
 80a0780:	4680      	mov	r8, r0
      key               = s.substr(0, delimitter);
 80a0782:	463b      	mov	r3, r7
 80a0784:	4632      	mov	r2, r6
 80a0786:	a90d      	add	r1, sp, #52	; 0x34
 80a0788:	4620      	mov	r0, r4
 80a078a:	f006 fc93 	bl	80a70b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2063. Contradictory requirements for string move assignment
      basic_string&
      operator=(basic_string&& __str)
      {
	this->swap(__str);
 80a078e:	4621      	mov	r1, r4
 80a0790:	a801      	add	r0, sp, #4
 80a0792:	f006 fbb9 	bl	80a6f08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_>

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
 80a0796:	4620      	mov	r0, r4
 80a0798:	f006 fb92 	bl	80a6ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      value             = s.substr(delimitter + 1, end);
 80a079c:	4643      	mov	r3, r8
 80a079e:	1c7a      	adds	r2, r7, #1
 80a07a0:	a90d      	add	r1, sp, #52	; 0x34
 80a07a2:	4620      	mov	r0, r4
 80a07a4:	f006 fc86 	bl	80a70b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2063. Contradictory requirements for string move assignment
      basic_string&
      operator=(basic_string&& __str)
      {
	this->swap(__str);
 80a07a8:	4621      	mov	r1, r4
 80a07aa:	a807      	add	r0, sp, #28
 80a07ac:	f006 fbac 	bl	80a6f08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_>

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
 80a07b0:	4620      	mov	r0, r4
 80a07b2:	f006 fb85 	bl	80a6ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
 80a07b6:	4926      	ldr	r1, [pc, #152]	; (80a0850 <_ZN6SDCard21openFileToReadAndReadEv+0x184>)
 80a07b8:	a801      	add	r0, sp, #4
 80a07ba:	f006 fc26 	bl	80a700a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>

      if (key == "AIR") {
 80a07be:	b930      	cbnz	r0, 80a07ce <_ZN6SDCard21openFileToReadAndReadEv+0x102>
        m_ptr_calibrations->airTempCalibration = ::atof(value.c_str());
 80a07c0:	9807      	ldr	r0, [sp, #28]
 80a07c2:	682c      	ldr	r4, [r5, #0]
 80a07c4:	f008 f88c 	bl	80a88e0 <atof>
 80a07c8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80a07cc:	e02d      	b.n	80a082a <_ZN6SDCard21openFileToReadAndReadEv+0x15e>
 80a07ce:	4921      	ldr	r1, [pc, #132]	; (80a0854 <_ZN6SDCard21openFileToReadAndReadEv+0x188>)
 80a07d0:	a801      	add	r0, sp, #4
 80a07d2:	f006 fc1a 	bl	80a700a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
      } else if (key == "WATER") {
 80a07d6:	b930      	cbnz	r0, 80a07e6 <_ZN6SDCard21openFileToReadAndReadEv+0x11a>
        m_ptr_calibrations->waterTempCalibration = ::atof(value.c_str());
 80a07d8:	9807      	ldr	r0, [sp, #28]
 80a07da:	682c      	ldr	r4, [r5, #0]
 80a07dc:	f008 f880 	bl	80a88e0 <atof>
 80a07e0:	e9c4 0100 	strd	r0, r1, [r4]
 80a07e4:	e021      	b.n	80a082a <_ZN6SDCard21openFileToReadAndReadEv+0x15e>
 80a07e6:	491c      	ldr	r1, [pc, #112]	; (80a0858 <_ZN6SDCard21openFileToReadAndReadEv+0x18c>)
 80a07e8:	a801      	add	r0, sp, #4
 80a07ea:	f006 fc0e 	bl	80a700a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
      } else if (key == "HUMIDITY") {
 80a07ee:	b930      	cbnz	r0, 80a07fe <_ZN6SDCard21openFileToReadAndReadEv+0x132>
        m_ptr_calibrations->landHumidityCalibration = ::atof(value.c_str());
 80a07f0:	9807      	ldr	r0, [sp, #28]
 80a07f2:	682c      	ldr	r4, [r5, #0]
 80a07f4:	f008 f874 	bl	80a88e0 <atof>
 80a07f8:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80a07fc:	e015      	b.n	80a082a <_ZN6SDCard21openFileToReadAndReadEv+0x15e>
 80a07fe:	4917      	ldr	r1, [pc, #92]	; (80a085c <_ZN6SDCard21openFileToReadAndReadEv+0x190>)
 80a0800:	a801      	add	r0, sp, #4
 80a0802:	f006 fc02 	bl	80a700a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
      } else if (key == "TIME") {
 80a0806:	b928      	cbnz	r0, 80a0814 <_ZN6SDCard21openFileToReadAndReadEv+0x148>
        m_ptr_calibrations->time = ::atoi(value.c_str());
 80a0808:	9807      	ldr	r0, [sp, #28]
 80a080a:	682c      	ldr	r4, [r5, #0]
 80a080c:	f008 f86b 	bl	80a88e6 <atoi>
 80a0810:	61a0      	str	r0, [r4, #24]
 80a0812:	e00a      	b.n	80a082a <_ZN6SDCard21openFileToReadAndReadEv+0x15e>
 80a0814:	4912      	ldr	r1, [pc, #72]	; (80a0860 <_ZN6SDCard21openFileToReadAndReadEv+0x194>)
 80a0816:	a801      	add	r0, sp, #4
 80a0818:	f006 fbf7 	bl	80a700a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
      } else if (key == "LIGHTLIMIT") {
 80a081c:	b928      	cbnz	r0, 80a082a <_ZN6SDCard21openFileToReadAndReadEv+0x15e>
        m_ptr_calibrations->lightOnLimit = ::atof(value.c_str());
 80a081e:	9807      	ldr	r0, [sp, #28]
 80a0820:	682c      	ldr	r4, [r5, #0]
 80a0822:	f008 f85d 	bl	80a88e0 <atof>
 80a0826:	e9c4 0108 	strd	r0, r1, [r4, #32]

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
      { _M_dispose(); }
 80a082a:	a80d      	add	r0, sp, #52	; 0x34
 80a082c:	f006 fb48 	bl	80a6ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80a0830:	e76d      	b.n	80a070e <_ZN6SDCard21openFileToReadAndReadEv+0x42>
 80a0832:	a807      	add	r0, sp, #28
 80a0834:	f006 fb44 	bl	80a6ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80a0838:	a801      	add	r0, sp, #4
 80a083a:	f006 fb41 	bl	80a6ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
      }
    } else {
    }
  }
}
 80a083e:	b02c      	add	sp, #176	; 0xb0
 80a0840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0844:	080abb41 	.word	0x080abb41
 80a0848:	080abb57 	.word	0x080abb57
 80a084c:	080abb69 	.word	0x080abb69
 80a0850:	080abb7a 	.word	0x080abb7a
 80a0854:	080abb7e 	.word	0x080abb7e
 80a0858:	080abb84 	.word	0x080abb84
 80a085c:	080aeacb 	.word	0x080aeacb
 80a0860:	080abb8d 	.word	0x080abb8d

080a0864 <_ZN6SDCard5beginEv>:
SDCard::SDCard(struct calibrations *ptr_calibrations) {
  m_ptr_calibrations = ptr_calibrations;
  SD                 = new SdFat();
}

void SDCard::begin() {
 80a0864:	b5f0      	push	{r4, r5, r6, r7, lr}
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 80a0866:	4b3a      	ldr	r3, [pc, #232]	; (80a0950 <_ZN6SDCard5beginEv+0xec>)
  if (!SD->begin(SD_CS_PIN, SPI_SPEED)) {
 80a0868:	6845      	ldr	r5, [r0, #4]
SDCard::SDCard(struct calibrations *ptr_calibrations) {
  m_ptr_calibrations = ptr_calibrations;
  SD                 = new SdFat();
}

void SDCard::begin() {
 80a086a:	b085      	sub	sp, #20
 80a086c:	4a39      	ldr	r2, [pc, #228]	; (80a0954 <_ZN6SDCard5beginEv+0xf0>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 80a086e:	f505 668c 	add.w	r6, r5, #1120	; 0x460
 80a0872:	9300      	str	r3, [sp, #0]
 80a0874:	2300      	movs	r3, #0
 80a0876:	4604      	mov	r4, r0
 80a0878:	f88d 3004 	strb.w	r3, [sp, #4]
 80a087c:	9202      	str	r2, [sp, #8]
 80a087e:	2701      	movs	r7, #1
 80a0880:	f88d 300d 	strb.w	r3, [sp, #13]
 80a0884:	2204      	movs	r2, #4
 80a0886:	466b      	mov	r3, sp
 80a0888:	f205 416c 	addw	r1, r5, #1132	; 0x46c
 80a088c:	4630      	mov	r0, r6
 80a088e:	f88d 700c 	strb.w	r7, [sp, #12]
 80a0892:	f001 fee1 	bl	80a2658 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
 80a0896:	b388      	cbz	r0, 80a08fc <_ZN6SDCard5beginEv+0x98>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
 80a0898:	602e      	str	r6, [r5, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 80a089a:	f205 463c 	addw	r6, r5, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
 80a089e:	4630      	mov	r0, r6
 80a08a0:	f002 fb1e 	bl	80a2ee0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 80a08a4:	4639      	mov	r1, r7
 80a08a6:	4628      	mov	r0, r5
 80a08a8:	f002 fd5f 	bl	80a336a <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 80a08ac:	4601      	mov	r1, r0
 80a08ae:	b128      	cbz	r0, 80a08bc <_ZN6SDCard5beginEv+0x58>
 80a08b0:	4629      	mov	r1, r5
 80a08b2:	4630      	mov	r0, r6
 80a08b4:	f002 f907 	bl	80a2ac6 <_ZN7FatFile8openRootEP9FatVolume>
 80a08b8:	b300      	cbz	r0, 80a08fc <_ZN6SDCard5beginEv+0x98>
 80a08ba:	e005      	b.n	80a08c8 <_ZN6SDCard5beginEv+0x64>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 80a08bc:	4628      	mov	r0, r5
 80a08be:	f002 fd54 	bl	80a336a <_ZN9FatVolume4initEh>
 80a08c2:	2800      	cmp	r0, #0
 80a08c4:	d1f4      	bne.n	80a08b0 <_ZN6SDCard5beginEv+0x4c>
 80a08c6:	e019      	b.n	80a08fc <_ZN6SDCard5beginEv+0x98>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 80a08c8:	f895 343c 	ldrb.w	r3, [r5, #1084]	; 0x43c
 80a08cc:	f013 0f70 	tst.w	r3, #112	; 0x70
 80a08d0:	d014      	beq.n	80a08fc <_ZN6SDCard5beginEv+0x98>
      return false;
    }
    m_cwd = dir;
 80a08d2:	4b21      	ldr	r3, [pc, #132]	; (80a0958 <_ZN6SDCard5beginEv+0xf4>)
 80a08d4:	601e      	str	r6, [r3, #0]
    m_ptr_calibrations->lightOnLimit            = 24.00;
    return;
  } else {
  }

  Serial.println("-------------------------");
 80a08d6:	f004 f967 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a08da:	4920      	ldr	r1, [pc, #128]	; (80a095c <_ZN6SDCard5beginEv+0xf8>)
 80a08dc:	f005 fefd 	bl	80a66da <_ZN5Print7printlnEPKc>
  Serial.println("Serial SDCard is ready");
 80a08e0:	f004 f962 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a08e4:	491e      	ldr	r1, [pc, #120]	; (80a0960 <_ZN6SDCard5beginEv+0xfc>)
 80a08e6:	f005 fef8 	bl	80a66da <_ZN5Print7printlnEPKc>
  Serial.println("-------------------------");
 80a08ea:	f004 f95d 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a08ee:	491b      	ldr	r1, [pc, #108]	; (80a095c <_ZN6SDCard5beginEv+0xf8>)
 80a08f0:	f005 fef3 	bl	80a66da <_ZN5Print7printlnEPKc>
  openFileToReadAndRead();
 80a08f4:	4620      	mov	r0, r4
 80a08f6:	f7ff fee9 	bl	80a06cc <_ZN6SDCard21openFileToReadAndReadEv>
 80a08fa:	e027      	b.n	80a094c <_ZN6SDCard5beginEv+0xe8>
  SD                 = new SdFat();
}

void SDCard::begin() {
  if (!SD->begin(SD_CS_PIN, SPI_SPEED)) {
    Serial.println("Error code");
 80a08fc:	f004 f954 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a0900:	4918      	ldr	r1, [pc, #96]	; (80a0964 <_ZN6SDCard5beginEv+0x100>)
 80a0902:	f005 feea 	bl	80a66da <_ZN5Print7printlnEPKc>
    Serial.println(SD->card()->errorCode());
 80a0906:	f004 f94f 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a090a:	6863      	ldr	r3, [r4, #4]
 80a090c:	220a      	movs	r2, #10
 80a090e:	f893 1460 	ldrb.w	r1, [r3, #1120]	; 0x460
 80a0912:	f005 ff3a 	bl	80a678a <_ZN5Print7printlnEii>
    Serial.println(SD->card()->errorData());
 80a0916:	f004 f947 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a091a:	6863      	ldr	r3, [r4, #4]
 80a091c:	220a      	movs	r2, #10
 80a091e:	f893 1469 	ldrb.w	r1, [r3, #1129]	; 0x469
 80a0922:	f005 ff32 	bl	80a678a <_ZN5Print7printlnEii>
    m_ptr_calibrations->waterTempCalibration    = 0.00;
 80a0926:	6821      	ldr	r1, [r4, #0]
 80a0928:	2200      	movs	r2, #0
 80a092a:	2300      	movs	r3, #0
 80a092c:	e9c1 2300 	strd	r2, r3, [r1]
    m_ptr_calibrations->airTempCalibration      = 0.00;
 80a0930:	6821      	ldr	r1, [r4, #0]
    m_ptr_calibrations->landHumidityCalibration = 0.00;
    m_ptr_calibrations->time                    = 0;
    m_ptr_calibrations->lightOnLimit            = 24.00;
 80a0932:	2000      	movs	r0, #0
  if (!SD->begin(SD_CS_PIN, SPI_SPEED)) {
    Serial.println("Error code");
    Serial.println(SD->card()->errorCode());
    Serial.println(SD->card()->errorData());
    m_ptr_calibrations->waterTempCalibration    = 0.00;
    m_ptr_calibrations->airTempCalibration      = 0.00;
 80a0934:	e9c1 2302 	strd	r2, r3, [r1, #8]
    m_ptr_calibrations->landHumidityCalibration = 0.00;
 80a0938:	6821      	ldr	r1, [r4, #0]
 80a093a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    m_ptr_calibrations->time                    = 0;
 80a093e:	6823      	ldr	r3, [r4, #0]
 80a0940:	2200      	movs	r2, #0
 80a0942:	619a      	str	r2, [r3, #24]
    m_ptr_calibrations->lightOnLimit            = 24.00;
 80a0944:	6823      	ldr	r3, [r4, #0]
 80a0946:	4908      	ldr	r1, [pc, #32]	; (80a0968 <_ZN6SDCard5beginEv+0x104>)
 80a0948:	e9c3 0108 	strd	r0, r1, [r3, #32]

  Serial.println("-------------------------");
  Serial.println("Serial SDCard is ready");
  Serial.println("-------------------------");
  openFileToReadAndRead();
}
 80a094c:	b005      	add	sp, #20
 80a094e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0950:	080abae0 	.word	0x080abae0
 80a0954:	003d0900 	.word	0x003d0900
 80a0958:	20000250 	.word	0x20000250
 80a095c:	080abb98 	.word	0x080abb98
 80a0960:	080abbb2 	.word	0x080abbb2
 80a0964:	080abbc9 	.word	0x080abbc9
 80a0968:	40380000 	.word	0x40380000

080a096c <_ZN6SDCard23openFileToWriteAndWriteEv>:
    } else {
    }
  }
}

void SDCard::openFileToWriteAndWrite() {
 80a096c:	b530      	push	{r4, r5, lr}
 80a096e:	4604      	mov	r4, r0
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 80a0970:	6840      	ldr	r0, [r0, #4]
 80a0972:	b099      	sub	sp, #100	; 0x64
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
 80a0974:	491d      	ldr	r1, [pc, #116]	; (80a09ec <_ZN6SDCard23openFileToWriteAndWriteEv+0x80>)
 80a0976:	f200 403c 	addw	r0, r0, #1084	; 0x43c
 80a097a:	f002 fb07 	bl	80a2f8c <_ZN7FatFile6removeEPS_PKc>
  //calibrationsFile = SD->open("calibration-file.txt", FILE_WRITE);
  SD->remove("calibrations-file.txt");

  SdFile wrfile("calibrations-file.txt", O_WRONLY | O_CREAT | O_TRUNC);
 80a097e:	f240 6201 	movw	r2, #1537	; 0x601
 80a0982:	491a      	ldr	r1, [pc, #104]	; (80a09ec <_ZN6SDCard23openFileToWriteAndWriteEv+0x80>)
 80a0984:	a80d      	add	r0, sp, #52	; 0x34
 80a0986:	f7ff fe61 	bl	80a064c <_ZN6SdFileC1EPKci>

  if (!wrfile.isOpen()) {
 80a098a:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 80a098e:	b92b      	cbnz	r3, 80a099c <_ZN6SDCard23openFileToWriteAndWriteEv+0x30>
    Serial.println("Cannot open file to write");
 80a0990:	f004 f90a 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a0994:	4916      	ldr	r1, [pc, #88]	; (80a09f0 <_ZN6SDCard23openFileToWriteAndWriteEv+0x84>)
 80a0996:	f005 fea0 	bl	80a66da <_ZN5Print7printlnEPKc>
 80a099a:	e025      	b.n	80a09e8 <_ZN6SDCard23openFileToWriteAndWriteEv+0x7c>
    return;
  }

  String toWrite = String::format("AIR=%0.2f\nWATER=%0.2f\nHUMIDITY=%0.2f\nTIME=%d\nLIGHTLIMIT=%0.2f\n",
                                  m_ptr_calibrations->airTempCalibration,
 80a099c:	6823      	ldr	r3, [r4, #0]
                                  m_ptr_calibrations->waterTempCalibration,
                                  m_ptr_calibrations->landHumidityCalibration,
                                  m_ptr_calibrations->time,
                                  m_ptr_calibrations->lightOnLimit);
 80a099e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80a09a2:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80a09a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80a09aa:	699a      	ldr	r2, [r3, #24]
 80a09ac:	9204      	str	r2, [sp, #16]
 80a09ae:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80a09b2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a09b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a09ba:	e9cd 2300 	strd	r2, r3, [sp]
 80a09be:	4602      	mov	r2, r0
 80a09c0:	460b      	mov	r3, r1
 80a09c2:	a809      	add	r0, sp, #36	; 0x24
 80a09c4:	490b      	ldr	r1, [pc, #44]	; (80a09f4 <_ZN6SDCard23openFileToWriteAndWriteEv+0x88>)
 80a09c6:	f006 f90d 	bl	80a6be4 <_ZN6String6formatEPKcz>

  Serial.println(toWrite.c_str());
 80a09ca:	f004 f8ed 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a09ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a09d0:	f005 fe83 	bl	80a66da <_ZN5Print7printlnEPKc>

  wrfile.print(toWrite);
 80a09d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a09d6:	a80d      	add	r0, sp, #52	; 0x34
 80a09d8:	f005 fe6c 	bl	80a66b4 <_ZN5Print5printEPKc>
  wrfile.close();
 80a09dc:	a80f      	add	r0, sp, #60	; 0x3c
 80a09de:	f002 fa7f 	bl	80a2ee0 <_ZN7FatFile5closeEv>
  String toWrite = String::format("AIR=%0.2f\nWATER=%0.2f\nHUMIDITY=%0.2f\nTIME=%d\nLIGHTLIMIT=%0.2f\n",
                                  m_ptr_calibrations->airTempCalibration,
                                  m_ptr_calibrations->waterTempCalibration,
                                  m_ptr_calibrations->landHumidityCalibration,
                                  m_ptr_calibrations->time,
                                  m_ptr_calibrations->lightOnLimit);
 80a09e2:	a809      	add	r0, sp, #36	; 0x24
 80a09e4:	f006 f87a 	bl	80a6adc <_ZN6StringD1Ev>

  Serial.println(toWrite.c_str());

  wrfile.print(toWrite);
  wrfile.close();
}
 80a09e8:	b019      	add	sp, #100	; 0x64
 80a09ea:	bd30      	pop	{r4, r5, pc}
 80a09ec:	080abb41 	.word	0x080abb41
 80a09f0:	080abbd4 	.word	0x080abbd4
 80a09f4:	080abbee 	.word	0x080abbee

080a09f8 <_GLOBAL__sub_I__ZN6SDCardC2EP12calibrations>:
 80a09f8:	f003 ba90 	b.w	80a3f1c <HAL_Pin_Map>

080a09fc <_ZNSt17_Function_handlerIFi6StringESt5_BindIFSt7_Mem_fnIM21ParticleCommunicationFiS0_EEPS4_St12_PlaceholderILi1EEEEE9_M_invokeERKSt9_Any_dataOS0_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a09fc:	b530      	push	{r4, r5, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a09fe:	6802      	ldr	r2, [r0, #0]
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

    public:
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0a00:	b085      	sub	sp, #20
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0a02:	6853      	ldr	r3, [r2, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0a04:	6894      	ldr	r4, [r2, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a0a06:	f013 0f01 	tst.w	r3, #1
 80a0a0a:	ea4f 0363 	mov.w	r3, r3, asr #1
 80a0a0e:	6815      	ldr	r5, [r2, #0]
 80a0a10:	bf18      	it	ne
 80a0a12:	58e2      	ldrne	r2, [r4, r3]
 80a0a14:	4668      	mov	r0, sp
 80a0a16:	441c      	add	r4, r3
 80a0a18:	bf18      	it	ne
 80a0a1a:	5955      	ldrne	r5, [r2, r5]
 80a0a1c:	f006 f84e 	bl	80a6abc <_ZN6StringC1EOS_>
 80a0a20:	4669      	mov	r1, sp
 80a0a22:	4620      	mov	r0, r4
 80a0a24:	47a8      	blx	r5
 80a0a26:	4604      	mov	r4, r0
 80a0a28:	4668      	mov	r0, sp
 80a0a2a:	f006 f857 	bl	80a6adc <_ZN6StringD1Ev>
      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	return (*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 80a0a2e:	4620      	mov	r0, r4
 80a0a30:	b005      	add	sp, #20
 80a0a32:	bd30      	pop	{r4, r5, pc}

080a0a34 <_ZN21ParticleCommunication18calibrateWaterTempE6String>:
      m_ptr_temperatures->currentOnLandHumidity);
    Particle.publish("sensorData", data, PRIVATE);
  }
}

int ParticleCommunication::calibrateWaterTemp(String body) {
 80a0a34:	b538      	push	{r3, r4, r5, lr}
 80a0a36:	4604      	mov	r4, r0
  float val = body.toFloat();
 80a0a38:	4608      	mov	r0, r1
 80a0a3a:	f006 f8c8 	bl	80a6bce <_ZNK6String7toFloatEv>
  m_ptr_calibrations->waterTempCalibration = val;
 80a0a3e:	f006 fed7 	bl	80a77f0 <__aeabi_f2d>
 80a0a42:	68a5      	ldr	r5, [r4, #8]
 80a0a44:	e9c5 0100 	strd	r0, r1, [r5]
  m_ptr_sdcard->openFileToWriteAndWrite();
 80a0a48:	68e0      	ldr	r0, [r4, #12]
 80a0a4a:	f7ff ff8f 	bl	80a096c <_ZN6SDCard23openFileToWriteAndWriteEv>
  return 1;
}
 80a0a4e:	2001      	movs	r0, #1
 80a0a50:	bd38      	pop	{r3, r4, r5, pc}

080a0a52 <_ZN21ParticleCommunication16calibrateAirTempE6String>:

int ParticleCommunication::calibrateAirTemp(String body) {
 80a0a52:	b538      	push	{r3, r4, r5, lr}
 80a0a54:	4604      	mov	r4, r0
  float val = body.toFloat();
 80a0a56:	4608      	mov	r0, r1
 80a0a58:	f006 f8b9 	bl	80a6bce <_ZNK6String7toFloatEv>
  m_ptr_calibrations->airTempCalibration = val;
 80a0a5c:	f006 fec8 	bl	80a77f0 <__aeabi_f2d>
 80a0a60:	68a5      	ldr	r5, [r4, #8]
 80a0a62:	e9c5 0102 	strd	r0, r1, [r5, #8]
  m_ptr_sdcard->openFileToWriteAndWrite();
 80a0a66:	68e0      	ldr	r0, [r4, #12]
 80a0a68:	f7ff ff80 	bl	80a096c <_ZN6SDCard23openFileToWriteAndWriteEv>
  return 1;
}
 80a0a6c:	2001      	movs	r0, #1
 80a0a6e:	bd38      	pop	{r3, r4, r5, pc}

080a0a70 <_ZN21ParticleCommunication19calibrateAirHumidtyE6String>:

int ParticleCommunication::calibrateAirHumidty(String body) {
 80a0a70:	b538      	push	{r3, r4, r5, lr}
 80a0a72:	4604      	mov	r4, r0
  float val = body.toFloat();
 80a0a74:	4608      	mov	r0, r1
 80a0a76:	f006 f8aa 	bl	80a6bce <_ZNK6String7toFloatEv>
  m_ptr_calibrations->landHumidityCalibration = val;
 80a0a7a:	f006 feb9 	bl	80a77f0 <__aeabi_f2d>
 80a0a7e:	68a5      	ldr	r5, [r4, #8]
 80a0a80:	e9c5 0104 	strd	r0, r1, [r5, #16]
  m_ptr_sdcard->openFileToWriteAndWrite();
 80a0a84:	68e0      	ldr	r0, [r4, #12]
 80a0a86:	f7ff ff71 	bl	80a096c <_ZN6SDCard23openFileToWriteAndWriteEv>
  return 1;
}
 80a0a8a:	2001      	movs	r0, #1
 80a0a8c:	bd38      	pop	{r3, r4, r5, pc}

080a0a8e <_ZN21ParticleCommunication11setTimeZoneE6String>:

int ParticleCommunication::setTimeZone(String body) {
 80a0a8e:	b538      	push	{r3, r4, r5, lr}
 80a0a90:	4604      	mov	r4, r0
  int val = body.toInt();
 80a0a92:	4608      	mov	r0, r1
 80a0a94:	f006 f896 	bl	80a6bc4 <_ZNK6String5toIntEv>
 80a0a98:	4605      	mov	r5, r0
  Time.zone(val);
 80a0a9a:	f007 faff 	bl	80a809c <__aeabi_i2f>
 80a0a9e:	f004 fd21 	bl	80a54e4 <_ZN9TimeClass4zoneEf>
  m_ptr_calibrations->time = val;
 80a0aa2:	68a3      	ldr	r3, [r4, #8]
 80a0aa4:	619d      	str	r5, [r3, #24]
  m_ptr_sdcard->openFileToWriteAndWrite();
 80a0aa6:	68e0      	ldr	r0, [r4, #12]
 80a0aa8:	f7ff ff60 	bl	80a096c <_ZN6SDCard23openFileToWriteAndWriteEv>
  return 1;
}
 80a0aac:	2001      	movs	r0, #1
 80a0aae:	bd38      	pop	{r3, r4, r5, pc}

080a0ab0 <_ZN21ParticleCommunication15setLightOnLimitE6String>:

int ParticleCommunication::setLightOnLimit(String body) {
 80a0ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0ab2:	4604      	mov	r4, r0
  float val                        = body.toFloat();
 80a0ab4:	4608      	mov	r0, r1
 80a0ab6:	f006 f88a 	bl	80a6bce <_ZNK6String7toFloatEv>
  m_ptr_calibrations->lightOnLimit = val;
 80a0aba:	f006 fe99 	bl	80a77f0 <__aeabi_f2d>
 80a0abe:	460f      	mov	r7, r1
 80a0ac0:	4606      	mov	r6, r0
 80a0ac2:	68a5      	ldr	r5, [r4, #8]
 80a0ac4:	e9c5 6708 	strd	r6, r7, [r5, #32]
  Serial.println("hei");
 80a0ac8:	f004 f86e 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a0acc:	4908      	ldr	r1, [pc, #32]	; (80a0af0 <_ZN21ParticleCommunication15setLightOnLimitE6String+0x40>)
 80a0ace:	f005 fe04 	bl	80a66da <_ZN5Print7printlnEPKc>
  Serial.println(val);
 80a0ad2:	f004 f869 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a0ad6:	2302      	movs	r3, #2
 80a0ad8:	9300      	str	r3, [sp, #0]
 80a0ada:	4632      	mov	r2, r6
 80a0adc:	463b      	mov	r3, r7
 80a0ade:	f005 ff0d 	bl	80a68fc <_ZN5Print7printlnEdi>
  m_ptr_sdcard->openFileToWriteAndWrite();
 80a0ae2:	68e0      	ldr	r0, [r4, #12]
 80a0ae4:	f7ff ff42 	bl	80a096c <_ZN6SDCard23openFileToWriteAndWriteEv>
  return 1;
}
 80a0ae8:	2001      	movs	r0, #1
 80a0aea:	b003      	add	sp, #12
 80a0aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0aee:	bf00      	nop
 80a0af0:	080abc2d 	.word	0x080abc2d

080a0af4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM21ParticleCommunicationFi6StringEEPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0af4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0af6:	b538      	push	{r3, r4, r5, lr}
 80a0af8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0afa:	d005      	beq.n	80a0b08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM21ParticleCommunicationFi6StringEEPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
 80a0afc:	2a03      	cmp	r2, #3
 80a0afe:	d00f      	beq.n	80a0b20 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM21ParticleCommunicationFi6StringEEPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x2c>
 80a0b00:	2a01      	cmp	r2, #1
 80a0b02:	d111      	bne.n	80a0b28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM21ParticleCommunicationFi6StringEEPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0b04:	680b      	ldr	r3, [r1, #0]
 80a0b06:	e009      	b.n	80a0b1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM21ParticleCommunicationFi6StringEEPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0b08:	200c      	movs	r0, #12
 80a0b0a:	680d      	ldr	r5, [r1, #0]
 80a0b0c:	f7ff fac7 	bl	80a009e <_Znwj>
 80a0b10:	4603      	mov	r3, r0
 80a0b12:	b118      	cbz	r0, 80a0b1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM21ParticleCommunicationFi6StringEEPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x28>
 80a0b14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a0b18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a0b1c:	6023      	str	r3, [r4, #0]
 80a0b1e:	e003      	b.n	80a0b28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM21ParticleCommunicationFi6StringEEPS3_St12_PlaceholderILi1EEEEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0b20:	210c      	movs	r1, #12
 80a0b22:	6800      	ldr	r0, [r0, #0]
 80a0b24:	f006 f966 	bl	80a6df4 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0b28:	2000      	movs	r0, #0
 80a0b2a:	bd38      	pop	{r3, r4, r5, pc}

080a0b2c <_ZN21ParticleCommunicationC1EP12temperaturesP25acceleration_measurementsP12calibrationsP6SDCard>:

#include "particle_communication.h"

ParticleCommunication::ParticleCommunication(struct temperatures *ptr_temperaure, struct acceleration_measurements *ptr_acceleration_measurements, struct calibrations *ptr_calibrations, SDCard *ptr_sdcard) {
 80a0b2c:	b510      	push	{r4, lr}
  m_ptr_temperatures              = ptr_temperaure;
  m_ptr_acceleration_measurements = ptr_acceleration_measurements;
  m_ptr_calibrations              = ptr_calibrations;
 80a0b2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  m_ptr_sdcard                    = ptr_sdcard;
 80a0b32:	9b02      	ldr	r3, [sp, #8]
 80a0b34:	60c3      	str	r3, [r0, #12]
}
 80a0b36:	bd10      	pop	{r4, pc}

080a0b38 <_ZN21ParticleCommunication11publishDataEv>:
  Particle.function("setTimeZone", &ParticleCommunication::setTimeZone, this);

  Particle.function("setLightOnLimit", &ParticleCommunication::setLightOnLimit, this);
}

void ParticleCommunication::publishData() {
 80a0b38:	b510      	push	{r4, lr}
 80a0b3a:	b08e      	sub	sp, #56	; 0x38
 80a0b3c:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0b3e:	f003 fa65 	bl	80a400c <spark_cloud_flag_connected>

  if (Particle.connected()) {
 80a0b42:	2800      	cmp	r0, #0
 80a0b44:	d035      	beq.n	80a0bb2 <_ZN21ParticleCommunication11publishDataEv+0x7a>
      "{\"gyrometer\": {\"ax\":%d, \"ay\":%d, \"az\":%d, \"maxDiffZAxisLast10Measurements\":%d}, \"temperatures\": {\"water\": %f, \"air\":%f, \"humidity\":%f } }",
      m_ptr_acceleration_measurements->ax,
      m_ptr_acceleration_measurements->ay,
      m_ptr_acceleration_measurements->az,
      m_ptr_acceleration_measurements->diff_in_z_axis_last_ten_measurements,
      m_ptr_temperatures->currentWaterTemp,
 80a0b46:	6823      	ldr	r3, [r4, #0]
void ParticleCommunication::publishData() {

  if (Particle.connected()) {
    String data = String::format(
      "{\"gyrometer\": {\"ax\":%d, \"ay\":%d, \"az\":%d, \"maxDiffZAxisLast10Measurements\":%d}, \"temperatures\": {\"water\": %f, \"air\":%f, \"humidity\":%f } }",
      m_ptr_acceleration_measurements->ax,
 80a0b48:	6862      	ldr	r2, [r4, #4]
      m_ptr_acceleration_measurements->ay,
      m_ptr_acceleration_measurements->az,
      m_ptr_acceleration_measurements->diff_in_z_axis_last_ten_measurements,
      m_ptr_temperatures->currentWaterTemp,
      m_ptr_temperatures->currentOnLandTemperature,
      m_ptr_temperatures->currentOnLandHumidity);
 80a0b4a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80a0b4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a0b52:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80a0b56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a0b5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 80a0b5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a0b62:	6913      	ldr	r3, [r2, #16]
 80a0b64:	4914      	ldr	r1, [pc, #80]	; (80a0bb8 <_ZN21ParticleCommunication11publishDataEv+0x80>)
 80a0b66:	9301      	str	r3, [sp, #4]
 80a0b68:	6893      	ldr	r3, [r2, #8]
 80a0b6a:	a80a      	add	r0, sp, #40	; 0x28
 80a0b6c:	9300      	str	r3, [sp, #0]
 80a0b6e:	ca0c      	ldmia	r2, {r2, r3}
 80a0b70:	f006 f838 	bl	80a6be4 <_ZN6String6formatEPKcz>
 80a0b74:	4b11      	ldr	r3, [pc, #68]	; (80a0bbc <_ZN21ParticleCommunication11publishDataEv+0x84>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0b76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a0b78:	781b      	ldrb	r3, [r3, #0]
 80a0b7a:	4911      	ldr	r1, [pc, #68]	; (80a0bc0 <_ZN21ParticleCommunication11publishDataEv+0x88>)
 80a0b7c:	f88d 3000 	strb.w	r3, [sp]
 80a0b80:	a808      	add	r0, sp, #32
 80a0b82:	233c      	movs	r3, #60	; 0x3c
 80a0b84:	f004 fa66 	bl	80a5054 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0b88:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80a0b8a:	b17c      	cbz	r4, 80a0bac <_ZN21ParticleCommunication11publishDataEv+0x74>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0b8c:	6863      	ldr	r3, [r4, #4]
 80a0b8e:	3b01      	subs	r3, #1
 80a0b90:	6063      	str	r3, [r4, #4]
 80a0b92:	b95b      	cbnz	r3, 80a0bac <_ZN21ParticleCommunication11publishDataEv+0x74>
        {
          _M_dispose();
 80a0b94:	6823      	ldr	r3, [r4, #0]
 80a0b96:	4620      	mov	r0, r4
 80a0b98:	689b      	ldr	r3, [r3, #8]
 80a0b9a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0b9c:	68a3      	ldr	r3, [r4, #8]
 80a0b9e:	3b01      	subs	r3, #1
 80a0ba0:	60a3      	str	r3, [r4, #8]
 80a0ba2:	b91b      	cbnz	r3, 80a0bac <_ZN21ParticleCommunication11publishDataEv+0x74>
            _M_destroy();
 80a0ba4:	6823      	ldr	r3, [r4, #0]
 80a0ba6:	4620      	mov	r0, r4
 80a0ba8:	68db      	ldr	r3, [r3, #12]
 80a0baa:	4798      	blx	r3
 80a0bac:	a80a      	add	r0, sp, #40	; 0x28
 80a0bae:	f005 ff95 	bl	80a6adc <_ZN6StringD1Ev>
    Particle.publish("sensorData", data, PRIVATE);
  }
}
 80a0bb2:	b00e      	add	sp, #56	; 0x38
 80a0bb4:	bd10      	pop	{r4, pc}
 80a0bb6:	bf00      	nop
 80a0bb8:	080abc31 	.word	0x080abc31
 80a0bbc:	20000230 	.word	0x20000230
 80a0bc0:	080abcbb 	.word	0x080abcbb

080a0bc4 <_ZN10CloudClass8variableIA23_cIdEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a0bc4:	2300      	movs	r3, #0
 80a0bc6:	2209      	movs	r2, #9
 80a0bc8:	f003 ba08 	b.w	80a3fdc <spark_variable>

080a0bcc <_ZN10CloudClass9_functionI21ParticleCommunicationEEbPKcMT_Fi6StringEPS4_>:
        return success;
#endif
    }

    template <typename T>
    static bool _function(const char *funcKey, int (T::*func)(String), T *instance) {
 80a0bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0bce:	4605      	mov	r5, r0
 80a0bd0:	b087      	sub	sp, #28
 80a0bd2:	461c      	mov	r4, r3
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0bd4:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0bd6:	2300      	movs	r3, #0
 80a0bd8:	e88d 0006 	stmia.w	sp, {r1, r2}
 80a0bdc:	460f      	mov	r7, r1
 80a0bde:	4616      	mov	r6, r2
 80a0be0:	9304      	str	r3, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0be2:	f7ff fa5c 	bl	80a009e <_Znwj>
 80a0be6:	b110      	cbz	r0, 80a0bee <_ZN10CloudClass9_functionI21ParticleCommunicationEEbPKcMT_Fi6StringEPS4_+0x22>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a0be8:	6007      	str	r7, [r0, #0]
 80a0bea:	6046      	str	r6, [r0, #4]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0bec:	6084      	str	r4, [r0, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0bee:	4b12      	ldr	r3, [pc, #72]	; (80a0c38 <_ZN10CloudClass9_functionI21ParticleCommunicationEEbPKcMT_Fi6StringEPS4_+0x6c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0bf0:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0bf2:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a0bf4:	4b11      	ldr	r3, [pc, #68]	; (80a0c3c <_ZN10CloudClass9_functionI21ParticleCommunicationEEbPKcMT_Fi6StringEPS4_+0x70>)
        return false;
#else
        bool success = false;
        if (func) // if the call-wrapper has wrapped a callable object
        {
            auto wrapper = new user_std_function_int_str_t(func);
 80a0bf6:	2010      	movs	r0, #16
 80a0bf8:	9304      	str	r3, [sp, #16]
 80a0bfa:	f7ff fa50 	bl	80a009e <_Znwj>
 80a0bfe:	4604      	mov	r4, r0
 80a0c00:	b180      	cbz	r0, 80a0c24 <_ZN10CloudClass9_functionI21ParticleCommunicationEEbPKcMT_Fi6StringEPS4_+0x58>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0c02:	2300      	movs	r3, #0
 80a0c04:	6083      	str	r3, [r0, #8]
 80a0c06:	9b04      	ldr	r3, [sp, #16]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0c08:	b133      	cbz	r3, 80a0c18 <_ZN10CloudClass9_functionI21ParticleCommunicationEEbPKcMT_Fi6StringEPS4_+0x4c>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0c0a:	2202      	movs	r2, #2
 80a0c0c:	a902      	add	r1, sp, #8
 80a0c0e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0c10:	9b05      	ldr	r3, [sp, #20]
 80a0c12:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0c14:	9b04      	ldr	r3, [sp, #16]
 80a0c16:	60a3      	str	r3, [r4, #8]
            if (wrapper) {
                success = register_function(call_std_user_function, wrapper, funcKey);
 80a0c18:	4621      	mov	r1, r4
 80a0c1a:	462a      	mov	r2, r5
 80a0c1c:	4808      	ldr	r0, [pc, #32]	; (80a0c40 <_ZN10CloudClass9_functionI21ParticleCommunicationEEbPKcMT_Fi6StringEPS4_+0x74>)
 80a0c1e:	f004 f8ee 	bl	80a4dfe <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0c22:	4604      	mov	r4, r0

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a0c24:	9b04      	ldr	r3, [sp, #16]
 80a0c26:	b11b      	cbz	r3, 80a0c30 <_ZN10CloudClass9_functionI21ParticleCommunicationEEbPKcMT_Fi6StringEPS4_+0x64>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0c28:	a902      	add	r1, sp, #8
 80a0c2a:	2203      	movs	r2, #3
 80a0c2c:	4608      	mov	r0, r1
 80a0c2e:	4798      	blx	r3

    template <typename T>
    static bool _function(const char *funcKey, int (T::*func)(String), T *instance) {
      using namespace std::placeholders;
      return _function(funcKey, std::bind(func, instance, _1));
    }
 80a0c30:	4620      	mov	r0, r4
 80a0c32:	b007      	add	sp, #28
 80a0c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0c36:	bf00      	nop
 80a0c38:	080a09fd 	.word	0x080a09fd
 80a0c3c:	080a0af5 	.word	0x080a0af5
 80a0c40:	080a4dd7 	.word	0x080a4dd7

080a0c44 <_ZN21ParticleCommunication5beginEv>:
  m_ptr_acceleration_measurements = ptr_acceleration_measurements;
  m_ptr_calibrations              = ptr_calibrations;
  m_ptr_sdcard                    = ptr_sdcard;
}

void ParticleCommunication::begin() {
 80a0c44:	b530      	push	{r4, r5, lr}
 80a0c46:	4604      	mov	r4, r0
  Particle.publishVitals(20);

  Particle.variable("waterTemp", m_ptr_temperatures->currentWaterTemp);
 80a0c48:	4d2b      	ldr	r5, [pc, #172]	; (80a0cf8 <_ZN21ParticleCommunication5beginEv+0xb4>)
  m_ptr_acceleration_measurements = ptr_acceleration_measurements;
  m_ptr_calibrations              = ptr_calibrations;
  m_ptr_sdcard                    = ptr_sdcard;
}

void ParticleCommunication::begin() {
 80a0c4a:	b08b      	sub	sp, #44	; 0x2c
  Particle.publishVitals(20);
 80a0c4c:	2114      	movs	r1, #20
 80a0c4e:	482b      	ldr	r0, [pc, #172]	; (80a0cfc <_ZN21ParticleCommunication5beginEv+0xb8>)
 80a0c50:	f004 f8ec 	bl	80a4e2c <_ZN10CloudClass13publishVitalsEm>

  Particle.variable("waterTemp", m_ptr_temperatures->currentWaterTemp);
 80a0c54:	6821      	ldr	r1, [r4, #0]
 80a0c56:	4628      	mov	r0, r5
 80a0c58:	f7ff ffb4 	bl	80a0bc4 <_ZN10CloudClass8variableIA23_cIdEEEbRKT_DpRKT0_>
  Particle.variable("airTemp", m_ptr_temperatures->currentOnLandTemperature);
 80a0c5c:	6821      	ldr	r1, [r4, #0]
 80a0c5e:	4828      	ldr	r0, [pc, #160]	; (80a0d00 <_ZN21ParticleCommunication5beginEv+0xbc>)
 80a0c60:	3110      	adds	r1, #16
 80a0c62:	f7ff ffaf 	bl	80a0bc4 <_ZN10CloudClass8variableIA23_cIdEEEbRKT_DpRKT0_>
  Particle.variable("airHumidity", m_ptr_temperatures->currentOnLandHumidity);
 80a0c66:	6821      	ldr	r1, [r4, #0]
 80a0c68:	4826      	ldr	r0, [pc, #152]	; (80a0d04 <_ZN21ParticleCommunication5beginEv+0xc0>)
 80a0c6a:	3108      	adds	r1, #8
 80a0c6c:	f7ff ffaa 	bl	80a0bc4 <_ZN10CloudClass8variableIA23_cIdEEEbRKT_DpRKT0_>
  Particle.variable("waterTemp", m_ptr_temperatures->currentWaterTemp);
 80a0c70:	6821      	ldr	r1, [r4, #0]
 80a0c72:	4628      	mov	r0, r5
 80a0c74:	f7ff ffa6 	bl	80a0bc4 <_ZN10CloudClass8variableIA23_cIdEEEbRKT_DpRKT0_>

  Particle.variable("waterTempCalibrationValue", m_ptr_calibrations->waterTempCalibration);
 80a0c78:	68a1      	ldr	r1, [r4, #8]
 80a0c7a:	4823      	ldr	r0, [pc, #140]	; (80a0d08 <_ZN21ParticleCommunication5beginEv+0xc4>)
 80a0c7c:	f7ff ffa2 	bl	80a0bc4 <_ZN10CloudClass8variableIA23_cIdEEEbRKT_DpRKT0_>
  Particle.variable("airTempCalibrationValue", m_ptr_calibrations->airTempCalibration);
 80a0c80:	68a1      	ldr	r1, [r4, #8]
 80a0c82:	4822      	ldr	r0, [pc, #136]	; (80a0d0c <_ZN21ParticleCommunication5beginEv+0xc8>)
 80a0c84:	3108      	adds	r1, #8
 80a0c86:	f7ff ff9d 	bl	80a0bc4 <_ZN10CloudClass8variableIA23_cIdEEEbRKT_DpRKT0_>
  Particle.variable("airHumidityCalibration", m_ptr_calibrations->landHumidityCalibration);
 80a0c8a:	68a1      	ldr	r1, [r4, #8]
 80a0c8c:	4820      	ldr	r0, [pc, #128]	; (80a0d10 <_ZN21ParticleCommunication5beginEv+0xcc>)
 80a0c8e:	3110      	adds	r1, #16
 80a0c90:	f7ff ff98 	bl	80a0bc4 <_ZN10CloudClass8variableIA23_cIdEEEbRKT_DpRKT0_>
 80a0c94:	4b1f      	ldr	r3, [pc, #124]	; (80a0d14 <_ZN21ParticleCommunication5beginEv+0xd0>)
 80a0c96:	2500      	movs	r5, #0
 80a0c98:	9308      	str	r3, [sp, #32]
 80a0c9a:	9509      	str	r5, [sp, #36]	; 0x24
    static inline bool function(const T &name, Types ... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_FUNC_KEY_LENGTH + 1,
            "\n\nIn Particle.function, name must be " __XSTRING(USER_FUNC_KEY_LENGTH) " characters or less\n\n");

        return _function(name, args...);
 80a0c9c:	aa0a      	add	r2, sp, #40	; 0x28
 80a0c9e:	4623      	mov	r3, r4
 80a0ca0:	e912 0006 	ldmdb	r2, {r1, r2}
 80a0ca4:	481c      	ldr	r0, [pc, #112]	; (80a0d18 <_ZN21ParticleCommunication5beginEv+0xd4>)
 80a0ca6:	f7ff ff91 	bl	80a0bcc <_ZN10CloudClass9_functionI21ParticleCommunicationEEbPKcMT_Fi6StringEPS4_>
 80a0caa:	4b1c      	ldr	r3, [pc, #112]	; (80a0d1c <_ZN21ParticleCommunication5beginEv+0xd8>)
 80a0cac:	9507      	str	r5, [sp, #28]
 80a0cae:	9306      	str	r3, [sp, #24]
 80a0cb0:	aa06      	add	r2, sp, #24
 80a0cb2:	4623      	mov	r3, r4
 80a0cb4:	ca06      	ldmia	r2, {r1, r2}
 80a0cb6:	481a      	ldr	r0, [pc, #104]	; (80a0d20 <_ZN21ParticleCommunication5beginEv+0xdc>)
 80a0cb8:	f7ff ff88 	bl	80a0bcc <_ZN10CloudClass9_functionI21ParticleCommunicationEEbPKcMT_Fi6StringEPS4_>
 80a0cbc:	4b19      	ldr	r3, [pc, #100]	; (80a0d24 <_ZN21ParticleCommunication5beginEv+0xe0>)
 80a0cbe:	9505      	str	r5, [sp, #20]
 80a0cc0:	9304      	str	r3, [sp, #16]
 80a0cc2:	aa04      	add	r2, sp, #16
 80a0cc4:	4623      	mov	r3, r4
 80a0cc6:	ca06      	ldmia	r2, {r1, r2}
 80a0cc8:	4817      	ldr	r0, [pc, #92]	; (80a0d28 <_ZN21ParticleCommunication5beginEv+0xe4>)
 80a0cca:	f7ff ff7f 	bl	80a0bcc <_ZN10CloudClass9_functionI21ParticleCommunicationEEbPKcMT_Fi6StringEPS4_>
 80a0cce:	4b17      	ldr	r3, [pc, #92]	; (80a0d2c <_ZN21ParticleCommunication5beginEv+0xe8>)
 80a0cd0:	9503      	str	r5, [sp, #12]
 80a0cd2:	9302      	str	r3, [sp, #8]
 80a0cd4:	aa02      	add	r2, sp, #8
 80a0cd6:	4623      	mov	r3, r4
 80a0cd8:	ca06      	ldmia	r2, {r1, r2}
 80a0cda:	4815      	ldr	r0, [pc, #84]	; (80a0d30 <_ZN21ParticleCommunication5beginEv+0xec>)
 80a0cdc:	f7ff ff76 	bl	80a0bcc <_ZN10CloudClass9_functionI21ParticleCommunicationEEbPKcMT_Fi6StringEPS4_>
 80a0ce0:	4b14      	ldr	r3, [pc, #80]	; (80a0d34 <_ZN21ParticleCommunication5beginEv+0xf0>)
 80a0ce2:	4815      	ldr	r0, [pc, #84]	; (80a0d38 <_ZN21ParticleCommunication5beginEv+0xf4>)
 80a0ce4:	e88d 0028 	stmia.w	sp, {r3, r5}
 80a0ce8:	4623      	mov	r3, r4
 80a0cea:	e89d 0006 	ldmia.w	sp, {r1, r2}
 80a0cee:	f7ff ff6d 	bl	80a0bcc <_ZN10CloudClass9_functionI21ParticleCommunicationEEbPKcMT_Fi6StringEPS4_>
  Particle.function("calibrateAirHumidityFunction", &ParticleCommunication::calibrateAirHumidty, this);

  Particle.function("setTimeZone", &ParticleCommunication::setTimeZone, this);

  Particle.function("setLightOnLimit", &ParticleCommunication::setLightOnLimit, this);
}
 80a0cf2:	b00b      	add	sp, #44	; 0x2c
 80a0cf4:	bd30      	pop	{r4, r5, pc}
 80a0cf6:	bf00      	nop
 80a0cf8:	080abcc6 	.word	0x080abcc6
 80a0cfc:	2000075c 	.word	0x2000075c
 80a0d00:	080abcd0 	.word	0x080abcd0
 80a0d04:	080abcd8 	.word	0x080abcd8
 80a0d08:	080abce4 	.word	0x080abce4
 80a0d0c:	080abcfe 	.word	0x080abcfe
 80a0d10:	080abd16 	.word	0x080abd16
 80a0d14:	080a0a35 	.word	0x080a0a35
 80a0d18:	080abd2d 	.word	0x080abd2d
 80a0d1c:	080a0a53 	.word	0x080a0a53
 80a0d20:	080abd48 	.word	0x080abd48
 80a0d24:	080a0a71 	.word	0x080a0a71
 80a0d28:	080abd61 	.word	0x080abd61
 80a0d2c:	080a0a8f 	.word	0x080a0a8f
 80a0d30:	080abd7e 	.word	0x080abd7e
 80a0d34:	080a0ab1 	.word	0x080a0ab1
 80a0d38:	080abd8a 	.word	0x080abd8a

080a0d3c <_GLOBAL__sub_I__ZN21ParticleCommunicationC2EP12temperaturesP25acceleration_measurementsP12calibrationsP6SDCard>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0d3c:	4b02      	ldr	r3, [pc, #8]	; (80a0d48 <_GLOBAL__sub_I__ZN21ParticleCommunicationC2EP12temperaturesP25acceleration_measurementsP12calibrationsP6SDCard+0xc>)
 80a0d3e:	2201      	movs	r2, #1
 80a0d40:	701a      	strb	r2, [r3, #0]
 80a0d42:	f003 b8eb 	b.w	80a3f1c <HAL_Pin_Map>
 80a0d46:	bf00      	nop
 80a0d48:	20000230 	.word	0x20000230

080a0d4c <_ZN5Light5beginEv>:
  m_ptr_temperatures = ptr_temperatures;
  m_ptr_calibrations = ptr_calibration;
  setup();
}

void Light::begin() {
 80a0d4c:	4770      	bx	lr

080a0d4e <_ZN5Light5setupEv>:
}

void Light::setup() {
 80a0d4e:	b510      	push	{r4, lr}
 80a0d50:	4604      	mov	r4, r0
  pinMode(RED_LIGHT_OUTPUT, OUTPUT);
 80a0d52:	2101      	movs	r1, #1
 80a0d54:	2006      	movs	r0, #6
 80a0d56:	f005 ffeb 	bl	80a6d30 <pinMode>
  redLightStatus = LOW;
 80a0d5a:	2300      	movs	r3, #0
 80a0d5c:	6023      	str	r3, [r4, #0]
 80a0d5e:	bd10      	pop	{r4, pc}

080a0d60 <_ZN5LightC1EP12temperaturesP12calibrations>:
#include "light.h"
#include "application.h"

#define RED_LIGHT_OUTPUT D6

Light::Light(struct temperatures *ptr_temperatures, struct calibrations *ptr_calibration) {
 80a0d60:	b510      	push	{r4, lr}
 80a0d62:	4604      	mov	r4, r0
  m_ptr_temperatures = ptr_temperatures;
 80a0d64:	6081      	str	r1, [r0, #8]
  m_ptr_calibrations = ptr_calibration;
 80a0d66:	60c2      	str	r2, [r0, #12]
  setup();
 80a0d68:	f7ff fff1 	bl	80a0d4e <_ZN5Light5setupEv>
}
 80a0d6c:	4620      	mov	r0, r4
 80a0d6e:	bd10      	pop	{r4, pc}

080a0d70 <_ZN5Light11setRedLightEv>:
void Light::setup() {
  pinMode(RED_LIGHT_OUTPUT, OUTPUT);
  redLightStatus = LOW;
}

void Light::setRedLight() {
 80a0d70:	b510      	push	{r4, lr}
  if ((m_ptr_temperatures->currentWaterTemp) > m_ptr_calibrations->lightOnLimit) {
 80a0d72:	68c3      	ldr	r3, [r0, #12]
 80a0d74:	6881      	ldr	r1, [r0, #8]
void Light::setup() {
  pinMode(RED_LIGHT_OUTPUT, OUTPUT);
  redLightStatus = LOW;
}

void Light::setRedLight() {
 80a0d76:	4604      	mov	r4, r0
  if ((m_ptr_temperatures->currentWaterTemp) > m_ptr_calibrations->lightOnLimit) {
 80a0d78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80a0d7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a0d80:	f007 f81a 	bl	80a7db8 <__aeabi_dcmpgt>
 80a0d84:	b110      	cbz	r0, 80a0d8c <_ZN5Light11setRedLightEv+0x1c>
    newSetLightBool = true;
 80a0d86:	2301      	movs	r3, #1
 80a0d88:	7123      	strb	r3, [r4, #4]
 80a0d8a:	e000      	b.n	80a0d8e <_ZN5Light11setRedLightEv+0x1e>
  } else {
    newSetLightBool = false;
 80a0d8c:	7120      	strb	r0, [r4, #4]
  }

  if (newSetLightBool != lastSetLightBool) {
 80a0d8e:	7921      	ldrb	r1, [r4, #4]
 80a0d90:	7963      	ldrb	r3, [r4, #5]
 80a0d92:	428b      	cmp	r3, r1
 80a0d94:	d002      	beq.n	80a0d9c <_ZN5Light11setRedLightEv+0x2c>
    digitalWrite(RED_LIGHT_OUTPUT, newSetLightBool);
 80a0d96:	2006      	movs	r0, #6
 80a0d98:	f005 ffdb 	bl	80a6d52 <digitalWrite>
  }

  lastSetLightBool = newSetLightBool;
 80a0d9c:	7923      	ldrb	r3, [r4, #4]
 80a0d9e:	7163      	strb	r3, [r4, #5]
 80a0da0:	bd10      	pop	{r4, pc}

080a0da2 <_GLOBAL__sub_I__ZN5LightC2EP12temperaturesP12calibrations>:
 80a0da2:	f003 b8bb 	b.w	80a3f1c <HAL_Pin_Map>
	...

080a0da8 <_ZN18AlgorithmAnimationC1EP15Adafruit_ST7735h>:
#include "algorithm_animation.h"

AlgorithmAnimation::AlgorithmAnimation(Adafruit_ST7735 *adafruit, uint8_t size) {
 80a0da8:	b510      	push	{r4, lr}
 80a0daa:	4604      	mov	r4, r0
  m_ptr_adafruit = adafruit;
  m_size         = size;
 80a0dac:	7102      	strb	r2, [r0, #4]
#include "algorithm_animation.h"

AlgorithmAnimation::AlgorithmAnimation(Adafruit_ST7735 *adafruit, uint8_t size) {
  m_ptr_adafruit = adafruit;
 80a0dae:	6081      	str	r1, [r0, #8]
  m_size         = size;
  Serial.println("in constructor");
 80a0db0:	f003 fefa 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a0db4:	4907      	ldr	r1, [pc, #28]	; (80a0dd4 <_ZN18AlgorithmAnimationC1EP15Adafruit_ST7735h+0x2c>)
 80a0db6:	f005 fc90 	bl	80a66da <_ZN5Print7printlnEPKc>
  numbersToSort = new int[m_size];
 80a0dba:	7920      	ldrb	r0, [r4, #4]
 80a0dbc:	0080      	lsls	r0, r0, #2
 80a0dbe:	f7ff f970 	bl	80a00a2 <_Znaj>
 80a0dc2:	6020      	str	r0, [r4, #0]
  Serial.println("in constructor after");
 80a0dc4:	f003 fef0 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a0dc8:	4903      	ldr	r1, [pc, #12]	; (80a0dd8 <_ZN18AlgorithmAnimationC1EP15Adafruit_ST7735h+0x30>)
 80a0dca:	f005 fc86 	bl	80a66da <_ZN5Print7printlnEPKc>
}
 80a0dce:	4620      	mov	r0, r4
 80a0dd0:	bd10      	pop	{r4, pc}
 80a0dd2:	bf00      	nop
 80a0dd4:	080abd9a 	.word	0x080abd9a
 80a0dd8:	080abda9 	.word	0x080abda9

080a0ddc <_ZN18AlgorithmAnimation11drawNumbersEi>:
    numbersToSort[j + 1] = key;
  }
  delay(200);
}

void AlgorithmAnimation::drawNumbers(int curr) {
 80a0ddc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0de0:	4606      	mov	r6, r0
  int width  = 10;

  m_ptr_adafruit->fillScreen(ST7735_BLACK);
 80a0de2:	6880      	ldr	r0, [r0, #8]
    numbersToSort[j + 1] = key;
  }
  delay(200);
}

void AlgorithmAnimation::drawNumbers(int curr) {
 80a0de4:	460f      	mov	r7, r1
  int width  = 10;

  m_ptr_adafruit->fillScreen(ST7735_BLACK);
 80a0de6:	6803      	ldr	r3, [r0, #0]
 80a0de8:	2100      	movs	r1, #0
 80a0dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0dec:	4798      	blx	r3
    int y = 100 - numbersToSort[i];
    int height = numbersToSort[i];
    if (i == curr) {
      m_ptr_adafruit->fillRect(x, y, width, height, ST7735_GREEN);
    } else {
      m_ptr_adafruit->fillRect(x, y, width, height, ST7735_MAGENTA);
 80a0dee:	f64f 081f 	movw	r8, #63519	; 0xf81f
}

void AlgorithmAnimation::drawNumbers(int curr) {
  int width  = 10;

  m_ptr_adafruit->fillScreen(ST7735_BLACK);
 80a0df2:	2405      	movs	r4, #5

  for (int i = 0; i < m_size; i++) {
 80a0df4:	2500      	movs	r5, #0
    int x = 5 + i * 15;
    int y = 100 - numbersToSort[i];
    int height = numbersToSort[i];
    if (i == curr) {
      m_ptr_adafruit->fillRect(x, y, width, height, ST7735_GREEN);
 80a0df6:	f44f 69fc 	mov.w	r9, #2016	; 0x7e0
void AlgorithmAnimation::drawNumbers(int curr) {
  int width  = 10;

  m_ptr_adafruit->fillScreen(ST7735_BLACK);

  for (int i = 0; i < m_size; i++) {
 80a0dfa:	7933      	ldrb	r3, [r6, #4]
 80a0dfc:	429d      	cmp	r5, r3
 80a0dfe:	da19      	bge.n	80a0e34 <_ZN18AlgorithmAnimation11drawNumbersEi+0x58>
    int x = 5 + i * 15;
    int y = 100 - numbersToSort[i];
 80a0e00:	6833      	ldr	r3, [r6, #0]
 80a0e02:	68b0      	ldr	r0, [r6, #8]
 80a0e04:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    int height = numbersToSort[i];
    if (i == curr) {
      m_ptr_adafruit->fillRect(x, y, width, height, ST7735_GREEN);
 80a0e08:	f8d0 e000 	ldr.w	lr, [r0]

  for (int i = 0; i < m_size; i++) {
    int x = 5 + i * 15;
    int y = 100 - numbersToSort[i];
    int height = numbersToSort[i];
    if (i == curr) {
 80a0e0c:	42bd      	cmp	r5, r7

  m_ptr_adafruit->fillScreen(ST7735_BLACK);

  for (int i = 0; i < m_size; i++) {
    int x = 5 + i * 15;
    int y = 100 - numbersToSort[i];
 80a0e0e:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80a0e12:	b21b      	sxth	r3, r3
    int height = numbersToSort[i];
    if (i == curr) {
      m_ptr_adafruit->fillRect(x, y, width, height, ST7735_GREEN);
    } else {
      m_ptr_adafruit->fillRect(x, y, width, height, ST7735_MAGENTA);
 80a0e14:	9300      	str	r3, [sp, #0]
  for (int i = 0; i < m_size; i++) {
    int x = 5 + i * 15;
    int y = 100 - numbersToSort[i];
    int height = numbersToSort[i];
    if (i == curr) {
      m_ptr_adafruit->fillRect(x, y, width, height, ST7735_GREEN);
 80a0e16:	bf0c      	ite	eq
 80a0e18:	f8cd 9004 	streq.w	r9, [sp, #4]
    } else {
      m_ptr_adafruit->fillRect(x, y, width, height, ST7735_MAGENTA);
 80a0e1c:	f8cd 8004 	strne.w	r8, [sp, #4]
 80a0e20:	b221      	sxth	r1, r4
 80a0e22:	b212      	sxth	r2, r2
 80a0e24:	f8de a024 	ldr.w	sl, [lr, #36]	; 0x24
 80a0e28:	230a      	movs	r3, #10
 80a0e2a:	340f      	adds	r4, #15
 80a0e2c:	47d0      	blx	sl
void AlgorithmAnimation::drawNumbers(int curr) {
  int width  = 10;

  m_ptr_adafruit->fillScreen(ST7735_BLACK);

  for (int i = 0; i < m_size; i++) {
 80a0e2e:	3501      	adds	r5, #1
 80a0e30:	b2a4      	uxth	r4, r4
 80a0e32:	e7e2      	b.n	80a0dfa <_ZN18AlgorithmAnimation11drawNumbersEi+0x1e>
      m_ptr_adafruit->fillRect(x, y, width, height, ST7735_GREEN);
    } else {
      m_ptr_adafruit->fillRect(x, y, width, height, ST7735_MAGENTA);
    }
  }
  delay(100);
 80a0e34:	2064      	movs	r0, #100	; 0x64
}
 80a0e36:	b002      	add	sp, #8
 80a0e38:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      m_ptr_adafruit->fillRect(x, y, width, height, ST7735_GREEN);
    } else {
      m_ptr_adafruit->fillRect(x, y, width, height, ST7735_MAGENTA);
    }
  }
  delay(100);
 80a0e3c:	f004 ba8c 	b.w	80a5358 <delay>

080a0e40 <_ZN18AlgorithmAnimation9quickSortEv>:
  Serial.println("in algo begin");
  getRandomNumbersToSort();
  quickSort();
}

void AlgorithmAnimation::quickSort() {
 80a0e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0e44:	4606      	mov	r6, r0
  int key;
  int j;

  for (int i = 1; i < m_size; i++) {
 80a0e46:	2401      	movs	r4, #1
 80a0e48:	7933      	ldrb	r3, [r6, #4]
 80a0e4a:	429c      	cmp	r4, r3
 80a0e4c:	da1e      	bge.n	80a0e8c <_ZN18AlgorithmAnimation9quickSortEv+0x4c>
    drawNumbers(i);
 80a0e4e:	4621      	mov	r1, r4
 80a0e50:	4630      	mov	r0, r6
 80a0e52:	f7ff ffc3 	bl	80a0ddc <_ZN18AlgorithmAnimation11drawNumbersEi>
    key = numbersToSort[i];
 80a0e56:	6833      	ldr	r3, [r6, #0]
 80a0e58:	00a7      	lsls	r7, r4, #2
 80a0e5a:	f853 8024 	ldr.w	r8, [r3, r4, lsl #2]
 80a0e5e:	1e65      	subs	r5, r4, #1

    j = i - 1;
    
    while (j >= 0 && numbersToSort[j] > key) {
 80a0e60:	6833      	ldr	r3, [r6, #0]
 80a0e62:	19da      	adds	r2, r3, r7
 80a0e64:	f852 2c04 	ldr.w	r2, [r2, #-4]
 80a0e68:	4590      	cmp	r8, r2
 80a0e6a:	da09      	bge.n	80a0e80 <_ZN18AlgorithmAnimation9quickSortEv+0x40>
      numbersToSort[j + 1] = numbersToSort[j];
      j                    = j - 1;
 80a0e6c:	3d01      	subs	r5, #1
    key = numbersToSort[i];

    j = i - 1;
    
    while (j >= 0 && numbersToSort[j] > key) {
      numbersToSort[j + 1] = numbersToSort[j];
 80a0e6e:	51da      	str	r2, [r3, r7]
      j                    = j - 1;
      drawNumbers(j);
 80a0e70:	4629      	mov	r1, r5
 80a0e72:	4630      	mov	r0, r6
 80a0e74:	f7ff ffb2 	bl	80a0ddc <_ZN18AlgorithmAnimation11drawNumbersEi>
    drawNumbers(i);
    key = numbersToSort[i];

    j = i - 1;
    
    while (j >= 0 && numbersToSort[j] > key) {
 80a0e78:	1c6b      	adds	r3, r5, #1
 80a0e7a:	f1a7 0704 	sub.w	r7, r7, #4
 80a0e7e:	d1ef      	bne.n	80a0e60 <_ZN18AlgorithmAnimation9quickSortEv+0x20>
      numbersToSort[j + 1] = numbersToSort[j];
      j                    = j - 1;
      drawNumbers(j);
    }
    numbersToSort[j + 1] = key;
 80a0e80:	6833      	ldr	r3, [r6, #0]
 80a0e82:	3501      	adds	r5, #1
 80a0e84:	f843 8025 	str.w	r8, [r3, r5, lsl #2]

void AlgorithmAnimation::quickSort() {
  int key;
  int j;

  for (int i = 1; i < m_size; i++) {
 80a0e88:	3401      	adds	r4, #1
 80a0e8a:	e7dd      	b.n	80a0e48 <_ZN18AlgorithmAnimation9quickSortEv+0x8>
      j                    = j - 1;
      drawNumbers(j);
    }
    numbersToSort[j + 1] = key;
  }
  delay(200);
 80a0e8c:	20c8      	movs	r0, #200	; 0xc8
}
 80a0e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      j                    = j - 1;
      drawNumbers(j);
    }
    numbersToSort[j + 1] = key;
  }
  delay(200);
 80a0e92:	f004 ba61 	b.w	80a5358 <delay>

080a0e96 <_ZN18AlgorithmAnimation22getRandomNumbersToSortEv>:
      m_ptr_adafruit->fillRect(x, y, width, height, ST7735_MAGENTA);
    }
  }
  delay(100);
}
void AlgorithmAnimation::getRandomNumbersToSort() {
 80a0e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e98:	4607      	mov	r7, r0
 80a0e9a:	2400      	movs	r4, #0
  for (int i = 0; i < 10; i++) {
    numbersToSort[i] = 10 + (rand() % 70);
 80a0e9c:	2546      	movs	r5, #70	; 0x46
 80a0e9e:	683e      	ldr	r6, [r7, #0]
 80a0ea0:	f007 fea8 	bl	80a8bf4 <rand>
 80a0ea4:	fb90 f3f5 	sdiv	r3, r0, r5
 80a0ea8:	fb03 0015 	mls	r0, r3, r5, r0
 80a0eac:	300a      	adds	r0, #10
 80a0eae:	5130      	str	r0, [r6, r4]
 80a0eb0:	3404      	adds	r4, #4
    }
  }
  delay(100);
}
void AlgorithmAnimation::getRandomNumbersToSort() {
  for (int i = 0; i < 10; i++) {
 80a0eb2:	2c28      	cmp	r4, #40	; 0x28
 80a0eb4:	d1f3      	bne.n	80a0e9e <_ZN18AlgorithmAnimation22getRandomNumbersToSortEv+0x8>
    numbersToSort[i] = 10 + (rand() % 70);
  }
}
 80a0eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0eb8 <_ZN18AlgorithmAnimation5beginEv>:
  Serial.println("in constructor");
  numbersToSort = new int[m_size];
  Serial.println("in constructor after");
}

void AlgorithmAnimation::begin() {
 80a0eb8:	b510      	push	{r4, lr}
 80a0eba:	4604      	mov	r4, r0
  m_ptr_adafruit->fillScreen(ST7735_BLACK);
 80a0ebc:	6880      	ldr	r0, [r0, #8]
 80a0ebe:	2100      	movs	r1, #0
 80a0ec0:	6803      	ldr	r3, [r0, #0]
 80a0ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0ec4:	4798      	blx	r3
  Serial.println("in algo begin");
 80a0ec6:	f003 fe6f 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a0eca:	4905      	ldr	r1, [pc, #20]	; (80a0ee0 <_ZN18AlgorithmAnimation5beginEv+0x28>)
 80a0ecc:	f005 fc05 	bl	80a66da <_ZN5Print7printlnEPKc>
  getRandomNumbersToSort();
 80a0ed0:	4620      	mov	r0, r4
 80a0ed2:	f7ff ffe0 	bl	80a0e96 <_ZN18AlgorithmAnimation22getRandomNumbersToSortEv>
  quickSort();
 80a0ed6:	4620      	mov	r0, r4
}
 80a0ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void AlgorithmAnimation::begin() {
  m_ptr_adafruit->fillScreen(ST7735_BLACK);
  Serial.println("in algo begin");
  getRandomNumbersToSort();
  quickSort();
 80a0edc:	f7ff bfb0 	b.w	80a0e40 <_ZN18AlgorithmAnimation9quickSortEv>
 80a0ee0:	080abdbe 	.word	0x080abdbe

080a0ee4 <_GLOBAL__sub_I__ZN18AlgorithmAnimationC2EP15Adafruit_ST7735h>:
 80a0ee4:	f003 b81a 	b.w	80a3f1c <HAL_Pin_Map>

080a0ee8 <_ZN24AirtempAndHumiditySensorC1EP12temperaturesP12calibrations>:

#define DHTPIN D2
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

AirtempAndHumiditySensor::AirtempAndHumiditySensor(struct temperatures *ptr_temperatures, struct calibrations *ptr_calibrations) {
 80a0ee8:	b510      	push	{r4, lr}
 80a0eea:	4604      	mov	r4, r0
  m_ptr_temperatures = ptr_temperatures;
  m_ptr_calibrations = ptr_calibrations;
 80a0eec:	e880 0006 	stmia.w	r0, {r1, r2}
  setup();
}

void AirtempAndHumiditySensor::setup() { dht.begin(); }
 80a0ef0:	4802      	ldr	r0, [pc, #8]	; (80a0efc <_ZN24AirtempAndHumiditySensorC1EP12temperaturesP12calibrations+0x14>)
 80a0ef2:	f000 ffea 	bl	80a1eca <_ZN3DHT5beginEv>

AirtempAndHumiditySensor::AirtempAndHumiditySensor(struct temperatures *ptr_temperatures, struct calibrations *ptr_calibrations) {
  m_ptr_temperatures = ptr_temperatures;
  m_ptr_calibrations = ptr_calibrations;
  setup();
}
 80a0ef6:	4620      	mov	r0, r4
 80a0ef8:	bd10      	pop	{r4, pc}
 80a0efa:	bf00      	nop
 80a0efc:	20000234 	.word	0x20000234

080a0f00 <_ZN24AirtempAndHumiditySensor5beginEv>:

void AirtempAndHumiditySensor::setup() { dht.begin(); }

void AirtempAndHumiditySensor::begin() {
 80a0f00:	4770      	bx	lr
	...

080a0f04 <_ZN24AirtempAndHumiditySensor21readCelsiusFromSensorEv>:
}

void AirtempAndHumiditySensor::readCelsiusFromSensor() {
 80a0f04:	b570      	push	{r4, r5, r6, lr}
 80a0f06:	4605      	mov	r5, r0
  float tmp = dht.getTempCelcius();
 80a0f08:	480a      	ldr	r0, [pc, #40]	; (80a0f34 <_ZN24AirtempAndHumiditySensor21readCelsiusFromSensorEv+0x30>)
 80a0f0a:	f001 f89b 	bl	80a2044 <_ZN3DHT14getTempCelciusEv>
  if (isnan(tmp)) {
 80a0f0e:	4601      	mov	r1, r0

void AirtempAndHumiditySensor::begin() {
}

void AirtempAndHumiditySensor::readCelsiusFromSensor() {
  float tmp = dht.getTempCelcius();
 80a0f10:	4604      	mov	r4, r0
  if (isnan(tmp)) {
 80a0f12:	f007 fadd 	bl	80a84d0 <__aeabi_fcmpun>
 80a0f16:	b960      	cbnz	r0, 80a0f32 <_ZN24AirtempAndHumiditySensor21readCelsiusFromSensorEv+0x2e>
    return;
  }
  m_ptr_temperatures->currentOnLandTemperature = (double)tmp + m_ptr_calibrations->airTempCalibration;
 80a0f18:	4620      	mov	r0, r4
 80a0f1a:	f006 fc69 	bl	80a77f0 <__aeabi_f2d>
 80a0f1e:	682e      	ldr	r6, [r5, #0]
 80a0f20:	686d      	ldr	r5, [r5, #4]
 80a0f22:	4602      	mov	r2, r0
 80a0f24:	460b      	mov	r3, r1
 80a0f26:	e9d5 0102 	ldrd	r0, r1, [r5, #8]
 80a0f2a:	f006 fb03 	bl	80a7534 <__adddf3>
 80a0f2e:	e9c6 0104 	strd	r0, r1, [r6, #16]
 80a0f32:	bd70      	pop	{r4, r5, r6, pc}
 80a0f34:	20000234 	.word	0x20000234

080a0f38 <_ZN24AirtempAndHumiditySensor22readHumidityFromSensorEv>:
}

void AirtempAndHumiditySensor::readHumidityFromSensor() {
 80a0f38:	b570      	push	{r4, r5, r6, lr}
 80a0f3a:	4605      	mov	r5, r0
  float hum = dht.getHumidity();
 80a0f3c:	480a      	ldr	r0, [pc, #40]	; (80a0f68 <_ZN24AirtempAndHumiditySensor22readHumidityFromSensorEv+0x30>)
 80a0f3e:	f001 f8ab 	bl	80a2098 <_ZN3DHT11getHumidityEv>
  if (isnan(hum)) {
 80a0f42:	4601      	mov	r1, r0
  }
  m_ptr_temperatures->currentOnLandTemperature = (double)tmp + m_ptr_calibrations->airTempCalibration;
}

void AirtempAndHumiditySensor::readHumidityFromSensor() {
  float hum = dht.getHumidity();
 80a0f44:	4604      	mov	r4, r0
  if (isnan(hum)) {
 80a0f46:	f007 fac3 	bl	80a84d0 <__aeabi_fcmpun>
 80a0f4a:	b960      	cbnz	r0, 80a0f66 <_ZN24AirtempAndHumiditySensor22readHumidityFromSensorEv+0x2e>
    return;
  }
  m_ptr_temperatures->currentOnLandHumidity = (double)hum + m_ptr_calibrations->landHumidityCalibration;
 80a0f4c:	4620      	mov	r0, r4
 80a0f4e:	f006 fc4f 	bl	80a77f0 <__aeabi_f2d>
 80a0f52:	682e      	ldr	r6, [r5, #0]
 80a0f54:	686d      	ldr	r5, [r5, #4]
 80a0f56:	4602      	mov	r2, r0
 80a0f58:	460b      	mov	r3, r1
 80a0f5a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80a0f5e:	f006 fae9 	bl	80a7534 <__adddf3>
 80a0f62:	e9c6 0102 	strd	r0, r1, [r6, #8]
 80a0f66:	bd70      	pop	{r4, r5, r6, pc}
 80a0f68:	20000234 	.word	0x20000234

080a0f6c <_GLOBAL__sub_I_dht>:
}
 80a0f6c:	b510      	push	{r4, lr}
 80a0f6e:	f002 ffd5 	bl	80a3f1c <HAL_Pin_Map>
 80a0f72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "airtemp_and_humidity_sensor.h"
#include "application.h"

#define DHTPIN D2
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
 80a0f76:	2306      	movs	r3, #6
 80a0f78:	220b      	movs	r2, #11
 80a0f7a:	2102      	movs	r1, #2
 80a0f7c:	4801      	ldr	r0, [pc, #4]	; (80a0f84 <_GLOBAL__sub_I_dht+0x18>)
 80a0f7e:	f000 bf9d 	b.w	80a1ebc <_ZN3DHTC1Ehhh>
 80a0f82:	bf00      	nop
 80a0f84:	20000234 	.word	0x20000234

080a0f88 <_ZN9Gyroscope5setupEv>:
  m_ptr_acceleration_measurements = acceleration_measurements;
  gyrometer                       = new MPU6050();
  setup();
}

void Gyroscope::setup() {
 80a0f88:	b510      	push	{r4, lr}
 80a0f8a:	4604      	mov	r4, r0
  Wire.begin();
 80a0f8c:	f005 fe52 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a0f90:	f003 fd70 	bl	80a4a74 <_ZN7TwoWire5beginEv>
  gyrometer->initialize();
 80a0f94:	6820      	ldr	r0, [r4, #0]
 80a0f96:	f001 fa04 	bl	80a23a2 <_ZN7MPU605010initializeEv>
  gyrometer->setXAccelOffset(0);
 80a0f9a:	6820      	ldr	r0, [r4, #0]
 80a0f9c:	2100      	movs	r1, #0
 80a0f9e:	f001 fa13 	bl	80a23c8 <_ZN7MPU605015setXAccelOffsetEs>
  gyrometer->setYAccelOffset(0);
 80a0fa2:	6820      	ldr	r0, [r4, #0]
 80a0fa4:	2100      	movs	r1, #0
 80a0fa6:	f001 fa14 	bl	80a23d2 <_ZN7MPU605015setYAccelOffsetEs>
  gyrometer->setZAccelOffset(0);
 80a0faa:	6820      	ldr	r0, [r4, #0]
 80a0fac:	2100      	movs	r1, #0
 80a0fae:	f001 fa15 	bl	80a23dc <_ZN7MPU605015setZAccelOffsetEs>
  gyrometer->setXGyroOffset(0);
 80a0fb2:	6820      	ldr	r0, [r4, #0]
 80a0fb4:	2100      	movs	r1, #0
 80a0fb6:	f001 fa16 	bl	80a23e6 <_ZN7MPU605014setXGyroOffsetEs>
  gyrometer->setYGyroOffset(0);
 80a0fba:	6820      	ldr	r0, [r4, #0]
 80a0fbc:	2100      	movs	r1, #0
 80a0fbe:	f001 fa17 	bl	80a23f0 <_ZN7MPU605014setYGyroOffsetEs>
  gyrometer->setZGyroOffset(0);
 80a0fc2:	6820      	ldr	r0, [r4, #0]
 80a0fc4:	2100      	movs	r1, #0
}
 80a0fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  gyrometer->setXAccelOffset(0);
  gyrometer->setYAccelOffset(0);
  gyrometer->setZAccelOffset(0);
  gyrometer->setXGyroOffset(0);
  gyrometer->setYGyroOffset(0);
  gyrometer->setZGyroOffset(0);
 80a0fca:	f001 ba16 	b.w	80a23fa <_ZN7MPU605014setZGyroOffsetEs>

080a0fce <_ZN9Gyroscope5beginEv>:
}

void Gyroscope::begin() {
 80a0fce:	4770      	bx	lr

080a0fd0 <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv>:
  m_ptr_acceleration_measurements->ay = gyrometer->getAccelerationY();
  m_ptr_acceleration_measurements->az = gyrometer->getAccelerationZ();
  push_z_axis_value_to_queue(m_ptr_acceleration_measurements->az);
}

void Gyroscope::set_wave_color_indicatior_from_z_axis_measurements() {
 80a0fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool is_first = true;
  int  current  = 0;
  int  min      = -1;
  int  max      = -1;
 80a0fd2:	f04f 33ff 	mov.w	r3, #4294967295
  m_ptr_acceleration_measurements->ay = gyrometer->getAccelerationY();
  m_ptr_acceleration_measurements->az = gyrometer->getAccelerationZ();
  push_z_axis_value_to_queue(m_ptr_acceleration_measurements->az);
}

void Gyroscope::set_wave_color_indicatior_from_z_axis_measurements() {
 80a0fd6:	4604      	mov	r4, r0
  bool is_first = true;
  int  current  = 0;
  int  min      = -1;
 80a0fd8:	461e      	mov	r6, r3
  m_ptr_acceleration_measurements->az = gyrometer->getAccelerationZ();
  push_z_axis_value_to_queue(m_ptr_acceleration_measurements->az);
}

void Gyroscope::set_wave_color_indicatior_from_z_axis_measurements() {
  bool is_first = true;
 80a0fda:	2701      	movs	r7, #1
 80a0fdc:	68e2      	ldr	r2, [r4, #12]
  int  current  = 0;
  int  min      = -1;
  int  max      = -1;

  while (!last_ten_z_axis_measurements_queue.empty()) {
 80a0fde:	69e1      	ldr	r1, [r4, #28]
 80a0fe0:	4291      	cmp	r1, r2
 80a0fe2:	d020      	beq.n	80a1026 <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv+0x56>
      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
 80a0fe4:	6920      	ldr	r0, [r4, #16]
 80a0fe6:	6961      	ldr	r1, [r4, #20]
    current = last_ten_z_axis_measurements_queue.front();
 80a0fe8:	6815      	ldr	r5, [r2, #0]
    if (is_first) {
 80a0fea:	b917      	cbnz	r7, 80a0ff2 <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv+0x22>
      min      = current;
      max      = current;
      is_first = false;
    }

    if (current > max) {
 80a0fec:	42ab      	cmp	r3, r5
 80a0fee:	db06      	blt.n	80a0ffe <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv+0x2e>
 80a0ff0:	e001      	b.n	80a0ff6 <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv+0x26>
  int  current  = 0;
  int  min      = -1;
  int  max      = -1;

  while (!last_ten_z_axis_measurements_queue.empty()) {
    current = last_ten_z_axis_measurements_queue.front();
 80a0ff2:	462b      	mov	r3, r5
 80a0ff4:	462e      	mov	r6, r5
 80a0ff6:	42ae      	cmp	r6, r5
 80a0ff8:	bfa8      	it	ge
 80a0ffa:	462e      	movge	r6, r5
 80a0ffc:	461d      	mov	r5, r3
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 80a0ffe:	1f0b      	subs	r3, r1, #4
 80a1000:	429a      	cmp	r2, r3
 80a1002:	d004      	beq.n	80a100e <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv+0x3e>
	    != this->_M_impl._M_start._M_last - 1)
	  {
	    _Alloc_traits::destroy(this->_M_impl,
	                           this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 80a1004:	3204      	adds	r2, #4
 80a1006:	60e2      	str	r2, [r4, #12]
 80a1008:	2700      	movs	r7, #0
  m_ptr_acceleration_measurements->ay = gyrometer->getAccelerationY();
  m_ptr_acceleration_measurements->az = gyrometer->getAccelerationZ();
  push_z_axis_value_to_queue(m_ptr_acceleration_measurements->az);
}

void Gyroscope::set_wave_color_indicatior_from_z_axis_measurements() {
 80a100a:	462b      	mov	r3, r5
 80a100c:	e7e6      	b.n	80a0fdc <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv+0xc>
 80a100e:	f7ff f84a 	bl	80a00a6 <_ZdlPv>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80a1012:	69a3      	ldr	r3, [r4, #24]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80a1014:	1d1a      	adds	r2, r3, #4
 80a1016:	61a2      	str	r2, [r4, #24]
	_M_first = *__new_node;
 80a1018:	685b      	ldr	r3, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a101a:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 80a101e:	6123      	str	r3, [r4, #16]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a1020:	6162      	str	r2, [r4, #20]
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80a1022:	60e3      	str	r3, [r4, #12]
 80a1024:	e7f0      	b.n	80a1008 <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv+0x38>
    } else if (current < min) {
      min = current;
    }
    last_ten_z_axis_measurements_queue.pop();
  }
  m_ptr_acceleration_measurements->diff_in_z_axis_last_ten_measurements = max - min;
 80a1026:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80a1028:	1b9b      	subs	r3, r3, r6
 80a102a:	6113      	str	r3, [r2, #16]
 80a102c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a102e <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>:
   *
   *  The initial underlying memory layout is a bit complicated...
  */
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 80a102e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1032:	4604      	mov	r4, r0
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);
 80a1034:	09c8      	lsrs	r0, r1, #7
 80a1036:	1c45      	adds	r5, r0, #1
 80a1038:	3003      	adds	r0, #3
 80a103a:	2808      	cmp	r0, #8
 80a103c:	bf38      	it	cc
 80a103e:	2008      	movcc	r0, #8

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80a1040:	6060      	str	r0, [r4, #4]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1042:	0080      	lsls	r0, r0, #2
   *
   *  The initial underlying memory layout is a bit complicated...
  */
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 80a1044:	460f      	mov	r7, r1
 80a1046:	f7ff f82a 	bl	80a009e <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80a104a:	6866      	ldr	r6, [r4, #4]
 80a104c:	4680      	mov	r8, r0
 80a104e:	1b76      	subs	r6, r6, r5
 80a1050:	0876      	lsrs	r6, r6, #1
 80a1052:	eb00 0986 	add.w	r9, r0, r6, lsl #2
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80a1056:	46ca      	mov	sl, r9
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
					   size_t(__num_nodes + 2));
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80a1058:	6020      	str	r0, [r4, #0]
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80a105a:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80a105e:	4555      	cmp	r5, sl
 80a1060:	d906      	bls.n	80a1070 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj+0x42>
 80a1062:	f44f 7000 	mov.w	r0, #512	; 0x200
 80a1066:	f7ff f81a 	bl	80a009e <_Znwj>
	    *__cur = this->_M_allocate_node();
 80a106a:	f84a 0b04 	str.w	r0, [sl], #4
 80a106e:	e7f6      	b.n	80a105e <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj+0x30>
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 80a1070:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80a1074:	f007 077f 	and.w	r7, r7, #127	; 0x7f
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a1078:	f502 7300 	add.w	r3, r2, #512	; 0x200
 80a107c:	6123      	str	r3, [r4, #16]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80a107e:	1f2b      	subs	r3, r5, #4
 80a1080:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
 80a1082:	f855 3c04 	ldr.w	r3, [r5, #-4]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80a1086:	f8c4 9014 	str.w	r9, [r4, #20]
	_M_first = *__new_node;
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a108a:	f503 7100 	add.w	r1, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 80a108e:	61e3      	str	r3, [r4, #28]
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80a1090:	eb03 0387 	add.w	r3, r3, r7, lsl #2
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 80a1094:	60e2      	str	r2, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a1096:	6221      	str	r1, [r4, #32]
	  __throw_exception_again;
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80a1098:	60a2      	str	r2, [r4, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80a109a:	61a3      	str	r3, [r4, #24]
 80a109c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a10a0 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 80a10a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80a10a4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80a10a6:	6805      	ldr	r5, [r0, #0]
 80a10a8:	6843      	ldr	r3, [r0, #4]
 80a10aa:	460f      	mov	r7, r1
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80a10ac:	1b51      	subs	r1, r2, r5
 80a10ae:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
 80a10b2:	2901      	cmp	r1, #1
 80a10b4:	4604      	mov	r4, r0
 80a10b6:	d858      	bhi.n	80a116a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0xca>
    void
    deque<_Tp, _Alloc>::
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80a10b8:	6941      	ldr	r1, [r0, #20]
 80a10ba:	1a56      	subs	r6, r2, r1
 80a10bc:	10b6      	asrs	r6, r6, #2
 80a10be:	3601      	adds	r6, #1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80a10c0:	f106 0801 	add.w	r8, r6, #1

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80a10c4:	ebb3 0f48 	cmp.w	r3, r8, lsl #1
 80a10c8:	d917      	bls.n	80a10fa <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0x5a>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80a10ca:	ebc8 0303 	rsb	r3, r8, r3
 80a10ce:	085b      	lsrs	r3, r3, #1
 80a10d0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
					 - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80a10d4:	42a9      	cmp	r1, r5
 80a10d6:	f102 0204 	add.w	r2, r2, #4
 80a10da:	d904      	bls.n	80a10e6 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0x46>
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 80a10dc:	1a52      	subs	r2, r2, r1
	  if (_Num)
 80a10de:	0893      	lsrs	r3, r2, #2
 80a10e0:	d031      	beq.n	80a1146 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0xa6>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80a10e2:	4628      	mov	r0, r5
 80a10e4:	e006      	b.n	80a10f4 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0x54>
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 80a10e6:	1a52      	subs	r2, r2, r1
	  if (_Num)
 80a10e8:	0893      	lsrs	r3, r2, #2
	    std::copy(this->_M_impl._M_start._M_node,
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80a10ea:	ea4f 0086 	mov.w	r0, r6, lsl #2
 80a10ee:	d02a      	beq.n	80a1146 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0xa6>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80a10f0:	1a80      	subs	r0, r0, r2
 80a10f2:	4428      	add	r0, r5
 80a10f4:	f007 fd32 	bl	80a8b5c <memmove>
 80a10f8:	e025      	b.n	80a1146 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0xa6>
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
 80a10fa:	2b00      	cmp	r3, #0
 80a10fc:	bf14      	ite	ne
 80a10fe:	4699      	movne	r9, r3
 80a1100:	f04f 0901 	moveq.w	r9, #1
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;
 80a1104:	3302      	adds	r3, #2
 80a1106:	4499      	add	r9, r3
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
 80a1108:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80a110c:	d301      	bcc.n	80a1112 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0x72>
	  std::__throw_bad_alloc();
 80a110e:	f005 fe82 	bl	80a6e16 <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1112:	ea4f 0089 	mov.w	r0, r9, lsl #2
 80a1116:	f7fe ffc2 	bl	80a009e <_Znwj>
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 80a111a:	6a62      	ldr	r2, [r4, #36]	; 0x24

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
 80a111c:	6961      	ldr	r1, [r4, #20]
 80a111e:	3204      	adds	r2, #4
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80a1120:	ebc8 0509 	rsb	r5, r8, r9
 80a1124:	1a52      	subs	r2, r2, r1
 80a1126:	086d      	lsrs	r5, r5, #1
	  if (_Num)
 80a1128:	0893      	lsrs	r3, r2, #2
 80a112a:	4682      	mov	sl, r0
 80a112c:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80a1130:	d002      	beq.n	80a1138 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0x98>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80a1132:	4628      	mov	r0, r5
 80a1134:	f007 fd12 	bl	80a8b5c <memmove>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1138:	6820      	ldr	r0, [r4, #0]
 80a113a:	f7fe ffb4 	bl	80a00a6 <_ZdlPv>
	  std::copy(this->_M_impl._M_start._M_node,
		    this->_M_impl._M_finish._M_node + 1,
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

	  this->_M_impl._M_map = __new_map;
 80a113e:	f8c4 a000 	str.w	sl, [r4]
	  this->_M_impl._M_map_size = __new_map_size;
 80a1142:	f8c4 9004 	str.w	r9, [r4, #4]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80a1146:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
 80a1148:	682b      	ldr	r3, [r5, #0]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80a114a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80a114e:	60e3      	str	r3, [r4, #12]
 80a1150:	3e01      	subs	r6, #1
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a1152:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80a1156:	6123      	str	r3, [r4, #16]
 80a1158:	eb05 0386 	add.w	r3, r5, r6, lsl #2
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80a115c:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
 80a115e:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 80a1162:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a1164:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80a1168:	6223      	str	r3, [r4, #32]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a116a:	f44f 7000 	mov.w	r0, #512	; 0x200
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80a116e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a1170:	f7fe ff95 	bl	80a009e <_Znwj>
 80a1174:	6068      	str	r0, [r5, #4]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 80a1176:	69a3      	ldr	r3, [r4, #24]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a1178:	683a      	ldr	r2, [r7, #0]
 80a117a:	b103      	cbz	r3, 80a117e <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0xde>
 80a117c:	601a      	str	r2, [r3, #0]
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
						+ 1);
 80a117e:	6a63      	ldr	r3, [r4, #36]	; 0x24
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80a1180:	1d1a      	adds	r2, r3, #4
 80a1182:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
 80a1184:	685b      	ldr	r3, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a1186:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 80a118a:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a118c:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80a118e:	61a3      	str	r3, [r4, #24]
 80a1190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a1194 <_ZNSt5dequeIiSaIiEE9push_backERKi>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 80a1194:	b538      	push	{r3, r4, r5, lr}
      {
	if (this->_M_impl._M_finish._M_cur
 80a1196:	6a04      	ldr	r4, [r0, #32]
	    != this->_M_impl._M_finish._M_last - 1)
 80a1198:	6982      	ldr	r2, [r0, #24]
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 80a119a:	3c04      	subs	r4, #4
 80a119c:	42a2      	cmp	r2, r4
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 80a119e:	4603      	mov	r3, r0
      {
	if (this->_M_impl._M_finish._M_cur
 80a11a0:	d006      	beq.n	80a11b0 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
 80a11a2:	6809      	ldr	r1, [r1, #0]
 80a11a4:	b102      	cbz	r2, 80a11a8 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x14>
 80a11a6:	6011      	str	r1, [r2, #0]
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 80a11a8:	699a      	ldr	r2, [r3, #24]
 80a11aa:	3204      	adds	r2, #4
 80a11ac:	619a      	str	r2, [r3, #24]
 80a11ae:	bd38      	pop	{r3, r4, r5, pc}
	  }
	else
	  _M_push_back_aux(__x);
 80a11b0:	f7ff ff76 	bl	80a10a0 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_>
 80a11b4:	bd38      	pop	{r3, r4, r5, pc}

080a11b6 <_ZN9Gyroscope20readValuesFromSensorEv>:

void Gyroscope::push_z_axis_value_to_queue(int az) {
  last_ten_z_axis_measurements_queue.push(az);
}

void Gyroscope::readValuesFromSensor() {
 80a11b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a11b8:	4604      	mov	r4, r0
  m_ptr_acceleration_measurements->ax = gyrometer->getAccelerationX();
 80a11ba:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80a11bc:	6800      	ldr	r0, [r0, #0]
 80a11be:	f001 f8a3 	bl	80a2308 <_ZN7MPU605016getAccelerationXEv>
 80a11c2:	6028      	str	r0, [r5, #0]
  m_ptr_acceleration_measurements->ay = gyrometer->getAccelerationY();
 80a11c4:	6820      	ldr	r0, [r4, #0]
 80a11c6:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80a11c8:	f001 f8b2 	bl	80a2330 <_ZN7MPU605016getAccelerationYEv>
 80a11cc:	6068      	str	r0, [r5, #4]
  m_ptr_acceleration_measurements->az = gyrometer->getAccelerationZ();
 80a11ce:	6820      	ldr	r0, [r4, #0]
 80a11d0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80a11d2:	f001 f8c1 	bl	80a2358 <_ZN7MPU605016getAccelerationZEv>
 80a11d6:	60a8      	str	r0, [r5, #8]
  push_z_axis_value_to_queue(m_ptr_acceleration_measurements->az);
 80a11d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a11da:	a902      	add	r1, sp, #8
 80a11dc:	689b      	ldr	r3, [r3, #8]
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
      { c.push_back(__x); }
 80a11de:	1d20      	adds	r0, r4, #4
 80a11e0:	f841 3d04 	str.w	r3, [r1, #-4]!
 80a11e4:	f7ff ffd6 	bl	80a1194 <_ZNSt5dequeIiSaIiEE9push_backERKi>
}
 80a11e8:	b003      	add	sp, #12
 80a11ea:	bd30      	pop	{r4, r5, pc}

080a11ec <_ZSt4swapISt15_Deque_iteratorIiRiPiEEvRT_S5_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a11ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a11ee:	4605      	mov	r5, r0
      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
 80a11f0:	e890 5000 	ldmia.w	r0, {ip, lr}
 80a11f4:	460c      	mov	r4, r1
 80a11f6:	6887      	ldr	r7, [r0, #8]
 80a11f8:	68c6      	ldr	r6, [r0, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a11fa:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 80a11fc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1200:	e884 5000 	stmia.w	r4, {ip, lr}
 80a1204:	60a7      	str	r7, [r4, #8]
 80a1206:	60e6      	str	r6, [r4, #12]
 80a1208:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a120a <_ZN9GyroscopeC1EP25acceleration_measurements>:
#include "gyroscope.h"
#include "MPU6050.h"
#include "application.h"

Gyroscope::Gyroscope(struct acceleration_measurements *acceleration_measurements) {
 80a120a:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a120c:	4605      	mov	r5, r0
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 80a120e:	2400      	movs	r4, #0
 80a1210:	b08b      	sub	sp, #44	; 0x2c
      typedef _Deque_iterator<_Tp, _Tp&, _Ptr>          iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;

      _Deque_base()
      : _M_impl()
      { _M_initialize_map(0); }
 80a1212:	4668      	mov	r0, sp
 80a1214:	460f      	mov	r7, r1
 80a1216:	4621      	mov	r1, r4
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 80a1218:	9400      	str	r4, [sp, #0]
 80a121a:	9401      	str	r4, [sp, #4]
      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80a121c:	9402      	str	r4, [sp, #8]
 80a121e:	9403      	str	r4, [sp, #12]
 80a1220:	9404      	str	r4, [sp, #16]
 80a1222:	9405      	str	r4, [sp, #20]
 80a1224:	9406      	str	r4, [sp, #24]
 80a1226:	9407      	str	r4, [sp, #28]
 80a1228:	9408      	str	r4, [sp, #32]
 80a122a:	9409      	str	r4, [sp, #36]	; 0x24
      typedef _Deque_iterator<_Tp, _Tp&, _Ptr>          iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;

      _Deque_base()
      : _M_impl()
      { _M_initialize_map(0); }
 80a122c:	f7ff feff 	bl	80a102e <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>
#if __cplusplus >= 201103L
	_Deque_impl(_Deque_impl&&) = default;

	_Deque_impl(_Tp_alloc_type&& __a) noexcept
	: _Tp_alloc_type(std::move(__a)), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 80a1230:	606c      	str	r4, [r5, #4]
 80a1232:	60ac      	str	r4, [r5, #8]
      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80a1234:	60ec      	str	r4, [r5, #12]
 80a1236:	612c      	str	r4, [r5, #16]
 80a1238:	616c      	str	r4, [r5, #20]
 80a123a:	61ac      	str	r4, [r5, #24]
 80a123c:	61ec      	str	r4, [r5, #28]
 80a123e:	622c      	str	r4, [r5, #32]
 80a1240:	626c      	str	r4, [r5, #36]	; 0x24
 80a1242:	62ac      	str	r4, [r5, #40]	; 0x28
      { }

      _Deque_base(_Deque_base&& __x, true_type)
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      {
	_M_initialize_map(0);
 80a1244:	4621      	mov	r1, r4
 80a1246:	1d28      	adds	r0, r5, #4
 80a1248:	f7ff fef1 	bl	80a102e <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>
	if (__x._M_impl._M_map)
 80a124c:	9b00      	ldr	r3, [sp, #0]
 80a124e:	b18b      	cbz	r3, 80a1274 <_ZN9GyroscopeC1EP25acceleration_measurements+0x6a>
#endif

	void _M_swap_data(_Deque_impl& __x) _GLIBCXX_NOEXCEPT
	{
	  using std::swap;
	  swap(this->_M_start, __x._M_start);
 80a1250:	a902      	add	r1, sp, #8
 80a1252:	f105 000c 	add.w	r0, r5, #12
 80a1256:	f7ff ffc9 	bl	80a11ec <_ZSt4swapISt15_Deque_iteratorIiRiPiEEvRT_S5_>
	  swap(this->_M_finish, __x._M_finish);
 80a125a:	a906      	add	r1, sp, #24
 80a125c:	f105 001c 	add.w	r0, r5, #28
 80a1260:	f7ff ffc4 	bl	80a11ec <_ZSt4swapISt15_Deque_iteratorIiRiPiEEvRT_S5_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1264:	686b      	ldr	r3, [r5, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a1266:	9a00      	ldr	r2, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1268:	9300      	str	r3, [sp, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a126a:	606a      	str	r2, [r5, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a126c:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a126e:	9a01      	ldr	r2, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1270:	9301      	str	r3, [sp, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1272:	60aa      	str	r2, [r5, #8]

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 80a1274:	9b00      	ldr	r3, [sp, #0]
      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
 80a1276:	9c05      	ldr	r4, [sp, #20]
 80a1278:	9e09      	ldr	r6, [sp, #36]	; 0x24

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 80a127a:	b153      	cbz	r3, 80a1292 <_ZN9GyroscopeC1EP25acceleration_measurements+0x88>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80a127c:	3604      	adds	r6, #4
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80a127e:	42a6      	cmp	r6, r4
 80a1280:	d904      	bls.n	80a128c <_ZN9GyroscopeC1EP25acceleration_measurements+0x82>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1282:	f854 0b04 	ldr.w	r0, [r4], #4
 80a1286:	f7fe ff0e 	bl	80a00a6 <_ZdlPv>
 80a128a:	e7f8      	b.n	80a127e <_ZN9GyroscopeC1EP25acceleration_measurements+0x74>
 80a128c:	9800      	ldr	r0, [sp, #0]
 80a128e:	f7fe ff0a 	bl	80a00a6 <_ZdlPv>
  m_ptr_acceleration_measurements = acceleration_measurements;
 80a1292:	62ef      	str	r7, [r5, #44]	; 0x2c
  gyrometer                       = new MPU6050();
 80a1294:	200f      	movs	r0, #15
 80a1296:	f7fe ff02 	bl	80a009e <_Znwj>
 80a129a:	4604      	mov	r4, r0
 80a129c:	b108      	cbz	r0, 80a12a2 <_ZN9GyroscopeC1EP25acceleration_measurements+0x98>
 80a129e:	f001 f819 	bl	80a22d4 <_ZN7MPU6050C1Ev>
  setup();
 80a12a2:	4628      	mov	r0, r5
#include "MPU6050.h"
#include "application.h"

Gyroscope::Gyroscope(struct acceleration_measurements *acceleration_measurements) {
  m_ptr_acceleration_measurements = acceleration_measurements;
  gyrometer                       = new MPU6050();
 80a12a4:	602c      	str	r4, [r5, #0]
  setup();
 80a12a6:	f7ff fe6f 	bl	80a0f88 <_ZN9Gyroscope5setupEv>
}
 80a12aa:	4628      	mov	r0, r5
 80a12ac:	b00b      	add	sp, #44	; 0x2c
 80a12ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a12b0 <_GLOBAL__sub_I__ZN9GyroscopeC2EP25acceleration_measurements>:
 80a12b0:	f002 be34 	b.w	80a3f1c <HAL_Pin_Map>

080a12b4 <_ZN3TFT5setupEv>:
  m_ptr_acceleration_measurements = ptr_acceleration_measurements;
  m_ptr_calibration               = ptr_calibration;
  setup();
}

void TFT::setup() {
 80a12b4:	b570      	push	{r4, r5, r6, lr}
 80a12b6:	4604      	mov	r4, r0
  algorithmAnimation               = new AlgorithmAnimation(adafruit, 10);
 80a12b8:	200c      	movs	r0, #12
 80a12ba:	f7fe fef0 	bl	80a009e <_Znwj>
 80a12be:	4605      	mov	r5, r0
 80a12c0:	b118      	cbz	r0, 80a12ca <_ZN3TFT5setupEv+0x16>
 80a12c2:	220a      	movs	r2, #10
 80a12c4:	6821      	ldr	r1, [r4, #0]
 80a12c6:	f7ff fd6f 	bl	80a0da8 <_ZN18AlgorithmAnimationC1EP15Adafruit_ST7735h>
  adafruit->initG();
 80a12ca:	6820      	ldr	r0, [r4, #0]
  m_ptr_calibration               = ptr_calibration;
  setup();
}

void TFT::setup() {
  algorithmAnimation               = new AlgorithmAnimation(adafruit, 10);
 80a12cc:	6125      	str	r5, [r4, #16]
  adafruit->initG();
 80a12ce:	f000 fc79 	bl	80a1bc4 <_ZN15Adafruit_ST77355initGEv>
  adafruit->fillScreen(ST7735_BLACK);
 80a12d2:	6820      	ldr	r0, [r4, #0]
 80a12d4:	2100      	movs	r1, #0
 80a12d6:	6803      	ldr	r3, [r0, #0]
 80a12d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a12da:	4798      	blx	r3
  adafruit->setRotation(3);
 80a12dc:	6820      	ldr	r0, [r4, #0]
 80a12de:	2103      	movs	r1, #3
 80a12e0:	f000 fdb6 	bl	80a1e50 <_ZN15Adafruit_ST773511setRotationEh>
  adafruit->invertDisplay(1);
 80a12e4:	6820      	ldr	r0, [r4, #0]
 80a12e6:	2101      	movs	r1, #1
 80a12e8:	6803      	ldr	r3, [r0, #0]
  adafruit->setTextSize(2);
  adafruit->setCursor(35, 35);
  adafruit->setTextColor(ST7735_YELLOW);
  adafruit->setTextWrap(true);
  adafruit->print("STARTING"); */
}
 80a12ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
void TFT::setup() {
  algorithmAnimation               = new AlgorithmAnimation(adafruit, 10);
  adafruit->initG();
  adafruit->fillScreen(ST7735_BLACK);
  adafruit->setRotation(3);
  adafruit->invertDisplay(1);
 80a12ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a12f0:	4718      	bx	r3

080a12f2 <_ZN3TFTC1EP12temperaturesP25acceleration_measurementsP12calibrations>:
#define Y_OFFSET_SIZE_2 32

#define LINE_HEIGHT_TEXT_SIZE_1 10
#define LINE_HEIGHT_TEXT_SIZE_2 20

TFT::TFT(struct temperatures *ptr_temperaure, struct acceleration_measurements *ptr_acceleration_measurements, struct calibrations *ptr_calibration) {
 80a12f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a12f6:	4604      	mov	r4, r0
  adafruit                        = new Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);
 80a12f8:	2030      	movs	r0, #48	; 0x30
#define Y_OFFSET_SIZE_2 32

#define LINE_HEIGHT_TEXT_SIZE_1 10
#define LINE_HEIGHT_TEXT_SIZE_2 20

TFT::TFT(struct temperatures *ptr_temperaure, struct acceleration_measurements *ptr_acceleration_measurements, struct calibrations *ptr_calibration) {
 80a12fa:	460f      	mov	r7, r1
 80a12fc:	4616      	mov	r6, r2
 80a12fe:	461d      	mov	r5, r3
  adafruit                        = new Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);
 80a1300:	f7fe fecd 	bl	80a009e <_Znwj>
 80a1304:	4680      	mov	r8, r0
 80a1306:	b120      	cbz	r0, 80a1312 <_ZN3TFTC1EP12temperaturesP25acceleration_measurementsP12calibrations+0x20>
 80a1308:	230a      	movs	r3, #10
 80a130a:	220b      	movs	r2, #11
 80a130c:	210c      	movs	r1, #12
 80a130e:	f000 fb7b 	bl	80a1a08 <_ZN15Adafruit_ST7735C1Ehhh>
  m_ptr_temperatures              = ptr_temperaure;
  m_ptr_acceleration_measurements = ptr_acceleration_measurements;
  m_ptr_calibration               = ptr_calibration;
  setup();
 80a1312:	4620      	mov	r0, r4

#define LINE_HEIGHT_TEXT_SIZE_1 10
#define LINE_HEIGHT_TEXT_SIZE_2 20

TFT::TFT(struct temperatures *ptr_temperaure, struct acceleration_measurements *ptr_acceleration_measurements, struct calibrations *ptr_calibration) {
  adafruit                        = new Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);
 80a1314:	f8c4 8000 	str.w	r8, [r4]
  m_ptr_temperatures              = ptr_temperaure;
 80a1318:	6067      	str	r7, [r4, #4]
  m_ptr_acceleration_measurements = ptr_acceleration_measurements;
 80a131a:	60a6      	str	r6, [r4, #8]
  m_ptr_calibration               = ptr_calibration;
 80a131c:	60e5      	str	r5, [r4, #12]
  setup();
 80a131e:	f7ff ffc9 	bl	80a12b4 <_ZN3TFT5setupEv>
}
 80a1322:	4620      	mov	r0, r4
 80a1324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1328 <_ZN3TFT5beginEv>:
  adafruit->setTextColor(ST7735_YELLOW);
  adafruit->setTextWrap(true);
  adafruit->print("STARTING"); */
}

void TFT::begin() {
 80a1328:	b510      	push	{r4, lr}
 80a132a:	4604      	mov	r4, r0
  algorithmAnimation->begin();
 80a132c:	6900      	ldr	r0, [r0, #16]
 80a132e:	f7ff fdc3 	bl	80a0eb8 <_ZN18AlgorithmAnimation5beginEv>
  Time.zone(m_ptr_calibration->time);
 80a1332:	68e3      	ldr	r3, [r4, #12]
 80a1334:	6998      	ldr	r0, [r3, #24]
 80a1336:	f006 feb1 	bl	80a809c <__aeabi_i2f>
}
 80a133a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  adafruit->print("STARTING"); */
}

void TFT::begin() {
  algorithmAnimation->begin();
  Time.zone(m_ptr_calibration->time);
 80a133e:	f004 b8d1 	b.w	80a54e4 <_ZN9TimeClass4zoneEf>
	...

080a1344 <_ZN3TFT8drawTimeEv>:
}

void TFT::drawTime() {
 80a1344:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a1346:	4604      	mov	r4, r0
  adafruit->setTextSize(TIME_TEXT_SIZE);
 80a1348:	2101      	movs	r1, #1
 80a134a:	6800      	ldr	r0, [r0, #0]
 80a134c:	f000 fb33 	bl	80a19b6 <_ZN12Adafruit_GFX11setTextSizeEh>
  adafruit->setCursor(45, 30);
 80a1350:	6820      	ldr	r0, [r4, #0]
 80a1352:	221e      	movs	r2, #30
 80a1354:	212d      	movs	r1, #45	; 0x2d
 80a1356:	f000 fb2b 	bl	80a19b0 <_ZN12Adafruit_GFX9setCursorEss>
  adafruit->setTextColor(ST7735_WHITE, ST7735_BLACK);
 80a135a:	2200      	movs	r2, #0
 80a135c:	6820      	ldr	r0, [r4, #0]
 80a135e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1362:	f000 fb2d 	bl	80a19c0 <_ZN12Adafruit_GFX12setTextColorEtt>
  adafruit->setTextWrap(true);
 80a1366:	2101      	movs	r1, #1
 80a1368:	6820      	ldr	r0, [r4, #0]
 80a136a:	f000 fb2c 	bl	80a19c6 <_ZN12Adafruit_GFX11setTextWrapEb>
  adafruit->print(Time.format(Time.now(), "%H:%M %Y"));
 80a136e:	6824      	ldr	r4, [r4, #0]
 80a1370:	f004 f9a7 	bl	80a56c2 <_ZN9TimeClass3nowEv>
 80a1374:	4b07      	ldr	r3, [pc, #28]	; (80a1394 <_ZN3TFT8drawTimeEv+0x50>)
 80a1376:	4602      	mov	r2, r0
 80a1378:	4907      	ldr	r1, [pc, #28]	; (80a1398 <_ZN3TFT8drawTimeEv+0x54>)
 80a137a:	4668      	mov	r0, sp
 80a137c:	f004 f94e 	bl	80a561c <_ZN9TimeClass6formatElPKc>
 80a1380:	9900      	ldr	r1, [sp, #0]
 80a1382:	4620      	mov	r0, r4
 80a1384:	f005 f996 	bl	80a66b4 <_ZN5Print5printEPKc>
 80a1388:	4668      	mov	r0, sp
 80a138a:	f005 fba7 	bl	80a6adc <_ZN6StringD1Ev>
}
 80a138e:	b004      	add	sp, #16
 80a1390:	bd10      	pop	{r4, pc}
 80a1392:	bf00      	nop
 80a1394:	080abdcc 	.word	0x080abdcc
 80a1398:	200005bc 	.word	0x200005bc

080a139c <_ZN3TFT11clearScreenEv>:

void TFT::clearScreen() { adafruit->fillScreen(ST7735_BLACK); }
 80a139c:	6800      	ldr	r0, [r0, #0]
 80a139e:	2100      	movs	r1, #0
 80a13a0:	6803      	ldr	r3, [r0, #0]
 80a13a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a13a4:	4718      	bx	r3
	...

080a13a8 <_ZN3TFT7drawAccEv>:

void TFT::drawAcc() {
 80a13a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a13ac:	4604      	mov	r4, r0
  adafruit->setTextSize(ACC_TEXT_SIZE);
 80a13ae:	2101      	movs	r1, #1
 80a13b0:	6800      	ldr	r0, [r0, #0]
 80a13b2:	f000 fb00 	bl	80a19b6 <_ZN12Adafruit_GFX11setTextSizeEh>
  adafruit->setTextColor(ST7735_WHITE, ST7735_BLACK);
 80a13b6:	2200      	movs	r2, #0
 80a13b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a13bc:	6820      	ldr	r0, [r4, #0]
 80a13be:	f000 faff 	bl	80a19c0 <_ZN12Adafruit_GFX12setTextColorEtt>
  adafruit->setTextWrap(true);
 80a13c2:	2101      	movs	r1, #1
 80a13c4:	6820      	ldr	r0, [r4, #0]
 80a13c6:	f000 fafe 	bl	80a19c6 <_ZN12Adafruit_GFX11setTextWrapEb>
 80a13ca:	263a      	movs	r6, #58	; 0x3a

  const char *key;
  int         current;

  for (int i = 0; i < 3; i++) {
 80a13cc:	2500      	movs	r5, #0
    switch (i) {
 80a13ce:	2d01      	cmp	r5, #1
 80a13d0:	68a3      	ldr	r3, [r4, #8]
 80a13d2:	d005      	beq.n	80a13e0 <_ZN3TFT7drawAccEv+0x38>
 80a13d4:	2d02      	cmp	r5, #2
 80a13d6:	d007      	beq.n	80a13e8 <_ZN3TFT7drawAccEv+0x40>
    case 0:
      key     = "ax:";
      current = m_ptr_acceleration_measurements->ax;
 80a13d8:	681a      	ldr	r2, [r3, #0]
  int         current;

  for (int i = 0; i < 3; i++) {
    switch (i) {
    case 0:
      key     = "ax:";
 80a13da:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80a1434 <_ZN3TFT7drawAccEv+0x8c>
      current = m_ptr_acceleration_measurements->ax;
      break;
 80a13de:	e006      	b.n	80a13ee <_ZN3TFT7drawAccEv+0x46>
    case 1:
      key     = "ay:";
      current = m_ptr_acceleration_measurements->ay;
 80a13e0:	685a      	ldr	r2, [r3, #4]
    case 0:
      key     = "ax:";
      current = m_ptr_acceleration_measurements->ax;
      break;
    case 1:
      key     = "ay:";
 80a13e2:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80a1438 <_ZN3TFT7drawAccEv+0x90>
      current = m_ptr_acceleration_measurements->ay;
      break;
 80a13e6:	e002      	b.n	80a13ee <_ZN3TFT7drawAccEv+0x46>
    case 2:
      key     = "az:";
      current = m_ptr_acceleration_measurements->az;
 80a13e8:	689a      	ldr	r2, [r3, #8]
    case 1:
      key     = "ay:";
      current = m_ptr_acceleration_measurements->ay;
      break;
    case 2:
      key     = "az:";
 80a13ea:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80a143c <_ZN3TFT7drawAccEv+0x94>
      break;
    default:
      key = "error";
      break;
    }
    sprintf(buffer, "%6d", current);
 80a13ee:	f104 0714 	add.w	r7, r4, #20

    adafruit->setCursor(8, Y_OFFSET_SIZE_1 + (i + 1) * LINE_HEIGHT_TEXT_SIZE_1);
 80a13f2:	fa0f f986 	sxth.w	r9, r6
      break;
    default:
      key = "error";
      break;
    }
    sprintf(buffer, "%6d", current);
 80a13f6:	490e      	ldr	r1, [pc, #56]	; (80a1430 <_ZN3TFT7drawAccEv+0x88>)
 80a13f8:	4638      	mov	r0, r7
 80a13fa:	f002 fedb 	bl	80a41b4 <sprintf>

    adafruit->setCursor(8, Y_OFFSET_SIZE_1 + (i + 1) * LINE_HEIGHT_TEXT_SIZE_1);
 80a13fe:	464a      	mov	r2, r9
 80a1400:	2108      	movs	r1, #8
 80a1402:	6820      	ldr	r0, [r4, #0]
 80a1404:	f000 fad4 	bl	80a19b0 <_ZN12Adafruit_GFX9setCursorEss>
    adafruit->print(key);
 80a1408:	4641      	mov	r1, r8
 80a140a:	6820      	ldr	r0, [r4, #0]
 80a140c:	f005 f952 	bl	80a66b4 <_ZN5Print5printEPKc>

    adafruit->setCursor(32, Y_OFFSET_SIZE_1 + (i + 1) * LINE_HEIGHT_TEXT_SIZE_1);
 80a1410:	464a      	mov	r2, r9
 80a1412:	2120      	movs	r1, #32
 80a1414:	6820      	ldr	r0, [r4, #0]
 80a1416:	f000 facb 	bl	80a19b0 <_ZN12Adafruit_GFX9setCursorEss>
      key = "error";
      break;
    }
    sprintf(buffer, "%6d", current);

    adafruit->setCursor(8, Y_OFFSET_SIZE_1 + (i + 1) * LINE_HEIGHT_TEXT_SIZE_1);
 80a141a:	3501      	adds	r5, #1
    adafruit->print(key);

    adafruit->setCursor(32, Y_OFFSET_SIZE_1 + (i + 1) * LINE_HEIGHT_TEXT_SIZE_1);
    adafruit->print(buffer);
 80a141c:	4639      	mov	r1, r7
 80a141e:	6820      	ldr	r0, [r4, #0]
 80a1420:	f005 f948 	bl	80a66b4 <_ZN5Print5printEPKc>
 80a1424:	360a      	adds	r6, #10
  adafruit->setTextWrap(true);

  const char *key;
  int         current;

  for (int i = 0; i < 3; i++) {
 80a1426:	2d03      	cmp	r5, #3
 80a1428:	b2b6      	uxth	r6, r6
 80a142a:	d1d0      	bne.n	80a13ce <_ZN3TFT7drawAccEv+0x26>
    adafruit->print(key);

    adafruit->setCursor(32, Y_OFFSET_SIZE_1 + (i + 1) * LINE_HEIGHT_TEXT_SIZE_1);
    adafruit->print(buffer);
  }
}
 80a142c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1430:	080abde1 	.word	0x080abde1
 80a1434:	080abdd5 	.word	0x080abdd5
 80a1438:	080abdd9 	.word	0x080abdd9
 80a143c:	080abddd 	.word	0x080abddd

080a1440 <_ZN3TFT23drawWaveIndicationColorEv>:

void TFT::drawWaveIndicationColor() {
 80a1440:	b513      	push	{r0, r1, r4, lr}
 80a1442:	4604      	mov	r4, r0
  uint16_t colorBasedOnDiffInAcc;

  adafruit->setTextSize(1);
 80a1444:	2101      	movs	r1, #1
 80a1446:	6800      	ldr	r0, [r0, #0]
 80a1448:	f000 fab5 	bl	80a19b6 <_ZN12Adafruit_GFX11setTextSizeEh>
  adafruit->setTextColor(ST7735_WHITE, ST7735_BLACK);
 80a144c:	2200      	movs	r2, #0
 80a144e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1452:	6820      	ldr	r0, [r4, #0]
 80a1454:	f000 fab4 	bl	80a19c0 <_ZN12Adafruit_GFX12setTextColorEtt>
  adafruit->setCursor(95, 45);
 80a1458:	222d      	movs	r2, #45	; 0x2d
 80a145a:	215f      	movs	r1, #95	; 0x5f
 80a145c:	6820      	ldr	r0, [r4, #0]
 80a145e:	f000 faa7 	bl	80a19b0 <_ZN12Adafruit_GFX9setCursorEss>
  adafruit->print("Waves");
 80a1462:	4911      	ldr	r1, [pc, #68]	; (80a14a8 <_ZN3TFT23drawWaveIndicationColorEv+0x68>)
 80a1464:	6820      	ldr	r0, [r4, #0]
 80a1466:	f005 f925 	bl	80a66b4 <_ZN5Print5printEPKc>
  Calm water: green indication
  Middle calm water: yellow indication
  Messy water: red indication
  */

  if (m_ptr_acceleration_measurements->diff_in_z_axis_last_ten_measurements > 5000) {
 80a146a:	f241 3288 	movw	r2, #5000	; 0x1388
 80a146e:	68a3      	ldr	r3, [r4, #8]
 80a1470:	691b      	ldr	r3, [r3, #16]
 80a1472:	4293      	cmp	r3, r2
 80a1474:	dc09      	bgt.n	80a148a <_ZN3TFT23drawWaveIndicationColorEv+0x4a>
    colorBasedOnDiffInAcc = ST7735_RED;
  } else if (m_ptr_acceleration_measurements->diff_in_z_axis_last_ten_measurements > 1500) {
    colorBasedOnDiffInAcc = ST7735_YELLOW;
  } else {
    colorBasedOnDiffInAcc = ST7735_GREEN;
 80a1476:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80a147a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a147e:	428b      	cmp	r3, r1
 80a1480:	bfcc      	ite	gt
 80a1482:	4613      	movgt	r3, r2
 80a1484:	f44f 63fc 	movle.w	r3, #2016	; 0x7e0
 80a1488:	e001      	b.n	80a148e <_ZN3TFT23drawWaveIndicationColorEv+0x4e>
  Middle calm water: yellow indication
  Messy water: red indication
  */

  if (m_ptr_acceleration_measurements->diff_in_z_axis_last_ten_measurements > 5000) {
    colorBasedOnDiffInAcc = ST7735_RED;
 80a148a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
  } else if (m_ptr_acceleration_measurements->diff_in_z_axis_last_ten_measurements > 1500) {
    colorBasedOnDiffInAcc = ST7735_YELLOW;
  } else {
    colorBasedOnDiffInAcc = ST7735_GREEN;
  }
  adafruit->fillRect(78, 60, 70, 40, colorBasedOnDiffInAcc);
 80a148e:	6820      	ldr	r0, [r4, #0]
 80a1490:	214e      	movs	r1, #78	; 0x4e
 80a1492:	6802      	ldr	r2, [r0, #0]
 80a1494:	9301      	str	r3, [sp, #4]
 80a1496:	2328      	movs	r3, #40	; 0x28
 80a1498:	9300      	str	r3, [sp, #0]
 80a149a:	6a54      	ldr	r4, [r2, #36]	; 0x24
 80a149c:	2346      	movs	r3, #70	; 0x46
 80a149e:	223c      	movs	r2, #60	; 0x3c
 80a14a0:	47a0      	blx	r4
}
 80a14a2:	b002      	add	sp, #8
 80a14a4:	bd10      	pop	{r4, pc}
 80a14a6:	bf00      	nop
 80a14a8:	080abde5 	.word	0x080abde5

080a14ac <_ZN3TFT19drawTempAndHumidityEv>:

void TFT::drawTempAndHumidity() {
 80a14ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a14b0:	4604      	mov	r4, r0
  adafruit->setTextSize(TEMP_TEXT_SIZE);
 80a14b2:	2102      	movs	r1, #2
 80a14b4:	6800      	ldr	r0, [r0, #0]
 80a14b6:	f000 fa7e 	bl	80a19b6 <_ZN12Adafruit_GFX11setTextSizeEh>
  adafruit->setTextColor(ST7735_WHITE, ST7735_BLACK);
 80a14ba:	2200      	movs	r2, #0
 80a14bc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a14c0:	6820      	ldr	r0, [r4, #0]
 80a14c2:	f000 fa7d 	bl	80a19c0 <_ZN12Adafruit_GFX12setTextColorEtt>
  adafruit->setTextWrap(true);
 80a14c6:	2101      	movs	r1, #1
 80a14c8:	6820      	ldr	r0, [r4, #0]
 80a14ca:	f000 fa7c 	bl	80a19c6 <_ZN12Adafruit_GFX11setTextWrapEb>
 80a14ce:	2634      	movs	r6, #52	; 0x34

  const char *key;
  double      current;

  for (int i = 0; i < 3; i++) {
 80a14d0:	2500      	movs	r5, #0
    switch (i) {
 80a14d2:	2d01      	cmp	r5, #1
 80a14d4:	6863      	ldr	r3, [r4, #4]
 80a14d6:	d006      	beq.n	80a14e6 <_ZN3TFT19drawTempAndHumidityEv+0x3a>
 80a14d8:	2d02      	cmp	r5, #2
 80a14da:	d009      	beq.n	80a14f0 <_ZN3TFT19drawTempAndHumidityEv+0x44>
    case 0:
      key     = "Water:";
      current = m_ptr_temperatures->currentWaterTemp;
 80a14dc:	e9d3 2300 	ldrd	r2, r3, [r3]
  double      current;

  for (int i = 0; i < 3; i++) {
    switch (i) {
    case 0:
      key     = "Water:";
 80a14e0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80a1540 <_ZN3TFT19drawTempAndHumidityEv+0x94>
      current = m_ptr_temperatures->currentWaterTemp;
      break;
 80a14e4:	e008      	b.n	80a14f8 <_ZN3TFT19drawTempAndHumidityEv+0x4c>
    case 1:
      key     = "Air:";
      current = m_ptr_temperatures->currentOnLandTemperature;
 80a14e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    case 0:
      key     = "Water:";
      current = m_ptr_temperatures->currentWaterTemp;
      break;
    case 1:
      key     = "Air:";
 80a14ea:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80a1544 <_ZN3TFT19drawTempAndHumidityEv+0x98>
      current = m_ptr_temperatures->currentOnLandTemperature;
      break;
 80a14ee:	e003      	b.n	80a14f8 <_ZN3TFT19drawTempAndHumidityEv+0x4c>
    case 2:
      key     = "Humid:";
 80a14f0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80a1548 <_ZN3TFT19drawTempAndHumidityEv+0x9c>
      current = m_ptr_temperatures->currentOnLandHumidity;
 80a14f4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    default:
      key = "error";
      break;
    }

    sprintf(buffer, "%0.1f", current);
 80a14f8:	f104 0714 	add.w	r7, r4, #20

    adafruit->setCursor(8, Y_OFFSET_SIZE_2 + (i + 1) * LINE_HEIGHT_TEXT_SIZE_2);
 80a14fc:	fa0f f986 	sxth.w	r9, r6
    default:
      key = "error";
      break;
    }

    sprintf(buffer, "%0.1f", current);
 80a1500:	490e      	ldr	r1, [pc, #56]	; (80a153c <_ZN3TFT19drawTempAndHumidityEv+0x90>)
 80a1502:	4638      	mov	r0, r7
 80a1504:	f002 fe56 	bl	80a41b4 <sprintf>

    adafruit->setCursor(8, Y_OFFSET_SIZE_2 + (i + 1) * LINE_HEIGHT_TEXT_SIZE_2);
 80a1508:	464a      	mov	r2, r9
 80a150a:	2108      	movs	r1, #8
 80a150c:	6820      	ldr	r0, [r4, #0]
 80a150e:	f000 fa4f 	bl	80a19b0 <_ZN12Adafruit_GFX9setCursorEss>
    adafruit->print(key);
 80a1512:	4641      	mov	r1, r8
 80a1514:	6820      	ldr	r0, [r4, #0]
 80a1516:	f005 f8cd 	bl	80a66b4 <_ZN5Print5printEPKc>

    adafruit->setCursor(100, Y_OFFSET_SIZE_2 + (i + 1) * LINE_HEIGHT_TEXT_SIZE_2);
 80a151a:	464a      	mov	r2, r9
 80a151c:	2164      	movs	r1, #100	; 0x64
 80a151e:	6820      	ldr	r0, [r4, #0]
 80a1520:	f000 fa46 	bl	80a19b0 <_ZN12Adafruit_GFX9setCursorEss>
      break;
    }

    sprintf(buffer, "%0.1f", current);

    adafruit->setCursor(8, Y_OFFSET_SIZE_2 + (i + 1) * LINE_HEIGHT_TEXT_SIZE_2);
 80a1524:	3501      	adds	r5, #1
    adafruit->print(key);

    adafruit->setCursor(100, Y_OFFSET_SIZE_2 + (i + 1) * LINE_HEIGHT_TEXT_SIZE_2);
    adafruit->print(buffer);
 80a1526:	4639      	mov	r1, r7
 80a1528:	6820      	ldr	r0, [r4, #0]
 80a152a:	f005 f8c3 	bl	80a66b4 <_ZN5Print5printEPKc>
 80a152e:	3614      	adds	r6, #20
  adafruit->setTextWrap(true);

  const char *key;
  double      current;

  for (int i = 0; i < 3; i++) {
 80a1530:	2d03      	cmp	r5, #3
 80a1532:	b2b6      	uxth	r6, r6
 80a1534:	d1cd      	bne.n	80a14d2 <_ZN3TFT19drawTempAndHumidityEv+0x26>
    adafruit->print(key);

    adafruit->setCursor(100, Y_OFFSET_SIZE_2 + (i + 1) * LINE_HEIGHT_TEXT_SIZE_2);
    adafruit->print(buffer);
  }
 80a1536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a153a:	bf00      	nop
 80a153c:	080abdfe 	.word	0x080abdfe
 80a1540:	080abdeb 	.word	0x080abdeb
 80a1544:	080abdf2 	.word	0x080abdf2
 80a1548:	080abdf7 	.word	0x080abdf7

080a154c <_GLOBAL__sub_I__ZN3TFTC2EP12temperaturesP25acceleration_measurementsP12calibrations>:
 80a154c:	f002 bce6 	b.w	80a3f1c <HAL_Pin_Map>

080a1550 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a1550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1554:	461e      	mov	r6, r3
 80a1556:	b085      	sub	sp, #20
 80a1558:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80a155c:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a155e:	1a9a      	subs	r2, r3, r2
 80a1560:	2a00      	cmp	r2, #0
 80a1562:	bfb8      	it	lt
 80a1564:	4252      	neglt	r2, r2
 80a1566:	9200      	str	r2, [sp, #0]
 80a1568:	1a72      	subs	r2, r6, r1
 80a156a:	2a00      	cmp	r2, #0
 80a156c:	bfb8      	it	lt
 80a156e:	4252      	neglt	r2, r2
 80a1570:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a1572:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a1574:	9a00      	ldr	r2, [sp, #0]
 80a1576:	9901      	ldr	r1, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a1578:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a157a:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a157c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a1580:	dd05      	ble.n	80a158e <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
 80a1582:	4632      	mov	r2, r6
    swap_ada(x0, y0);
    swap_ada(x1, y1);
 80a1584:	461e      	mov	r6, r3
 80a1586:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a1588:	4622      	mov	r2, r4
    swap_ada(x0, y0);
 80a158a:	462c      	mov	r4, r5
 80a158c:	4615      	mov	r5, r2
    swap_ada(x1, y1);
  }

  if (x0 > x1) {
 80a158e:	42b4      	cmp	r4, r6
 80a1590:	dd05      	ble.n	80a159e <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
 80a1592:	462a      	mov	r2, r5
    swap_ada(x0, x1);
    swap_ada(y0, y1);
 80a1594:	461d      	mov	r5, r3
 80a1596:	4613      	mov	r3, r2
  if (steep) {
    swap_ada(x0, y0);
    swap_ada(x1, y1);
  }

  if (x0 > x1) {
 80a1598:	4622      	mov	r2, r4
 80a159a:	4634      	mov	r4, r6
 80a159c:	4616      	mov	r6, r2
    swap_ada(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
 80a159e:	1b5a      	subs	r2, r3, r5
 80a15a0:	2a00      	cmp	r2, #0
    swap_ada(x0, x1);
    swap_ada(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a15a2:	ebc4 0806 	rsb	r8, r4, r6
  dy = abs(y1 - y0);
 80a15a6:	bfb8      	it	lt
 80a15a8:	4252      	neglt	r2, r2
    swap_ada(x0, x1);
    swap_ada(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a15aa:	fa1f f888 	uxth.w	r8, r8
  dy = abs(y1 - y0);
 80a15ae:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
 80a15b0:	fa0f f788 	sxth.w	r7, r8
 80a15b4:	2202      	movs	r2, #2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a15b6:	429d      	cmp	r5, r3
 80a15b8:	bfb4      	ite	lt
 80a15ba:	2301      	movlt	r3, #1
 80a15bc:	f04f 33ff 	movge.w	r3, #4294967295

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);

  int16_t err = dx / 2;
 80a15c0:	fb97 f7f2 	sdiv	r7, r7, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a15c4:	9302      	str	r3, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 80a15c6:	42b4      	cmp	r4, r6
 80a15c8:	dc1f      	bgt.n	80a160a <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
 80a15ca:	9a01      	ldr	r2, [sp, #4]
 80a15cc:	9b00      	ldr	r3, [sp, #0]
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
 80a15ce:	4648      	mov	r0, r9
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
 80a15d0:	4293      	cmp	r3, r2
 80a15d2:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
 80a15d6:	bfc8      	it	gt
 80a15d8:	4622      	movgt	r2, r4
 80a15da:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a15de:	bfc8      	it	gt
 80a15e0:	4629      	movgt	r1, r5
 80a15e2:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
 80a15e4:	bfdc      	itt	le
 80a15e6:	462a      	movle	r2, r5
 80a15e8:	4621      	movle	r1, r4
 80a15ea:	47d8      	blx	fp
    }
    err -= dy;
 80a15ec:	9b03      	ldr	r3, [sp, #12]
 80a15ee:	1aff      	subs	r7, r7, r3
 80a15f0:	b2bb      	uxth	r3, r7
 80a15f2:	b21f      	sxth	r7, r3
    if (err < 0) {
 80a15f4:	2f00      	cmp	r7, #0
 80a15f6:	da05      	bge.n	80a1604 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
 80a15f8:	9a02      	ldr	r2, [sp, #8]
      err += dx;
 80a15fa:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
 80a15fe:	4415      	add	r5, r2
 80a1600:	b22d      	sxth	r5, r5
      err += dx;
 80a1602:	b23f      	sxth	r7, r7
 80a1604:	3401      	adds	r4, #1
 80a1606:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
 80a1608:	e7dd      	b.n	80a15c6 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
 80a160a:	b005      	add	sp, #20
 80a160c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1610 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a1610:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a1614:	4604      	mov	r4, r0
 80a1616:	4691      	mov	r9, r2
 80a1618:	460d      	mov	r5, r1
 80a161a:	4698      	mov	r8, r3
 80a161c:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 80a1620:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a1622:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 80a1626:	9600      	str	r6, [sp, #0]
 80a1628:	69ff      	ldr	r7, [r7, #28]
 80a162a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 80a162c:	6823      	ldr	r3, [r4, #0]
 80a162e:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a1632:	9600      	str	r6, [sp, #0]
 80a1634:	444a      	add	r2, r9
 80a1636:	69df      	ldr	r7, [r3, #28]
 80a1638:	4629      	mov	r1, r5
 80a163a:	4643      	mov	r3, r8
 80a163c:	4620      	mov	r0, r4
 80a163e:	b212      	sxth	r2, r2
 80a1640:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 80a1642:	6823      	ldr	r3, [r4, #0]
 80a1644:	9600      	str	r6, [sp, #0]
 80a1646:	699f      	ldr	r7, [r3, #24]
 80a1648:	464a      	mov	r2, r9
 80a164a:	4653      	mov	r3, sl
 80a164c:	4629      	mov	r1, r5
 80a164e:	4620      	mov	r0, r4
 80a1650:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 80a1652:	6823      	ldr	r3, [r4, #0]
 80a1654:	f108 31ff 	add.w	r1, r8, #4294967295
 80a1658:	960a      	str	r6, [sp, #40]	; 0x28
 80a165a:	4429      	add	r1, r5
 80a165c:	699d      	ldr	r5, [r3, #24]
 80a165e:	464a      	mov	r2, r9
 80a1660:	4653      	mov	r3, sl
 80a1662:	4620      	mov	r0, r4
 80a1664:	46ac      	mov	ip, r5
 80a1666:	b209      	sxth	r1, r1
}
 80a1668:	b002      	add	sp, #8
 80a166a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
 80a166e:	4760      	bx	ip

080a1670 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 80a1670:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 80a1672:	3b01      	subs	r3, #1
 80a1674:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a1678:	4413      	add	r3, r2
 80a167a:	6804      	ldr	r4, [r0, #0]
 80a167c:	b21b      	sxth	r3, r3
 80a167e:	9300      	str	r3, [sp, #0]
 80a1680:	9501      	str	r5, [sp, #4]
 80a1682:	6964      	ldr	r4, [r4, #20]
 80a1684:	460b      	mov	r3, r1
 80a1686:	47a0      	blx	r4
}
 80a1688:	b003      	add	sp, #12
 80a168a:	bd30      	pop	{r4, r5, pc}

080a168c <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 80a168c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 80a168e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a1692:	6804      	ldr	r4, [r0, #0]
 80a1694:	e88d 0024 	stmia.w	sp, {r2, r5}
 80a1698:	3b01      	subs	r3, #1
 80a169a:	440b      	add	r3, r1
 80a169c:	6964      	ldr	r4, [r4, #20]
 80a169e:	b21b      	sxth	r3, r3
 80a16a0:	47a0      	blx	r4
}
 80a16a2:	b003      	add	sp, #12
 80a16a4:	bd30      	pop	{r4, r5, pc}

080a16a6 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a16a6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a16aa:	4605      	mov	r5, r0
 80a16ac:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a16ae:	460c      	mov	r4, r1
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a16b0:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a16b4:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a16b8:	eb01 0a03 	add.w	sl, r1, r3
 80a16bc:	4554      	cmp	r4, sl
 80a16be:	da0b      	bge.n	80a16d8 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
 80a16c0:	682b      	ldr	r3, [r5, #0]
 80a16c2:	f8cd 9000 	str.w	r9, [sp]
 80a16c6:	699e      	ldr	r6, [r3, #24]
 80a16c8:	4621      	mov	r1, r4
 80a16ca:	4643      	mov	r3, r8
 80a16cc:	463a      	mov	r2, r7
 80a16ce:	4628      	mov	r0, r5
 80a16d0:	3401      	adds	r4, #1
 80a16d2:	47b0      	blx	r6
 80a16d4:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a16d6:	e7f1      	b.n	80a16bc <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
 80a16d8:	b002      	add	sp, #8
 80a16da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a16de <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 80a16de:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 80a16e0:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a16e4:	6804      	ldr	r4, [r0, #0]
 80a16e6:	9101      	str	r1, [sp, #4]
 80a16e8:	9200      	str	r2, [sp, #0]
 80a16ea:	2200      	movs	r2, #0
 80a16ec:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a16f0:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80a16f2:	4611      	mov	r1, r2
 80a16f4:	47a0      	blx	r4
}
 80a16f6:	b002      	add	sp, #8
 80a16f8:	bd10      	pop	{r4, pc}

080a16fa <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
 80a16fa:	4770      	bx	lr

080a16fc <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a16fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  if (c == '\n') {
 80a16fe:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a1700:	b085      	sub	sp, #20
 80a1702:	4604      	mov	r4, r0
 80a1704:	460d      	mov	r5, r1
  
  if (c == '\n') {
 80a1706:	d107      	bne.n	80a1718 <_ZN12Adafruit_GFX5writeEh+0x1c>
    cursor_y += textsize*fontDesc[0].height;	//all chars are same height so use height of space char
 80a1708:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80a170a:	7e02      	ldrb	r2, [r0, #24]
 80a170c:	7859      	ldrb	r1, [r3, #1]
 80a170e:	8a43      	ldrh	r3, [r0, #18]
 80a1710:	fb01 3302 	mla	r3, r1, r2, r3
 80a1714:	8243      	strh	r3, [r0, #18]
 80a1716:	e049      	b.n	80a17ac <_ZN12Adafruit_GFX5writeEh+0xb0>
    cursor_x  = 0;
  } else if (c == '\r') {
 80a1718:	290d      	cmp	r1, #13
 80a171a:	d049      	beq.n	80a17b0 <_ZN12Adafruit_GFX5writeEh+0xb4>
    // skip em
  } else {
    drawFastChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80a171c:	7e06      	ldrb	r6, [r0, #24]
 80a171e:	6803      	ldr	r3, [r0, #0]
 80a1720:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 80a1724:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80a1728:	9602      	str	r6, [sp, #8]
 80a172a:	8ac6      	ldrh	r6, [r0, #22]
 80a172c:	9601      	str	r6, [sp, #4]
 80a172e:	8a86      	ldrh	r6, [r0, #20]
 80a1730:	9600      	str	r6, [sp, #0]
 80a1732:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80a1734:	462b      	mov	r3, r5
 80a1736:	47b0      	blx	r6
	uint16_t w = fontDesc[c-fontStart].width;
 80a1738:	7ee3      	ldrb	r3, [r4, #27]
	uint16_t h = fontDesc[c-fontStart].height;
    if (fontKern > 0 && textcolor != textbgcolor) {
 80a173a:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawFastChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
	uint16_t w = fontDesc[c-fontStart].width;
 80a173e:	1aed      	subs	r5, r5, r3
 80a1740:	6a63      	ldr	r3, [r4, #36]	; 0x24
	uint16_t h = fontDesc[c-fontStart].height;
    if (fontKern > 0 && textcolor != textbgcolor) {
 80a1742:	f1be 0f00 	cmp.w	lr, #0
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawFastChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
	uint16_t w = fontDesc[c-fontStart].width;
 80a1746:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 80a174a:	f813 6025 	ldrb.w	r6, [r3, r5, lsl #2]
	uint16_t h = fontDesc[c-fontStart].height;
 80a174e:	7855      	ldrb	r5, [r2, #1]
    if (fontKern > 0 && textcolor != textbgcolor) {
 80a1750:	dd15      	ble.n	80a177e <_ZN12Adafruit_GFX5writeEh+0x82>
 80a1752:	8ae0      	ldrh	r0, [r4, #22]
 80a1754:	8aa3      	ldrh	r3, [r4, #20]
 80a1756:	4283      	cmp	r3, r0
 80a1758:	d011      	beq.n	80a177e <_ZN12Adafruit_GFX5writeEh+0x82>
      fillRect(cursor_x+w*textsize,cursor_y,fontKern*textsize,h*textsize,textbgcolor);
 80a175a:	7e23      	ldrb	r3, [r4, #24]
 80a175c:	9001      	str	r0, [sp, #4]
 80a175e:	8a21      	ldrh	r1, [r4, #16]
 80a1760:	fb03 f005 	mul.w	r0, r3, r5
 80a1764:	fb06 1103 	mla	r1, r6, r3, r1
 80a1768:	b200      	sxth	r0, r0
 80a176a:	6827      	ldr	r7, [r4, #0]
 80a176c:	9000      	str	r0, [sp, #0]
 80a176e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a1772:	6a7f      	ldr	r7, [r7, #36]	; 0x24
 80a1774:	fb0e f303 	mul.w	r3, lr, r3
 80a1778:	b209      	sxth	r1, r1
 80a177a:	4620      	mov	r0, r4
 80a177c:	47b8      	blx	r7
    }
    cursor_x += textsize*(w+fontKern);
 80a177e:	7e22      	ldrb	r2, [r4, #24]
 80a1780:	f994 301d 	ldrsb.w	r3, [r4, #29]
 80a1784:	8a20      	ldrh	r0, [r4, #16]
 80a1786:	b291      	uxth	r1, r2
 80a1788:	4433      	add	r3, r6
 80a178a:	fb03 0301 	mla	r3, r3, r1, r0
    if (wrap && (cursor_x > (_width - textsize*w))) {
 80a178e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
	uint16_t w = fontDesc[c-fontStart].width;
	uint16_t h = fontDesc[c-fontStart].height;
    if (fontKern > 0 && textcolor != textbgcolor) {
      fillRect(cursor_x+w*textsize,cursor_y,fontKern*textsize,h*textsize,textbgcolor);
    }
    cursor_x += textsize*(w+fontKern);
 80a1792:	b21b      	sxth	r3, r3
 80a1794:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*w))) {
 80a1796:	b158      	cbz	r0, 80a17b0 <_ZN12Adafruit_GFX5writeEh+0xb4>
 80a1798:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80a179c:	fb06 0212 	mls	r2, r6, r2, r0
 80a17a0:	4293      	cmp	r3, r2
 80a17a2:	dd05      	ble.n	80a17b0 <_ZN12Adafruit_GFX5writeEh+0xb4>
      cursor_y += textsize*h;
 80a17a4:	8a63      	ldrh	r3, [r4, #18]
 80a17a6:	fb01 3505 	mla	r5, r1, r5, r3
 80a17aa:	8265      	strh	r5, [r4, #18]
      cursor_x = 0;
 80a17ac:	2300      	movs	r3, #0
 80a17ae:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
 80a17b0:	2001      	movs	r0, #1
 80a17b2:	b005      	add	sp, #20
 80a17b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a17b8 <_ZN12Adafruit_GFX7setFontEh>:
  // Default to GLCDFONT to be compatible with existing code
  setFont(GLCDFONT);		// May also be set to TIMESNR_8, CENTURY_8, COMICS_8 or TEST (for testing candidate fonts)
 }

void Adafruit_GFX::setFont(uint8_t f) {
  font = f;
 80a17b8:	7681      	strb	r1, [r0, #26]
  switch(font) {
 80a17ba:	2903      	cmp	r1, #3
 80a17bc:	d813      	bhi.n	80a17e6 <_ZN12Adafruit_GFX7setFontEh+0x2e>
 80a17be:	e8df f001 	tbb	[pc, r1]
 80a17c2:	0602      	.short	0x0602
 80a17c4:	0e0a      	.short	0x0e0a
#ifdef TIMESNEWROMAN8
    case TIMESNR_8:
      fontData = timesNewRoman_8ptBitmaps;
 80a17c6:	4b0f      	ldr	r3, [pc, #60]	; (80a1804 <_ZN12Adafruit_GFX7setFontEh+0x4c>)
 80a17c8:	6203      	str	r3, [r0, #32]
	  fontDesc = timesNewRoman_8ptDescriptors;
 80a17ca:	4b0f      	ldr	r3, [pc, #60]	; (80a1808 <_ZN12Adafruit_GFX7setFontEh+0x50>)
 80a17cc:	e010      	b.n	80a17f0 <_ZN12Adafruit_GFX7setFontEh+0x38>
      fontKern = 1;
      break;
#endif
#ifdef CENTURYGOTHIC8
    case CENTURY_8:
      fontData = centuryGothic_8ptBitmaps;
 80a17ce:	4b0f      	ldr	r3, [pc, #60]	; (80a180c <_ZN12Adafruit_GFX7setFontEh+0x54>)
 80a17d0:	6203      	str	r3, [r0, #32]
	  fontDesc = centuryGothic_8ptDescriptors;
 80a17d2:	4b0f      	ldr	r3, [pc, #60]	; (80a1810 <_ZN12Adafruit_GFX7setFontEh+0x58>)
 80a17d4:	e00c      	b.n	80a17f0 <_ZN12Adafruit_GFX7setFontEh+0x38>
      fontKern = 1;
      break;
#endif
#ifdef ARIAL8
    case ARIAL_8:
      fontData = arial_8ptBitmaps;
 80a17d6:	4b0f      	ldr	r3, [pc, #60]	; (80a1814 <_ZN12Adafruit_GFX7setFontEh+0x5c>)
 80a17d8:	6203      	str	r3, [r0, #32]
	  fontDesc = arial_8ptDescriptors;
 80a17da:	4b0f      	ldr	r3, [pc, #60]	; (80a1818 <_ZN12Adafruit_GFX7setFontEh+0x60>)
 80a17dc:	e008      	b.n	80a17f0 <_ZN12Adafruit_GFX7setFontEh+0x38>
      fontKern = 1;
      break;
#endif
#ifdef COMICSANSMS8
    case COMICS_8:
      fontData = comicSansMS_8ptBitmaps;
 80a17de:	4b0f      	ldr	r3, [pc, #60]	; (80a181c <_ZN12Adafruit_GFX7setFontEh+0x64>)
 80a17e0:	6203      	str	r3, [r0, #32]
	  fontDesc = comicSansMS_8ptDescriptors;
 80a17e2:	4b0f      	ldr	r3, [pc, #60]	; (80a1820 <_ZN12Adafruit_GFX7setFontEh+0x68>)
 80a17e4:	e004      	b.n	80a17f0 <_ZN12Adafruit_GFX7setFontEh+0x38>
	  fontDesc = testDescriptors;
      fontKern = 1;
      break;
#endif
	default:
      font = GLCDFONT;
 80a17e6:	2304      	movs	r3, #4
 80a17e8:	7683      	strb	r3, [r0, #26]
      fontData = glcdfontBitmaps;
 80a17ea:	4b0e      	ldr	r3, [pc, #56]	; (80a1824 <_ZN12Adafruit_GFX7setFontEh+0x6c>)
 80a17ec:	6203      	str	r3, [r0, #32]
	  fontDesc = glcdfontDescriptors;
 80a17ee:	4b0e      	ldr	r3, [pc, #56]	; (80a1828 <_ZN12Adafruit_GFX7setFontEh+0x70>)
 80a17f0:	6243      	str	r3, [r0, #36]	; 0x24
      fontKern = 1;
 80a17f2:	2301      	movs	r3, #1
 80a17f4:	7743      	strb	r3, [r0, #29]
      break;
  }

  fontStart = pgm_read_byte(fontData+FONT_START);
 80a17f6:	6a03      	ldr	r3, [r0, #32]
 80a17f8:	781a      	ldrb	r2, [r3, #0]
 80a17fa:	76c2      	strb	r2, [r0, #27]
  fontEnd = pgm_read_byte(fontData+FONT_END);
 80a17fc:	785b      	ldrb	r3, [r3, #1]
 80a17fe:	7703      	strb	r3, [r0, #28]
 80a1800:	4770      	bx	lr
 80a1802:	bf00      	nop
 80a1804:	080adda8 	.word	0x080adda8
 80a1808:	080adc2c 	.word	0x080adc2c
 80a180c:	080acc34 	.word	0x080acc34
 80a1810:	080ad6b0 	.word	0x080ad6b0
 80a1814:	080ac6d8 	.word	0x080ac6d8
 80a1818:	080acab8 	.word	0x080acab8
 80a181c:	080ad082 	.word	0x080ad082
 80a1820:	080ad534 	.word	0x080ad534
 80a1824:	080abede 	.word	0x080abede
 80a1828:	080ad82c 	.word	0x080ad82c

080a182c <_ZN12Adafruit_GFXC1Ess>:

#define pgm_read_byte(addr) (*(const uint8_t *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a182c:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
  _height   = HEIGHT;
 80a182e:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
 80a1830:	f64f 72ff 	movw	r2, #65535	; 0xffff


#define pgm_read_byte(addr) (*(const uint8_t *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a1834:	b538      	push	{r3, r4, r5, lr}
 80a1836:	2300      	movs	r3, #0
  WIDTH(w), HEIGHT(h)
 80a1838:	4d08      	ldr	r5, [pc, #32]	; (80a185c <_ZN12Adafruit_GFXC1Ess+0x30>)
 80a183a:	6043      	str	r3, [r0, #4]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
 80a183c:	7643      	strb	r3, [r0, #25]
  cursor_y  = cursor_x    = 0;
 80a183e:	8203      	strh	r3, [r0, #16]
 80a1840:	8243      	strh	r3, [r0, #18]
  textsize  = 1;
 80a1842:	2301      	movs	r3, #1

#define pgm_read_byte(addr) (*(const uint8_t *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a1844:	8101      	strh	r1, [r0, #8]
{
  _width    = WIDTH;
 80a1846:	8181      	strh	r1, [r0, #12]

#define pgm_read_byte(addr) (*(const uint8_t *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a1848:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
 80a184a:	7603      	strb	r3, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 80a184c:	82c2      	strh	r2, [r0, #22]
 80a184e:	8282      	strh	r2, [r0, #20]
  wrap      = true;
 80a1850:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  // Default to GLCDFONT to be compatible with existing code
  setFont(GLCDFONT);		// May also be set to TIMESNR_8, CENTURY_8, COMICS_8 or TEST (for testing candidate fonts)
 80a1854:	2104      	movs	r1, #4
 80a1856:	f7ff ffaf 	bl	80a17b8 <_ZN12Adafruit_GFX7setFontEh>
 }
 80a185a:	bd38      	pop	{r3, r4, r5, pc}
 80a185c:	080abe0c 	.word	0x080abe0c

080a1860 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  drawChar(x,y,c,color,bg,size);
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 80a1860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1864:	b08b      	sub	sp, #44	; 0x2c
 80a1866:	4692      	mov	sl, r2
 80a1868:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80a186c:	4604      	mov	r4, r0
 80a186e:	9204      	str	r2, [sp, #16]
 80a1870:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80a1874:	460d      	mov	r5, r1
 80a1876:	9205      	str	r2, [sp, #20]

  if (c < fontStart || c > fontEnd) {
 80a1878:	7ec2      	ldrb	r2, [r0, #27]
  drawChar(x,y,c,color,bg,size);
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 80a187a:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58

  if (c < fontStart || c > fontEnd) {
 80a187e:	429a      	cmp	r2, r3
 80a1880:	d805      	bhi.n	80a188e <_ZN12Adafruit_GFX8drawCharEsshtth+0x2e>
 80a1882:	7f01      	ldrb	r1, [r0, #28]
 80a1884:	4299      	cmp	r1, r3
 80a1886:	d302      	bcc.n	80a188e <_ZN12Adafruit_GFX8drawCharEsshtth+0x2e>
    c = 0;
  }
  else {
    c -= fontStart;
 80a1888:	1a9b      	subs	r3, r3, r2
 80a188a:	b2db      	uxtb	r3, r3
 80a188c:	e000      	b.n	80a1890 <_ZN12Adafruit_GFX8drawCharEsshtth+0x30>
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if (c < fontStart || c > fontEnd) {
    c = 0;
 80a188e:	2300      	movs	r3, #0
  }
  else {
    c -= fontStart;
  }
 
  if((x >= _width)            || // Clip right
 80a1890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80a1894:	42aa      	cmp	r2, r5
 80a1896:	dd7b      	ble.n	80a1990 <_ZN12Adafruit_GFX8drawCharEsshtth+0x130>
 80a1898:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 80a189c:	4552      	cmp	r2, sl
 80a189e:	dd77      	ble.n	80a1990 <_ZN12Adafruit_GFX8drawCharEsshtth+0x130>
     (y >= _height)           || // Clip bottom
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 80a18a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a18a2:	009a      	lsls	r2, r3, #2
  else {
    c -= fontStart;
  }
 
  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
 80a18a4:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 80a18a8:	9207      	str	r2, [sp, #28]
  else {
    c -= fontStart;
  }
 
  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
 80a18aa:	fb06 5303 	mla	r3, r6, r3, r5
 80a18ae:	2b00      	cmp	r3, #0
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 80a18b0:	440a      	add	r2, r1
  else {
    c -= fontStart;
  }
 
  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
 80a18b2:	dd6d      	ble.n	80a1990 <_ZN12Adafruit_GFX8drawCharEsshtth+0x130>
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 80a18b4:	7853      	ldrb	r3, [r2, #1]
 80a18b6:	fb06 a303 	mla	r3, r6, r3, sl
 80a18ba:	2b00      	cmp	r3, #0
 80a18bc:	dd68      	ble.n	80a1990 <_ZN12Adafruit_GFX8drawCharEsshtth+0x130>
     ((y + (fontDesc[c].height * size) - 1) < 0))   // Clip top
    return;

	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
 80a18be:	8853      	ldrh	r3, [r2, #2]
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+j, y+i, bg);
        else {  // big size
          fillRect(x+j*size, y+i*size, size, size, bg);
 80a18c0:	fa0f f886 	sxth.w	r8, r6
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
     ((y + (fontDesc[c].height * size) - 1) < 0))   // Clip top
    return;

	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
 80a18c4:	3302      	adds	r3, #2
 80a18c6:	b29b      	uxth	r3, r3
 80a18c8:	9302      	str	r3, [sp, #8]
 80a18ca:	2300      	movs	r3, #0
 80a18cc:	9303      	str	r3, [sp, #12]
      if (line & 0x80) {
        if (size == 1) {// default sizeFast
          drawPixel(x+j, y+i, color);
          }
        else {  // big size
          fillRect(x+(j*size), y+(i*size), size, size, color);
 80a18ce:	b2b3      	uxth	r3, r6
 80a18d0:	9306      	str	r3, [sp, #24]
    return;

	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
  
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
 80a18d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a18d4:	9907      	ldr	r1, [sp, #28]
 80a18d6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 80a18da:	440a      	add	r2, r1
 80a18dc:	7852      	ldrb	r2, [r2, #1]
 80a18de:	4293      	cmp	r3, r2
 80a18e0:	da56      	bge.n	80a1990 <_ZN12Adafruit_GFX8drawCharEsshtth+0x130>
      if (line & 0x80) {
        if (size == 1) {// default sizeFast
          drawPixel(x+j, y+i, color);
          }
        else {  // big size
          fillRect(x+(j*size), y+(i*size), size, size, color);
 80a18e2:	9906      	ldr	r1, [sp, #24]
 80a18e4:	b29b      	uxth	r3, r3
 80a18e6:	fa1f f28a 	uxth.w	r2, sl
 80a18ea:	fb03 2101 	mla	r1, r3, r1, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+j, y+i, bg);
 80a18ee:	4413      	add	r3, r2
      if (line & 0x80) {
        if (size == 1) {// default sizeFast
          drawPixel(x+j, y+i, color);
          }
        else {  // big size
          fillRect(x+(j*size), y+(i*size), size, size, color);
 80a18f0:	b209      	sxth	r1, r1
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+j, y+i, bg);
 80a18f2:	b21b      	sxth	r3, r3
      if (line & 0x80) {
        if (size == 1) {// default sizeFast
          drawPixel(x+j, y+i, color);
          }
        else {  // big size
          fillRect(x+(j*size), y+(i*size), size, size, color);
 80a18f4:	9108      	str	r1, [sp, #32]
 80a18f6:	f04f 0900 	mov.w	r9, #0
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+j, y+i, bg);
 80a18fa:	9309      	str	r3, [sp, #36]	; 0x24
	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
  
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
    uint8_t line;
    for (int8_t j = 0; j<fontDesc[c].width; j++) {			//j<fontWidth
 80a18fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a18fe:	9807      	ldr	r0, [sp, #28]
 80a1900:	fa4f f189 	sxtb.w	r1, r9
 80a1904:	5c12      	ldrb	r2, [r2, r0]
 80a1906:	fa5f f389 	uxtb.w	r3, r9
 80a190a:	4291      	cmp	r1, r2
 80a190c:	da3c      	bge.n	80a1988 <_ZN12Adafruit_GFX8drawCharEsshtth+0x128>
      if (bitCount++%8 == 0) {
 80a190e:	075a      	lsls	r2, r3, #29
 80a1910:	d106      	bne.n	80a1920 <_ZN12Adafruit_GFX8drawCharEsshtth+0xc0>
        line = pgm_read_byte(fontData+fontIndex++);
 80a1912:	9b02      	ldr	r3, [sp, #8]
 80a1914:	9802      	ldr	r0, [sp, #8]
 80a1916:	6a22      	ldr	r2, [r4, #32]
 80a1918:	3301      	adds	r3, #1
 80a191a:	b29b      	uxth	r3, r3
 80a191c:	5c17      	ldrb	r7, [r2, r0]
 80a191e:	9302      	str	r3, [sp, #8]
      }
      if (line & 0x80) {
 80a1920:	063b      	lsls	r3, r7, #24
 80a1922:	d50d      	bpl.n	80a1940 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe0>
        if (size == 1) {// default sizeFast
 80a1924:	2e01      	cmp	r6, #1
 80a1926:	d105      	bne.n	80a1934 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd4>
          drawPixel(x+j, y+i, color);
 80a1928:	6823      	ldr	r3, [r4, #0]
 80a192a:	4429      	add	r1, r5
 80a192c:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a1930:	9b04      	ldr	r3, [sp, #16]
 80a1932:	e010      	b.n	80a1956 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf6>
          }
        else {  // big size
          fillRect(x+(j*size), y+(i*size), size, size, color);
 80a1934:	9b06      	ldr	r3, [sp, #24]
 80a1936:	9a04      	ldr	r2, [sp, #16]
 80a1938:	fb01 5103 	mla	r1, r1, r3, r5
 80a193c:	6823      	ldr	r3, [r4, #0]
 80a193e:	e014      	b.n	80a196a <_ZN12Adafruit_GFX8drawCharEsshtth+0x10a>
        } 
      } else if (bg != color) {
 80a1940:	9b04      	ldr	r3, [sp, #16]
 80a1942:	9a05      	ldr	r2, [sp, #20]
 80a1944:	4293      	cmp	r3, r2
 80a1946:	d01a      	beq.n	80a197e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
        if (size == 1) // default size
 80a1948:	2e01      	cmp	r6, #1
 80a194a:	d109      	bne.n	80a1960 <_ZN12Adafruit_GFX8drawCharEsshtth+0x100>
          drawPixel(x+j, y+i, bg);
 80a194c:	6823      	ldr	r3, [r4, #0]
 80a194e:	4429      	add	r1, r5
 80a1950:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a1954:	4613      	mov	r3, r2
 80a1956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a1958:	b209      	sxth	r1, r1
 80a195a:	4620      	mov	r0, r4
 80a195c:	47d8      	blx	fp
 80a195e:	e00e      	b.n	80a197e <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
        else {  // big size
          fillRect(x+j*size, y+i*size, size, size, bg);
 80a1960:	9b06      	ldr	r3, [sp, #24]
 80a1962:	9a05      	ldr	r2, [sp, #20]
 80a1964:	fb01 5103 	mla	r1, r1, r3, r5
 80a1968:	6823      	ldr	r3, [r4, #0]
 80a196a:	9201      	str	r2, [sp, #4]
 80a196c:	f8cd 8000 	str.w	r8, [sp]
 80a1970:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a1974:	9a08      	ldr	r2, [sp, #32]
 80a1976:	4643      	mov	r3, r8
 80a1978:	b209      	sxth	r1, r1
 80a197a:	4620      	mov	r0, r4
 80a197c:	47d8      	blx	fp
        }
      }
      line <<= 1;
 80a197e:	007f      	lsls	r7, r7, #1
 80a1980:	b2ff      	uxtb	r7, r7
 80a1982:	f109 0901 	add.w	r9, r9, #1
	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
  
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
    uint8_t line;
    for (int8_t j = 0; j<fontDesc[c].width; j++) {			//j<fontWidth
 80a1986:	e7b9      	b.n	80a18fc <_ZN12Adafruit_GFX8drawCharEsshtth+0x9c>
 80a1988:	9b03      	ldr	r3, [sp, #12]
 80a198a:	3301      	adds	r3, #1
 80a198c:	9303      	str	r3, [sp, #12]
    return;

	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
  
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
 80a198e:	e7a0      	b.n	80a18d2 <_ZN12Adafruit_GFX8drawCharEsshtth+0x72>
      }
      line <<= 1;
    }
    bitCount = 0;
  }
}
 80a1990:	b00b      	add	sp, #44	; 0x2c
 80a1992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1996 <_ZN12Adafruit_GFX12drawFastCharEsshtth>:
  }
  return 1;
}

void Adafruit_GFX::drawFastChar(int16_t x, int16_t y, unsigned char c,
                                    uint16_t color, uint16_t bg, uint8_t size) {
 80a1996:	b470      	push	{r4, r5, r6}
 80a1998:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80a199c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80a19a0:	f89d 6014 	ldrb.w	r6, [sp, #20]
  // Update in subclasses if desired!
  drawChar(x,y,c,color,bg,size);
 80a19a4:	9504      	str	r5, [sp, #16]
 80a19a6:	9605      	str	r6, [sp, #20]
 80a19a8:	9403      	str	r4, [sp, #12]
}
 80a19aa:	bc70      	pop	{r4, r5, r6}
}

void Adafruit_GFX::drawFastChar(int16_t x, int16_t y, unsigned char c,
                                    uint16_t color, uint16_t bg, uint8_t size) {
  // Update in subclasses if desired!
  drawChar(x,y,c,color,bg,size);
 80a19ac:	f7ff bf58 	b.w	80a1860 <_ZN12Adafruit_GFX8drawCharEsshtth>

080a19b0 <_ZN12Adafruit_GFX9setCursorEss>:
    bitCount = 0;
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
 80a19b0:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
 80a19b2:	8242      	strh	r2, [r0, #18]
 80a19b4:	4770      	bx	lr

080a19b6 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
 80a19b6:	2900      	cmp	r1, #0
 80a19b8:	bf08      	it	eq
 80a19ba:	2101      	moveq	r1, #1
 80a19bc:	7601      	strb	r1, [r0, #24]
 80a19be:	4770      	bx	lr

080a19c0 <_ZN12Adafruit_GFX12setTextColorEtt>:
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
}

void Adafruit_GFX::setTextColor(uint16_t c, uint16_t b) {
  textcolor   = c;
 80a19c0:	8281      	strh	r1, [r0, #20]
  textbgcolor = b; 
 80a19c2:	82c2      	strh	r2, [r0, #22]
 80a19c4:	4770      	bx	lr

080a19c6 <_ZN12Adafruit_GFX11setTextWrapEb>:
}

void Adafruit_GFX::setTextWrap(boolean w) {
  wrap = w;
 80a19c6:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
 80a19ca:	4770      	bx	lr

080a19cc <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a19cc:	f002 baa6 	b.w	80a3f1c <HAL_Pin_Map>

080a19d0 <_ZN15Adafruit_ST773510fillScreenEt>:
#endif
}



void Adafruit_ST7735::fillScreen(uint16_t color) {
 80a19d0:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0,  _width, _height, color);
 80a19d2:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a19d6:	6804      	ldr	r4, [r0, #0]
 80a19d8:	9101      	str	r1, [sp, #4]
 80a19da:	9200      	str	r2, [sp, #0]
 80a19dc:	2200      	movs	r2, #0
 80a19de:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a19e2:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80a19e4:	4611      	mov	r1, r2
 80a19e6:	47a0      	blx	r4
}
 80a19e8:	b002      	add	sp, #8
 80a19ea:	bd10      	pop	{r4, pc}

080a19ec <_ZN15Adafruit_ST7735D1Ev>:
#define ST7735_MAGENTA 0xF81F
#define ST7735_YELLOW  0xFFE0  
#define ST7735_WHITE   0xFFFF


class Adafruit_ST7735 : public Adafruit_GFX {
 80a19ec:	4770      	bx	lr

080a19ee <_ZN15Adafruit_ST7735D0Ev>:
 80a19ee:	b510      	push	{r4, lr}
 80a19f0:	4604      	mov	r4, r0
 80a19f2:	2130      	movs	r1, #48	; 0x30
 80a19f4:	f005 f9fe 	bl	80a6df4 <_ZdlPvj>
 80a19f8:	4620      	mov	r0, r4
 80a19fa:	bd10      	pop	{r4, pc}

080a19fc <_ZN15Adafruit_ST77358spiwriteEh.isra.0>:
#define __AVR__
#endif

#if defined(SPARK)
inline void Adafruit_ST7735::spiwrite(uint8_t c) {
  SPI.transfer(c);
 80a19fc:	4601      	mov	r1, r0
 80a19fe:	4801      	ldr	r0, [pc, #4]	; (80a1a04 <_ZN15Adafruit_ST77358spiwriteEh.isra.0+0x8>)
 80a1a00:	f002 bfca 	b.w	80a4998 <_ZN8SPIClass8transferEh>
 80a1a04:	20000764 	.word	0x20000764

080a1a08 <_ZN15Adafruit_ST7735C1Ehhh>:
}
#endif

// Constructor when using hardware SPI.  Faster, but must use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
Adafruit_ST7735::Adafruit_ST7735(uint8_t cs, uint8_t rs, uint8_t rst) :
 80a1a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a0a:	4604      	mov	r4, r0
 80a1a0c:	461d      	mov	r5, r3
 80a1a0e:	460f      	mov	r7, r1
 80a1a10:	4616      	mov	r6, r2
    Adafruit_GFX(ST7735_TFTWIDTH, ST7735_TFTHEIGHT) {
 80a1a12:	2180      	movs	r1, #128	; 0x80
 80a1a14:	22a0      	movs	r2, #160	; 0xa0
 80a1a16:	f7ff ff09 	bl	80a182c <_ZN12Adafruit_GFXC1Ess>
 80a1a1a:	4b06      	ldr	r3, [pc, #24]	; (80a1a34 <_ZN15Adafruit_ST7735C1Ehhh+0x2c>)
  _cs   = cs;
 80a1a1c:	f884 702b 	strb.w	r7, [r4, #43]	; 0x2b
#endif

// Constructor when using hardware SPI.  Faster, but must use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
Adafruit_ST7735::Adafruit_ST7735(uint8_t cs, uint8_t rs, uint8_t rst) :
    Adafruit_GFX(ST7735_TFTWIDTH, ST7735_TFTHEIGHT) {
 80a1a20:	6023      	str	r3, [r4, #0]
  _cs   = cs;
  _rs   = rs;
  _rst  = rst;
  hwSPI = true;
 80a1a22:	2301      	movs	r3, #1
// Constructor when using hardware SPI.  Faster, but must use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
Adafruit_ST7735::Adafruit_ST7735(uint8_t cs, uint8_t rs, uint8_t rst) :
    Adafruit_GFX(ST7735_TFTWIDTH, ST7735_TFTHEIGHT) {
  _cs   = cs;
  _rs   = rs;
 80a1a24:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
  _rst  = rst;
 80a1a28:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
  hwSPI = true;
 80a1a2c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
#if !defined(SPARK)
  _sid  = _sclk = 0;
#endif
}
 80a1a30:	4620      	mov	r0, r4
 80a1a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1a34:	080abe48 	.word	0x080abe48

080a1a38 <_ZN15Adafruit_ST773512writecommandEh>:
#if defined(SPARK)
inline void Adafruit_ST7735::spiwrite(uint8_t c) {
  SPI.transfer(c);
}

void Adafruit_ST7735::writecommand(uint8_t c) {
 80a1a38:	b538      	push	{r3, r4, r5, lr}
 80a1a3a:	4604      	mov	r4, r0
 80a1a3c:	460d      	mov	r5, r1
  digitalWrite(_rs, LOW);
 80a1a3e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80a1a42:	2100      	movs	r1, #0
 80a1a44:	f005 f985 	bl	80a6d52 <digitalWrite>
  digitalWrite(_cs, LOW);
 80a1a48:	2100      	movs	r1, #0
 80a1a4a:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a1a4e:	f005 f980 	bl	80a6d52 <digitalWrite>
  spiwrite(c);
 80a1a52:	4628      	mov	r0, r5
 80a1a54:	f7ff ffd2 	bl	80a19fc <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
  digitalWrite(_cs, HIGH);
 80a1a58:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a1a5c:	2101      	movs	r1, #1
}
 80a1a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_ST7735::writecommand(uint8_t c) {
  digitalWrite(_rs, LOW);
  digitalWrite(_cs, LOW);
  spiwrite(c);
  digitalWrite(_cs, HIGH);
 80a1a62:	f005 b976 	b.w	80a6d52 <digitalWrite>

080a1a66 <_ZN15Adafruit_ST773513invertDisplayEb>:
  }
}


void Adafruit_ST7735::invertDisplay(boolean i) {
  writecommand(i ? ST7735_INVON : ST7735_INVOFF);
 80a1a66:	2900      	cmp	r1, #0
 80a1a68:	bf14      	ite	ne
 80a1a6a:	2121      	movne	r1, #33	; 0x21
 80a1a6c:	2120      	moveq	r1, #32
 80a1a6e:	f7ff bfe3 	b.w	80a1a38 <_ZN15Adafruit_ST773512writecommandEh>

080a1a72 <_ZN15Adafruit_ST77359writedataEh>:
  digitalWrite(_cs, LOW);
  spiwrite(c);
  digitalWrite(_cs, HIGH);
}

void Adafruit_ST7735::writedata(uint8_t c) {
 80a1a72:	b538      	push	{r3, r4, r5, lr}
 80a1a74:	4604      	mov	r4, r0
 80a1a76:	460d      	mov	r5, r1
  digitalWrite(_rs, HIGH);
 80a1a78:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80a1a7c:	2101      	movs	r1, #1
 80a1a7e:	f005 f968 	bl	80a6d52 <digitalWrite>
  digitalWrite(_cs, LOW); 
 80a1a82:	2100      	movs	r1, #0
 80a1a84:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a1a88:	f005 f963 	bl	80a6d52 <digitalWrite>
  spiwrite(c);
 80a1a8c:	4628      	mov	r0, r5
 80a1a8e:	f7ff ffb5 	bl	80a19fc <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
  digitalWrite(_cs, HIGH);
 80a1a92:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a1a96:	2101      	movs	r1, #1
} 
 80a1a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_ST7735::writedata(uint8_t c) {
  digitalWrite(_rs, HIGH);
  digitalWrite(_cs, LOW); 
  spiwrite(c);
  digitalWrite(_cs, HIGH);
 80a1a9c:	f005 b959 	b.w	80a6d52 <digitalWrite>

080a1aa0 <_ZN15Adafruit_ST773511commandListEPKh>:



// Companion code to the above tables.  Reads and issues
// a series of LCD commands stored in PROGMEM byte array.
void Adafruit_ST7735::commandList(const uint8_t *addr) {
 80a1aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1aa4:	4680      	mov	r8, r0

  uint8_t  numCommands, numArgs;
  uint16_t ms;

  numCommands = pgm_read_byte(addr++);   // Number of commands to follow
 80a1aa6:	780f      	ldrb	r7, [r1, #0]
 80a1aa8:	1c4c      	adds	r4, r1, #1
  while(numCommands--) {                 // For each command...
 80a1aaa:	b347      	cbz	r7, 80a1afe <_ZN15Adafruit_ST773511commandListEPKh+0x5e>
    writecommand(pgm_read_byte(addr++)); //   Read, issue command
 80a1aac:	4626      	mov	r6, r4
 80a1aae:	4640      	mov	r0, r8
 80a1ab0:	f816 1b02 	ldrb.w	r1, [r6], #2
 80a1ab4:	f7ff ffc0 	bl	80a1a38 <_ZN15Adafruit_ST773512writecommandEh>
    numArgs  = pgm_read_byte(addr++);    //   Number of args to follow
 80a1ab8:	7865      	ldrb	r5, [r4, #1]
 80a1aba:	46b2      	mov	sl, r6
 80a1abc:	f025 097f 	bic.w	r9, r5, #127	; 0x7f
    ms       = numArgs & DELAY;          //   If hibit set, delay follows args
    numArgs &= ~DELAY;                   //   Mask out delay bit
 80a1ac0:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 80a1ac4:	462c      	mov	r4, r5
 80a1ac6:	fa5f f989 	uxtb.w	r9, r9
    while(numArgs--) {                   //   For each argument...
 80a1aca:	3c01      	subs	r4, #1
 80a1acc:	b2e4      	uxtb	r4, r4
 80a1ace:	2cff      	cmp	r4, #255	; 0xff
 80a1ad0:	d005      	beq.n	80a1ade <_ZN15Adafruit_ST773511commandListEPKh+0x3e>
      writedata(pgm_read_byte(addr++));  //     Read, issue argument
 80a1ad2:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80a1ad6:	4640      	mov	r0, r8
 80a1ad8:	f7ff ffcb 	bl	80a1a72 <_ZN15Adafruit_ST77359writedataEh>
  while(numCommands--) {                 // For each command...
    writecommand(pgm_read_byte(addr++)); //   Read, issue command
    numArgs  = pgm_read_byte(addr++);    //   Number of args to follow
    ms       = numArgs & DELAY;          //   If hibit set, delay follows args
    numArgs &= ~DELAY;                   //   Mask out delay bit
    while(numArgs--) {                   //   For each argument...
 80a1adc:	e7f5      	b.n	80a1aca <_ZN15Adafruit_ST773511commandListEPKh+0x2a>
 80a1ade:	1974      	adds	r4, r6, r5
      writedata(pgm_read_byte(addr++));  //     Read, issue argument
    }

    if(ms) {
 80a1ae0:	f1b9 0f00 	cmp.w	r9, #0
 80a1ae4:	d102      	bne.n	80a1aec <_ZN15Adafruit_ST773511commandListEPKh+0x4c>
 80a1ae6:	3f01      	subs	r7, #1
 80a1ae8:	b2ff      	uxtb	r7, r7
 80a1aea:	e7de      	b.n	80a1aaa <_ZN15Adafruit_ST773511commandListEPKh+0xa>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 80a1aec:	5d70      	ldrb	r0, [r6, r5]
 80a1aee:	3401      	adds	r4, #1
      if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80a1af0:	28ff      	cmp	r0, #255	; 0xff
      delay(ms);
 80a1af2:	bf08      	it	eq
 80a1af4:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 80a1af8:	f003 fc2e 	bl	80a5358 <delay>
 80a1afc:	e7f3      	b.n	80a1ae6 <_ZN15Adafruit_ST773511commandListEPKh+0x46>
 80a1afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080a1b04 <_ZN15Adafruit_ST773510commonInitEPKh>:

}


// Initialization code common to both 'B' and 'R' type displays
void Adafruit_ST7735::commonInit(const uint8_t *cmdList) {
 80a1b04:	b570      	push	{r4, r5, r6, lr}
 80a1b06:	4604      	mov	r4, r0
  colstart  = rowstart = 0; // May be overridden in init func
 80a1b08:	2500      	movs	r5, #0
 80a1b0a:	f880 502f 	strb.w	r5, [r0, #47]	; 0x2f
 80a1b0e:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e

}


// Initialization code common to both 'B' and 'R' type displays
void Adafruit_ST7735::commonInit(const uint8_t *cmdList) {
 80a1b12:	460e      	mov	r6, r1
  colstart  = rowstart = 0; // May be overridden in init func

  pinMode(_rs, OUTPUT);
 80a1b14:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80a1b18:	2101      	movs	r1, #1
 80a1b1a:	f005 f909 	bl	80a6d30 <pinMode>
  pinMode(_cs, OUTPUT);
 80a1b1e:	2101      	movs	r1, #1
 80a1b20:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a1b24:	f005 f904 	bl	80a6d30 <pinMode>
#if defined(SPARK)
  SPI.begin();
 80a1b28:	4825      	ldr	r0, [pc, #148]	; (80a1bc0 <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a1b2a:	f002 fe5d 	bl	80a47e8 <_ZN8SPIClass5beginEv>
  SPI.setClockDivider(SPI_CLOCK_DIV4); // 4 MHz (half speed)
 80a1b2e:	2108      	movs	r1, #8
 80a1b30:	4823      	ldr	r0, [pc, #140]	; (80a1bc0 <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a1b32:	f002 ff1d 	bl	80a4970 <_ZN8SPIClass15setClockDividerEh>
  //Due defaults to 4mHz (clock divider setting of 21)
  SPI.setBitOrder(MSBFIRST);
 80a1b36:	2101      	movs	r1, #1
 80a1b38:	4821      	ldr	r0, [pc, #132]	; (80a1bc0 <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a1b3a:	f002 fe5a 	bl	80a47f2 <_ZN8SPIClass11setBitOrderEh>
  SPI.setDataMode(SPI_MODE0);
 80a1b3e:	4629      	mov	r1, r5
 80a1b40:	481f      	ldr	r0, [pc, #124]	; (80a1bc0 <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a1b42:	f002 fe59 	bl	80a47f8 <_ZN8SPIClass11setDataModeEh>

#if !defined(SPARK)
  cspinmask = digitalPinToBitMask(_cs);
  rspinmask = digitalPinToBitMask(_rs);
#endif
  if(hwSPI) { // Using hardware SPI
 80a1b46:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80a1b4a:	b153      	cbz	r3, 80a1b62 <_ZN15Adafruit_ST773510commonInitEPKh+0x5e>
    SPI.begin();
 80a1b4c:	481c      	ldr	r0, [pc, #112]	; (80a1bc0 <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a1b4e:	f002 fe4b 	bl	80a47e8 <_ZN8SPIClass5beginEv>
#endif
#if defined(__SAM3X8E__)
    SPI.setClockDivider(21); // 4 MHz
    //Due defaults to 4mHz (clock divider setting of 21), but we'll set it anyway 
#endif
    SPI.setBitOrder(MSBFIRST);
 80a1b52:	2101      	movs	r1, #1
 80a1b54:	481a      	ldr	r0, [pc, #104]	; (80a1bc0 <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a1b56:	f002 fe4c 	bl	80a47f2 <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 80a1b5a:	4629      	mov	r1, r5
 80a1b5c:	4818      	ldr	r0, [pc, #96]	; (80a1bc0 <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a1b5e:	f002 fe4b 	bl	80a47f8 <_ZN8SPIClass11setDataModeEh>
#endif
  }

  // toggle RST low to reset; CS low so it'll listen to us
#if defined(SPARK)
	digitalWrite(_cs, LOW); // *csport &= ~cspinmask;
 80a1b62:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a1b66:	2100      	movs	r1, #0
 80a1b68:	f005 f8f3 	bl	80a6d52 <digitalWrite>
  *csport &= ~cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport ->PIO_CODR  |=  cspinmask; // Set control bits to LOW (idle)
#endif
  if (_rst) {
 80a1b6c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80a1b70:	b1e8      	cbz	r0, 80a1bae <_ZN15Adafruit_ST773510commonInitEPKh+0xaa>
    pinMode(_rst, OUTPUT);
 80a1b72:	2101      	movs	r1, #1
 80a1b74:	f005 f8dc 	bl	80a6d30 <pinMode>
    digitalWrite(_rst, HIGH);
 80a1b78:	2101      	movs	r1, #1
 80a1b7a:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80a1b7e:	f005 f8e8 	bl	80a6d52 <digitalWrite>
    delay(500);
 80a1b82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1b86:	f003 fbe7 	bl	80a5358 <delay>
    digitalWrite(_rst, LOW);
 80a1b8a:	2100      	movs	r1, #0
 80a1b8c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80a1b90:	f005 f8df 	bl	80a6d52 <digitalWrite>
    delay(500);
 80a1b94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1b98:	f003 fbde 	bl	80a5358 <delay>
    digitalWrite(_rst, HIGH);
 80a1b9c:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80a1ba0:	2101      	movs	r1, #1
 80a1ba2:	f005 f8d6 	bl	80a6d52 <digitalWrite>
    delay(500);
 80a1ba6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1baa:	f003 fbd5 	bl	80a5358 <delay>
  }

  if(cmdList) commandList(cmdList);
 80a1bae:	b12e      	cbz	r6, 80a1bbc <_ZN15Adafruit_ST773510commonInitEPKh+0xb8>
 80a1bb0:	4631      	mov	r1, r6
 80a1bb2:	4620      	mov	r0, r4
}
 80a1bb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(500);
    digitalWrite(_rst, HIGH);
    delay(500);
  }

  if(cmdList) commandList(cmdList);
 80a1bb8:	f7ff bf72 	b.w	80a1aa0 <_ZN15Adafruit_ST773511commandListEPKh>
 80a1bbc:	bd70      	pop	{r4, r5, r6, pc}
 80a1bbe:	bf00      	nop
 80a1bc0:	20000764 	.word	0x20000764

080a1bc4 <_ZN15Adafruit_ST77355initGEv>:
}


// Initialization for ST7735B screens
void Adafruit_ST7735::initG(void) {
  commonInit(Gcmd);
 80a1bc4:	4901      	ldr	r1, [pc, #4]	; (80a1bcc <_ZN15Adafruit_ST77355initGEv+0x8>)
 80a1bc6:	f7ff bf9d 	b.w	80a1b04 <_ZN15Adafruit_ST773510commonInitEPKh>
 80a1bca:	bf00      	nop
 80a1bcc:	080abe7c 	.word	0x080abe7c

080a1bd0 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>:
  tabcolor = options;
}


void Adafruit_ST7735::setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1,
 uint8_t y1) {
 80a1bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1bd4:	4604      	mov	r4, r0
 80a1bd6:	4688      	mov	r8, r1
 80a1bd8:	461f      	mov	r7, r3
 80a1bda:	4616      	mov	r6, r2

  writecommand(ST7735_CASET); // Column addr set
 80a1bdc:	212a      	movs	r1, #42	; 0x2a
  tabcolor = options;
}


void Adafruit_ST7735::setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1,
 uint8_t y1) {
 80a1bde:	f89d 5018 	ldrb.w	r5, [sp, #24]

  writecommand(ST7735_CASET); // Column addr set
 80a1be2:	f7ff ff29 	bl	80a1a38 <_ZN15Adafruit_ST773512writecommandEh>
  writedata(0x00);
 80a1be6:	4620      	mov	r0, r4
 80a1be8:	2100      	movs	r1, #0
 80a1bea:	f7ff ff42 	bl	80a1a72 <_ZN15Adafruit_ST77359writedataEh>
  writedata(x0+colstart);     // XSTART 
 80a1bee:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 80a1bf2:	4620      	mov	r0, r4
 80a1bf4:	4441      	add	r1, r8
 80a1bf6:	b2c9      	uxtb	r1, r1
 80a1bf8:	f7ff ff3b 	bl	80a1a72 <_ZN15Adafruit_ST77359writedataEh>
  writedata(0x00);
 80a1bfc:	4620      	mov	r0, r4
 80a1bfe:	2100      	movs	r1, #0
 80a1c00:	f7ff ff37 	bl	80a1a72 <_ZN15Adafruit_ST77359writedataEh>
  writedata(x1+colstart);     // XEND
 80a1c04:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 80a1c08:	4620      	mov	r0, r4
 80a1c0a:	4439      	add	r1, r7
 80a1c0c:	b2c9      	uxtb	r1, r1
 80a1c0e:	f7ff ff30 	bl	80a1a72 <_ZN15Adafruit_ST77359writedataEh>

  writecommand(ST7735_RASET); // Row addr set
 80a1c12:	4620      	mov	r0, r4
 80a1c14:	212b      	movs	r1, #43	; 0x2b
 80a1c16:	f7ff ff0f 	bl	80a1a38 <_ZN15Adafruit_ST773512writecommandEh>
  writedata(0x00);
 80a1c1a:	4620      	mov	r0, r4
 80a1c1c:	2100      	movs	r1, #0
 80a1c1e:	f7ff ff28 	bl	80a1a72 <_ZN15Adafruit_ST77359writedataEh>
  writedata(y0+rowstart);     // YSTART
 80a1c22:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80a1c26:	4620      	mov	r0, r4
 80a1c28:	4431      	add	r1, r6
 80a1c2a:	b2c9      	uxtb	r1, r1
 80a1c2c:	f7ff ff21 	bl	80a1a72 <_ZN15Adafruit_ST77359writedataEh>
  writedata(0x00);
 80a1c30:	4620      	mov	r0, r4
 80a1c32:	2100      	movs	r1, #0
 80a1c34:	f7ff ff1d 	bl	80a1a72 <_ZN15Adafruit_ST77359writedataEh>
  writedata(y1+rowstart);     // YEND
 80a1c38:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80a1c3c:	4620      	mov	r0, r4
 80a1c3e:	4429      	add	r1, r5
 80a1c40:	b2c9      	uxtb	r1, r1
 80a1c42:	f7ff ff16 	bl	80a1a72 <_ZN15Adafruit_ST77359writedataEh>

  writecommand(ST7735_RAMWR); // write to RAM
 80a1c46:	4620      	mov	r0, r4
}
 80a1c48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writedata(0x00);
  writedata(y0+rowstart);     // YSTART
  writedata(0x00);
  writedata(y1+rowstart);     // YEND

  writecommand(ST7735_RAMWR); // write to RAM
 80a1c4c:	212c      	movs	r1, #44	; 0x2c
 80a1c4e:	f7ff bef3 	b.w	80a1a38 <_ZN15Adafruit_ST773512writecommandEh>

080a1c52 <_ZN15Adafruit_ST773513drawFastVLineEssst>:
#endif
}


void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {
 80a1c52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1c54:	461c      	mov	r4, r3

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a1c56:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
#endif
}


void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {
 80a1c5a:	4605      	mov	r5, r0

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a1c5c:	428b      	cmp	r3, r1
#endif
}


void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {
 80a1c5e:	f8bd 7020 	ldrh.w	r7, [sp, #32]

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a1c62:	dd31      	ble.n	80a1cc8 <_ZN15Adafruit_ST773513drawFastVLineEssst+0x76>
 80a1c64:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a1c68:	4290      	cmp	r0, r2
 80a1c6a:	dd2d      	ble.n	80a1cc8 <_ZN15Adafruit_ST773513drawFastVLineEssst+0x76>
  if((y+h-1) >= _height) h = _height-y;
 80a1c6c:	1913      	adds	r3, r2, r4
 80a1c6e:	4283      	cmp	r3, r0
 80a1c70:	bfc8      	it	gt
 80a1c72:	1a84      	subgt	r4, r0, r2
  setAddrWindow(x, y, x, y+h-1);
 80a1c74:	b2d2      	uxtb	r2, r2
void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
  if((y+h-1) >= _height) h = _height-y;
 80a1c76:	bfc8      	it	gt
 80a1c78:	b224      	sxthgt	r4, r4
  setAddrWindow(x, y, x, y+h-1);
 80a1c7a:	1e56      	subs	r6, r2, #1
 80a1c7c:	4426      	add	r6, r4
 80a1c7e:	b2cb      	uxtb	r3, r1
 80a1c80:	b2f6      	uxtb	r6, r6
 80a1c82:	4619      	mov	r1, r3
 80a1c84:	9600      	str	r6, [sp, #0]
 80a1c86:	4628      	mov	r0, r5
 80a1c88:	f7ff ffa2 	bl	80a1bd0 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;

#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
 80a1c8c:	2101      	movs	r1, #1
 80a1c8e:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
 80a1c92:	f005 f85e 	bl	80a6d52 <digitalWrite>
  digitalWrite(_cs, LOW); 
 80a1c96:	2100      	movs	r1, #0
 80a1c98:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
  if((y+h-1) >= _height) h = _height-y;
  setAddrWindow(x, y, x, y+h-1);

  uint8_t hi = color >> 8, lo = color;
 80a1c9c:	0a3e      	lsrs	r6, r7, #8
 80a1c9e:	b2ff      	uxtb	r7, r7

#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
  digitalWrite(_cs, LOW); 
 80a1ca0:	f005 f857 	bl	80a6d52 <digitalWrite>
 80a1ca4:	b2a4      	uxth	r4, r4
#endif
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif
  while (h--) {
 80a1ca6:	b13c      	cbz	r4, 80a1cb8 <_ZN15Adafruit_ST773513drawFastVLineEssst+0x66>
    spiwrite(hi);
 80a1ca8:	4630      	mov	r0, r6
 80a1caa:	f7ff fea7 	bl	80a19fc <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
    spiwrite(lo);
 80a1cae:	4638      	mov	r0, r7
 80a1cb0:	f7ff fea4 	bl	80a19fc <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
 80a1cb4:	3c01      	subs	r4, #1
 80a1cb6:	e7f5      	b.n	80a1ca4 <_ZN15Adafruit_ST773513drawFastVLineEssst+0x52>
  while (w--) {
    spiwrite(hi);
    spiwrite(lo);
  }
#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a1cb8:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
 80a1cbc:	2101      	movs	r1, #1
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a1cbe:	b003      	add	sp, #12
 80a1cc0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  while (w--) {
    spiwrite(hi);
    spiwrite(lo);
  }
#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a1cc4:	f005 b845 	b.w	80a6d52 <digitalWrite>
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a1cc8:	b003      	add	sp, #12
 80a1cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1ccc <_ZN15Adafruit_ST773513drawFastHLineEssst>:


void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {
 80a1ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1cce:	461c      	mov	r4, r3

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a1cd0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
#endif
}


void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {
 80a1cd4:	4605      	mov	r5, r0

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a1cd6:	428b      	cmp	r3, r1
#endif
}


void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {
 80a1cd8:	f8bd 6020 	ldrh.w	r6, [sp, #32]

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a1cdc:	dd30      	ble.n	80a1d40 <_ZN15Adafruit_ST773513drawFastHLineEssst+0x74>
 80a1cde:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a1ce2:	4290      	cmp	r0, r2
 80a1ce4:	dd2c      	ble.n	80a1d40 <_ZN15Adafruit_ST773513drawFastHLineEssst+0x74>
  if((x+w-1) >= _width)  w = _width-x;
 80a1ce6:	1908      	adds	r0, r1, r4
 80a1ce8:	4298      	cmp	r0, r3
 80a1cea:	bfc8      	it	gt
 80a1cec:	1a5c      	subgt	r4, r3, r1
  setAddrWindow(x, y, x+w-1, y);
 80a1cee:	b2c9      	uxtb	r1, r1
void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
  if((x+w-1) >= _width)  w = _width-x;
 80a1cf0:	bfc8      	it	gt
 80a1cf2:	b224      	sxthgt	r4, r4
  setAddrWindow(x, y, x+w-1, y);
 80a1cf4:	1e4b      	subs	r3, r1, #1
 80a1cf6:	b2d2      	uxtb	r2, r2
 80a1cf8:	4423      	add	r3, r4
 80a1cfa:	9200      	str	r2, [sp, #0]
 80a1cfc:	b2db      	uxtb	r3, r3
 80a1cfe:	4628      	mov	r0, r5
 80a1d00:	f7ff ff66 	bl	80a1bd0 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;
#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
 80a1d04:	2101      	movs	r1, #1
 80a1d06:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
 80a1d0a:	f005 f822 	bl	80a6d52 <digitalWrite>
  digitalWrite(_cs, LOW); 
 80a1d0e:	2100      	movs	r1, #0
 80a1d10:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
  if((x+w-1) >= _width)  w = _width-x;
  setAddrWindow(x, y, x+w-1, y);

  uint8_t hi = color >> 8, lo = color;
 80a1d14:	0a37      	lsrs	r7, r6, #8
 80a1d16:	b2f6      	uxtb	r6, r6
#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
  digitalWrite(_cs, LOW); 
 80a1d18:	f005 f81b 	bl	80a6d52 <digitalWrite>
 80a1d1c:	b2a4      	uxth	r4, r4
#endif
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif
  while (w--) {
 80a1d1e:	b13c      	cbz	r4, 80a1d30 <_ZN15Adafruit_ST773513drawFastHLineEssst+0x64>
    spiwrite(hi);
 80a1d20:	4638      	mov	r0, r7
 80a1d22:	f7ff fe6b 	bl	80a19fc <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
    spiwrite(lo);
 80a1d26:	4630      	mov	r0, r6
 80a1d28:	f7ff fe68 	bl	80a19fc <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
 80a1d2c:	3c01      	subs	r4, #1
 80a1d2e:	e7f5      	b.n	80a1d1c <_ZN15Adafruit_ST773513drawFastHLineEssst+0x50>
  }
#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a1d30:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
 80a1d34:	2101      	movs	r1, #1
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a1d36:	b003      	add	sp, #12
 80a1d38:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  while (w--) {
    spiwrite(hi);
    spiwrite(lo);
  }
#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a1d3c:	f005 b809 	b.w	80a6d52 <digitalWrite>
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a1d40:	b003      	add	sp, #12
 80a1d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1d44 <_ZN15Adafruit_ST77358fillRectEsssst>:



// fill a rectangle
void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {
 80a1d44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a1d48:	4605      	mov	r5, r0

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
 80a1d4a:	f9b0 000c 	ldrsh.w	r0, [r0, #12]



// fill a rectangle
void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {
 80a1d4e:	461e      	mov	r6, r3

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
 80a1d50:	4288      	cmp	r0, r1



// fill a rectangle
void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {
 80a1d52:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 80a1d56:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
 80a1d5a:	dd44      	ble.n	80a1de6 <_ZN15Adafruit_ST77358fillRectEsssst+0xa2>
 80a1d5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80a1d60:	4293      	cmp	r3, r2
 80a1d62:	dd40      	ble.n	80a1de6 <_ZN15Adafruit_ST77358fillRectEsssst+0xa2>
  if((x + w - 1) >= _width)  w = _width  - x;
 80a1d64:	eb01 0e06 	add.w	lr, r1, r6
 80a1d68:	4586      	cmp	lr, r0
 80a1d6a:	bfc8      	it	gt
 80a1d6c:	1a46      	subgt	r6, r0, r1
  if((y + h - 1) >= _height) h = _height - y;
 80a1d6e:	eb02 0004 	add.w	r0, r2, r4
void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
  if((x + w - 1) >= _width)  w = _width  - x;
 80a1d72:	bfc8      	it	gt
 80a1d74:	b236      	sxthgt	r6, r6
  if((y + h - 1) >= _height) h = _height - y;
 80a1d76:	4298      	cmp	r0, r3
 80a1d78:	bfc8      	it	gt
 80a1d7a:	1a9c      	subgt	r4, r3, r2

  setAddrWindow(x, y, x+w-1, y+h-1);
 80a1d7c:	b2d2      	uxtb	r2, r2
  uint16_t color) {

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
  if((x + w - 1) >= _width)  w = _width  - x;
  if((y + h - 1) >= _height) h = _height - y;
 80a1d7e:	bfc8      	it	gt
 80a1d80:	b224      	sxthgt	r4, r4

  setAddrWindow(x, y, x+w-1, y+h-1);
 80a1d82:	b2c9      	uxtb	r1, r1
 80a1d84:	1e50      	subs	r0, r2, #1
 80a1d86:	1e4b      	subs	r3, r1, #1
 80a1d88:	4420      	add	r0, r4
 80a1d8a:	b2c0      	uxtb	r0, r0
 80a1d8c:	4433      	add	r3, r6
 80a1d8e:	9000      	str	r0, [sp, #0]
 80a1d90:	b2db      	uxtb	r3, r3
 80a1d92:	4628      	mov	r0, r5
 80a1d94:	f7ff ff1c 	bl	80a1bd0 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;
#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
 80a1d98:	2101      	movs	r1, #1
 80a1d9a:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
 80a1d9e:	f004 ffd8 	bl	80a6d52 <digitalWrite>
  digitalWrite(_cs, LOW); 
 80a1da2:	2100      	movs	r1, #0
 80a1da4:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
  if((x + w - 1) >= _width)  w = _width  - x;
  if((y + h - 1) >= _height) h = _height - y;

  setAddrWindow(x, y, x+w-1, y+h-1);

  uint8_t hi = color >> 8, lo = color;
 80a1da8:	ea4f 2817 	mov.w	r8, r7, lsr #8
 80a1dac:	fa5f f987 	uxtb.w	r9, r7
#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
  digitalWrite(_cs, LOW); 
 80a1db0:	f004 ffcf 	bl	80a6d52 <digitalWrite>
#endif
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif
  for(y=h; y>0; y--) {
 80a1db4:	2c00      	cmp	r4, #0
 80a1db6:	dd0e      	ble.n	80a1dd6 <_ZN15Adafruit_ST77358fillRectEsssst+0x92>
 80a1db8:	4637      	mov	r7, r6
    for(x=w; x>0; x--) {
 80a1dba:	2f00      	cmp	r7, #0
 80a1dbc:	dd08      	ble.n	80a1dd0 <_ZN15Adafruit_ST77358fillRectEsssst+0x8c>
      spiwrite(hi);
 80a1dbe:	4640      	mov	r0, r8
 80a1dc0:	f7ff fe1c 	bl	80a19fc <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
 80a1dc4:	3f01      	subs	r7, #1
      spiwrite(lo);
 80a1dc6:	4648      	mov	r0, r9
 80a1dc8:	f7ff fe18 	bl	80a19fc <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
 80a1dcc:	b23f      	sxth	r7, r7
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif
  for(y=h; y>0; y--) {
    for(x=w; x>0; x--) {
 80a1dce:	e7f4      	b.n	80a1dba <_ZN15Adafruit_ST77358fillRectEsssst+0x76>
 80a1dd0:	3c01      	subs	r4, #1
 80a1dd2:	b224      	sxth	r4, r4
#endif
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif
  for(y=h; y>0; y--) {
 80a1dd4:	e7ee      	b.n	80a1db4 <_ZN15Adafruit_ST77358fillRectEsssst+0x70>
      spiwrite(lo);
    }
  }

#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a1dd6:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
 80a1dda:	2101      	movs	r1, #1
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a1ddc:	b003      	add	sp, #12
 80a1dde:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      spiwrite(lo);
    }
  }

#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a1de2:	f004 bfb6 	b.w	80a6d52 <digitalWrite>
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a1de6:	b003      	add	sp, #12
 80a1de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a1dec <_ZN15Adafruit_ST77359drawPixelEsst>:
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}

void Adafruit_ST7735::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a1dec:	b573      	push	{r0, r1, r4, r5, r6, lr}

  if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
 80a1dee:	2900      	cmp	r1, #0
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}

void Adafruit_ST7735::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a1df0:	4604      	mov	r4, r0
 80a1df2:	461e      	mov	r6, r3

  if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
 80a1df4:	db2a      	blt.n	80a1e4c <_ZN15Adafruit_ST77359drawPixelEsst+0x60>
 80a1df6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a1dfa:	428b      	cmp	r3, r1
 80a1dfc:	dd26      	ble.n	80a1e4c <_ZN15Adafruit_ST77359drawPixelEsst+0x60>
 80a1dfe:	2a00      	cmp	r2, #0
 80a1e00:	db24      	blt.n	80a1e4c <_ZN15Adafruit_ST77359drawPixelEsst+0x60>
 80a1e02:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80a1e06:	4293      	cmp	r3, r2
 80a1e08:	dd20      	ble.n	80a1e4c <_ZN15Adafruit_ST77359drawPixelEsst+0x60>

  setAddrWindow(x,y,x+1,y+1);
 80a1e0a:	b2d2      	uxtb	r2, r2
 80a1e0c:	1c55      	adds	r5, r2, #1
 80a1e0e:	b2c9      	uxtb	r1, r1
 80a1e10:	1c4b      	adds	r3, r1, #1
 80a1e12:	b2ed      	uxtb	r5, r5
 80a1e14:	b2db      	uxtb	r3, r3
 80a1e16:	9500      	str	r5, [sp, #0]
 80a1e18:	f7ff feda 	bl	80a1bd0 <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
 80a1e1c:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80a1e20:	2101      	movs	r1, #1
 80a1e22:	f004 ff96 	bl	80a6d52 <digitalWrite>
  digitalWrite(_cs, LOW); 
 80a1e26:	2100      	movs	r1, #0
 80a1e28:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a1e2c:	f004 ff91 	bl	80a6d52 <digitalWrite>
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif

  spiwrite(color >> 8);
 80a1e30:	0a30      	lsrs	r0, r6, #8
 80a1e32:	f7ff fde3 	bl	80a19fc <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
  spiwrite(color);
 80a1e36:	b2f0      	uxtb	r0, r6
 80a1e38:	f7ff fde0 	bl	80a19fc <_ZN15Adafruit_ST77358spiwriteEh.isra.0>

#if defined(SPARK)
    digitalWrite(_cs, HIGH); 
 80a1e3c:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a1e40:	2101      	movs	r1, #1
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a1e42:	b002      	add	sp, #8
 80a1e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  spiwrite(color >> 8);
  spiwrite(color);

#if defined(SPARK)
    digitalWrite(_cs, HIGH); 
 80a1e48:	f004 bf83 	b.w	80a6d52 <digitalWrite>
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a1e4c:	b002      	add	sp, #8
 80a1e4e:	bd70      	pop	{r4, r5, r6, pc}

080a1e50 <_ZN15Adafruit_ST773511setRotationEh>:
#define MADCTL_ML  0x10
#define MADCTL_RGB 0x00
#define MADCTL_BGR 0x08
#define MADCTL_MH  0x04

void Adafruit_ST7735::setRotation(uint8_t m) {
 80a1e50:	b538      	push	{r3, r4, r5, lr}
 80a1e52:	460d      	mov	r5, r1
 80a1e54:	4604      	mov	r4, r0

  writecommand(ST7735_MADCTL);
 80a1e56:	2136      	movs	r1, #54	; 0x36
 80a1e58:	f7ff fdee 	bl	80a1a38 <_ZN15Adafruit_ST773512writecommandEh>
  rotation = m % 4; // can't be higher than 3
 80a1e5c:	f005 0103 	and.w	r1, r5, #3
  switch (rotation) {
 80a1e60:	2902      	cmp	r1, #2
#define MADCTL_MH  0x04

void Adafruit_ST7735::setRotation(uint8_t m) {

  writecommand(ST7735_MADCTL);
  rotation = m % 4; // can't be higher than 3
 80a1e62:	7661      	strb	r1, [r4, #25]
 80a1e64:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
  switch (rotation) {
 80a1e68:	d01a      	beq.n	80a1ea0 <_ZN15Adafruit_ST773511setRotationEh+0x50>
 80a1e6a:	2903      	cmp	r1, #3
 80a1e6c:	d01d      	beq.n	80a1eaa <_ZN15Adafruit_ST773511setRotationEh+0x5a>
 80a1e6e:	2901      	cmp	r1, #1
 80a1e70:	d00a      	beq.n	80a1e88 <_ZN15Adafruit_ST773511setRotationEh+0x38>
   case 0:
     if (tabcolor == INITR_BLACKTAB) {
 80a1e72:	2b02      	cmp	r3, #2
       writedata(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 80a1e74:	bf0c      	ite	eq
 80a1e76:	21c0      	moveq	r1, #192	; 0xc0
     } else {
       writedata(MADCTL_MX | MADCTL_MY | MADCTL_BGR);
 80a1e78:	21c8      	movne	r1, #200	; 0xc8
 80a1e7a:	4620      	mov	r0, r4
 80a1e7c:	f7ff fdf9 	bl	80a1a72 <_ZN15Adafruit_ST77359writedataEh>
     }
     _width  = ST7735_TFTWIDTH;
 80a1e80:	2380      	movs	r3, #128	; 0x80
 80a1e82:	81a3      	strh	r3, [r4, #12]
     _height = ST7735_TFTHEIGHT;
 80a1e84:	23a0      	movs	r3, #160	; 0xa0
 80a1e86:	e009      	b.n	80a1e9c <_ZN15Adafruit_ST773511setRotationEh+0x4c>
     break;
   case 1:
     if (tabcolor == INITR_BLACKTAB) {
 80a1e88:	2b02      	cmp	r3, #2
       writedata(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 80a1e8a:	bf0c      	ite	eq
 80a1e8c:	21a0      	moveq	r1, #160	; 0xa0
     } else {
       writedata(MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 80a1e8e:	21a8      	movne	r1, #168	; 0xa8
 80a1e90:	4620      	mov	r0, r4
 80a1e92:	f7ff fdee 	bl	80a1a72 <_ZN15Adafruit_ST77359writedataEh>
     }
     _width  = ST7735_TFTHEIGHT;
 80a1e96:	23a0      	movs	r3, #160	; 0xa0
 80a1e98:	81a3      	strh	r3, [r4, #12]
     _height = ST7735_TFTWIDTH;
 80a1e9a:	2380      	movs	r3, #128	; 0x80
 80a1e9c:	81e3      	strh	r3, [r4, #14]
     break;
 80a1e9e:	bd38      	pop	{r3, r4, r5, pc}
  case 2:
     if (tabcolor == INITR_BLACKTAB) {
 80a1ea0:	2b02      	cmp	r3, #2
       writedata(MADCTL_RGB);
 80a1ea2:	bf0c      	ite	eq
 80a1ea4:	2100      	moveq	r1, #0
     } else {
       writedata(MADCTL_BGR);
 80a1ea6:	2108      	movne	r1, #8
 80a1ea8:	e7e7      	b.n	80a1e7a <_ZN15Adafruit_ST773511setRotationEh+0x2a>
     }
     _width  = ST7735_TFTWIDTH;
     _height = ST7735_TFTHEIGHT;
    break;
   case 3:
     if (tabcolor == INITR_BLACKTAB) {
 80a1eaa:	2b02      	cmp	r3, #2
       writedata(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 80a1eac:	bf0c      	ite	eq
 80a1eae:	2160      	moveq	r1, #96	; 0x60
     } else {
       writedata(MADCTL_MX | MADCTL_MV | MADCTL_BGR);
 80a1eb0:	2168      	movne	r1, #104	; 0x68
 80a1eb2:	e7ed      	b.n	80a1e90 <_ZN15Adafruit_ST773511setRotationEh+0x40>

080a1eb4 <_GLOBAL__sub_I__ZN15Adafruit_ST7735C2Ehhh>:
 80a1eb4:	f002 b832 	b.w	80a3f1c <HAL_Pin_Map>

080a1eb8 <_GLOBAL__sub_I_timesNewRoman_8ptBitmaps>:
 80a1eb8:	f002 b830 	b.w	80a3f1c <HAL_Pin_Map>

080a1ebc <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
 80a1ebc:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
 80a1ebe:	7203      	strb	r3, [r0, #8]
	firstreading = true;
 80a1ec0:	2301      	movs	r3, #1
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
	_pin = pin;
 80a1ec2:	7181      	strb	r1, [r0, #6]
	_type = type;
 80a1ec4:	71c2      	strb	r2, [r0, #7]
	_count = count;
	firstreading = true;
 80a1ec6:	7403      	strb	r3, [r0, #16]
}
 80a1ec8:	bd10      	pop	{r4, pc}

080a1eca <_ZN3DHT5beginEv>:

void DHT::begin(void) {
 80a1eca:	b510      	push	{r4, lr}
 80a1ecc:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
 80a1ece:	2100      	movs	r1, #0
 80a1ed0:	7980      	ldrb	r0, [r0, #6]
 80a1ed2:	f004 ff2d 	bl	80a6d30 <pinMode>
	digitalWrite(_pin, HIGH);
 80a1ed6:	2101      	movs	r1, #1
 80a1ed8:	79a0      	ldrb	r0, [r4, #6]
 80a1eda:	f004 ff3a 	bl	80a6d52 <digitalWrite>
	_lastreadtime = 0;
 80a1ede:	2300      	movs	r3, #0
 80a1ee0:	60e3      	str	r3, [r4, #12]
 80a1ee2:	bd10      	pop	{r4, pc}

080a1ee4 <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
 80a1ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a1ee8:	4604      	mov	r4, r0
 80a1eea:	f001 ffa7 	bl	80a3e3c <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
 80a1eee:	68e3      	ldr	r3, [r4, #12]
 80a1ef0:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
 80a1ef2:	bf84      	itt	hi
 80a1ef4:	2300      	movhi	r3, #0
 80a1ef6:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80a1ef8:	7c23      	ldrb	r3, [r4, #16]
 80a1efa:	b93b      	cbnz	r3, 80a1f0c <_ZN3DHT4readEv+0x28>
 80a1efc:	68e3      	ldr	r3, [r4, #12]
 80a1efe:	1ac0      	subs	r0, r0, r3
 80a1f00:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80a1f04:	d202      	bcs.n	80a1f0c <_ZN3DHT4readEv+0x28>
		return true; // return last correct measurement
 80a1f06:	2001      	movs	r0, #1
 80a1f08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
 80a1f0c:	2500      	movs	r5, #0
 80a1f0e:	7425      	strb	r5, [r4, #16]
 80a1f10:	f001 ff94 	bl	80a3e3c <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 80a1f14:	2101      	movs	r1, #1
	firstreading = false;
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
 80a1f16:	60e0      	str	r0, [r4, #12]

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a1f18:	7125      	strb	r5, [r4, #4]
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 80a1f1a:	79a0      	ldrb	r0, [r4, #6]
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a1f1c:	70e5      	strb	r5, [r4, #3]
 80a1f1e:	70a5      	strb	r5, [r4, #2]
 80a1f20:	7065      	strb	r5, [r4, #1]
 80a1f22:	7025      	strb	r5, [r4, #0]
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 80a1f24:	f004 ff15 	bl	80a6d52 <digitalWrite>
	delay(250);
 80a1f28:	20fa      	movs	r0, #250	; 0xfa
 80a1f2a:	f003 fa15 	bl	80a5358 <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
 80a1f2e:	2101      	movs	r1, #1
 80a1f30:	79a0      	ldrb	r0, [r4, #6]
 80a1f32:	f004 fefd 	bl	80a6d30 <pinMode>
	digitalWrite(_pin, LOW);
 80a1f36:	4629      	mov	r1, r5
 80a1f38:	79a0      	ldrb	r0, [r4, #6]
 80a1f3a:	f004 ff0a 	bl	80a6d52 <digitalWrite>
	delay(20);
 80a1f3e:	2014      	movs	r0, #20
 80a1f40:	f003 fa0a 	bl	80a5358 <delay>
	noInterrupts();
 80a1f44:	f003 fabc 	bl	80a54c0 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
 80a1f48:	2101      	movs	r1, #1
 80a1f4a:	79a0      	ldrb	r0, [r4, #6]
 80a1f4c:	f004 ff01 	bl	80a6d52 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a1f50:	2028      	movs	r0, #40	; 0x28
 80a1f52:	f001 ff63 	bl	80a3e1c <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
 80a1f56:	4629      	mov	r1, r5
 80a1f58:	79a0      	ldrb	r0, [r4, #6]
 80a1f5a:	f004 fee9 	bl	80a6d30 <pinMode>


boolean DHT::read(void) {
	uint8_t laststate = HIGH;
	uint8_t counter = 0;
	uint8_t j = 0, i;
 80a1f5e:	462e      	mov	r6, r5
	return Td;
}


boolean DHT::read(void) {
	uint8_t laststate = HIGH;
 80a1f60:	2701      	movs	r7, #1
 80a1f62:	f04f 0800 	mov.w	r8, #0
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
 80a1f66:	79a0      	ldrb	r0, [r4, #6]
 80a1f68:	f004 ff0c 	bl	80a6d84 <digitalRead>
 80a1f6c:	42b8      	cmp	r0, r7
 80a1f6e:	fa5f f988 	uxtb.w	r9, r8
 80a1f72:	d108      	bne.n	80a1f86 <_ZN3DHT4readEv+0xa2>
 80a1f74:	2001      	movs	r0, #1
 80a1f76:	f108 0801 	add.w	r8, r8, #1
 80a1f7a:	f001 ff4f 	bl	80a3e1c <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
 80a1f7e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80a1f82:	d1f0      	bne.n	80a1f66 <_ZN3DHT4readEv+0x82>
 80a1f84:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
 80a1f86:	79a0      	ldrb	r0, [r4, #6]
 80a1f88:	f004 fefc 	bl	80a6d84 <digitalRead>

		if (counter == 255) break;
 80a1f8c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = digitalRead(_pin);
 80a1f90:	b2c7      	uxtb	r7, r0

		if (counter == 255) break;
 80a1f92:	d014      	beq.n	80a1fbe <_ZN3DHT4readEv+0xda>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
 80a1f94:	2d03      	cmp	r5, #3
 80a1f96:	d90e      	bls.n	80a1fb6 <_ZN3DHT4readEv+0xd2>
 80a1f98:	07eb      	lsls	r3, r5, #31
 80a1f9a:	d40c      	bmi.n	80a1fb6 <_ZN3DHT4readEv+0xd2>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 80a1f9c:	08f2      	lsrs	r2, r6, #3
 80a1f9e:	5ca3      	ldrb	r3, [r4, r2]
			if (counter > _count)
				data[j/8] |= 1;
			j++;
 80a1fa0:	3601      	adds	r6, #1
		if (counter == 255) break;

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 80a1fa2:	005b      	lsls	r3, r3, #1
 80a1fa4:	b2db      	uxtb	r3, r3
 80a1fa6:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
 80a1fa8:	7a21      	ldrb	r1, [r4, #8]
				data[j/8] |= 1;
			j++;
 80a1faa:	b2f6      	uxtb	r6, r6

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
			if (counter > _count)
 80a1fac:	4549      	cmp	r1, r9
				data[j/8] |= 1;
 80a1fae:	bf3c      	itt	cc
 80a1fb0:	f043 0301 	orrcc.w	r3, r3, #1
 80a1fb4:	54a3      	strbcc	r3, [r4, r2]
	digitalWrite(_pin, HIGH);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
 80a1fb6:	3501      	adds	r5, #1
 80a1fb8:	b2ed      	uxtb	r5, r5
 80a1fba:	2d55      	cmp	r5, #85	; 0x55
 80a1fbc:	d1d1      	bne.n	80a1f62 <_ZN3DHT4readEv+0x7e>
			j++;
		}

	}

	interrupts();
 80a1fbe:	f003 fa81 	bl	80a54c4 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
 80a1fc2:	2e27      	cmp	r6, #39	; 0x27
 80a1fc4:	d90a      	bls.n	80a1fdc <_ZN3DHT4readEv+0xf8>
 80a1fc6:	7822      	ldrb	r2, [r4, #0]
 80a1fc8:	7863      	ldrb	r3, [r4, #1]
 80a1fca:	7921      	ldrb	r1, [r4, #4]
 80a1fcc:	4413      	add	r3, r2
 80a1fce:	78a2      	ldrb	r2, [r4, #2]
 80a1fd0:	4413      	add	r3, r2
 80a1fd2:	78e2      	ldrb	r2, [r4, #3]
 80a1fd4:	4413      	add	r3, r2
 80a1fd6:	b2db      	uxtb	r3, r3
 80a1fd8:	4299      	cmp	r1, r3
 80a1fda:	d094      	beq.n	80a1f06 <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}
 
	return false;
 80a1fdc:	2000      	movs	r0, #0

}
 80a1fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080a1fe4 <_ZN3DHT15readTemperatureEv>:
	pinMode(_pin, INPUT);
	digitalWrite(_pin, HIGH);
	_lastreadtime = 0;
}

float DHT::readTemperature() {
 80a1fe4:	b570      	push	{r4, r5, r6, lr}
 80a1fe6:	4604      	mov	r4, r0
	float f;

	if (read()) {
 80a1fe8:	f7ff ff7c 	bl	80a1ee4 <_ZN3DHT4readEv>
 80a1fec:	b318      	cbz	r0, 80a2036 <_ZN3DHT15readTemperatureEv+0x52>
		switch (_type) {
 80a1fee:	79e3      	ldrb	r3, [r4, #7]
 80a1ff0:	2b0b      	cmp	r3, #11
 80a1ff2:	d004      	beq.n	80a1ffe <_ZN3DHT15readTemperatureEv+0x1a>
 80a1ff4:	d31f      	bcc.n	80a2036 <_ZN3DHT15readTemperatureEv+0x52>
 80a1ff6:	3b15      	subs	r3, #21
 80a1ff8:	2b01      	cmp	r3, #1
 80a1ffa:	d904      	bls.n	80a2006 <_ZN3DHT15readTemperatureEv+0x22>
 80a1ffc:	e01b      	b.n	80a2036 <_ZN3DHT15readTemperatureEv+0x52>
			case DHT11:
				f = data[2];
 80a1ffe:	78a0      	ldrb	r0, [r4, #2]
 80a2000:	f006 f848 	bl	80a8094 <__aeabi_ui2f>
				return f;
 80a2004:	bd70      	pop	{r4, r5, r6, pc}
			case DHT22:
			case DHT21:
				f = data[2] & 0x7F;
 80a2006:	78a5      	ldrb	r5, [r4, #2]
 80a2008:	f005 007f 	and.w	r0, r5, #127	; 0x7f
 80a200c:	f006 f846 	bl	80a809c <__aeabi_i2f>
				f *= 256;
 80a2010:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a2014:	f006 f896 	bl	80a8144 <__aeabi_fmul>
 80a2018:	4606      	mov	r6, r0
				f += data[3];
 80a201a:	78e0      	ldrb	r0, [r4, #3]
 80a201c:	f006 f83e 	bl	80a809c <__aeabi_i2f>
 80a2020:	4631      	mov	r1, r6
 80a2022:	f005 ff87 	bl	80a7f34 <__addsf3>
				f /= 10;
 80a2026:	4905      	ldr	r1, [pc, #20]	; (80a203c <_ZN3DHT15readTemperatureEv+0x58>)
 80a2028:	f006 f940 	bl	80a82ac <__aeabi_fdiv>
				if (data[2] & 0x80)
 80a202c:	062b      	lsls	r3, r5, #24
 80a202e:	d503      	bpl.n	80a2038 <_ZN3DHT15readTemperatureEv+0x54>
					f *= -1;
 80a2030:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a2034:	bd70      	pop	{r4, r5, r6, pc}
				return f;
		}
	}
	return NAN;
 80a2036:	4802      	ldr	r0, [pc, #8]	; (80a2040 <_ZN3DHT15readTemperatureEv+0x5c>)
}
 80a2038:	bd70      	pop	{r4, r5, r6, pc}
 80a203a:	bf00      	nop
 80a203c:	41200000 	.word	0x41200000
 80a2040:	7fc00000 	.word	0x7fc00000

080a2044 <_ZN3DHT14getTempCelciusEv>:
float DHT::getHumidity() {
	return readHumidity();
}

float DHT::getTempCelcius() {
	return readTemperature();
 80a2044:	f7ff bfce 	b.w	80a1fe4 <_ZN3DHT15readTemperatureEv>

080a2048 <_ZN3DHT12readHumidityEv>:

float DHT::convertCtoK(float c) {
	return c + 273.15;
}

float DHT::readHumidity(void) {
 80a2048:	b538      	push	{r3, r4, r5, lr}
 80a204a:	4604      	mov	r4, r0
	float f;

	if (read()) {
 80a204c:	f7ff ff4a 	bl	80a1ee4 <_ZN3DHT4readEv>
 80a2050:	b1e0      	cbz	r0, 80a208c <_ZN3DHT12readHumidityEv+0x44>
		switch (_type) {
 80a2052:	79e3      	ldrb	r3, [r4, #7]
 80a2054:	2b0b      	cmp	r3, #11
 80a2056:	d015      	beq.n	80a2084 <_ZN3DHT12readHumidityEv+0x3c>
 80a2058:	d318      	bcc.n	80a208c <_ZN3DHT12readHumidityEv+0x44>
 80a205a:	3b15      	subs	r3, #21
 80a205c:	2b01      	cmp	r3, #1
 80a205e:	d815      	bhi.n	80a208c <_ZN3DHT12readHumidityEv+0x44>
			case DHT11:
				f = data[0];
				return f;
			case DHT22:
			case DHT21:
				f = data[0];
 80a2060:	7820      	ldrb	r0, [r4, #0]
 80a2062:	f006 f817 	bl	80a8094 <__aeabi_ui2f>
				f *= 256;
 80a2066:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a206a:	f006 f86b 	bl	80a8144 <__aeabi_fmul>
 80a206e:	4605      	mov	r5, r0
				f += data[1];
 80a2070:	7860      	ldrb	r0, [r4, #1]
 80a2072:	f006 f813 	bl	80a809c <__aeabi_i2f>
 80a2076:	4629      	mov	r1, r5
 80a2078:	f005 ff5c 	bl	80a7f34 <__addsf3>
				f /= 10;
 80a207c:	4904      	ldr	r1, [pc, #16]	; (80a2090 <_ZN3DHT12readHumidityEv+0x48>)
 80a207e:	f006 f915 	bl	80a82ac <__aeabi_fdiv>
 80a2082:	bd38      	pop	{r3, r4, r5, pc}
	float f;

	if (read()) {
		switch (_type) {
			case DHT11:
				f = data[0];
 80a2084:	7820      	ldrb	r0, [r4, #0]
 80a2086:	f006 f805 	bl	80a8094 <__aeabi_ui2f>
				return f;
 80a208a:	bd38      	pop	{r3, r4, r5, pc}
				f += data[1];
				f /= 10;
				return f;
		}
	}
	return NAN;
 80a208c:	4801      	ldr	r0, [pc, #4]	; (80a2094 <_ZN3DHT12readHumidityEv+0x4c>)
}
 80a208e:	bd38      	pop	{r3, r4, r5, pc}
 80a2090:	41200000 	.word	0x41200000
 80a2094:	7fc00000 	.word	0x7fc00000

080a2098 <_ZN3DHT11getHumidityEv>:
	}
	return NAN;
}

float DHT::getHumidity() {
	return readHumidity();
 80a2098:	f7ff bfd6 	b.w	80a2048 <_ZN3DHT12readHumidityEv>

080a209c <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
 80a209c:	f001 bf3e 	b.w	80a3f1c <HAL_Pin_Map>

080a20a0 <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
 80a20a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a20a4:	4617      	mov	r7, r2
 80a20a6:	469b      	mov	fp, r3
 80a20a8:	4681      	mov	r9, r0
 80a20aa:	468a      	mov	sl, r1
 80a20ac:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a20b0:	f001 fec4 	bl	80a3e3c <HAL_Timer_Get_Milli_Seconds>
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
 80a20b4:	2500      	movs	r5, #0
 80a20b6:	463b      	mov	r3, r7
 80a20b8:	4606      	mov	r6, r0
        Serial.print(" bytes from 0x");
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
 80a20ba:	462c      	mov	r4, r5
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
 80a20bc:	2f20      	cmp	r7, #32
 80a20be:	bfa8      	it	ge
 80a20c0:	2320      	movge	r3, #32
 80a20c2:	9301      	str	r3, [sp, #4]
 80a20c4:	42bd      	cmp	r5, r7
 80a20c6:	d22c      	bcs.n	80a2122 <_ZN6I2Cdev9readBytesEhhhPht+0x82>
                Wire.beginTransmission(devAddr);
 80a20c8:	f004 fdb4 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a20cc:	4649      	mov	r1, r9
 80a20ce:	f002 fce3 	bl	80a4a98 <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
 80a20d2:	f004 fdaf 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a20d6:	6803      	ldr	r3, [r0, #0]
 80a20d8:	4651      	mov	r1, sl
 80a20da:	689b      	ldr	r3, [r3, #8]
 80a20dc:	4798      	blx	r3
                Wire.endTransmission();
 80a20de:	f004 fda9 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a20e2:	f002 fce1 	bl	80a4aa8 <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
 80a20e6:	f004 fda5 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a20ea:	4649      	mov	r1, r9
 80a20ec:	f002 fcd4 	bl	80a4a98 <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
 80a20f0:	f004 fda0 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a20f4:	1b7a      	subs	r2, r7, r5
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
 80a20f6:	2a20      	cmp	r2, #32
 80a20f8:	bfa8      	it	ge
 80a20fa:	2220      	movge	r2, #32
 80a20fc:	b2d2      	uxtb	r2, r2
 80a20fe:	4649      	mov	r1, r9
 80a2100:	f002 fcc7 	bl	80a4a92 <_ZN7TwoWire11requestFromEhh>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
 80a2104:	f004 fd96 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a2108:	6803      	ldr	r3, [r0, #0]
 80a210a:	691b      	ldr	r3, [r3, #16]
 80a210c:	4798      	blx	r3
 80a210e:	b1f8      	cbz	r0, 80a2150 <_ZN6I2Cdev9readBytesEhhhPht+0xb0>
 80a2110:	f1b8 0f00 	cmp.w	r8, #0
 80a2114:	d012      	beq.n	80a213c <_ZN6I2Cdev9readBytesEhhhPht+0x9c>
 80a2116:	f001 fe91 	bl	80a3e3c <HAL_Timer_Get_Milli_Seconds>
 80a211a:	1b80      	subs	r0, r0, r6
 80a211c:	4540      	cmp	r0, r8
 80a211e:	d30d      	bcc.n	80a213c <_ZN6I2Cdev9readBytesEhhhPht+0x9c>
 80a2120:	e016      	b.n	80a2150 <_ZN6I2Cdev9readBytesEhhhPht+0xb0>
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
 80a2122:	f1b8 0f00 	cmp.w	r8, #0
 80a2126:	d017      	beq.n	80a2158 <_ZN6I2Cdev9readBytesEhhhPht+0xb8>
 80a2128:	f001 fe88 	bl	80a3e3c <HAL_Timer_Get_Milli_Seconds>
 80a212c:	1b80      	subs	r0, r0, r6
 80a212e:	4540      	cmp	r0, r8
 80a2130:	d312      	bcc.n	80a2158 <_ZN6I2Cdev9readBytesEhhhPht+0xb8>
 80a2132:	42bc      	cmp	r4, r7
 80a2134:	bfb8      	it	lt
 80a2136:	f04f 34ff 	movlt.w	r4, #4294967295
 80a213a:	e00d      	b.n	80a2158 <_ZN6I2Cdev9readBytesEhhhPht+0xb8>
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
                    data[count] = Wire.read();
 80a213c:	f004 fd7a 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a2140:	6803      	ldr	r3, [r0, #0]
 80a2142:	695b      	ldr	r3, [r3, #20]
 80a2144:	4798      	blx	r3
 80a2146:	f80b 0004 	strb.w	r0, [fp, r4]
 80a214a:	3401      	adds	r4, #1
 80a214c:	b264      	sxtb	r4, r4
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
 80a214e:	e7d9      	b.n	80a2104 <_ZN6I2Cdev9readBytesEhhhPht+0x64>
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
 80a2150:	9b01      	ldr	r3, [sp, #4]
 80a2152:	441d      	add	r5, r3
 80a2154:	b2ed      	uxtb	r5, r5
 80a2156:	e7b5      	b.n	80a20c4 <_ZN6I2Cdev9readBytesEhhhPht+0x24>
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
 80a2158:	4620      	mov	r0, r4
 80a215a:	b003      	add	sp, #12
 80a215c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2160 <_ZN6I2Cdev8readByteEhhPht>:
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
 80a2160:	b507      	push	{r0, r1, r2, lr}
    return readBytes(devAddr, regAddr, 1, data, timeout);
 80a2162:	9300      	str	r3, [sp, #0]
 80a2164:	4613      	mov	r3, r2
 80a2166:	2201      	movs	r2, #1
 80a2168:	f7ff ff9a 	bl	80a20a0 <_ZN6I2Cdev9readBytesEhhhPht>
}
 80a216c:	b003      	add	sp, #12
 80a216e:	f85d fb04 	ldr.w	pc, [sp], #4

080a2172 <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
 80a2172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2174:	4607      	mov	r7, r0
 80a2176:	461e      	mov	r6, r3
 80a2178:	4614      	mov	r4, r2
 80a217a:	460d      	mov	r5, r1
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif
    uint8_t status = 0;
	#if defined (PARTICLE)
        Wire.beginTransmission(devAddr);
 80a217c:	f004 fd5a 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a2180:	4639      	mov	r1, r7
 80a2182:	f002 fc89 	bl	80a4a98 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
 80a2186:	f004 fd55 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a218a:	6803      	ldr	r3, [r0, #0]
 80a218c:	4629      	mov	r1, r5
 80a218e:	689b      	ldr	r3, [r3, #8]
 80a2190:	4798      	blx	r3
 80a2192:	3c01      	subs	r4, #1
 80a2194:	1e75      	subs	r5, r6, #1
 80a2196:	4434      	add	r4, r6
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
 80a2198:	42a5      	cmp	r5, r4
 80a219a:	d007      	beq.n	80a21ac <_ZN6I2Cdev10writeBytesEhhhPh+0x3a>
        #ifdef I2CDEV_SERIAL_DEBUG
            Serial.print(data[i], HEX);
            if (i + 1 < length) Serial.print(" ");
        #endif
		#if defined (PARTICLE)
            Wire.write((uint8_t) data[i]);
 80a219c:	f004 fd4a 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a21a0:	6803      	ldr	r3, [r0, #0]
 80a21a2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a21a6:	689b      	ldr	r3, [r3, #8]
 80a21a8:	4798      	blx	r3
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
 80a21aa:	e7f5      	b.n	80a2198 <_ZN6I2Cdev10writeBytesEhhhPh+0x26>
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
            Fastwire::write((uint8_t) data[i]);
        #endif
    }
	#if defined (PARTICLE)
        status = Wire.endTransmission();
 80a21ac:	f004 fd42 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a21b0:	f002 fc7a 	bl	80a4aa8 <_ZN7TwoWire15endTransmissionEv>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
 80a21b4:	fab0 f080 	clz	r0, r0
 80a21b8:	0940      	lsrs	r0, r0, #5
 80a21ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a21bc <_ZN6I2Cdev9writeByteEhhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 80a21bc:	b507      	push	{r0, r1, r2, lr}
 80a21be:	ab02      	add	r3, sp, #8
 80a21c0:	f803 2d01 	strb.w	r2, [r3, #-1]!
    return writeBytes(devAddr, regAddr, 1, &data);
 80a21c4:	2201      	movs	r2, #1
 80a21c6:	f7ff ffd4 	bl	80a2172 <_ZN6I2Cdev10writeBytesEhhhPh>
}
 80a21ca:	b003      	add	sp, #12
 80a21cc:	f85d fb04 	ldr.w	pc, [sp], #4

080a21d0 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 80a21d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a21d2:	4616      	mov	r6, r2
 80a21d4:	461f      	mov	r7, r3
    uint8_t b;
    readByte(devAddr, regAddr, &b);
 80a21d6:	4b0d      	ldr	r3, [pc, #52]	; (80a220c <_ZN6I2Cdev8writeBitEhhhh+0x3c>)
 80a21d8:	f10d 0207 	add.w	r2, sp, #7
 80a21dc:	881b      	ldrh	r3, [r3, #0]
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 80a21de:	4604      	mov	r4, r0
 80a21e0:	460d      	mov	r5, r1
    uint8_t b;
    readByte(devAddr, regAddr, &b);
 80a21e2:	f7ff ffbd 	bl	80a2160 <_ZN6I2Cdev8readByteEhhPht>
 80a21e6:	2201      	movs	r2, #1
 80a21e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80a21ec:	40b2      	lsls	r2, r6
 80a21ee:	b117      	cbz	r7, 80a21f6 <_ZN6I2Cdev8writeBitEhhhh+0x26>
 80a21f0:	431a      	orrs	r2, r3
 80a21f2:	b2d2      	uxtb	r2, r2
 80a21f4:	e001      	b.n	80a21fa <_ZN6I2Cdev8writeBitEhhhh+0x2a>
 80a21f6:	ea23 0202 	bic.w	r2, r3, r2
    return writeByte(devAddr, regAddr, b);
 80a21fa:	4629      	mov	r1, r5
 80a21fc:	4620      	mov	r0, r4
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80a21fe:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeByte(devAddr, regAddr, b);
 80a2202:	f7ff ffdb 	bl	80a21bc <_ZN6I2Cdev9writeByteEhhh>
}
 80a2206:	b003      	add	sp, #12
 80a2208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a220a:	bf00      	nop
 80a220c:	2000007c 	.word	0x2000007c

080a2210 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80a2210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a2212:	461f      	mov	r7, r3
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
 80a2214:	4b11      	ldr	r3, [pc, #68]	; (80a225c <_ZN6I2Cdev9writeBitsEhhhhh+0x4c>)
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80a2216:	4616      	mov	r6, r2
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
 80a2218:	881b      	ldrh	r3, [r3, #0]
 80a221a:	f10d 0207 	add.w	r2, sp, #7
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80a221e:	4604      	mov	r4, r0
 80a2220:	460d      	mov	r5, r1
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
 80a2222:	f7ff ff9d 	bl	80a2160 <_ZN6I2Cdev8readByteEhhPht>
 80a2226:	b1b8      	cbz	r0, 80a2258 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80a2228:	2301      	movs	r3, #1
        data <<= (bitStart - length + 1); // shift data into correct position
 80a222a:	f89d 1020 	ldrb.w	r1, [sp, #32]
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80a222e:	1bf2      	subs	r2, r6, r7
 80a2230:	40bb      	lsls	r3, r7
 80a2232:	3201      	adds	r2, #1
 80a2234:	3b01      	subs	r3, #1
 80a2236:	4093      	lsls	r3, r2
        data <<= (bitStart - length + 1); // shift data into correct position
 80a2238:	fa01 f202 	lsl.w	r2, r1, r2
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
 80a223c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        data <<= (bitStart - length + 1); // shift data into correct position
 80a2240:	b2d2      	uxtb	r2, r2
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
 80a2242:	ea21 0103 	bic.w	r1, r1, r3
 80a2246:	4013      	ands	r3, r2
 80a2248:	ea41 0203 	orr.w	r2, r1, r3
        return writeByte(devAddr, regAddr, b);
 80a224c:	4620      	mov	r0, r4
 80a224e:	4629      	mov	r1, r5
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        data <<= (bitStart - length + 1); // shift data into correct position
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
 80a2250:	f88d 2007 	strb.w	r2, [sp, #7]
        return writeByte(devAddr, regAddr, b);
 80a2254:	f7ff ffb2 	bl	80a21bc <_ZN6I2Cdev9writeByteEhhh>
    } else {
        return false;
    }
}
 80a2258:	b003      	add	sp, #12
 80a225a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a225c:	2000007c 	.word	0x2000007c

080a2260 <_ZN6I2Cdev10writeWordsEhhhPt>:
 * @param regAddr First register address to write to
 * @param length Number of words to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t* data) {
 80a2260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2262:	4607      	mov	r7, r0
 80a2264:	4614      	mov	r4, r2
 80a2266:	460d      	mov	r5, r1
 80a2268:	461e      	mov	r6, r3
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif
    uint8_t status = 0;
	#if defined (PARTICLE)
        Wire.beginTransmission(devAddr);
 80a226a:	f004 fce3 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a226e:	4639      	mov	r1, r7
 80a2270:	f002 fc12 	bl	80a4a98 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write(regAddr); // send address
 80a2274:	f004 fcde 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a2278:	6803      	ldr	r3, [r0, #0]
 80a227a:	4629      	mov	r1, r5
 80a227c:	689b      	ldr	r3, [r3, #8]
 80a227e:	4798      	blx	r3
        Wire.write(regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length * 2; i++) {
 80a2280:	0065      	lsls	r5, r4, #1
 80a2282:	2400      	movs	r4, #0
 80a2284:	42ac      	cmp	r4, r5
 80a2286:	da11      	bge.n	80a22ac <_ZN6I2Cdev10writeWordsEhhhPt+0x4c>
        #ifdef I2CDEV_SERIAL_DEBUG
            Serial.print(data[i], HEX);
            if (i + 1 < length) Serial.print(" ");
        #endif
		#if defined (PARTICLE)
            Wire.write((uint8_t)(data[i] >> 8));    // send MSB
 80a2288:	f004 fcd4 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a228c:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 80a2290:	6803      	ldr	r3, [r0, #0]
 80a2292:	0a09      	lsrs	r1, r1, #8
 80a2294:	689b      	ldr	r3, [r3, #8]
 80a2296:	4798      	blx	r3
            Wire.write((uint8_t)data[i++]);         // send LSB
 80a2298:	f004 fccc 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a229c:	6803      	ldr	r3, [r0, #0]
 80a229e:	f816 1014 	ldrb.w	r1, [r6, r4, lsl #1]
 80a22a2:	689b      	ldr	r3, [r3, #8]
        Wire.write(regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length * 2; i++) {
 80a22a4:	3402      	adds	r4, #2
            Serial.print(data[i], HEX);
            if (i + 1 < length) Serial.print(" ");
        #endif
		#if defined (PARTICLE)
            Wire.write((uint8_t)(data[i] >> 8));    // send MSB
            Wire.write((uint8_t)data[i++]);         // send LSB
 80a22a6:	4798      	blx	r3
        Wire.write(regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length * 2; i++) {
 80a22a8:	b2e4      	uxtb	r4, r4
 80a22aa:	e7eb      	b.n	80a2284 <_ZN6I2Cdev10writeWordsEhhhPt+0x24>
            status = Fastwire::write((uint8_t)data[i++]);   // send LSB
            if (status != 0) break;
        #endif
    }
	#if defined (PARTICLE)
        status = Wire.endTransmission();
 80a22ac:	f004 fcc2 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a22b0:	f002 fbfa 	bl	80a4aa8 <_ZN7TwoWire15endTransmissionEv>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
 80a22b4:	fab0 f080 	clz	r0, r0
 80a22b8:	0940      	lsrs	r0, r0, #5
 80a22ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a22bc <_ZN6I2Cdev9writeWordEhht>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data) {
 80a22bc:	b507      	push	{r0, r1, r2, lr}
 80a22be:	ab02      	add	r3, sp, #8
 80a22c0:	f823 2d02 	strh.w	r2, [r3, #-2]!
    return writeWords(devAddr, regAddr, 1, &data);
 80a22c4:	2201      	movs	r2, #1
 80a22c6:	f7ff ffcb 	bl	80a2260 <_ZN6I2Cdev10writeWordsEhhhPt>
}
 80a22ca:	b003      	add	sp, #12
 80a22cc:	f85d fb04 	ldr.w	pc, [sp], #4

080a22d0 <_GLOBAL__sub_I__ZN6I2CdevC2Ev>:
 80a22d0:	f001 be24 	b.w	80a3f1c <HAL_Pin_Map>

080a22d4 <_ZN7MPU6050C1Ev>:

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
    devAddr = MPU6050_DEFAULT_ADDRESS;
 80a22d4:	2368      	movs	r3, #104	; 0x68
 80a22d6:	7003      	strb	r3, [r0, #0]
}
 80a22d8:	4770      	bx	lr

080a22da <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 80a22da:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 80a22dc:	2302      	movs	r3, #2
 80a22de:	7800      	ldrb	r0, [r0, #0]
 80a22e0:	2204      	movs	r2, #4
 80a22e2:	9100      	str	r1, [sp, #0]
 80a22e4:	211b      	movs	r1, #27
 80a22e6:	f7ff ff93 	bl	80a2210 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80a22ea:	b003      	add	sp, #12
 80a22ec:	f85d fb04 	ldr.w	pc, [sp], #4

080a22f0 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 80a22f0:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 80a22f2:	2302      	movs	r3, #2
 80a22f4:	7800      	ldrb	r0, [r0, #0]
 80a22f6:	2204      	movs	r2, #4
 80a22f8:	9100      	str	r1, [sp, #0]
 80a22fa:	211c      	movs	r1, #28
 80a22fc:	f7ff ff88 	bl	80a2210 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80a2300:	b003      	add	sp, #12
 80a2302:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2308 <_ZN7MPU605016getAccelerationXEv>:
/** Get X-axis accelerometer reading.
 * @return X-axis acceleration measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
int16_t MPU6050::getAccelerationX() {
 80a2308:	b513      	push	{r0, r1, r4, lr}
 80a230a:	4604      	mov	r4, r0
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 2, buffer);
 80a230c:	4b07      	ldr	r3, [pc, #28]	; (80a232c <_ZN7MPU605016getAccelerationXEv+0x24>)
 80a230e:	7800      	ldrb	r0, [r0, #0]
 80a2310:	881b      	ldrh	r3, [r3, #0]
 80a2312:	2202      	movs	r2, #2
 80a2314:	9300      	str	r3, [sp, #0]
 80a2316:	213b      	movs	r1, #59	; 0x3b
 80a2318:	1c63      	adds	r3, r4, #1
 80a231a:	f7ff fec1 	bl	80a20a0 <_ZN6I2Cdev9readBytesEhhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 80a231e:	7860      	ldrb	r0, [r4, #1]
 80a2320:	78a3      	ldrb	r3, [r4, #2]
 80a2322:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 80a2326:	b200      	sxth	r0, r0
 80a2328:	b002      	add	sp, #8
 80a232a:	bd10      	pop	{r4, pc}
 80a232c:	2000007c 	.word	0x2000007c

080a2330 <_ZN7MPU605016getAccelerationYEv>:
/** Get Y-axis accelerometer reading.
 * @return Y-axis acceleration measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_ACCEL_YOUT_H
 */
int16_t MPU6050::getAccelerationY() {
 80a2330:	b513      	push	{r0, r1, r4, lr}
 80a2332:	4604      	mov	r4, r0
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_YOUT_H, 2, buffer);
 80a2334:	4b07      	ldr	r3, [pc, #28]	; (80a2354 <_ZN7MPU605016getAccelerationYEv+0x24>)
 80a2336:	7800      	ldrb	r0, [r0, #0]
 80a2338:	881b      	ldrh	r3, [r3, #0]
 80a233a:	2202      	movs	r2, #2
 80a233c:	9300      	str	r3, [sp, #0]
 80a233e:	213d      	movs	r1, #61	; 0x3d
 80a2340:	1c63      	adds	r3, r4, #1
 80a2342:	f7ff fead 	bl	80a20a0 <_ZN6I2Cdev9readBytesEhhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 80a2346:	7860      	ldrb	r0, [r4, #1]
 80a2348:	78a3      	ldrb	r3, [r4, #2]
 80a234a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 80a234e:	b200      	sxth	r0, r0
 80a2350:	b002      	add	sp, #8
 80a2352:	bd10      	pop	{r4, pc}
 80a2354:	2000007c 	.word	0x2000007c

080a2358 <_ZN7MPU605016getAccelerationZEv>:
/** Get Z-axis accelerometer reading.
 * @return Z-axis acceleration measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_ACCEL_ZOUT_H
 */
int16_t MPU6050::getAccelerationZ() {
 80a2358:	b513      	push	{r0, r1, r4, lr}
 80a235a:	4604      	mov	r4, r0
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_ZOUT_H, 2, buffer);
 80a235c:	4b07      	ldr	r3, [pc, #28]	; (80a237c <_ZN7MPU605016getAccelerationZEv+0x24>)
 80a235e:	7800      	ldrb	r0, [r0, #0]
 80a2360:	881b      	ldrh	r3, [r3, #0]
 80a2362:	2202      	movs	r2, #2
 80a2364:	9300      	str	r3, [sp, #0]
 80a2366:	213f      	movs	r1, #63	; 0x3f
 80a2368:	1c63      	adds	r3, r4, #1
 80a236a:	f7ff fe99 	bl	80a20a0 <_ZN6I2Cdev9readBytesEhhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 80a236e:	7860      	ldrb	r0, [r4, #1]
 80a2370:	78a3      	ldrb	r3, [r4, #2]
 80a2372:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 80a2376:	b200      	sxth	r0, r0
 80a2378:	b002      	add	sp, #8
 80a237a:	bd10      	pop	{r4, pc}
 80a237c:	2000007c 	.word	0x2000007c

080a2380 <_ZN7MPU605015setSleepEnabledEb>:
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80a2380:	460b      	mov	r3, r1
 80a2382:	2206      	movs	r2, #6
 80a2384:	216b      	movs	r1, #107	; 0x6b
 80a2386:	7800      	ldrb	r0, [r0, #0]
 80a2388:	f7ff bf22 	b.w	80a21d0 <_ZN6I2Cdev8writeBitEhhhh>

080a238c <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 80a238c:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 80a238e:	2303      	movs	r3, #3
 80a2390:	7800      	ldrb	r0, [r0, #0]
 80a2392:	2202      	movs	r2, #2
 80a2394:	9100      	str	r1, [sp, #0]
 80a2396:	216b      	movs	r1, #107	; 0x6b
 80a2398:	f7ff ff3a 	bl	80a2210 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80a239c:	b003      	add	sp, #12
 80a239e:	f85d fb04 	ldr.w	pc, [sp], #4

080a23a2 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 80a23a2:	b510      	push	{r4, lr}
 80a23a4:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 80a23a6:	2101      	movs	r1, #1
 80a23a8:	f7ff fff0 	bl	80a238c <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 80a23ac:	4620      	mov	r0, r4
 80a23ae:	2100      	movs	r1, #0
 80a23b0:	f7ff ff93 	bl	80a22da <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 80a23b4:	4620      	mov	r0, r4
 80a23b6:	2100      	movs	r1, #0
 80a23b8:	f7ff ff9a 	bl	80a22f0 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 80a23bc:	4620      	mov	r0, r4
}
 80a23be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void MPU6050::initialize() {
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 80a23c2:	2100      	movs	r1, #0
 80a23c4:	f7ff bfdc 	b.w	80a2380 <_ZN7MPU605015setSleepEnabledEb>

080a23c8 <_ZN7MPU605015setXAccelOffsetEs>:
int16_t MPU6050::getXAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
    I2Cdev::writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 80a23c8:	b28a      	uxth	r2, r1
 80a23ca:	7800      	ldrb	r0, [r0, #0]
 80a23cc:	2106      	movs	r1, #6
 80a23ce:	f7ff bf75 	b.w	80a22bc <_ZN6I2Cdev9writeWordEhht>

080a23d2 <_ZN7MPU605015setYAccelOffsetEs>:
int16_t MPU6050::getYAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
    I2Cdev::writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 80a23d2:	b28a      	uxth	r2, r1
 80a23d4:	7800      	ldrb	r0, [r0, #0]
 80a23d6:	2108      	movs	r1, #8
 80a23d8:	f7ff bf70 	b.w	80a22bc <_ZN6I2Cdev9writeWordEhht>

080a23dc <_ZN7MPU605015setZAccelOffsetEs>:
int16_t MPU6050::getZAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 80a23dc:	b28a      	uxth	r2, r1
 80a23de:	7800      	ldrb	r0, [r0, #0]
 80a23e0:	210a      	movs	r1, #10
 80a23e2:	f7ff bf6b 	b.w	80a22bc <_ZN6I2Cdev9writeWordEhht>

080a23e6 <_ZN7MPU605014setXGyroOffsetEs>:
int16_t MPU6050::getXGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
    I2Cdev::writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 80a23e6:	b28a      	uxth	r2, r1
 80a23e8:	7800      	ldrb	r0, [r0, #0]
 80a23ea:	2113      	movs	r1, #19
 80a23ec:	f7ff bf66 	b.w	80a22bc <_ZN6I2Cdev9writeWordEhht>

080a23f0 <_ZN7MPU605014setYGyroOffsetEs>:
int16_t MPU6050::getYGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
    I2Cdev::writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 80a23f0:	b28a      	uxth	r2, r1
 80a23f2:	7800      	ldrb	r0, [r0, #0]
 80a23f4:	2115      	movs	r1, #21
 80a23f6:	f7ff bf61 	b.w	80a22bc <_ZN6I2Cdev9writeWordEhht>

080a23fa <_ZN7MPU605014setZGyroOffsetEs>:
int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 80a23fa:	b28a      	uxth	r2, r1
 80a23fc:	7800      	ldrb	r0, [r0, #0]
 80a23fe:	2117      	movs	r1, #23
 80a2400:	f7ff bf5c 	b.w	80a22bc <_ZN6I2Cdev9writeWordEhht>

080a2404 <_GLOBAL__sub_I__ZN7MPU6050C2Ev>:
 80a2404:	f001 bd8a 	b.w	80a3f1c <HAL_Pin_Map>

080a2408 <_GLOBAL__sub_I_MinimumSerial.cpp>:
 80a2408:	f001 bd88 	b.w	80a3f1c <HAL_Pin_Map>

080a240c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 80a240c:	4b01      	ldr	r3, [pc, #4]	; (80a2414 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 80a240e:	2201      	movs	r2, #1
 80a2410:	701a      	strb	r2, [r3, #0]
 80a2412:	4770      	bx	lr
 80a2414:	20000248 	.word	0x20000248

080a2418 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
 80a2418:	1d01      	adds	r1, r0, #4
 80a241a:	6800      	ldr	r0, [r0, #0]
 80a241c:	f002 ba16 	b.w	80a484c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

080a2420 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
 80a2420:	b510      	push	{r4, lr}
 80a2422:	4604      	mov	r4, r0
  m_csPin = csPin;
 80a2424:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
 80a2426:	6800      	ldr	r0, [r0, #0]
 80a2428:	f002 f9de 	bl	80a47e8 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
 80a242c:	7d20      	ldrb	r0, [r4, #20]
 80a242e:	2101      	movs	r1, #1
 80a2430:	f004 fc7e 	bl	80a6d30 <pinMode>
  digitalWrite(m_csPin, HIGH);
 80a2434:	7d20      	ldrb	r0, [r4, #20]
 80a2436:	2101      	movs	r1, #1
}
 80a2438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
 80a243c:	f004 bc89 	b.w	80a6d52 <digitalWrite>

080a2440 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
 80a2440:	6800      	ldr	r0, [r0, #0]
 80a2442:	f002 b9dc 	b.w	80a47fe <_ZN8SPIClass14endTransactionEv>

080a2446 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
 80a2446:	21ff      	movs	r1, #255	; 0xff
 80a2448:	6800      	ldr	r0, [r0, #0]
 80a244a:	f002 baa5 	b.w	80a4998 <_ZN8SPIClass8transferEh>
	...

080a2450 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 80a2450:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80a2452:	4b08      	ldr	r3, [pc, #32]	; (80a2474 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 80a2454:	2500      	movs	r5, #0
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80a2456:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 80a2458:	4c07      	ldr	r4, [pc, #28]	; (80a2478 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80a245a:	4613      	mov	r3, r2
 80a245c:	6800      	ldr	r0, [r0, #0]
 80a245e:	460a      	mov	r2, r1
 80a2460:	4629      	mov	r1, r5
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 80a2462:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 80a2464:	f002 fa9e 	bl	80a49a4 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 80a2468:	7823      	ldrb	r3, [r4, #0]
 80a246a:	2b00      	cmp	r3, #0
 80a246c:	d0fc      	beq.n	80a2468 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
 80a246e:	2000      	movs	r0, #0
 80a2470:	b003      	add	sp, #12
 80a2472:	bd30      	pop	{r4, r5, pc}
 80a2474:	080a240d 	.word	0x080a240d
 80a2478:	20000248 	.word	0x20000248

080a247c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
 80a247c:	6800      	ldr	r0, [r0, #0]
 80a247e:	f002 ba8b 	b.w	80a4998 <_ZN8SPIClass8transferEh>
	...

080a2484 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
 80a2484:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80a2486:	4b07      	ldr	r3, [pc, #28]	; (80a24a4 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 80a2488:	2500      	movs	r5, #0

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80a248a:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 80a248c:	4c06      	ldr	r4, [pc, #24]	; (80a24a8 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80a248e:	4613      	mov	r3, r2
 80a2490:	6800      	ldr	r0, [r0, #0]
 80a2492:	462a      	mov	r2, r5
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 80a2494:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 80a2496:	f002 fa85 	bl	80a49a4 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 80a249a:	7823      	ldrb	r3, [r4, #0]
 80a249c:	2b00      	cmp	r3, #0
 80a249e:	d0fc      	beq.n	80a249a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
 80a24a0:	b003      	add	sp, #12
 80a24a2:	bd30      	pop	{r4, r5, pc}
 80a24a4:	080a240d 	.word	0x080a240d
 80a24a8:	20000248 	.word	0x20000248

080a24ac <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
 80a24ac:	f001 bd36 	b.w	80a3f1c <HAL_Pin_Map>

080a24b0 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
 80a24b0:	f001 bd34 	b.w	80a3f1c <HAL_Pin_Map>

080a24b4 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
 80a24b4:	f001 bd32 	b.w	80a3f1c <HAL_Pin_Map>

080a24b8 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
 80a24b8:	b570      	push	{r4, r5, r6, lr}
 80a24ba:	460e      	mov	r6, r1
 80a24bc:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a24be:	f001 fcb5 	bl	80a3e2c <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
 80a24c2:	4c0c      	ldr	r4, [pc, #48]	; (80a24f4 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
 80a24c4:	6823      	ldr	r3, [r4, #0]
 80a24c6:	1ac0      	subs	r0, r0, r3
 80a24c8:	4b0b      	ldr	r3, [pc, #44]	; (80a24f8 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
 80a24ca:	4298      	cmp	r0, r3
 80a24cc:	d908      	bls.n	80a24e0 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a24ce:	f001 fcb5 	bl	80a3e3c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a24d2:	4b0a      	ldr	r3, [pc, #40]	; (80a24fc <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
 80a24d4:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a24d6:	f001 fd91 	bl	80a3ffc <spark_process>
 80a24da:	f001 fca7 	bl	80a3e2c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
 80a24de:	6020      	str	r0, [r4, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a24e0:	f001 fcac 	bl	80a3e3c <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
 80a24e4:	b280      	uxth	r0, r0
 80a24e6:	1b80      	subs	r0, r0, r6
}
 80a24e8:	42a8      	cmp	r0, r5
 80a24ea:	bfd4      	ite	le
 80a24ec:	2000      	movle	r0, #0
 80a24ee:	2001      	movgt	r0, #1
 80a24f0:	bd70      	pop	{r4, r5, r6, pc}
 80a24f2:	bf00      	nop
 80a24f4:	2000024c 	.word	0x2000024c
 80a24f8:	000186a0 	.word	0x000186a0
 80a24fc:	20000760 	.word	0x20000760

080a2500 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 80a2500:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
 80a2502:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 80a2504:	4604      	mov	r4, r0
  if (!m_spiActive) {
 80a2506:	b94d      	cbnz	r5, 80a251c <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
 80a2508:	6840      	ldr	r0, [r0, #4]
 80a250a:	f7ff ff85 	bl	80a2418 <_ZN14SdSpiAltDriver8activateEv>
 80a250e:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 80a2510:	4629      	mov	r1, r5
 80a2512:	7d18      	ldrb	r0, [r3, #20]
 80a2514:	f004 fc1d 	bl	80a6d52 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
 80a2518:	2301      	movs	r3, #1
 80a251a:	7223      	strb	r3, [r4, #8]
 80a251c:	bd38      	pop	{r3, r4, r5, pc}

080a251e <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 80a251e:	b510      	push	{r4, lr}
  if (m_spiActive) {
 80a2520:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 80a2522:	4604      	mov	r4, r0
  if (m_spiActive) {
 80a2524:	b16b      	cbz	r3, 80a2542 <_ZN9SdSpiCard7spiStopEv+0x24>
 80a2526:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
 80a2528:	2101      	movs	r1, #1
 80a252a:	7d18      	ldrb	r0, [r3, #20]
 80a252c:	f004 fc11 	bl	80a6d52 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80a2530:	21ff      	movs	r1, #255	; 0xff
 80a2532:	6860      	ldr	r0, [r4, #4]
 80a2534:	f7ff ffa2 	bl	80a247c <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
 80a2538:	6860      	ldr	r0, [r4, #4]
 80a253a:	f7ff ff81 	bl	80a2440 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 80a253e:	2300      	movs	r3, #0
 80a2540:	7223      	strb	r3, [r4, #8]
 80a2542:	bd10      	pop	{r4, pc}

080a2544 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 80a2544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2546:	4604      	mov	r4, r0
 80a2548:	460d      	mov	r5, r1
 80a254a:	4616      	mov	r6, r2
 80a254c:	f001 fc76 	bl	80a3e3c <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
 80a2550:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a2552:	6860      	ldr	r0, [r4, #4]
 80a2554:	f7ff ff77 	bl	80a2446 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
 80a2558:	28ff      	cmp	r0, #255	; 0xff
 80a255a:	7260      	strb	r0, [r4, #9]
 80a255c:	d109      	bne.n	80a2572 <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
 80a255e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2562:	4639      	mov	r1, r7
 80a2564:	4620      	mov	r0, r4
 80a2566:	f7ff ffa7 	bl	80a24b8 <_ZN9SdSpiCard10isTimedOutEtt>
 80a256a:	2800      	cmp	r0, #0
 80a256c:	d0f1      	beq.n	80a2552 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a256e:	2355      	movs	r3, #85	; 0x55
 80a2570:	e00b      	b.n	80a258a <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
 80a2572:	28fe      	cmp	r0, #254	; 0xfe
 80a2574:	d001      	beq.n	80a257a <_ZN9SdSpiCard8readDataEPhj+0x36>
 80a2576:	2350      	movs	r3, #80	; 0x50
 80a2578:	e007      	b.n	80a258a <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
 80a257a:	4632      	mov	r2, r6
 80a257c:	4629      	mov	r1, r5
 80a257e:	6860      	ldr	r0, [r4, #4]
 80a2580:	f7ff ff66 	bl	80a2450 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 80a2584:	7260      	strb	r0, [r4, #9]
 80a2586:	b130      	cbz	r0, 80a2596 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a2588:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
 80a258a:	4620      	mov	r0, r4
 80a258c:	7023      	strb	r3, [r4, #0]
 80a258e:	f7ff ffc6 	bl	80a251e <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a2592:	2000      	movs	r0, #0
}
 80a2594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a2596:	6860      	ldr	r0, [r4, #4]
 80a2598:	f7ff ff55 	bl	80a2446 <_ZN14SdSpiAltDriver7receiveEv>
 80a259c:	6860      	ldr	r0, [r4, #4]
 80a259e:	f7ff ff52 	bl	80a2446 <_ZN14SdSpiAltDriver7receiveEv>
 80a25a2:	2001      	movs	r0, #1
 80a25a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a25a6 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
 80a25a6:	b570      	push	{r4, r5, r6, lr}
 80a25a8:	4604      	mov	r4, r0
 80a25aa:	460e      	mov	r6, r1
 80a25ac:	f001 fc46 	bl	80a3e3c <HAL_Timer_Get_Milli_Seconds>
 80a25b0:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
 80a25b2:	4632      	mov	r2, r6
 80a25b4:	4629      	mov	r1, r5
 80a25b6:	4620      	mov	r0, r4
 80a25b8:	f7ff ff7e 	bl	80a24b8 <_ZN9SdSpiCard10isTimedOutEtt>
 80a25bc:	b930      	cbnz	r0, 80a25cc <_ZN9SdSpiCard11waitNotBusyEt+0x26>
 80a25be:	6860      	ldr	r0, [r4, #4]
 80a25c0:	f7ff ff41 	bl	80a2446 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
 80a25c4:	28ff      	cmp	r0, #255	; 0xff
 80a25c6:	d1f4      	bne.n	80a25b2 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
 80a25c8:	2001      	movs	r0, #1
 80a25ca:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
 80a25cc:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
 80a25ce:	bd70      	pop	{r4, r5, r6, pc}

080a25d0 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80a25d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
 80a25d2:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80a25d4:	4604      	mov	r4, r0
 80a25d6:	460d      	mov	r5, r1
 80a25d8:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
 80a25da:	b90b      	cbnz	r3, 80a25e0 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
 80a25dc:	f7ff ff90 	bl	80a2500 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
 80a25e0:	b125      	cbz	r5, 80a25ec <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
 80a25e2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80a25e6:	4620      	mov	r0, r4
 80a25e8:	f7ff ffdd 	bl	80a25a6 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80a25ec:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 80a25f0:	6860      	ldr	r0, [r4, #4]
 80a25f2:	f7ff ff43 	bl	80a247c <_ZN14SdSpiAltDriver4sendEh>
 80a25f6:	f10d 0607 	add.w	r6, sp, #7
 80a25fa:	f10d 0703 	add.w	r7, sp, #3
 80a25fe:	f816 1901 	ldrb.w	r1, [r6], #-1
 80a2602:	6860      	ldr	r0, [r4, #4]
 80a2604:	f7ff ff3a 	bl	80a247c <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
 80a2608:	42be      	cmp	r6, r7
 80a260a:	d1f8      	bne.n	80a25fe <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 80a260c:	2d00      	cmp	r5, #0
 80a260e:	bf0c      	ite	eq
 80a2610:	2195      	moveq	r1, #149	; 0x95
 80a2612:	2187      	movne	r1, #135	; 0x87
 80a2614:	6860      	ldr	r0, [r4, #4]
 80a2616:	f7ff ff31 	bl	80a247c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a261a:	6860      	ldr	r0, [r4, #4]
 80a261c:	f7ff ff13 	bl	80a2446 <_ZN14SdSpiAltDriver7receiveEv>
 80a2620:	250b      	movs	r5, #11
 80a2622:	6860      	ldr	r0, [r4, #4]
 80a2624:	f7ff ff0f 	bl	80a2446 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
 80a2628:	0603      	lsls	r3, r0, #24
 80a262a:	7260      	strb	r0, [r4, #9]
 80a262c:	d503      	bpl.n	80a2636 <_ZN9SdSpiCard11cardCommandEhm+0x66>
 80a262e:	3d01      	subs	r5, #1
 80a2630:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80a2634:	d1f5      	bne.n	80a2622 <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
 80a2636:	b003      	add	sp, #12
 80a2638:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a263a <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 80a263a:	b570      	push	{r4, r5, r6, lr}
 80a263c:	4604      	mov	r4, r0
 80a263e:	460d      	mov	r5, r1
 80a2640:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 80a2642:	2137      	movs	r1, #55	; 0x37
 80a2644:	2200      	movs	r2, #0
 80a2646:	f7ff ffc3 	bl	80a25d0 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 80a264a:	4632      	mov	r2, r6
 80a264c:	4629      	mov	r1, r5
 80a264e:	4620      	mov	r0, r4
  }
 80a2650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
 80a2654:	f7ff bfbc 	b.w	80a25d0 <_ZN9SdSpiCard11cardCommandEhm>

080a2658 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 80a2658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
 80a265c:	2500      	movs	r5, #0
 80a265e:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
 80a2660:	7005      	strb	r5, [r0, #0]
  m_type = 0;
 80a2662:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
 80a2664:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 80a2666:	4604      	mov	r4, r0
 80a2668:	4690      	mov	r8, r2
 80a266a:	461e      	mov	r6, r3
 80a266c:	f001 fbe6 	bl	80a3e3c <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
 80a2670:	4641      	mov	r1, r8
 80a2672:	4607      	mov	r7, r0
 80a2674:	6860      	ldr	r0, [r4, #4]
 80a2676:	f7ff fed3 	bl	80a2420 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
 80a267a:	6863      	ldr	r3, [r4, #4]
 80a267c:	4a4f      	ldr	r2, [pc, #316]	; (80a27bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
 80a267e:	f04f 0801 	mov.w	r8, #1
 80a2682:	721d      	strb	r5, [r3, #8]
 80a2684:	60da      	str	r2, [r3, #12]
 80a2686:	745d      	strb	r5, [r3, #17]
 80a2688:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
 80a268c:	4620      	mov	r0, r4
 80a268e:	f7ff ff37 	bl	80a2500 <_ZN9SdSpiCard8spiStartEv>
 80a2692:	6863      	ldr	r3, [r4, #4]
 80a2694:	4641      	mov	r1, r8
 80a2696:	7d18      	ldrb	r0, [r3, #20]
 80a2698:	f004 fb5b 	bl	80a6d52 <digitalWrite>
 80a269c:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80a269e:	21ff      	movs	r1, #255	; 0xff
 80a26a0:	6860      	ldr	r0, [r4, #4]
 80a26a2:	3d01      	subs	r5, #1
 80a26a4:	f7ff feea 	bl	80a247c <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
 80a26a8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80a26ac:	d1f7      	bne.n	80a269e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
 80a26ae:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 80a26b0:	4629      	mov	r1, r5
 80a26b2:	7d18      	ldrb	r0, [r3, #20]
 80a26b4:	f004 fb4d 	bl	80a6d52 <digitalWrite>
 80a26b8:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 80a26ba:	2200      	movs	r2, #0
 80a26bc:	4611      	mov	r1, r2
 80a26be:	4620      	mov	r0, r4
 80a26c0:	f7ff ff86 	bl	80a25d0 <_ZN9SdSpiCard11cardCommandEhm>
 80a26c4:	2801      	cmp	r0, #1
 80a26c6:	4680      	mov	r8, r0
 80a26c8:	d012      	beq.n	80a26f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
 80a26ca:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
 80a26cc:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80a26d0:	d101      	bne.n	80a26d6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a26d2:	2320      	movs	r3, #32
 80a26d4:	e057      	b.n	80a2786 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80a26d6:	21fd      	movs	r1, #253	; 0xfd
 80a26d8:	6860      	ldr	r0, [r4, #4]
 80a26da:	f7ff fecf 	bl	80a247c <_ZN14SdSpiAltDriver4sendEh>
 80a26de:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a26e2:	6860      	ldr	r0, [r4, #4]
 80a26e4:	f7ff feaf 	bl	80a2446 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
 80a26e8:	f1b8 0801 	subs.w	r8, r8, #1
 80a26ec:	d1f9      	bne.n	80a26e2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
 80a26ee:	e7e4      	b.n	80a26ba <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 80a26f0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80a26f4:	2108      	movs	r1, #8
 80a26f6:	4620      	mov	r0, r4
 80a26f8:	f7ff ff6a 	bl	80a25d0 <_ZN9SdSpiCard11cardCommandEhm>
 80a26fc:	2805      	cmp	r0, #5
 80a26fe:	d102      	bne.n	80a2706 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 80a2700:	f884 800a 	strb.w	r8, [r4, #10]
 80a2704:	e00f      	b.n	80a2726 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
 80a2706:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a2708:	6860      	ldr	r0, [r4, #4]
 80a270a:	f7ff fe9c 	bl	80a2446 <_ZN14SdSpiAltDriver7receiveEv>
 80a270e:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 80a2710:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 80a2714:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 80a2716:	d1f7      	bne.n	80a2708 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 80a2718:	28aa      	cmp	r0, #170	; 0xaa
 80a271a:	d102      	bne.n	80a2722 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 80a271c:	2302      	movs	r3, #2
 80a271e:	72a3      	strb	r3, [r4, #10]
 80a2720:	e001      	b.n	80a2726 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a2722:	2325      	movs	r3, #37	; 0x25
 80a2724:	e02f      	b.n	80a2786 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80a2726:	7aa3      	ldrb	r3, [r4, #10]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 80a2728:	b2bf      	uxth	r7, r7
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 80a272a:	2b02      	cmp	r3, #2
 80a272c:	bf0c      	ite	eq
 80a272e:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 80a2732:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 80a2734:	462a      	mov	r2, r5
 80a2736:	2129      	movs	r1, #41	; 0x29
 80a2738:	4620      	mov	r0, r4
 80a273a:	f7ff ff7e 	bl	80a263a <_ZN9SdSpiCard8cardAcmdEhm>
 80a273e:	4602      	mov	r2, r0
 80a2740:	b148      	cbz	r0, 80a2756 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 80a2742:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80a2746:	4639      	mov	r1, r7
 80a2748:	4620      	mov	r0, r4
 80a274a:	f7ff feb5 	bl	80a24b8 <_ZN9SdSpiCard10isTimedOutEtt>
 80a274e:	2800      	cmp	r0, #0
 80a2750:	d0f0      	beq.n	80a2734 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
 80a2752:	2343      	movs	r3, #67	; 0x43
 80a2754:	e017      	b.n	80a2786 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 80a2756:	7aa3      	ldrb	r3, [r4, #10]
 80a2758:	2b02      	cmp	r3, #2
 80a275a:	d00e      	beq.n	80a277a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
 80a275c:	4620      	mov	r0, r4
 80a275e:	f7ff fede 	bl	80a251e <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
 80a2762:	6863      	ldr	r3, [r4, #4]
 80a2764:	68b0      	ldr	r0, [r6, #8]
 80a2766:	7934      	ldrb	r4, [r6, #4]
 80a2768:	7b31      	ldrb	r1, [r6, #12]
 80a276a:	7b72      	ldrb	r2, [r6, #13]
 80a276c:	60d8      	str	r0, [r3, #12]
 80a276e:	721c      	strb	r4, [r3, #8]
 80a2770:	7419      	strb	r1, [r3, #16]
 80a2772:	745a      	strb	r2, [r3, #17]
  return true;
 80a2774:	2001      	movs	r0, #1
 80a2776:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 80a277a:	213a      	movs	r1, #58	; 0x3a
 80a277c:	4620      	mov	r0, r4
 80a277e:	f7ff ff27 	bl	80a25d0 <_ZN9SdSpiCard11cardCommandEhm>
 80a2782:	b138      	cbz	r0, 80a2794 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
 80a2784:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
 80a2786:	4620      	mov	r0, r4
 80a2788:	7023      	strb	r3, [r4, #0]
 80a278a:	f7ff fec8 	bl	80a251e <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a278e:	2000      	movs	r0, #0
}
 80a2790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a2794:	6860      	ldr	r0, [r4, #4]
 80a2796:	f7ff fe56 	bl	80a2446 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 80a279a:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 80a279e:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 80a27a0:	bf04      	itt	eq
 80a27a2:	2303      	moveq	r3, #3
 80a27a4:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a27a6:	6860      	ldr	r0, [r4, #4]
 80a27a8:	f7ff fe4d 	bl	80a2446 <_ZN14SdSpiAltDriver7receiveEv>
 80a27ac:	6860      	ldr	r0, [r4, #4]
 80a27ae:	f7ff fe4a 	bl	80a2446 <_ZN14SdSpiAltDriver7receiveEv>
 80a27b2:	6860      	ldr	r0, [r4, #4]
 80a27b4:	f7ff fe47 	bl	80a2446 <_ZN14SdSpiAltDriver7receiveEv>
 80a27b8:	e7d0      	b.n	80a275c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
 80a27ba:	bf00      	nop
 80a27bc:	0003d090 	.word	0x0003d090

080a27c0 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80a27c0:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80a27c2:	7a83      	ldrb	r3, [r0, #10]
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80a27c4:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80a27c6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80a27c8:	bf18      	it	ne
 80a27ca:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 80a27cc:	460a      	mov	r2, r1
 80a27ce:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80a27d0:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 80a27d2:	f7ff fefd 	bl	80a25d0 <_ZN9SdSpiCard11cardCommandEhm>
 80a27d6:	b110      	cbz	r0, 80a27de <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a27d8:	2330      	movs	r3, #48	; 0x30
 80a27da:	7023      	strb	r3, [r4, #0]
 80a27dc:	e00b      	b.n	80a27f6 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 80a27de:	4629      	mov	r1, r5
 80a27e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a27e4:	4620      	mov	r0, r4
 80a27e6:	f7ff fead 	bl	80a2544 <_ZN9SdSpiCard8readDataEPhj>
 80a27ea:	4605      	mov	r5, r0
 80a27ec:	b118      	cbz	r0, 80a27f6 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
 80a27ee:	4620      	mov	r0, r4
 80a27f0:	f7ff fe95 	bl	80a251e <_ZN9SdSpiCard7spiStopEv>
  return true;
 80a27f4:	e003      	b.n	80a27fe <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
 80a27f6:	4620      	mov	r0, r4
 80a27f8:	f7ff fe91 	bl	80a251e <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a27fc:	2500      	movs	r5, #0
}
 80a27fe:	4628      	mov	r0, r5
 80a2800:	bd38      	pop	{r3, r4, r5, pc}

080a2802 <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80a2802:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 80a2804:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80a2806:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 80a2808:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80a280a:	bf18      	it	ne
 80a280c:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 80a280e:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80a2810:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 80a2812:	f7ff fedd 	bl	80a25d0 <_ZN9SdSpiCard11cardCommandEhm>
 80a2816:	b130      	cbz	r0, 80a2826 <_ZN9SdSpiCard9readStartEm+0x24>
 80a2818:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
 80a281a:	4620      	mov	r0, r4
 80a281c:	7023      	strb	r3, [r4, #0]
 80a281e:	f7ff fe7e 	bl	80a251e <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a2822:	2000      	movs	r0, #0
 80a2824:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
 80a2826:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 80a2828:	bd10      	pop	{r4, pc}

080a282a <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 80a282a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 80a282c:	2200      	movs	r2, #0
 80a282e:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 80a2830:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 80a2832:	f7ff fecd 	bl	80a25d0 <_ZN9SdSpiCard11cardCommandEhm>
 80a2836:	b130      	cbz	r0, 80a2846 <_ZN9SdSpiCard8readStopEv+0x1c>
 80a2838:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
 80a283a:	4620      	mov	r0, r4
 80a283c:	7023      	strb	r3, [r4, #0]
 80a283e:	f7ff fe6e 	bl	80a251e <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a2842:	2000      	movs	r0, #0
 80a2844:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
 80a2846:	4620      	mov	r0, r4
 80a2848:	f7ff fe69 	bl	80a251e <_ZN9SdSpiCard7spiStopEv>
  return true;
 80a284c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 80a284e:	bd10      	pop	{r4, pc}

080a2850 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 80a2850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2852:	4605      	mov	r5, r0
 80a2854:	4616      	mov	r6, r2
 80a2856:	461f      	mov	r7, r3
  if (!readStart(block)) {
 80a2858:	f7ff ffd3 	bl	80a2802 <_ZN9SdSpiCard9readStartEm>
 80a285c:	b198      	cbz	r0, 80a2886 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 80a285e:	2400      	movs	r4, #0
 80a2860:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 80a2862:	429f      	cmp	r7, r3
 80a2864:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 80a2868:	d908      	bls.n	80a287c <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 80a286a:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a286e:	4628      	mov	r0, r5
 80a2870:	f7ff fe68 	bl	80a2544 <_ZN9SdSpiCard8readDataEPhj>
 80a2874:	3401      	adds	r4, #1
 80a2876:	2800      	cmp	r0, #0
 80a2878:	d1f2      	bne.n	80a2860 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 80a287a:	e004      	b.n	80a2886 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 80a287c:	4628      	mov	r0, r5
}
 80a287e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 80a2882:	f7ff bfd2 	b.w	80a282a <_ZN9SdSpiCard8readStopEv>
}
 80a2886:	2000      	movs	r0, #0
 80a2888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a288a <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 80a288a:	b538      	push	{r3, r4, r5, lr}
 80a288c:	4604      	mov	r4, r0
 80a288e:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80a2890:	6840      	ldr	r0, [r0, #4]
 80a2892:	f7ff fdf3 	bl	80a247c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
 80a2896:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a289a:	4629      	mov	r1, r5
 80a289c:	6860      	ldr	r0, [r4, #4]
 80a289e:	f7ff fdf1 	bl	80a2484 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80a28a2:	21ff      	movs	r1, #255	; 0xff
 80a28a4:	6860      	ldr	r0, [r4, #4]
 80a28a6:	f7ff fde9 	bl	80a247c <_ZN14SdSpiAltDriver4sendEh>
 80a28aa:	21ff      	movs	r1, #255	; 0xff
 80a28ac:	6860      	ldr	r0, [r4, #4]
 80a28ae:	f7ff fde5 	bl	80a247c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a28b2:	6860      	ldr	r0, [r4, #4]
 80a28b4:	f7ff fdc7 	bl	80a2446 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 80a28b8:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 80a28ba:	f000 001f 	and.w	r0, r0, #31
 80a28be:	2805      	cmp	r0, #5
 80a28c0:	d006      	beq.n	80a28d0 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a28c2:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
 80a28c4:	4620      	mov	r0, r4
 80a28c6:	7023      	strb	r3, [r4, #0]
 80a28c8:	f7ff fe29 	bl	80a251e <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a28cc:	2000      	movs	r0, #0
 80a28ce:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 80a28d0:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 80a28d2:	bd38      	pop	{r3, r4, r5, pc}

080a28d4 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80a28d4:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80a28d6:	7a83      	ldrb	r3, [r0, #10]
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80a28d8:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80a28da:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80a28dc:	bf18      	it	ne
 80a28de:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 80a28e0:	460a      	mov	r2, r1
 80a28e2:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80a28e4:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 80a28e6:	f7ff fe73 	bl	80a25d0 <_ZN9SdSpiCard11cardCommandEhm>
 80a28ea:	4606      	mov	r6, r0
 80a28ec:	b108      	cbz	r0, 80a28f2 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 80a28ee:	2332      	movs	r3, #50	; 0x32
 80a28f0:	e01d      	b.n	80a292e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 80a28f2:	462a      	mov	r2, r5
 80a28f4:	21fe      	movs	r1, #254	; 0xfe
 80a28f6:	4620      	mov	r0, r4
 80a28f8:	f7ff ffc7 	bl	80a288a <_ZN9SdSpiCard9writeDataEhPKh>
 80a28fc:	b1c0      	cbz	r0, 80a2930 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a28fe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80a2902:	4620      	mov	r0, r4
 80a2904:	f7ff fe4f 	bl	80a25a6 <_ZN9SdSpiCard11waitNotBusyEt>
 80a2908:	4605      	mov	r5, r0
 80a290a:	b908      	cbnz	r0, 80a2910 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
 80a290c:	235a      	movs	r3, #90	; 0x5a
 80a290e:	e00e      	b.n	80a292e <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
 80a2910:	4632      	mov	r2, r6
 80a2912:	210d      	movs	r1, #13
 80a2914:	4620      	mov	r0, r4
 80a2916:	f7ff fe5b 	bl	80a25d0 <_ZN9SdSpiCard11cardCommandEhm>
 80a291a:	b938      	cbnz	r0, 80a292c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80a291c:	6860      	ldr	r0, [r4, #4]
 80a291e:	f7ff fd92 	bl	80a2446 <_ZN14SdSpiAltDriver7receiveEv>
 80a2922:	b918      	cbnz	r0, 80a292c <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
 80a2924:	4620      	mov	r0, r4
 80a2926:	f7ff fdfa 	bl	80a251e <_ZN9SdSpiCard7spiStopEv>
  return true;
 80a292a:	e005      	b.n	80a2938 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a292c:	2329      	movs	r3, #41	; 0x29
 80a292e:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
 80a2930:	4620      	mov	r0, r4
 80a2932:	f7ff fdf4 	bl	80a251e <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a2936:	2500      	movs	r5, #0
}
 80a2938:	4628      	mov	r0, r5
 80a293a:	bd70      	pop	{r4, r5, r6, pc}

080a293c <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 80a293c:	b538      	push	{r3, r4, r5, lr}
 80a293e:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a2940:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 80a2944:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a2946:	f7ff fe2e 	bl	80a25a6 <_ZN9SdSpiCard11waitNotBusyEt>
 80a294a:	b910      	cbnz	r0, 80a2952 <_ZN9SdSpiCard9writeDataEPKh+0x16>
 80a294c:	235b      	movs	r3, #91	; 0x5b
 80a294e:	7023      	strb	r3, [r4, #0]
 80a2950:	e005      	b.n	80a295e <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 80a2952:	462a      	mov	r2, r5
 80a2954:	21fc      	movs	r1, #252	; 0xfc
 80a2956:	4620      	mov	r0, r4
 80a2958:	f7ff ff97 	bl	80a288a <_ZN9SdSpiCard9writeDataEhPKh>
 80a295c:	b918      	cbnz	r0, 80a2966 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
 80a295e:	4620      	mov	r0, r4
 80a2960:	f7ff fddd 	bl	80a251e <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a2964:	2000      	movs	r0, #0
}
 80a2966:	bd38      	pop	{r3, r4, r5, pc}

080a2968 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 80a2968:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80a296a:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 80a296c:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80a296e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80a2970:	bf18      	it	ne
 80a2972:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 80a2974:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 80a2976:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 80a2978:	f7ff fe2a 	bl	80a25d0 <_ZN9SdSpiCard11cardCommandEhm>
 80a297c:	b130      	cbz	r0, 80a298c <_ZN9SdSpiCard10writeStartEm+0x24>
 80a297e:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
 80a2980:	4620      	mov	r0, r4
 80a2982:	7023      	strb	r3, [r4, #0]
 80a2984:	f7ff fdcb 	bl	80a251e <_ZN9SdSpiCard7spiStopEv>
  return false;
 80a2988:	2000      	movs	r0, #0
 80a298a:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 80a298c:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 80a298e:	bd10      	pop	{r4, pc}

080a2990 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 80a2990:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a2992:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 80a2996:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80a2998:	f7ff fe05 	bl	80a25a6 <_ZN9SdSpiCard11waitNotBusyEt>
 80a299c:	4605      	mov	r5, r0
 80a299e:	b120      	cbz	r0, 80a29aa <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80a29a0:	21fd      	movs	r1, #253	; 0xfd
 80a29a2:	6860      	ldr	r0, [r4, #4]
 80a29a4:	f7ff fd6a 	bl	80a247c <_ZN14SdSpiAltDriver4sendEh>
 80a29a8:	e001      	b.n	80a29ae <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80a29aa:	2356      	movs	r3, #86	; 0x56
 80a29ac:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
 80a29ae:	4620      	mov	r0, r4
 80a29b0:	f7ff fdb5 	bl	80a251e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 80a29b4:	4628      	mov	r0, r5
 80a29b6:	bd38      	pop	{r3, r4, r5, pc}

080a29b8 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 80a29b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a29ba:	4605      	mov	r5, r0
 80a29bc:	4616      	mov	r6, r2
 80a29be:	461f      	mov	r7, r3
  if (!writeStart(block)) {
 80a29c0:	f7ff ffd2 	bl	80a2968 <_ZN9SdSpiCard10writeStartEm>
 80a29c4:	b170      	cbz	r0, 80a29e4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
 80a29c6:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80a29c8:	42bc      	cmp	r4, r7
 80a29ca:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80a29ce:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80a29d0:	d004      	beq.n	80a29dc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
 80a29d2:	f7ff ffb3 	bl	80a293c <_ZN9SdSpiCard9writeDataEPKh>
 80a29d6:	b128      	cbz	r0, 80a29e4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80a29d8:	3401      	adds	r4, #1
 80a29da:	e7f5      	b.n	80a29c8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
 80a29dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80a29e0:	f7ff bfd6 	b.w	80a2990 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
 80a29e4:	4628      	mov	r0, r5
 80a29e6:	f7ff fd9a 	bl	80a251e <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 80a29ea:	2000      	movs	r0, #0
 80a29ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a29ee <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
 80a29ee:	f001 ba95 	b.w	80a3f1c <HAL_Pin_Map>

080a29f2 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
 80a29f2:	f001 ba93 	b.w	80a3f1c <HAL_Pin_Map>

080a29f6 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
 80a29f6:	f001 ba91 	b.w	80a3f1c <HAL_Pin_Map>

080a29fa <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 80a29fa:	b510      	push	{r4, lr}
 80a29fc:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 80a29fe:	3024      	adds	r0, #36	; 0x24
 80a2a00:	f000 fba4 	bl	80a314c <_ZN8FatCache4syncEv>
 80a2a04:	b128      	cbz	r0, 80a2a12 <_ZN9FatVolume9cacheSyncEv+0x18>
 80a2a06:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
 80a2a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 80a2a0e:	f000 bb9d 	b.w	80a314c <_ZN8FatCache4syncEv>
  }
 80a2a12:	bd10      	pop	{r4, pc}

080a2a14 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 80a2a14:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80a2a16:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 80a2a1a:	f043 0304 	orr.w	r3, r3, #4
 80a2a1e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 80a2a20:	6901      	ldr	r1, [r0, #16]
 80a2a22:	6880      	ldr	r0, [r0, #8]
 80a2a24:	f000 bc48 	b.w	80a32b8 <_ZN9FatVolume15allocateClusterEmPm>

080a2a28 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 80a2a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 80a2a2c:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 80a2a2e:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 80a2a30:	f003 0320 	and.w	r3, r3, #32
 80a2a34:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80a2a38:	b10b      	cbz	r3, 80a2a3e <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 80a2a3a:	2600      	movs	r6, #0
 80a2a3c:	e02e      	b.n	80a2a9c <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 80a2a3e:	6942      	ldr	r2, [r0, #20]
 80a2a40:	4b18      	ldr	r3, [pc, #96]	; (80a2aa4 <_ZN7FatFile13addDirClusterEv+0x7c>)
 80a2a42:	429a      	cmp	r2, r3
 80a2a44:	d8f9      	bhi.n	80a2a3a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 80a2a46:	f7ff ffe5 	bl	80a2a14 <_ZN7FatFile10addClusterEv>
 80a2a4a:	4606      	mov	r6, r0
 80a2a4c:	2800      	cmp	r0, #0
 80a2a4e:	d0f4      	beq.n	80a2a3a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
 80a2a50:	6921      	ldr	r1, [r4, #16]
 80a2a52:	68a0      	ldr	r0, [r4, #8]
 80a2a54:	f000 fbc5 	bl	80a31e2 <_ZNK9FatVolume17clusterFirstBlockEm>
 80a2a58:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80a2a5a:	68a0      	ldr	r0, [r4, #8]
 80a2a5c:	2205      	movs	r2, #5
 80a2a5e:	4639      	mov	r1, r7
 80a2a60:	3024      	adds	r0, #36	; 0x24
 80a2a62:	f000 fb9a 	bl	80a319a <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 80a2a66:	4680      	mov	r8, r0
 80a2a68:	2800      	cmp	r0, #0
 80a2a6a:	d0e6      	beq.n	80a2a3a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 80a2a6c:	4629      	mov	r1, r5
 80a2a6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80a2a72:	f006 f88e 	bl	80a8b92 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80a2a76:	2501      	movs	r5, #1
 80a2a78:	68a3      	ldr	r3, [r4, #8]
 80a2a7a:	791a      	ldrb	r2, [r3, #4]
 80a2a7c:	42aa      	cmp	r2, r5
 80a2a7e:	d909      	bls.n	80a2a94 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80a2a80:	4642      	mov	r2, r8
 80a2a82:	19e9      	adds	r1, r5, r7
 80a2a84:	6818      	ldr	r0, [r3, #0]
 80a2a86:	f7ff ff25 	bl	80a28d4 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 80a2a8a:	2800      	cmp	r0, #0
 80a2a8c:	d0d5      	beq.n	80a2a3a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80a2a8e:	3501      	adds	r5, #1
 80a2a90:	b2ed      	uxtb	r5, r5
 80a2a92:	e7f1      	b.n	80a2a78 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 80a2a94:	6963      	ldr	r3, [r4, #20]
 80a2a96:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 80a2a9a:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 80a2a9c:	4630      	mov	r0, r6
 80a2a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2aa2:	bf00      	nop
 80a2aa4:	001ffdff 	.word	0x001ffdff

080a2aa8 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 80a2aa8:	b510      	push	{r4, lr}
 80a2aaa:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80a2aac:	6880      	ldr	r0, [r0, #8]
 80a2aae:	460a      	mov	r2, r1
 80a2ab0:	3024      	adds	r0, #36	; 0x24
 80a2ab2:	69a1      	ldr	r1, [r4, #24]
 80a2ab4:	f000 fb71 	bl	80a319a <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 80a2ab8:	b120      	cbz	r0, 80a2ac4 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 80a2aba:	88a3      	ldrh	r3, [r4, #4]
 80a2abc:	f003 030f 	and.w	r3, r3, #15
 80a2ac0:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 80a2ac4:	bd10      	pop	{r4, pc}

080a2ac6 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 80a2ac6:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 80a2ac8:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 80a2aca:	4605      	mov	r5, r0
 80a2acc:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 80a2ace:	b984      	cbnz	r4, 80a2af2 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 80a2ad0:	2224      	movs	r2, #36	; 0x24
 80a2ad2:	4621      	mov	r1, r4
 80a2ad4:	f006 f85d 	bl	80a8b92 <memset>

  m_vol = vol;
 80a2ad8:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 80a2ada:	79f3      	ldrb	r3, [r6, #7]
 80a2adc:	2b10      	cmp	r3, #16
 80a2ade:	d003      	beq.n	80a2ae8 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 80a2ae0:	2b20      	cmp	r3, #32
 80a2ae2:	d106      	bne.n	80a2af2 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 80a2ae4:	2340      	movs	r3, #64	; 0x40
 80a2ae6:	e000      	b.n	80a2aea <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 80a2ae8:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 80a2aea:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 80a2aec:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 80a2aee:	70a8      	strb	r0, [r5, #2]
 80a2af0:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 80a2af2:	2000      	movs	r0, #0
 80a2af4:	bd70      	pop	{r4, r5, r6, pc}

080a2af6 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 80a2af6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2afa:	7803      	ldrb	r3, [r0, #0]
 80a2afc:	4604      	mov	r4, r0
 80a2afe:	4689      	mov	r9, r1
 80a2b00:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
 80a2b02:	b14b      	cbz	r3, 80a2b18 <_ZN7FatFile4readEPvj+0x22>
 80a2b04:	7882      	ldrb	r2, [r0, #2]
 80a2b06:	07d1      	lsls	r1, r2, #31
 80a2b08:	d506      	bpl.n	80a2b18 <_ZN7FatFile4readEPvj+0x22>
 80a2b0a:	e00c      	b.n	80a2b26 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80a2b0c:	465a      	mov	r2, fp
 80a2b0e:	6921      	ldr	r1, [r4, #16]
 80a2b10:	f000 fb6d 	bl	80a31ee <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 80a2b14:	2800      	cmp	r0, #0
 80a2b16:	da3d      	bge.n	80a2b94 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80a2b18:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80a2b1a:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80a2b1e:	f043 0302 	orr.w	r3, r3, #2
 80a2b22:	7063      	strb	r3, [r4, #1]
  return -1;
 80a2b24:	e097      	b.n	80a2c56 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 80a2b26:	071a      	lsls	r2, r3, #28
 80a2b28:	d503      	bpl.n	80a2b32 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 80a2b2a:	69e3      	ldr	r3, [r4, #28]
 80a2b2c:	6962      	ldr	r2, [r4, #20]
 80a2b2e:	1a9b      	subs	r3, r3, r2
 80a2b30:	e007      	b.n	80a2b42 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 80a2b32:	069a      	lsls	r2, r3, #26
 80a2b34:	d508      	bpl.n	80a2b48 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 80a2b36:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 80a2b38:	891a      	ldrh	r2, [r3, #8]
 80a2b3a:	6963      	ldr	r3, [r4, #20]
 80a2b3c:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 80a2b40:	b29b      	uxth	r3, r3
 80a2b42:	429d      	cmp	r5, r3
 80a2b44:	bf28      	it	cs
 80a2b46:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 80a2b48:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 80a2b4a:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80a2b4e:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 80a2b52:	2e00      	cmp	r6, #0
 80a2b54:	d035      	beq.n	80a2bc2 <_ZN7FatFile4readEPvj+0xcc>
 80a2b56:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 80a2b58:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 80a2b5a:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 80a2b5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80a2b62:	68a0      	ldr	r0, [r4, #8]
 80a2b64:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 80a2b68:	d002      	beq.n	80a2b70 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 80a2b6a:	6a03      	ldr	r3, [r0, #32]
 80a2b6c:	4419      	add	r1, r3
 80a2b6e:	e01d      	b.n	80a2bac <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80a2b70:	f890 8005 	ldrb.w	r8, [r0, #5]
 80a2b74:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 80a2b78:	f1ba 0f00 	cmp.w	sl, #0
 80a2b7c:	d110      	bne.n	80a2ba0 <_ZN7FatFile4readEPvj+0xaa>
 80a2b7e:	f1b8 0f00 	cmp.w	r8, #0
 80a2b82:	d10d      	bne.n	80a2ba0 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 80a2b84:	2b00      	cmp	r3, #0
 80a2b86:	d1c1      	bne.n	80a2b0c <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80a2b88:	0653      	lsls	r3, r2, #25
 80a2b8a:	bf4c      	ite	mi
 80a2b8c:	6a03      	ldrmi	r3, [r0, #32]
 80a2b8e:	6a23      	ldrpl	r3, [r4, #32]
 80a2b90:	6123      	str	r3, [r4, #16]
 80a2b92:	e005      	b.n	80a2ba0 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 80a2b94:	d104      	bne.n	80a2ba0 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 80a2b96:	7823      	ldrb	r3, [r4, #0]
 80a2b98:	f013 0f70 	tst.w	r3, #112	; 0x70
 80a2b9c:	d111      	bne.n	80a2bc2 <_ZN7FatFile4readEPvj+0xcc>
 80a2b9e:	e7bb      	b.n	80a2b18 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 80a2ba0:	6921      	ldr	r1, [r4, #16]
 80a2ba2:	68a0      	ldr	r0, [r4, #8]
 80a2ba4:	f000 fb1d 	bl	80a31e2 <_ZNK9FatVolume17clusterFirstBlockEm>
 80a2ba8:	eb08 0100 	add.w	r1, r8, r0
 80a2bac:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 80a2bae:	f1ba 0f00 	cmp.w	sl, #0
 80a2bb2:	d135      	bne.n	80a2c20 <_ZN7FatFile4readEPvj+0x12a>
 80a2bb4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2bb8:	d332      	bcc.n	80a2c20 <_ZN7FatFile4readEPvj+0x12a>
 80a2bba:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80a2bbc:	4299      	cmp	r1, r3
 80a2bbe:	d102      	bne.n	80a2bc6 <_ZN7FatFile4readEPvj+0xd0>
 80a2bc0:	e02e      	b.n	80a2c20 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 80a2bc2:	1ba8      	subs	r0, r5, r6
 80a2bc4:	e047      	b.n	80a2c56 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 80a2bc6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a2bca:	d31b      	bcc.n	80a2c04 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
 80a2bcc:	7822      	ldrb	r2, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
 80a2bce:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
 80a2bd2:	0697      	lsls	r7, r2, #26
 80a2bd4:	d406      	bmi.n	80a2be4 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
 80a2bd6:	7902      	ldrb	r2, [r0, #4]
 80a2bd8:	ebc8 0202 	rsb	r2, r8, r2
 80a2bdc:	b2d2      	uxtb	r2, r2
 80a2bde:	4592      	cmp	sl, r2
 80a2be0:	bf28      	it	cs
 80a2be2:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80a2be4:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 80a2be6:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80a2bea:	d207      	bcs.n	80a2bfc <_ZN7FatFile4readEPvj+0x106>
 80a2bec:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
 80a2bee:	4653      	mov	r3, sl
 80a2bf0:	464a      	mov	r2, r9
 80a2bf2:	6800      	ldr	r0, [r0, #0]
 80a2bf4:	f7ff fe2c 	bl	80a2850 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 80a2bf8:	b960      	cbnz	r0, 80a2c14 <_ZN7FatFile4readEPvj+0x11e>
 80a2bfa:	e78d      	b.n	80a2b18 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80a2bfc:	4453      	add	r3, sl
 80a2bfe:	4299      	cmp	r1, r3
 80a2c00:	d321      	bcc.n	80a2c46 <_ZN7FatFile4readEPvj+0x150>
 80a2c02:	e7f3      	b.n	80a2bec <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 80a2c04:	464a      	mov	r2, r9
 80a2c06:	6800      	ldr	r0, [r0, #0]
 80a2c08:	f7ff fdda 	bl	80a27c0 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 80a2c0c:	2800      	cmp	r0, #0
 80a2c0e:	d083      	beq.n	80a2b18 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 80a2c10:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 80a2c14:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 80a2c16:	44b9      	add	r9, r7
    m_curPosition += n;
 80a2c18:	443b      	add	r3, r7
 80a2c1a:	6163      	str	r3, [r4, #20]
    toRead -= n;
 80a2c1c:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 80a2c1e:	e798      	b.n	80a2b52 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80a2c20:	2200      	movs	r2, #0
 80a2c22:	3024      	adds	r0, #36	; 0x24
 80a2c24:	f000 fab9 	bl	80a319a <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 80a2c28:	2800      	cmp	r0, #0
 80a2c2a:	f43f af75 	beq.w	80a2b18 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 80a2c2e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 80a2c32:	42b7      	cmp	r7, r6
 80a2c34:	bf28      	it	cs
 80a2c36:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 80a2c38:	eb00 010a 	add.w	r1, r0, sl
 80a2c3c:	463a      	mov	r2, r7
 80a2c3e:	4648      	mov	r0, r9
 80a2c40:	f005 ff81 	bl	80a8b46 <memcpy>
 80a2c44:	e7e6      	b.n	80a2c14 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 80a2c46:	3024      	adds	r0, #36	; 0x24
 80a2c48:	9101      	str	r1, [sp, #4]
 80a2c4a:	f000 fa7f 	bl	80a314c <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
 80a2c4e:	9901      	ldr	r1, [sp, #4]
 80a2c50:	2800      	cmp	r0, #0
 80a2c52:	d1cb      	bne.n	80a2bec <_ZN7FatFile4readEPvj+0xf6>
 80a2c54:	e760      	b.n	80a2b18 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 80a2c56:	b003      	add	sp, #12
 80a2c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2c5c <_ZN7FatFile5fgetsEPcsS0_>:
    n += m_vol->blocksPerCluster();
  } while (fg);
  return 512UL*n;
}
//------------------------------------------------------------------------------
int16_t FatFile::fgets(char* str, int16_t num, char* delim) {
 80a2c5c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a2c60:	4680      	mov	r8, r0
 80a2c62:	460e      	mov	r6, r1
 80a2c64:	4691      	mov	r9, r2
 80a2c66:	461f      	mov	r7, r3
  char ch;
  int16_t n = 0;
  int16_t r = -1;
 80a2c68:	f04f 3aff 	mov.w	sl, #4294967295
  return 512UL*n;
}
//------------------------------------------------------------------------------
int16_t FatFile::fgets(char* str, int16_t num, char* delim) {
  char ch;
  int16_t n = 0;
 80a2c6c:	2500      	movs	r5, #0
  int16_t r = -1;
  while ((n + 1) < num && (r = read(&ch, 1)) == 1) {
 80a2c6e:	1c6c      	adds	r4, r5, #1
 80a2c70:	454c      	cmp	r4, r9
 80a2c72:	da20      	bge.n	80a2cb6 <_ZN7FatFile5fgetsEPcsS0_+0x5a>
 80a2c74:	2201      	movs	r2, #1
 80a2c76:	f10d 0107 	add.w	r1, sp, #7
 80a2c7a:	4640      	mov	r0, r8
 80a2c7c:	f7ff ff3b 	bl	80a2af6 <_ZN7FatFile4readEPvj>
 80a2c80:	fa0f fa80 	sxth.w	sl, r0
 80a2c84:	f1ba 0f01 	cmp.w	sl, #1
 80a2c88:	d115      	bne.n	80a2cb6 <_ZN7FatFile5fgetsEPcsS0_+0x5a>
    // delete CR
    if (ch == '\r') {
 80a2c8a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a2c8e:	290d      	cmp	r1, #13
 80a2c90:	d102      	bne.n	80a2c98 <_ZN7FatFile5fgetsEPcsS0_+0x3c>
 80a2c92:	462c      	mov	r4, r5
 80a2c94:	4625      	mov	r5, r4
 80a2c96:	e7ea      	b.n	80a2c6e <_ZN7FatFile5fgetsEPcsS0_+0x12>
      continue;
    }
    str[n++] = ch;
 80a2c98:	b224      	sxth	r4, r4
 80a2c9a:	5571      	strb	r1, [r6, r5]
    if (!delim) {
 80a2c9c:	b917      	cbnz	r7, 80a2ca4 <_ZN7FatFile5fgetsEPcsS0_+0x48>
      if (ch == '\n') {
 80a2c9e:	290a      	cmp	r1, #10
 80a2ca0:	d1f8      	bne.n	80a2c94 <_ZN7FatFile5fgetsEPcsS0_+0x38>
 80a2ca2:	e004      	b.n	80a2cae <_ZN7FatFile5fgetsEPcsS0_+0x52>
        break;
      }
    } else {
      if (strchr(delim, ch)) {
 80a2ca4:	4638      	mov	r0, r7
 80a2ca6:	f005 ffdf 	bl	80a8c68 <strchr>
 80a2caa:	2800      	cmp	r0, #0
 80a2cac:	d0f2      	beq.n	80a2c94 <_ZN7FatFile5fgetsEPcsS0_+0x38>
  }
  if (r < 0) {
    // read error
    return -1;
  }
  str[n] = '\0';
 80a2cae:	2300      	movs	r3, #0
 80a2cb0:	5533      	strb	r3, [r6, r4]
  return n;
 80a2cb2:	4620      	mov	r0, r4
 80a2cb4:	e007      	b.n	80a2cc6 <_ZN7FatFile5fgetsEPcsS0_+0x6a>
      if (strchr(delim, ch)) {
        break;
      }
    }
  }
  if (r < 0) {
 80a2cb6:	f1ba 0f00 	cmp.w	sl, #0
 80a2cba:	da02      	bge.n	80a2cc2 <_ZN7FatFile5fgetsEPcsS0_+0x66>
    // read error
    return -1;
 80a2cbc:	f04f 30ff 	mov.w	r0, #4294967295
 80a2cc0:	e001      	b.n	80a2cc6 <_ZN7FatFile5fgetsEPcsS0_+0x6a>
 80a2cc2:	462c      	mov	r4, r5
 80a2cc4:	e7f3      	b.n	80a2cae <_ZN7FatFile5fgetsEPcsS0_+0x52>
  }
  str[n] = '\0';
  return n;
}
 80a2cc6:	b002      	add	sp, #8
 80a2cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a2ccc <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80a2ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80a2cce:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80a2cd0:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80a2cd2:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 80a2cd6:	b105      	cbz	r5, 80a2cda <_ZN7FatFile12readDirCacheEb+0xe>
 80a2cd8:	b969      	cbnz	r1, 80a2cf6 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 80a2cda:	2201      	movs	r2, #1
 80a2cdc:	f10d 0107 	add.w	r1, sp, #7
 80a2ce0:	4620      	mov	r0, r4
 80a2ce2:	f7ff ff08 	bl	80a2af6 <_ZN7FatFile4readEPvj>
 80a2ce6:	b240      	sxtb	r0, r0
    if  (n != 1) {
 80a2ce8:	2801      	cmp	r0, #1
 80a2cea:	d001      	beq.n	80a2cf0 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 80a2cec:	2000      	movs	r0, #0
 80a2cee:	e008      	b.n	80a2d02 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 80a2cf0:	6963      	ldr	r3, [r4, #20]
 80a2cf2:	331f      	adds	r3, #31
 80a2cf4:	e000      	b.n	80a2cf8 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 80a2cf6:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80a2cf8:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 80a2cfa:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80a2cfc:	3030      	adds	r0, #48	; 0x30
 80a2cfe:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 80a2d02:	b003      	add	sp, #12
 80a2d04:	bd30      	pop	{r4, r5, pc}

080a2d06 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 80a2d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2d0a:	460e      	mov	r6, r1
 80a2d0c:	7801      	ldrb	r1, [r0, #0]
 80a2d0e:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 80a2d10:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 80a2d12:	2900      	cmp	r1, #0
 80a2d14:	d039      	beq.n	80a2d8a <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 80a2d16:	6945      	ldr	r5, [r0, #20]
 80a2d18:	42b5      	cmp	r5, r6
 80a2d1a:	d03a      	beq.n	80a2d92 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 80a2d1c:	b90e      	cbnz	r6, 80a2d22 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 80a2d1e:	6106      	str	r6, [r0, #16]
    goto done;
 80a2d20:	e031      	b.n	80a2d86 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 80a2d22:	070b      	lsls	r3, r1, #28
 80a2d24:	d503      	bpl.n	80a2d2e <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 80a2d26:	69c3      	ldr	r3, [r0, #28]
 80a2d28:	429e      	cmp	r6, r3
 80a2d2a:	d82e      	bhi.n	80a2d8a <_ZN7FatFile7seekSetEm+0x84>
 80a2d2c:	e007      	b.n	80a2d3e <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 80a2d2e:	0688      	lsls	r0, r1, #26
 80a2d30:	d505      	bpl.n	80a2d3e <_ZN7FatFile7seekSetEm+0x38>
 80a2d32:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 80a2d34:	891b      	ldrh	r3, [r3, #8]
 80a2d36:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 80a2d3a:	d826      	bhi.n	80a2d8a <_ZN7FatFile7seekSetEm+0x84>
 80a2d3c:	e023      	b.n	80a2d86 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80a2d3e:	f8d4 e008 	ldr.w	lr, [r4, #8]
 80a2d42:	1e6a      	subs	r2, r5, #1
 80a2d44:	f89e 3006 	ldrb.w	r3, [lr, #6]
 80a2d48:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80a2d4c:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 80a2d4e:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 80a2d50:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 80a2d52:	429a      	cmp	r2, r3
 80a2d54:	d800      	bhi.n	80a2d58 <_ZN7FatFile7seekSetEm+0x52>
 80a2d56:	b94d      	cbnz	r5, 80a2d6c <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 80a2d58:	064a      	lsls	r2, r1, #25
 80a2d5a:	bf4c      	ite	mi
 80a2d5c:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 80a2d60:	6a22      	ldrpl	r2, [r4, #32]
 80a2d62:	6122      	str	r2, [r4, #16]
 80a2d64:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80a2d66:	f104 0810 	add.w	r8, r4, #16
 80a2d6a:	e00a      	b.n	80a2d82 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 80a2d6c:	1a9b      	subs	r3, r3, r2
 80a2d6e:	e7f9      	b.n	80a2d64 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 80a2d70:	4642      	mov	r2, r8
 80a2d72:	6921      	ldr	r1, [r4, #16]
 80a2d74:	68a0      	ldr	r0, [r4, #8]
 80a2d76:	f000 fa3a 	bl	80a31ee <_ZN9FatVolume6fatGetEmPm>
 80a2d7a:	2800      	cmp	r0, #0
 80a2d7c:	f105 35ff 	add.w	r5, r5, #4294967295
 80a2d80:	dd03      	ble.n	80a2d8a <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 80a2d82:	2d00      	cmp	r5, #0
 80a2d84:	d1f4      	bne.n	80a2d70 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 80a2d86:	6166      	str	r6, [r4, #20]
 80a2d88:	e003      	b.n	80a2d92 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 80a2d8a:	6127      	str	r7, [r4, #16]
  return false;
 80a2d8c:	2000      	movs	r0, #0
 80a2d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 80a2d92:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 80a2d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2d98 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 80a2d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2d9a:	460f      	mov	r7, r1
 80a2d9c:	4604      	mov	r4, r0
 80a2d9e:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80a2da0:	2100      	movs	r1, #0
 80a2da2:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 80a2da4:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80a2da6:	f005 fef4 	bl	80a8b92 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80a2daa:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 80a2dac:	80a5      	strh	r5, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80a2dae:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80a2db0:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80a2db2:	f005 020f 	and.w	r2, r5, #15
 80a2db6:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80a2dba:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80a2dbc:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80a2dbe:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 80a2dc0:	7acb      	ldrb	r3, [r1, #11]
 80a2dc2:	071d      	lsls	r5, r3, #28
 80a2dc4:	d44c      	bmi.n	80a2e60 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 80a2dc6:	1883      	adds	r3, r0, r2
 80a2dc8:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80a2dcc:	f003 0317 	and.w	r3, r3, #23
 80a2dd0:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 80a2dd2:	7ac9      	ldrb	r1, [r1, #11]
 80a2dd4:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
 80a2dd8:	bf04      	itt	eq
 80a2dda:	f043 0308 	orreq.w	r3, r3, #8
 80a2dde:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
 80a2de0:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80a2de4:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
 80a2de6:	f006 0303 	and.w	r3, r6, #3
 80a2dea:	2b01      	cmp	r3, #1
 80a2dec:	d009      	beq.n	80a2e02 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
 80a2dee:	2b02      	cmp	r3, #2
 80a2df0:	d005      	beq.n	80a2dfe <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
 80a2df2:	2b00      	cmp	r3, #0
 80a2df4:	d134      	bne.n	80a2e60 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
 80a2df6:	0571      	lsls	r1, r6, #21
 80a2df8:	d432      	bmi.n	80a2e60 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
 80a2dfa:	2301      	movs	r3, #1
 80a2dfc:	e002      	b.n	80a2e04 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
 80a2dfe:	2303      	movs	r3, #3
 80a2e00:	e000      	b.n	80a2e04 <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
 80a2e02:	2302      	movs	r3, #2
 80a2e04:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
 80a2e06:	78a1      	ldrb	r1, [r4, #2]
 80a2e08:	078b      	lsls	r3, r1, #30
 80a2e0a:	d503      	bpl.n	80a2e14 <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
 80a2e0c:	7823      	ldrb	r3, [r4, #0]
 80a2e0e:	f013 0f11 	tst.w	r3, #17
 80a2e12:	d125      	bne.n	80a2e60 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
 80a2e14:	b24b      	sxtb	r3, r1
 80a2e16:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 80a2e1a:	f006 0108 	and.w	r1, r6, #8
 80a2e1e:	bf14      	ite	ne
 80a2e20:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
 80a2e24:	2700      	moveq	r7, #0
 80a2e26:	4319      	orrs	r1, r3
 80a2e28:	4339      	orrs	r1, r7
 80a2e2a:	70a1      	strb	r1, [r4, #2]
 80a2e2c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 80a2e2e:	4402      	add	r2, r0
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);

  m_dirBlock = m_vol->cacheBlockNumber();
 80a2e30:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 80a2e32:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 80a2e36:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a

  if (oflag & O_TRUNC) {
 80a2e3a:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 80a2e3c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
 80a2e40:	d504      	bpl.n	80a2e4c <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 80a2e42:	b181      	cbz	r1, 80a2e66 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 80a2e44:	f000 fa73 	bl	80a332e <_ZN9FatVolume9freeChainEm>
 80a2e48:	b968      	cbnz	r0, 80a2e66 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 80a2e4a:	e009      	b.n	80a2e60 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 80a2e4c:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 80a2e4e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80a2e50:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 80a2e52:	0473      	lsls	r3, r6, #17
 80a2e54:	d50c      	bpl.n	80a2e70 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
 80a2e56:	69e1      	ldr	r1, [r4, #28]
 80a2e58:	4620      	mov	r0, r4
 80a2e5a:	f7ff ff54 	bl	80a2d06 <_ZN7FatFile7seekSetEm>
 80a2e5e:	b938      	cbnz	r0, 80a2e70 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 80a2e60:	2000      	movs	r0, #0
 80a2e62:	7020      	strb	r0, [r4, #0]
  return false;
 80a2e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 80a2e66:	78a3      	ldrb	r3, [r4, #2]
 80a2e68:	f043 0304 	orr.w	r3, r3, #4
 80a2e6c:	70a3      	strb	r3, [r4, #2]
 80a2e6e:	e7f0      	b.n	80a2e52 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 80a2e70:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 80a2e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2e74 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80a2e74:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 80a2e76:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80a2e78:	4604      	mov	r4, r0
  if (!isOpen()) {
 80a2e7a:	b90b      	cbnz	r3, 80a2e80 <_ZN7FatFile4syncEv+0xc>
    return true;
 80a2e7c:	2001      	movs	r0, #1
 80a2e7e:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
 80a2e80:	7883      	ldrb	r3, [r0, #2]
 80a2e82:	075a      	lsls	r2, r3, #29
 80a2e84:	d523      	bpl.n	80a2ece <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80a2e86:	2101      	movs	r1, #1
 80a2e88:	f7ff fe0e 	bl	80a2aa8 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80a2e8c:	4605      	mov	r5, r0
 80a2e8e:	b928      	cbnz	r0, 80a2e9c <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80a2e90:	7863      	ldrb	r3, [r4, #1]
  return false;
 80a2e92:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80a2e94:	f043 0301 	orr.w	r3, r3, #1
 80a2e98:	7063      	strb	r3, [r4, #1]
 80a2e9a:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80a2e9c:	7803      	ldrb	r3, [r0, #0]
 80a2e9e:	2be5      	cmp	r3, #229	; 0xe5
 80a2ea0:	d0f6      	beq.n	80a2e90 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 80a2ea2:	7823      	ldrb	r3, [r4, #0]
 80a2ea4:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 80a2ea6:	bf44      	itt	mi
 80a2ea8:	69e3      	ldrmi	r3, [r4, #28]
 80a2eaa:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 80a2eac:	8c23      	ldrh	r3, [r4, #32]
 80a2eae:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 80a2eb0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80a2eb2:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 80a2eb4:	4b09      	ldr	r3, [pc, #36]	; (80a2edc <_ZN7FatFile4syncEv+0x68>)
 80a2eb6:	681b      	ldr	r3, [r3, #0]
 80a2eb8:	b12b      	cbz	r3, 80a2ec6 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 80a2eba:	f100 0116 	add.w	r1, r0, #22
 80a2ebe:	3018      	adds	r0, #24
 80a2ec0:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 80a2ec2:	8b2b      	ldrh	r3, [r5, #24]
 80a2ec4:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 80a2ec6:	78a3      	ldrb	r3, [r4, #2]
 80a2ec8:	f023 0304 	bic.w	r3, r3, #4
 80a2ecc:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 80a2ece:	68a0      	ldr	r0, [r4, #8]
 80a2ed0:	f7ff fd93 	bl	80a29fa <_ZN9FatVolume9cacheSyncEv>
 80a2ed4:	2800      	cmp	r0, #0
 80a2ed6:	d0db      	beq.n	80a2e90 <_ZN7FatFile4syncEv+0x1c>
 80a2ed8:	e7d0      	b.n	80a2e7c <_ZN7FatFile4syncEv+0x8>
 80a2eda:	bf00      	nop
 80a2edc:	20000254 	.word	0x20000254

080a2ee0 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 80a2ee0:	b510      	push	{r4, lr}
 80a2ee2:	4604      	mov	r4, r0
  bool rtn = sync();
 80a2ee4:	f7ff ffc6 	bl	80a2e74 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 80a2ee8:	2300      	movs	r3, #0
 80a2eea:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 80a2eec:	bd10      	pop	{r4, pc}

080a2eee <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 80a2eee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2ef0:	461f      	mov	r7, r3
 80a2ef2:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80a2ef4:	2300      	movs	r3, #0
 80a2ef6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80a2efa:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80a2efe:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 80a2f00:	4606      	mov	r6, r0
 80a2f02:	460c      	mov	r4, r1
 80a2f04:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80a2f06:	b10b      	cbz	r3, 80a2f0c <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 80a2f08:	2000      	movs	r0, #0
 80a2f0a:	e03d      	b.n	80a2f88 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80a2f0c:	780b      	ldrb	r3, [r1, #0]
 80a2f0e:	f013 0f70 	tst.w	r3, #112	; 0x70
 80a2f12:	d0f9      	beq.n	80a2f08 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 80a2f14:	7813      	ldrb	r3, [r2, #0]
 80a2f16:	2b2f      	cmp	r3, #47	; 0x2f
 80a2f18:	d112      	bne.n	80a2f40 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
 80a2f1a:	9b01      	ldr	r3, [sp, #4]
 80a2f1c:	781a      	ldrb	r2, [r3, #0]
 80a2f1e:	2a2f      	cmp	r2, #47	; 0x2f
 80a2f20:	d102      	bne.n	80a2f28 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
 80a2f22:	3301      	adds	r3, #1
 80a2f24:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 80a2f26:	e7f8      	b.n	80a2f1a <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 80a2f28:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 80a2f2a:	b91a      	cbnz	r2, 80a2f34 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
 80a2f2c:	4630      	mov	r0, r6
 80a2f2e:	f7ff fdca 	bl	80a2ac6 <_ZN7FatFile8openRootEP9FatVolume>
 80a2f32:	e029      	b.n	80a2f88 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 80a2f34:	a809      	add	r0, sp, #36	; 0x24
 80a2f36:	f7ff fdc6 	bl	80a2ac6 <_ZN7FatFile8openRootEP9FatVolume>
 80a2f3a:	2800      	cmp	r0, #0
 80a2f3c:	d0e4      	beq.n	80a2f08 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 80a2f3e:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 80a2f40:	aa01      	add	r2, sp, #4
 80a2f42:	a903      	add	r1, sp, #12
 80a2f44:	9801      	ldr	r0, [sp, #4]
 80a2f46:	f000 facd 	bl	80a34e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 80a2f4a:	2800      	cmp	r0, #0
 80a2f4c:	d0dc      	beq.n	80a2f08 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 80a2f4e:	9b01      	ldr	r3, [sp, #4]
 80a2f50:	781b      	ldrb	r3, [r3, #0]
 80a2f52:	b19b      	cbz	r3, 80a2f7c <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
 80a2f54:	2300      	movs	r3, #0
 80a2f56:	aa03      	add	r2, sp, #12
 80a2f58:	4621      	mov	r1, r4
 80a2f5a:	4630      	mov	r0, r6
 80a2f5c:	f000 fc66 	bl	80a382c <_ZN7FatFile4openEPS_P7fname_ti>
 80a2f60:	2800      	cmp	r0, #0
 80a2f62:	d0d1      	beq.n	80a2f08 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 80a2f64:	4635      	mov	r5, r6
 80a2f66:	ac09      	add	r4, sp, #36	; 0x24
 80a2f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2f6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2f6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2f70:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 80a2f72:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 80a2f74:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 80a2f76:	f7ff ffb3 	bl	80a2ee0 <_ZN7FatFile5closeEv>
 80a2f7a:	e7e0      	b.n	80a2f3e <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
 80a2f7c:	463b      	mov	r3, r7
 80a2f7e:	aa03      	add	r2, sp, #12
 80a2f80:	4621      	mov	r1, r4
 80a2f82:	4630      	mov	r0, r6
 80a2f84:	f000 fc52 	bl	80a382c <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
 80a2f88:	b013      	add	sp, #76	; 0x4c
 80a2f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2f8c <_ZN7FatFile6removeEPS_PKc>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove(FatFile* dirFile, const char* path) {
 80a2f8c:	b500      	push	{lr}
 80a2f8e:	2300      	movs	r3, #0
 80a2f90:	b08b      	sub	sp, #44	; 0x2c
 80a2f92:	f88d 3004 	strb.w	r3, [sp, #4]
 80a2f96:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile file;
  if (!file.open(dirFile, path, O_WRONLY)) {
 80a2f9a:	460a      	mov	r2, r1
 80a2f9c:	2301      	movs	r3, #1
 80a2f9e:	4601      	mov	r1, r0
 80a2fa0:	a801      	add	r0, sp, #4
 80a2fa2:	f7ff ffa4 	bl	80a2eee <_ZN7FatFile4openEPS_PKci>
 80a2fa6:	b110      	cbz	r0, 80a2fae <_ZN7FatFile6removeEPS_PKc+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return file.remove();
 80a2fa8:	a801      	add	r0, sp, #4
 80a2faa:	f000 fb87 	bl	80a36bc <_ZN7FatFile6removeEv>

fail:
  return false;
}
 80a2fae:	b00b      	add	sp, #44	; 0x2c
 80a2fb0:	f85d fb04 	ldr.w	pc, [sp], #4

080a2fb4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80a2fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 80a2fb8:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80a2fba:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 80a2fbc:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80a2fbe:	4604      	mov	r4, r0
 80a2fc0:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 80a2fc2:	d508      	bpl.n	80a2fd6 <_ZN7FatFile5writeEPKvj+0x22>
 80a2fc4:	7883      	ldrb	r3, [r0, #2]
 80a2fc6:	079a      	lsls	r2, r3, #30
 80a2fc8:	d505      	bpl.n	80a2fd6 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
 80a2fca:	071b      	lsls	r3, r3, #28
 80a2fcc:	d50b      	bpl.n	80a2fe6 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 80a2fce:	69e1      	ldr	r1, [r4, #28]
 80a2fd0:	f7ff fe99 	bl	80a2d06 <_ZN7FatFile7seekSetEm>
 80a2fd4:	b938      	cbnz	r0, 80a2fe6 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80a2fd6:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80a2fd8:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 80a2fdc:	f043 0301 	orr.w	r3, r3, #1
 80a2fe0:	7063      	strb	r3, [r4, #1]
  return -1;
 80a2fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 80a2fe6:	6963      	ldr	r3, [r4, #20]
 80a2fe8:	43db      	mvns	r3, r3
 80a2fea:	4598      	cmp	r8, r3
 80a2fec:	d8f3      	bhi.n	80a2fd6 <_ZN7FatFile5writeEPKvj+0x22>
 80a2fee:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80a2ff0:	f04f 0a00 	mov.w	sl, #0
 80a2ff4:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80a2ff6:	2e00      	cmp	r6, #0
 80a2ff8:	d07f      	beq.n	80a30fa <_ZN7FatFile5writeEPKvj+0x146>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 80a2ffa:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 80a2ffc:	f3c3 0708 	ubfx	r7, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80a3000:	7942      	ldrb	r2, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 80a3002:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
 80a3006:	d11c      	bne.n	80a3042 <_ZN7FatFile5writeEPKvj+0x8e>
 80a3008:	b9df      	cbnz	r7, 80a3042 <_ZN7FatFile5writeEPKvj+0x8e>
      // start of new cluster
      if (m_curCluster != 0) {
 80a300a:	6921      	ldr	r1, [r4, #16]
 80a300c:	b171      	cbz	r1, 80a302c <_ZN7FatFile5writeEPKvj+0x78>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80a300e:	f104 0210 	add.w	r2, r4, #16
 80a3012:	f000 f8ec 	bl	80a31ee <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 80a3016:	2800      	cmp	r0, #0
 80a3018:	dbdd      	blt.n	80a2fd6 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 80a301a:	f040 808d 	bne.w	80a3138 <_ZN7FatFile5writeEPKvj+0x184>
          // add cluster if at end of chain
          if (!addCluster()) {
 80a301e:	4620      	mov	r0, r4
 80a3020:	f7ff fcf8 	bl	80a2a14 <_ZN7FatFile10addClusterEv>
 80a3024:	2800      	cmp	r0, #0
 80a3026:	f040 8087 	bne.w	80a3138 <_ZN7FatFile5writeEPKvj+0x184>
 80a302a:	e7d4      	b.n	80a2fd6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 80a302c:	6a23      	ldr	r3, [r4, #32]
 80a302e:	b93b      	cbnz	r3, 80a3040 <_ZN7FatFile5writeEPKvj+0x8c>
          // allocate first cluster of file
          if (!addCluster()) {
 80a3030:	4620      	mov	r0, r4
 80a3032:	f7ff fcef 	bl	80a2a14 <_ZN7FatFile10addClusterEv>
 80a3036:	2800      	cmp	r0, #0
 80a3038:	d0cd      	beq.n	80a2fd6 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 80a303a:	6923      	ldr	r3, [r4, #16]
 80a303c:	6223      	str	r3, [r4, #32]
 80a303e:	e000      	b.n	80a3042 <_ZN7FatFile5writeEPKvj+0x8e>
        } else {
          m_curCluster = m_firstCluster;
 80a3040:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 80a3042:	6921      	ldr	r1, [r4, #16]
 80a3044:	68a0      	ldr	r0, [r4, #8]
 80a3046:	f000 f8cc 	bl	80a31e2 <_ZNK9FatVolume17clusterFirstBlockEm>
 80a304a:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 80a304c:	b917      	cbnz	r7, 80a3054 <_ZN7FatFile5writeEPKvj+0xa0>
 80a304e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3052:	d221      	bcs.n	80a3098 <_ZN7FatFile5writeEPKvj+0xe4>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 80a3054:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
 80a3058:	42b5      	cmp	r5, r6
 80a305a:	bf28      	it	cs
 80a305c:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 80a305e:	b937      	cbnz	r7, 80a306e <_ZN7FatFile5writeEPKvj+0xba>
 80a3060:	6963      	ldr	r3, [r4, #20]
 80a3062:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 80a3064:	4293      	cmp	r3, r2
 80a3066:	bf34      	ite	cc
 80a3068:	2201      	movcc	r2, #1
 80a306a:	2205      	movcs	r2, #5
 80a306c:	e000      	b.n	80a3070 <_ZN7FatFile5writeEPKvj+0xbc>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 80a306e:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80a3070:	68a0      	ldr	r0, [r4, #8]
 80a3072:	3024      	adds	r0, #36	; 0x24
 80a3074:	f000 f891 	bl	80a319a <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 80a3078:	2800      	cmp	r0, #0
 80a307a:	d0ac      	beq.n	80a2fd6 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80a307c:	4438      	add	r0, r7
 80a307e:	462a      	mov	r2, r5
 80a3080:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 80a3082:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80a3084:	f005 fd5f 	bl	80a8b46 <memcpy>
      if (512 == (n + blockOffset)) {
 80a3088:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 80a308c:	d12f      	bne.n	80a30ee <_ZN7FatFile5writeEPKvj+0x13a>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 80a308e:	68a0      	ldr	r0, [r4, #8]
 80a3090:	3024      	adds	r0, #36	; 0x24
 80a3092:	f000 f85b 	bl	80a314c <_ZN8FatCache4syncEv>
 80a3096:	e016      	b.n	80a30c6 <_ZN7FatFile5writeEPKvj+0x112>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 80a3098:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a309c:	68a0      	ldr	r0, [r4, #8]
 80a309e:	d314      	bcc.n	80a30ca <_ZN7FatFile5writeEPKvj+0x116>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
 80a30a0:	7902      	ldrb	r2, [r0, #4]
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
 80a30a2:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
 80a30a4:	1b52      	subs	r2, r2, r5
 80a30a6:	b2d2      	uxtb	r2, r2
 80a30a8:	4293      	cmp	r3, r2
 80a30aa:	bf28      	it	cs
 80a30ac:	4613      	movcs	r3, r2
 80a30ae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
 80a30b0:	025d      	lsls	r5, r3, #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80a30b2:	4291      	cmp	r1, r2
 80a30b4:	d302      	bcc.n	80a30bc <_ZN7FatFile5writeEPKvj+0x108>
 80a30b6:	441a      	add	r2, r3
 80a30b8:	4291      	cmp	r1, r2
 80a30ba:	d337      	bcc.n	80a312c <_ZN7FatFile5writeEPKvj+0x178>
 80a30bc:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
 80a30be:	464a      	mov	r2, r9
 80a30c0:	6838      	ldr	r0, [r7, #0]
 80a30c2:	f7ff fc79 	bl	80a29b8 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
 80a30c6:	b990      	cbnz	r0, 80a30ee <_ZN7FatFile5writeEPKvj+0x13a>
 80a30c8:	e785      	b.n	80a2fd6 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 80a30ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80a30cc:	464a      	mov	r2, r9
 80a30ce:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80a30d0:	bf02      	ittt	eq
 80a30d2:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80a30d6:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80a30da:	62c3      	streq	r3, [r0, #44]	; 0x2c
 80a30dc:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80a30de:	6818      	ldr	r0, [r3, #0]
 80a30e0:	f7ff fbf8 	bl	80a28d4 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 80a30e4:	2800      	cmp	r0, #0
 80a30e6:	f43f af76 	beq.w	80a2fd6 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 80a30ea:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80a30ee:	6963      	ldr	r3, [r4, #20]
    src += n;
 80a30f0:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80a30f2:	442b      	add	r3, r5
 80a30f4:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 80a30f6:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80a30f8:	e77c      	b.n	80a2ff4 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 80a30fa:	69e2      	ldr	r2, [r4, #28]
 80a30fc:	4293      	cmp	r3, r2
 80a30fe:	d901      	bls.n	80a3104 <_ZN7FatFile5writeEPKvj+0x150>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 80a3100:	61e3      	str	r3, [r4, #28]
 80a3102:	e002      	b.n	80a310a <_ZN7FatFile5writeEPKvj+0x156>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 80a3104:	4b0f      	ldr	r3, [pc, #60]	; (80a3144 <_ZN7FatFile5writeEPKvj+0x190>)
 80a3106:	681b      	ldr	r3, [r3, #0]
 80a3108:	b11b      	cbz	r3, 80a3112 <_ZN7FatFile5writeEPKvj+0x15e>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 80a310a:	78a3      	ldrb	r3, [r4, #2]
 80a310c:	f043 0304 	orr.w	r3, r3, #4
 80a3110:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
 80a3112:	f994 3002 	ldrsb.w	r3, [r4, #2]
 80a3116:	2b00      	cmp	r3, #0
 80a3118:	db02      	blt.n	80a3120 <_ZN7FatFile5writeEPKvj+0x16c>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 80a311a:	4640      	mov	r0, r8
 80a311c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
 80a3120:	4620      	mov	r0, r4
 80a3122:	f7ff fea7 	bl	80a2e74 <_ZN7FatFile4syncEv>
 80a3126:	2800      	cmp	r0, #0
 80a3128:	d1f7      	bne.n	80a311a <_ZN7FatFile5writeEPKvj+0x166>
 80a312a:	e754      	b.n	80a2fd6 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80a312c:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80a3130:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80a3134:	62c2      	str	r2, [r0, #44]	; 0x2c
 80a3136:	e7c1      	b.n	80a30bc <_ZN7FatFile5writeEPKvj+0x108>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 80a3138:	6921      	ldr	r1, [r4, #16]
 80a313a:	68a0      	ldr	r0, [r4, #8]
 80a313c:	f000 f851 	bl	80a31e2 <_ZNK9FatVolume17clusterFirstBlockEm>
 80a3140:	4601      	mov	r1, r0
 80a3142:	e784      	b.n	80a304e <_ZN7FatFile5writeEPKvj+0x9a>
 80a3144:	20000254 	.word	0x20000254

080a3148 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 80a3148:	f000 bee8 	b.w	80a3f1c <HAL_Pin_Map>

080a314c <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 80a314c:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 80a314e:	7803      	ldrb	r3, [r0, #0]
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 80a3150:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 80a3152:	07da      	lsls	r2, r3, #31
 80a3154:	d51e      	bpl.n	80a3194 <_ZN8FatCache4syncEv+0x48>
 80a3156:	6843      	ldr	r3, [r0, #4]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 80a3158:	f100 060c 	add.w	r6, r0, #12
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80a315c:	6881      	ldr	r1, [r0, #8]
 80a315e:	4632      	mov	r2, r6
 80a3160:	6818      	ldr	r0, [r3, #0]
 80a3162:	f7ff fbb7 	bl	80a28d4 <_ZN9SdSpiCard10writeBlockEmPKh>
 80a3166:	4605      	mov	r5, r0
 80a3168:	b908      	cbnz	r0, 80a316e <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 80a316a:	2500      	movs	r5, #0
 80a316c:	e013      	b.n	80a3196 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 80a316e:	7823      	ldrb	r3, [r4, #0]
 80a3170:	079b      	lsls	r3, r3, #30
 80a3172:	d404      	bmi.n	80a317e <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 80a3174:	7823      	ldrb	r3, [r4, #0]
 80a3176:	f023 0301 	bic.w	r3, r3, #1
 80a317a:	7023      	strb	r3, [r4, #0]
 80a317c:	e00b      	b.n	80a3196 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 80a317e:	6863      	ldr	r3, [r4, #4]
 80a3180:	68a0      	ldr	r0, [r4, #8]
 80a3182:	6919      	ldr	r1, [r3, #16]
 80a3184:	4632      	mov	r2, r6
 80a3186:	4401      	add	r1, r0
 80a3188:	6818      	ldr	r0, [r3, #0]
 80a318a:	f7ff fba3 	bl	80a28d4 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 80a318e:	2800      	cmp	r0, #0
 80a3190:	d1f0      	bne.n	80a3174 <_ZN8FatCache4syncEv+0x28>
 80a3192:	e7ea      	b.n	80a316a <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 80a3194:	2501      	movs	r5, #1

fail:
  return false;
}
 80a3196:	4628      	mov	r0, r5
 80a3198:	bd70      	pop	{r4, r5, r6, pc}

080a319a <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80a319a:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 80a319c:	6883      	ldr	r3, [r0, #8]
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80a319e:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 80a31a0:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80a31a2:	460e      	mov	r6, r1
 80a31a4:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 80a31a6:	d014      	beq.n	80a31d2 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 80a31a8:	f7ff ffd0 	bl	80a314c <_ZN8FatCache4syncEv>
 80a31ac:	b908      	cbnz	r0, 80a31b2 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
 80a31ae:	2000      	movs	r0, #0
 80a31b0:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 80a31b2:	076b      	lsls	r3, r5, #29
 80a31b4:	d503      	bpl.n	80a31be <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 80a31b6:	2300      	movs	r3, #0
 80a31b8:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 80a31ba:	60a6      	str	r6, [r4, #8]
 80a31bc:	e009      	b.n	80a31d2 <_ZN8FatCache4readEmh+0x38>
 80a31be:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 80a31c0:	f104 020c 	add.w	r2, r4, #12
 80a31c4:	4631      	mov	r1, r6
 80a31c6:	6818      	ldr	r0, [r3, #0]
 80a31c8:	f7ff fafa 	bl	80a27c0 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 80a31cc:	2800      	cmp	r0, #0
 80a31ce:	d1f2      	bne.n	80a31b6 <_ZN8FatCache4readEmh+0x1c>
 80a31d0:	e7ed      	b.n	80a31ae <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 80a31d2:	4620      	mov	r0, r4
 80a31d4:	7823      	ldrb	r3, [r4, #0]
 80a31d6:	f005 0503 	and.w	r5, r5, #3
 80a31da:	431d      	orrs	r5, r3
 80a31dc:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
 80a31e0:	bd70      	pop	{r4, r5, r6, pc}

080a31e2 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 80a31e2:	7983      	ldrb	r3, [r0, #6]
 80a31e4:	3902      	subs	r1, #2
 80a31e6:	6940      	ldr	r0, [r0, #20]
 80a31e8:	4099      	lsls	r1, r3
}
 80a31ea:	4408      	add	r0, r1
 80a31ec:	4770      	bx	lr

080a31ee <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80a31ee:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80a31f0:	b570      	push	{r4, r5, r6, lr}
 80a31f2:	4605      	mov	r5, r0
 80a31f4:	460c      	mov	r4, r1
 80a31f6:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80a31f8:	d802      	bhi.n	80a3200 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 80a31fa:	f04f 30ff 	mov.w	r0, #4294967295
 80a31fe:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80a3200:	69c3      	ldr	r3, [r0, #28]
 80a3202:	4299      	cmp	r1, r3
 80a3204:	d8f9      	bhi.n	80a31fa <_ZN9FatVolume6fatGetEmPm+0xc>
 80a3206:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 80a3208:	2b20      	cmp	r3, #32
 80a320a:	d110      	bne.n	80a322e <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 80a320c:	6981      	ldr	r1, [r0, #24]
 80a320e:	2202      	movs	r2, #2
 80a3210:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80a3214:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80a3218:	f7ff ffbf 	bl	80a319a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80a321c:	2800      	cmp	r0, #0
 80a321e:	d0ec      	beq.n	80a31fa <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 80a3220:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80a3224:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 80a3228:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 80a322c:	e00f      	b.n	80a324e <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
 80a322e:	2b10      	cmp	r3, #16
 80a3230:	d1e3      	bne.n	80a31fa <_ZN9FatVolume6fatGetEmPm+0xc>
 80a3232:	6983      	ldr	r3, [r0, #24]
 80a3234:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80a3238:	2202      	movs	r2, #2
 80a323a:	4419      	add	r1, r3
 80a323c:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80a3240:	f7ff ffab 	bl	80a319a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80a3244:	2800      	cmp	r0, #0
 80a3246:	d0d8      	beq.n	80a31fa <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 80a3248:	b2e4      	uxtb	r4, r4
 80a324a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 80a324e:	69ea      	ldr	r2, [r5, #28]
 80a3250:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 80a3252:	bf9a      	itte	ls
 80a3254:	6033      	strls	r3, [r6, #0]
  return 1;
 80a3256:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 80a3258:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 80a325a:	bd70      	pop	{r4, r5, r6, pc}

080a325c <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80a325c:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80a325e:	b538      	push	{r3, r4, r5, lr}
 80a3260:	460c      	mov	r4, r1
 80a3262:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80a3264:	d801      	bhi.n	80a326a <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 80a3266:	2000      	movs	r0, #0
 80a3268:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80a326a:	69c3      	ldr	r3, [r0, #28]
 80a326c:	4299      	cmp	r1, r3
 80a326e:	d8fa      	bhi.n	80a3266 <_ZN9FatVolume6fatPutEmm+0xa>
 80a3270:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 80a3272:	2b20      	cmp	r3, #32
 80a3274:	d10e      	bne.n	80a3294 <_ZN9FatVolume6fatPutEmm+0x38>
 80a3276:	6981      	ldr	r1, [r0, #24]
 80a3278:	2203      	movs	r2, #3
 80a327a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80a327e:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80a3282:	f7ff ff8a 	bl	80a319a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 80a3286:	2800      	cmp	r0, #0
 80a3288:	d0ed      	beq.n	80a3266 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 80a328a:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80a328e:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 80a3292:	e00f      	b.n	80a32b4 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
 80a3294:	2b10      	cmp	r3, #16
 80a3296:	d1e6      	bne.n	80a3266 <_ZN9FatVolume6fatPutEmm+0xa>
 80a3298:	6983      	ldr	r3, [r0, #24]
 80a329a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80a329e:	2203      	movs	r2, #3
 80a32a0:	4419      	add	r1, r3
 80a32a2:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80a32a6:	f7ff ff78 	bl	80a319a <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 80a32aa:	2800      	cmp	r0, #0
 80a32ac:	d0db      	beq.n	80a3266 <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 80a32ae:	b2e4      	uxtb	r4, r4
 80a32b0:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 80a32b4:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 80a32b6:	bd38      	pop	{r3, r4, r5, pc}

080a32b8 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 80a32b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 80a32bc:	68c4      	ldr	r4, [r0, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 80a32be:	4605      	mov	r5, r0
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 80a32c0:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 80a32c2:	460e      	mov	r6, r1
 80a32c4:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 80a32c6:	d207      	bcs.n	80a32d8 <_ZN9FatVolume15allocateClusterEmPm+0x20>
 80a32c8:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
 80a32ca:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
 80a32cc:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
 80a32ce:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 80a32d0:	429c      	cmp	r4, r3
 80a32d2:	d903      	bls.n	80a32dc <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
 80a32d4:	b9cf      	cbnz	r7, 80a330a <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
 80a32d6:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
 80a32d8:	2701      	movs	r7, #1
 80a32da:	e7f7      	b.n	80a32cc <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
 80a32dc:	42a6      	cmp	r6, r4
 80a32de:	d014      	beq.n	80a330a <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 80a32e0:	aa01      	add	r2, sp, #4
 80a32e2:	4621      	mov	r1, r4
 80a32e4:	4628      	mov	r0, r5
 80a32e6:	f7ff ff82 	bl	80a31ee <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 80a32ea:	2800      	cmp	r0, #0
 80a32ec:	db0d      	blt.n	80a330a <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 80a32ee:	d0ed      	beq.n	80a32cc <_ZN9FatVolume15allocateClusterEmPm+0x14>
 80a32f0:	9b01      	ldr	r3, [sp, #4]
 80a32f2:	2b00      	cmp	r3, #0
 80a32f4:	d1ea      	bne.n	80a32cc <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
 80a32f6:	b107      	cbz	r7, 80a32fa <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
 80a32f8:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 80a32fa:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80a32fe:	4621      	mov	r1, r4
 80a3300:	4628      	mov	r0, r5
 80a3302:	f7ff ffab 	bl	80a325c <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
 80a3306:	4607      	mov	r7, r0
 80a3308:	b908      	cbnz	r0, 80a330e <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 80a330a:	2700      	movs	r7, #0
 80a330c:	e00b      	b.n	80a3326 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 80a330e:	b916      	cbnz	r6, 80a3316 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
 80a3310:	f8c8 4000 	str.w	r4, [r8]
  return true;
 80a3314:	e007      	b.n	80a3326 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
 80a3316:	4622      	mov	r2, r4
 80a3318:	4631      	mov	r1, r6
 80a331a:	4628      	mov	r0, r5
 80a331c:	f7ff ff9e 	bl	80a325c <_ZN9FatVolume6fatPutEmm>
 80a3320:	2800      	cmp	r0, #0
 80a3322:	d1f5      	bne.n	80a3310 <_ZN9FatVolume15allocateClusterEmPm+0x58>
 80a3324:	e7f1      	b.n	80a330a <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
 80a3326:	4638      	mov	r0, r7
 80a3328:	b002      	add	sp, #8
 80a332a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a332e <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 80a332e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a3330:	4605      	mov	r5, r0
 80a3332:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 80a3334:	aa01      	add	r2, sp, #4
 80a3336:	4621      	mov	r1, r4
 80a3338:	4628      	mov	r0, r5
 80a333a:	f7ff ff58 	bl	80a31ee <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 80a333e:	1e06      	subs	r6, r0, #0
 80a3340:	da01      	bge.n	80a3346 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 80a3342:	2000      	movs	r0, #0
 80a3344:	e00f      	b.n	80a3366 <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 80a3346:	2200      	movs	r2, #0
 80a3348:	4621      	mov	r1, r4
 80a334a:	4628      	mov	r0, r5
 80a334c:	f7ff ff86 	bl	80a325c <_ZN9FatVolume6fatPutEmm>
 80a3350:	2800      	cmp	r0, #0
 80a3352:	d0f6      	beq.n	80a3342 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
 80a3354:	68eb      	ldr	r3, [r5, #12]
 80a3356:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
 80a3358:	bf9c      	itt	ls
 80a335a:	f104 34ff 	addls.w	r4, r4, #4294967295
 80a335e:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
 80a3360:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 80a3362:	2e00      	cmp	r6, #0
 80a3364:	d1e6      	bne.n	80a3334 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 80a3366:	b002      	add	sp, #8
 80a3368:	bd70      	pop	{r4, r5, r6, pc}

080a336a <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 80a336a:	b570      	push	{r4, r5, r6, lr}
 80a336c:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 80a336e:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 80a3370:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 80a3372:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80a3374:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 80a3378:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 80a337a:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 80a337c:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80a337e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80a3382:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 80a3384:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80a3388:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
 80a338c:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
 80a3390:	b1a1      	cbz	r1, 80a33bc <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 80a3392:	2904      	cmp	r1, #4
 80a3394:	d85d      	bhi.n	80a3452 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80a3396:	4611      	mov	r1, r2
 80a3398:	3024      	adds	r0, #36	; 0x24
 80a339a:	f7ff fefe 	bl	80a319a <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80a339e:	2800      	cmp	r0, #0
 80a33a0:	d057      	beq.n	80a3452 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 80a33a2:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 80a33a6:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 80a33aa:	065b      	lsls	r3, r3, #25
 80a33ac:	d151      	bne.n	80a3452 <_ZN9FatVolume4initEh+0xe8>
 80a33ae:	351b      	adds	r5, #27
 80a33b0:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80a33b4:	f8d5 5006 	ldr.w	r5, [r5, #6]
 80a33b8:	2d00      	cmp	r5, #0
 80a33ba:	d04a      	beq.n	80a3452 <_ZN9FatVolume4initEh+0xe8>
 80a33bc:	2200      	movs	r2, #0
 80a33be:	4629      	mov	r1, r5
 80a33c0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80a33c4:	f7ff fee9 	bl	80a319a <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 80a33c8:	2800      	cmp	r0, #0
 80a33ca:	d042      	beq.n	80a3452 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 80a33cc:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 80a33d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80a33d4:	d13d      	bne.n	80a3452 <_ZN9FatVolume4initEh+0xe8>
 80a33d6:	7c03      	ldrb	r3, [r0, #16]
 80a33d8:	2b02      	cmp	r3, #2
 80a33da:	d13a      	bne.n	80a3452 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
 80a33dc:	89c3      	ldrh	r3, [r0, #14]
 80a33de:	2b00      	cmp	r3, #0
 80a33e0:	d037      	beq.n	80a3452 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80a33e2:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 80a33e4:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 80a33e6:	1e4b      	subs	r3, r1, #1
 80a33e8:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 80a33ea:	2300      	movs	r3, #0
 80a33ec:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80a33ee:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80a33f0:	2301      	movs	r3, #1
 80a33f2:	428b      	cmp	r3, r1
 80a33f4:	d007      	beq.n	80a3406 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 80a33f6:	3e01      	subs	r6, #1
 80a33f8:	d02b      	beq.n	80a3452 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80a33fa:	79a2      	ldrb	r2, [r4, #6]
 80a33fc:	005b      	lsls	r3, r3, #1
 80a33fe:	3201      	adds	r2, #1
 80a3400:	b2db      	uxtb	r3, r3
 80a3402:	71a2      	strb	r2, [r4, #6]
 80a3404:	e7f5      	b.n	80a33f2 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 80a3406:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 80a3408:	b902      	cbnz	r2, 80a340c <_ZN9FatVolume4initEh+0xa2>
 80a340a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80a340c:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 80a340e:	89c6      	ldrh	r6, [r0, #14]
 80a3410:	442e      	add	r6, r5
 80a3412:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80a3414:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 80a3418:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80a341c:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 80a341e:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 80a3420:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 80a3424:	0152      	lsls	r2, r2, #5
 80a3426:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 80a342a:	eb01 2262 	add.w	r2, r1, r2, asr #9
 80a342e:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 80a3430:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 80a3434:	b903      	cbnz	r3, 80a3438 <_ZN9FatVolume4initEh+0xce>
 80a3436:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 80a3438:	1aad      	subs	r5, r5, r2
 80a343a:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 80a343c:	79a5      	ldrb	r5, [r4, #6]
 80a343e:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 80a3442:	1c6b      	adds	r3, r5, #1
 80a3444:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 80a3446:	f640 73f4 	movw	r3, #4084	; 0xff4
 80a344a:	429d      	cmp	r5, r3
 80a344c:	d803      	bhi.n	80a3456 <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
 80a344e:	230c      	movs	r3, #12
 80a3450:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 80a3452:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 80a3454:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 80a3456:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80a345a:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 80a345c:	bf89      	itett	hi
 80a345e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 80a3460:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 80a3462:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 80a3464:	2320      	movhi	r3, #32
 80a3466:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 80a3468:	2001      	movs	r0, #1

fail:
  return false;
}
 80a346a:	bd70      	pop	{r4, r5, r6, pc}

080a346c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 80a346c:	f000 bd56 	b.w	80a3f1c <HAL_Pin_Map>

080a3470 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 80a3470:	f000 bd54 	b.w	80a3f1c <HAL_Pin_Map>

080a3474 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a3474:	b570      	push	{r4, r5, r6, lr}
 80a3476:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a3478:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a347a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a347c:	b149      	cbz	r1, 80a3492 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a347e:	f006 f94d 	bl	80a971c <strlen>
 80a3482:	682b      	ldr	r3, [r5, #0]
 80a3484:	4602      	mov	r2, r0
 80a3486:	4621      	mov	r1, r4
 80a3488:	4628      	mov	r0, r5
    }
 80a348a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a348e:	68db      	ldr	r3, [r3, #12]
 80a3490:	4718      	bx	r3
    }
 80a3492:	bd70      	pop	{r4, r5, r6, pc}

080a3494 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 80a3494:	f000 bd42 	b.w	80a3f1c <HAL_Pin_Map>

080a3498 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 80a3498:	1e41      	subs	r1, r0, #1
 80a349a:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 80a349e:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80a34a0:	0843      	lsrs	r3, r0, #1
 80a34a2:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 80a34a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80a34aa:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80a34ac:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80a34ae:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80a34b2:	d1f5      	bne.n	80a34a0 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 80a34b4:	4770      	bx	lr

080a34b6 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
 80a34b6:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
 80a34b8:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
 80a34ba:	4604      	mov	r4, r0
 80a34bc:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
 80a34be:	b923      	cbnz	r3, 80a34ca <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
 80a34c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
 80a34c4:	6889      	ldr	r1, [r1, #8]
 80a34c6:	f7ff bafe 	b.w	80a2ac6 <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
 80a34ca:	2224      	movs	r2, #36	; 0x24
 80a34cc:	2100      	movs	r1, #0
 80a34ce:	f005 fb60 	bl	80a8b92 <memset>
  m_attr = FILE_ATTR_SUBDIR;
 80a34d2:	2310      	movs	r3, #16
  m_flags = F_READ;
 80a34d4:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
 80a34d6:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
 80a34d8:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
 80a34da:	68ab      	ldr	r3, [r5, #8]
 80a34dc:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
 80a34de:	68eb      	ldr	r3, [r5, #12]
 80a34e0:	6223      	str	r3, [r4, #32]
  return true;
}
 80a34e2:	bd38      	pop	{r3, r4, r5, pc}

080a34e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 80a34e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 80a34e8:	7803      	ldrb	r3, [r0, #0]
 80a34ea:	1c44      	adds	r4, r0, #1
 80a34ec:	2b20      	cmp	r3, #32
 80a34ee:	d101      	bne.n	80a34f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 80a34f0:	4620      	mov	r0, r4
 80a34f2:	e7f9      	b.n	80a34e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 80a34f4:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80a34f6:	4f70      	ldr	r7, [pc, #448]	; (80a36b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 80a34f8:	6088      	str	r0, [r1, #8]
 80a34fa:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 80a34fc:	462e      	mov	r6, r5
 80a34fe:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 80a3502:	b30b      	cbz	r3, 80a3548 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80a3504:	2b2f      	cmp	r3, #47	; 0x2f
 80a3506:	d101      	bne.n	80a350c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 80a3508:	1903      	adds	r3, r0, r4
 80a350a:	e017      	b.n	80a353c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80a350c:	2b5c      	cmp	r3, #92	; 0x5c
 80a350e:	d102      	bne.n	80a3516 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 80a3510:	2000      	movs	r0, #0
 80a3512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80a3516:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 80a351a:	b2e4      	uxtb	r4, r4
 80a351c:	2c1d      	cmp	r4, #29
 80a351e:	d803      	bhi.n	80a3528 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 80a3520:	fa27 f404 	lsr.w	r4, r7, r4
 80a3524:	07e4      	lsls	r4, r4, #31
 80a3526:	d4f3      	bmi.n	80a3510 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 80a3528:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 80a352c:	2c3c      	cmp	r4, #60	; 0x3c
 80a352e:	d0ef      	beq.n	80a3510 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 80a3530:	3b20      	subs	r3, #32
 80a3532:	2b5e      	cmp	r3, #94	; 0x5e
 80a3534:	d9e1      	bls.n	80a34fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 80a3536:	e7eb      	b.n	80a3510 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 80a3538:	2d2f      	cmp	r5, #47	; 0x2f
 80a353a:	d105      	bne.n	80a3548 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80a353c:	461e      	mov	r6, r3
 80a353e:	f813 5b01 	ldrb.w	r5, [r3], #1
 80a3542:	2d20      	cmp	r5, #32
 80a3544:	d1f8      	bne.n	80a3538 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 80a3546:	e7f9      	b.n	80a353c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 80a3548:	6016      	str	r6, [r2, #0]
 80a354a:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 80a354c:	4298      	cmp	r0, r3
 80a354e:	ebc0 0803 	rsb	r8, r0, r3
 80a3552:	d009      	beq.n	80a3568 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 80a3554:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 80a3558:	2a2e      	cmp	r2, #46	; 0x2e
 80a355a:	d0f7      	beq.n	80a354c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 80a355c:	2a20      	cmp	r2, #32
 80a355e:	d0f5      	beq.n	80a354c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 80a3560:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80a3564:	dcd4      	bgt.n	80a3510 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 80a3566:	e001      	b.n	80a356c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 80a3568:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 80a356c:	f8c1 8004 	str.w	r8, [r1, #4]
 80a3570:	f101 030c 	add.w	r3, r1, #12
 80a3574:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 80a3578:	2420      	movs	r4, #32
 80a357a:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 80a357e:	4293      	cmp	r3, r2
 80a3580:	d1fb      	bne.n	80a357a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 80a3582:	4603      	mov	r3, r0
 80a3584:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 80a3586:	f813 4b01 	ldrb.w	r4, [r3], #1
 80a358a:	2c2e      	cmp	r4, #46	; 0x2e
 80a358c:	d0fa      	beq.n	80a3584 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 80a358e:	2c20      	cmp	r4, #32
 80a3590:	d0f8      	beq.n	80a3584 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 80a3592:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80a3596:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 80a359a:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 80a359c:	1c73      	adds	r3, r6, #1
 80a359e:	d107      	bne.n	80a35b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 80a35a0:	2700      	movs	r7, #0
 80a35a2:	f04f 0e07 	mov.w	lr, #7
 80a35a6:	463d      	mov	r5, r7
 80a35a8:	46ba      	mov	sl, r7
 80a35aa:	f04f 0908 	mov.w	r9, #8
 80a35ae:	e009      	b.n	80a35c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 80a35b0:	5d83      	ldrb	r3, [r0, r6]
 80a35b2:	2b2e      	cmp	r3, #46	; 0x2e
 80a35b4:	d0f4      	beq.n	80a35a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 80a35b6:	3e01      	subs	r6, #1
 80a35b8:	e7f0      	b.n	80a359c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 80a35ba:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 80a35bc:	2b20      	cmp	r3, #32
 80a35be:	d104      	bne.n	80a35ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 80a35c0:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 80a35c2:	3201      	adds	r2, #1
 80a35c4:	4542      	cmp	r2, r8
 80a35c6:	dbf8      	blt.n	80a35ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 80a35c8:	e04b      	b.n	80a3662 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 80a35ca:	2b2e      	cmp	r3, #46	; 0x2e
 80a35cc:	d102      	bne.n	80a35d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 80a35ce:	42b2      	cmp	r2, r6
 80a35d0:	d1f6      	bne.n	80a35c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 80a35d2:	e003      	b.n	80a35dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 80a35d4:	2b22      	cmp	r3, #34	; 0x22
 80a35d6:	d017      	beq.n	80a3608 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 80a35d8:	2b7c      	cmp	r3, #124	; 0x7c
 80a35da:	d015      	beq.n	80a3608 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 80a35dc:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 80a35e0:	f1bc 0f05 	cmp.w	ip, #5
 80a35e4:	d801      	bhi.n	80a35ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 80a35e6:	2b2d      	cmp	r3, #45	; 0x2d
 80a35e8:	d10e      	bne.n	80a3608 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 80a35ea:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 80a35ee:	f1bc 0f05 	cmp.w	ip, #5
 80a35f2:	d909      	bls.n	80a3608 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 80a35f4:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 80a35f8:	f1bc 0f02 	cmp.w	ip, #2
 80a35fc:	d904      	bls.n	80a3608 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 80a35fe:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 80a3602:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 80a3606:	d902      	bls.n	80a360e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 80a3608:	42b2      	cmp	r2, r6
 80a360a:	d10e      	bne.n	80a362a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 80a360c:	e049      	b.n	80a36a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80a360e:	42b2      	cmp	r2, r6
 80a3610:	d047      	beq.n	80a36a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 80a3612:	4575      	cmp	r5, lr
 80a3614:	d821      	bhi.n	80a365a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 80a3616:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80a361a:	f1bc 0f19 	cmp.w	ip, #25
 80a361e:	d808      	bhi.n	80a3632 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 80a3620:	3b20      	subs	r3, #32
 80a3622:	b2db      	uxtb	r3, r3
        lc |= bit;
 80a3624:	ea49 0707 	orr.w	r7, r9, r7
 80a3628:	e00a      	b.n	80a3640 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80a362a:	4575      	cmp	r5, lr
 80a362c:	d815      	bhi.n	80a365a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 80a362e:	2400      	movs	r4, #0
      c = '_';
 80a3630:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 80a3632:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80a3636:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 80a363a:	bf98      	it	ls
 80a363c:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 80a3640:	f105 0c01 	add.w	ip, r5, #1
 80a3644:	fa5f fc8c 	uxtb.w	ip, ip
 80a3648:	440d      	add	r5, r1
      if (i < 7) {
 80a364a:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 80a364e:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 80a3650:	d801      	bhi.n	80a3656 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 80a3652:	f881 c00c 	strb.w	ip, [r1, #12]
 80a3656:	4665      	mov	r5, ip
 80a3658:	e7b3      	b.n	80a35c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 80a365a:	f1be 0f0a 	cmp.w	lr, #10
 80a365e:	d117      	bne.n	80a3690 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 80a3660:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 80a3662:	7b4b      	ldrb	r3, [r1, #13]
 80a3664:	2b20      	cmp	r3, #32
 80a3666:	f43f af53 	beq.w	80a3510 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 80a366a:	b13c      	cbz	r4, 80a367c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 80a366c:	ea1a 0f07 	tst.w	sl, r7
 80a3670:	bf18      	it	ne
 80a3672:	2702      	movne	r7, #2
 80a3674:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 80a3676:	2001      	movs	r0, #1
 80a3678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 80a367c:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 80a367e:	2001      	movs	r0, #1
 80a3680:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 80a3682:	4419      	add	r1, r3
 80a3684:	237e      	movs	r3, #126	; 0x7e
 80a3686:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 80a3688:	2331      	movs	r3, #49	; 0x31
 80a368a:	738b      	strb	r3, [r1, #14]
 80a368c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 80a3690:	42b2      	cmp	r2, r6
 80a3692:	dce5      	bgt.n	80a3660 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 80a3694:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 80a3696:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 80a369a:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80a369c:	f04f 0910 	mov.w	r9, #16
 80a36a0:	e78e      	b.n	80a35c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 80a36a2:	f1be 0f0a 	cmp.w	lr, #10
 80a36a6:	d0db      	beq.n	80a3660 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 80a36a8:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 80a36aa:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 80a36ae:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80a36b0:	f04f 0910 	mov.w	r9, #16
 80a36b4:	e785      	b.n	80a35c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 80a36b6:	bf00      	nop
 80a36b8:	31000101 	.word	0x31000101

080a36bc <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
 80a36bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80a36be:	2300      	movs	r3, #0
 80a36c0:	b08b      	sub	sp, #44	; 0x2c
 80a36c2:	f88d 3004 	strb.w	r3, [sp, #4]
 80a36c6:	f88d 3005 	strb.w	r3, [sp, #5]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
 80a36ca:	7803      	ldrb	r3, [r0, #0]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
 80a36cc:	4604      	mov	r4, r0
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
 80a36ce:	0719      	lsls	r1, r3, #28
 80a36d0:	d508      	bpl.n	80a36e4 <_ZN7FatFile6removeEv+0x28>
 80a36d2:	7883      	ldrb	r3, [r0, #2]
 80a36d4:	079a      	lsls	r2, r3, #30
 80a36d6:	d505      	bpl.n	80a36e4 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
 80a36d8:	6a01      	ldr	r1, [r0, #32]
 80a36da:	b129      	cbz	r1, 80a36e8 <_ZN7FatFile6removeEv+0x2c>
 80a36dc:	68a0      	ldr	r0, [r4, #8]
 80a36de:	f7ff fe26 	bl	80a332e <_ZN9FatVolume9freeChainEm>
 80a36e2:	b908      	cbnz	r0, 80a36e8 <_ZN7FatFile6removeEv+0x2c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
 80a36e4:	2000      	movs	r0, #0
 80a36e6:	e049      	b.n	80a377c <_ZN7FatFile6removeEv+0xc0>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80a36e8:	2101      	movs	r1, #1
 80a36ea:	4620      	mov	r0, r4
 80a36ec:	f7ff f9dc 	bl	80a2aa8 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 80a36f0:	4605      	mov	r5, r0
 80a36f2:	2800      	cmp	r0, #0
 80a36f4:	d0f6      	beq.n	80a36e4 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
 80a36f6:	f7ff fecf 	bl	80a3498 <_ZN7FatFile11lfnChecksumEPh>

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;
 80a36fa:	26e5      	movs	r6, #229	; 0xe5
 80a36fc:	702e      	strb	r6, [r5, #0]

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
 80a36fe:	2300      	movs	r3, #0
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
  if (!dir) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  chksum = lfnChecksum(dir->name);
 80a3700:	4607      	mov	r7, r0

  // Mark entry deleted.
  dir->name[0] = DIR_NAME_DELETED;

  // Set this file closed.
  m_attr = FILE_ATTR_CLOSED;
 80a3702:	7023      	strb	r3, [r4, #0]

  // Write entry to device.
  if (!m_vol->cacheSync()) {
 80a3704:	68a0      	ldr	r0, [r4, #8]
 80a3706:	f7ff f978 	bl	80a29fa <_ZN9FatVolume9cacheSyncEv>
 80a370a:	2800      	cmp	r0, #0
 80a370c:	d0ea      	beq.n	80a36e4 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
 80a370e:	78e3      	ldrb	r3, [r4, #3]
 80a3710:	2b00      	cmp	r3, #0
 80a3712:	d033      	beq.n	80a377c <_ZN7FatFile6removeEv+0xc0>
    // Done, no LFN entries.
    return true;
  }
  if (!dirFile.openCluster(this)) {
 80a3714:	4621      	mov	r1, r4
 80a3716:	a801      	add	r0, sp, #4
 80a3718:	f7ff fecd 	bl	80a34b6 <_ZN7FatFile11openClusterEPS_>
 80a371c:	2800      	cmp	r0, #0
 80a371e:	d0e1      	beq.n	80a36e4 <_ZN7FatFile6removeEv+0x28>
 80a3720:	2501      	movs	r5, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
 80a3722:	78e3      	ldrb	r3, [r4, #3]
 80a3724:	42ab      	cmp	r3, r5
 80a3726:	d3dd      	bcc.n	80a36e4 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
 80a3728:	88a1      	ldrh	r1, [r4, #4]
 80a372a:	a801      	add	r0, sp, #4
 80a372c:	1b49      	subs	r1, r1, r5
 80a372e:	0149      	lsls	r1, r1, #5
 80a3730:	f7ff fae9 	bl	80a2d06 <_ZN7FatFile7seekSetEm>
 80a3734:	2800      	cmp	r0, #0
 80a3736:	d0d5      	beq.n	80a36e4 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
 80a3738:	2100      	movs	r1, #0
 80a373a:	a801      	add	r0, sp, #4
 80a373c:	f7ff fac6 	bl	80a2ccc <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 80a3740:	2800      	cmp	r0, #0
 80a3742:	d0cf      	beq.n	80a36e4 <_ZN7FatFile6removeEv+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
 80a3744:	7ac3      	ldrb	r3, [r0, #11]
 80a3746:	2b0f      	cmp	r3, #15
 80a3748:	d1cc      	bne.n	80a36e4 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
 80a374a:	7802      	ldrb	r2, [r0, #0]
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME ||
 80a374c:	f002 031f 	and.w	r3, r2, #31
 80a3750:	429d      	cmp	r5, r3
 80a3752:	d1c7      	bne.n	80a36e4 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
 80a3754:	7b43      	ldrb	r3, [r0, #13]
 80a3756:	42bb      	cmp	r3, r7
 80a3758:	d1c4      	bne.n	80a36e4 <_ZN7FatFile6removeEv+0x28>
        chksum != ldir->chksum) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    last = ldir->ord & LDIR_ORD_LAST_LONG_ENTRY;
    ldir->ord = DIR_NAME_DELETED;
 80a375a:	7006      	strb	r6, [r0, #0]
    m_vol->cacheDirty();
 80a375c:	68a1      	ldr	r1, [r4, #8]
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 80a375e:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 80a3762:	f043 0301 	orr.w	r3, r3, #1
 80a3766:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
 80a376a:	0653      	lsls	r3, r2, #25
 80a376c:	d503      	bpl.n	80a3776 <_ZN7FatFile6removeEv+0xba>
      if (!m_vol->cacheSync()) {
 80a376e:	68a0      	ldr	r0, [r4, #8]
 80a3770:	f7ff f943 	bl	80a29fa <_ZN9FatVolume9cacheSyncEv>
 80a3774:	e002      	b.n	80a377c <_ZN7FatFile6removeEv+0xc0>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (ord = 1; ord <= m_lfnOrd; ord++) {
 80a3776:	3501      	adds	r5, #1
 80a3778:	b2ed      	uxtb	r5, r5
 80a377a:	e7d2      	b.n	80a3722 <_ZN7FatFile6removeEv+0x66>
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
}
 80a377c:	b00b      	add	sp, #44	; 0x2c
 80a377e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3780 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 80a3780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3784:	4606      	mov	r6, r0
 80a3786:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 80a3788:	f891 900c 	ldrb.w	r9, [r1, #12]
 80a378c:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80a378e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80a3790:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 80a3794:	6869      	ldr	r1, [r5, #4]
 80a3796:	68aa      	ldr	r2, [r5, #8]
 80a3798:	1863      	adds	r3, r4, r1
 80a379a:	b29b      	uxth	r3, r3
 80a379c:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 80a379e:	4291      	cmp	r1, r2
 80a37a0:	d006      	beq.n	80a37b0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 80a37a2:	f812 0b01 	ldrb.w	r0, [r2], #1
 80a37a6:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 80a37aa:	4043      	eors	r3, r0
 80a37ac:	b29b      	uxth	r3, r3
 80a37ae:	e7f6      	b.n	80a379e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 80a37b0:	f1b9 0f03 	cmp.w	r9, #3
 80a37b4:	bf28      	it	cs
 80a37b6:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80a37ba:	f109 0204 	add.w	r2, r9, #4
 80a37be:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 80a37c0:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80a37c4:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80a37c6:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80a37c8:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80a37ca:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80a37cc:	bf94      	ite	ls
 80a37ce:	3130      	addls	r1, #48	; 0x30
 80a37d0:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80a37d2:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80a37d4:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 80a37d6:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80a37da:	d3f1      	bcc.n	80a37c0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80a37dc:	eb05 0309 	add.w	r3, r5, r9
 80a37e0:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 80a37e2:	2100      	movs	r1, #0
 80a37e4:	4630      	mov	r0, r6
 80a37e6:	f7ff fa8e 	bl	80a2d06 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 80a37ea:	2101      	movs	r1, #1
 80a37ec:	4630      	mov	r0, r6
 80a37ee:	f7ff fa6d 	bl	80a2ccc <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 80a37f2:	4601      	mov	r1, r0
 80a37f4:	b928      	cbnz	r0, 80a3802 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 80a37f6:	7870      	ldrb	r0, [r6, #1]
 80a37f8:	fab0 f080 	clz	r0, r0
 80a37fc:	0940      	lsrs	r0, r0, #5
 80a37fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 80a3802:	7803      	ldrb	r3, [r0, #0]
 80a3804:	b14b      	cbz	r3, 80a381a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80a3806:	7ac3      	ldrb	r3, [r0, #11]
 80a3808:	071b      	lsls	r3, r3, #28
 80a380a:	d4ee      	bmi.n	80a37ea <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80a380c:	220b      	movs	r2, #11
 80a380e:	4640      	mov	r0, r8
 80a3810:	f005 f98a 	bl	80a8b28 <memcmp>
 80a3814:	2800      	cmp	r0, #0
 80a3816:	d1e8      	bne.n	80a37ea <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80a3818:	e002      	b.n	80a3820 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 80a381a:	2001      	movs	r0, #1
 80a381c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3820:	3401      	adds	r4, #1
 80a3822:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 80a3824:	2c64      	cmp	r4, #100	; 0x64
 80a3826:	d1b5      	bne.n	80a3794 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 80a3828:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a382c <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 80a382c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3830:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80a3832:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 80a3834:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80a3836:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 80a383a:	9005      	str	r0, [sp, #20]
 80a383c:	460e      	mov	r6, r1
 80a383e:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80a3840:	d101      	bne.n	80a3846 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 80a3842:	2000      	movs	r0, #0
 80a3844:	e1a0      	b.n	80a3b88 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80a3846:	9b05      	ldr	r3, [sp, #20]
 80a3848:	781b      	ldrb	r3, [r3, #0]
 80a384a:	2b00      	cmp	r3, #0
 80a384c:	d1f9      	bne.n	80a3842 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 80a384e:	6853      	ldr	r3, [r2, #4]
 80a3850:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 80a3852:	7813      	ldrb	r3, [r2, #0]
 80a3854:	079b      	lsls	r3, r3, #30
 80a3856:	f000 818d 	beq.w	80a3b74 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
 80a385a:	9b02      	ldr	r3, [sp, #8]
 80a385c:	270d      	movs	r7, #13
 80a385e:	330c      	adds	r3, #12
 80a3860:	fbb3 f7f7 	udiv	r7, r3, r7
 80a3864:	3701      	adds	r7, #1
 80a3866:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 80a3868:	f04f 0800 	mov.w	r8, #0
 80a386c:	2100      	movs	r1, #0
 80a386e:	4630      	mov	r0, r6
 80a3870:	f7ff fa49 	bl	80a2d06 <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 80a3874:	4644      	mov	r4, r8
  uint8_t ord = 0;
 80a3876:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 80a3878:	4645      	mov	r5, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80a387a:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 80a387e:	f8cd 800c 	str.w	r8, [sp, #12]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
 80a3882:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80a3886:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 80a3888:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 80a388a:	2101      	movs	r1, #1
 80a388c:	4630      	mov	r0, r6
 80a388e:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 80a3890:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 80a3894:	f7ff fa1a 	bl	80a2ccc <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80a3898:	9b07      	ldr	r3, [sp, #28]
 80a389a:	b920      	cbnz	r0, 80a38a6 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
 80a389c:	7873      	ldrb	r3, [r6, #1]
 80a389e:	2b00      	cmp	r3, #0
 80a38a0:	f000 8090 	beq.w	80a39c4 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
 80a38a4:	e7cd      	b.n	80a3842 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 80a38a6:	7802      	ldrb	r2, [r0, #0]
 80a38a8:	2ae5      	cmp	r2, #229	; 0xe5
 80a38aa:	d000      	beq.n	80a38ae <_ZN7FatFile4openEPS_P7fname_ti+0x82>
 80a38ac:	b942      	cbnz	r2, 80a38c0 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 80a38ae:	2c00      	cmp	r4, #0
 80a38b0:	bf08      	it	eq
 80a38b2:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 80a38b4:	42bc      	cmp	r4, r7
        freeFound++;
 80a38b6:	bf3c      	itt	cc
 80a38b8:	3401      	addcc	r4, #1
 80a38ba:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 80a38bc:	b922      	cbnz	r2, 80a38c8 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
 80a38be:	e081      	b.n	80a39c4 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 80a38c0:	42bc      	cmp	r4, r7
 80a38c2:	bf38      	it	cc
 80a38c4:	2400      	movcc	r4, #0
 80a38c6:	e003      	b.n	80a38d0 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80a38c8:	2ae5      	cmp	r2, #229	; 0xe5
 80a38ca:	d101      	bne.n	80a38d0 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 80a38cc:	2500      	movs	r5, #0
 80a38ce:	e7db      	b.n	80a3888 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80a38d0:	2a2e      	cmp	r2, #46	; 0x2e
 80a38d2:	d0fb      	beq.n	80a38cc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80a38d4:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 80a38d6:	290f      	cmp	r1, #15
 80a38d8:	d152      	bne.n	80a3980 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 80a38da:	b93d      	cbnz	r5, 80a38ec <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 80a38dc:	0651      	lsls	r1, r2, #25
 80a38de:	d5d3      	bpl.n	80a3888 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 80a38e0:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80a38e2:	f002 051f 	and.w	r5, r2, #31
        chksum = ldir->chksum;
 80a38e6:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80a38e8:	462b      	mov	r3, r5
 80a38ea:	e007      	b.n	80a38fc <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 80a38ec:	3b01      	subs	r3, #1
 80a38ee:	b2db      	uxtb	r3, r3
 80a38f0:	429a      	cmp	r2, r3
 80a38f2:	d1eb      	bne.n	80a38cc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80a38f4:	7b42      	ldrb	r2, [r0, #13]
 80a38f6:	9903      	ldr	r1, [sp, #12]
 80a38f8:	4291      	cmp	r1, r2
 80a38fa:	d1e7      	bne.n	80a38cc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 80a38fc:	1e5a      	subs	r2, r3, #1
 80a38fe:	f04f 0c0d 	mov.w	ip, #13
 80a3902:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 80a3906:	9a02      	ldr	r2, [sp, #8]
 80a3908:	4562      	cmp	r2, ip
 80a390a:	d9df      	bls.n	80a38cc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80a390c:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 80a3910:	f1be 0f04 	cmp.w	lr, #4
 80a3914:	fa5f f28e 	uxtb.w	r2, lr
 80a3918:	d804      	bhi.n	80a3924 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
 80a391a:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 80a391e:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 80a3922:	e00c      	b.n	80a393e <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80a3924:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 80a3926:	bf95      	itete	ls
 80a3928:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80a392c:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 80a3930:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80a3934:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 80a3938:	bf94      	ite	ls
 80a393a:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80a393c:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 80a393e:	9902      	ldr	r1, [sp, #8]
 80a3940:	4561      	cmp	r1, ip
 80a3942:	d103      	bne.n	80a394c <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 80a3944:	2a00      	cmp	r2, #0
 80a3946:	bf18      	it	ne
 80a3948:	2500      	movne	r5, #0
 80a394a:	e79d      	b.n	80a3888 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80a394c:	2aff      	cmp	r2, #255	; 0xff
 80a394e:	d8bd      	bhi.n	80a38cc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80a3950:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80a3952:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 80a3956:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80a3958:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80a395c:	bf98      	it	ls
 80a395e:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80a3960:	f811 100c 	ldrb.w	r1, [r1, ip]
 80a3964:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 80a3968:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 80a396c:	bf98      	it	ls
 80a396e:	b2d2      	uxtbls	r2, r2
 80a3970:	f1bc 0f19 	cmp.w	ip, #25
 80a3974:	bf9c      	itt	ls
 80a3976:	3120      	addls	r1, #32
 80a3978:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80a397a:	4291      	cmp	r1, r2
 80a397c:	d1a6      	bne.n	80a38cc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80a397e:	e0fb      	b.n	80a3b78 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 80a3980:	0709      	lsls	r1, r1, #28
 80a3982:	d4a3      	bmi.n	80a38cc <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
 80a3984:	b14d      	cbz	r5, 80a399a <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 80a3986:	2b01      	cmp	r3, #1
 80a3988:	f47f af5b 	bne.w	80a3842 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 80a398c:	f7ff fd84 	bl	80a3498 <_ZN7FatFile11lfnChecksumEPh>
 80a3990:	9b03      	ldr	r3, [sp, #12]
 80a3992:	4283      	cmp	r3, r0
 80a3994:	f47f af55 	bne.w	80a3842 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 80a3998:	e00f      	b.n	80a39ba <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80a399a:	220b      	movs	r2, #11
 80a399c:	9906      	ldr	r1, [sp, #24]
 80a399e:	9307      	str	r3, [sp, #28]
 80a39a0:	f005 f8c2 	bl	80a8b28 <memcmp>
 80a39a4:	9b07      	ldr	r3, [sp, #28]
 80a39a6:	2800      	cmp	r0, #0
 80a39a8:	f47f af6e 	bne.w	80a3888 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 80a39ac:	f899 2000 	ldrb.w	r2, [r9]
 80a39b0:	07d2      	lsls	r2, r2, #31
 80a39b2:	d502      	bpl.n	80a39ba <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
 80a39b4:	2201      	movs	r2, #1
 80a39b6:	9204      	str	r2, [sp, #16]
 80a39b8:	e766      	b.n	80a3888 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 80a39ba:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 80a39be:	f000 80d1 	beq.w	80a3b64 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
 80a39c2:	e73e      	b.n	80a3842 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 80a39c4:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80a39c8:	f43f af3b 	beq.w	80a3842 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 80a39cc:	f00b 0303 	and.w	r3, fp, #3
 80a39d0:	3b01      	subs	r3, #1
 80a39d2:	2b01      	cmp	r3, #1
 80a39d4:	f63f af35 	bhi.w	80a3842 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 80a39d8:	2c00      	cmp	r4, #0
 80a39da:	bf08      	it	eq
 80a39dc:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80a39de:	42bc      	cmp	r4, r7
 80a39e0:	d302      	bcc.n	80a39e8 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 80a39e2:	9b04      	ldr	r3, [sp, #16]
 80a39e4:	b9cb      	cbnz	r3, 80a3a1a <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
 80a39e6:	e01f      	b.n	80a3a28 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 80a39e8:	2100      	movs	r1, #0
 80a39ea:	4630      	mov	r0, r6
 80a39ec:	f7ff f96e 	bl	80a2ccc <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80a39f0:	b910      	cbnz	r0, 80a39f8 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
 80a39f2:	7873      	ldrb	r3, [r6, #1]
 80a39f4:	b15b      	cbz	r3, 80a3a0e <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
 80a39f6:	e724      	b.n	80a3842 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 80a39f8:	3401      	adds	r4, #1
 80a39fa:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80a39fc:	e7ef      	b.n	80a39de <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
 80a39fe:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 80a3a00:	791b      	ldrb	r3, [r3, #4]
 80a3a02:	2b01      	cmp	r3, #1
 80a3a04:	d8ed      	bhi.n	80a39e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
 80a3a06:	3410      	adds	r4, #16
 80a3a08:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 80a3a0a:	42a7      	cmp	r7, r4
 80a3a0c:	d9e9      	bls.n	80a39e2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 80a3a0e:	4630      	mov	r0, r6
 80a3a10:	f7ff f80a 	bl	80a2a28 <_ZN7FatFile13addDirClusterEv>
 80a3a14:	2800      	cmp	r0, #0
 80a3a16:	d1f2      	bne.n	80a39fe <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
 80a3a18:	e713      	b.n	80a3842 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 80a3a1a:	4649      	mov	r1, r9
 80a3a1c:	4630      	mov	r0, r6
 80a3a1e:	f7ff feaf 	bl	80a3780 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 80a3a22:	2800      	cmp	r0, #0
 80a3a24:	f43f af0d 	beq.w	80a3842 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 80a3a28:	ea4f 1148 	mov.w	r1, r8, lsl #5
 80a3a2c:	4630      	mov	r0, r6
 80a3a2e:	f7ff f96a 	bl	80a2d06 <_ZN7FatFile7seekSetEm>
 80a3a32:	2800      	cmp	r0, #0
 80a3a34:	f43f af05 	beq.w	80a3842 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 80a3a38:	1e7d      	subs	r5, r7, #1
 80a3a3a:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80a3a3c:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80a3a3e:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 80a3a42:	f04f 080f 	mov.w	r8, #15
 80a3a46:	e041      	b.n	80a3acc <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80a3a48:	2100      	movs	r1, #0
 80a3a4a:	4630      	mov	r0, r6
 80a3a4c:	f7ff f93e 	bl	80a2ccc <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 80a3a50:	4607      	mov	r7, r0
 80a3a52:	2800      	cmp	r0, #0
 80a3a54:	f43f aef5 	beq.w	80a3842 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 80a3a58:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 80a3a5a:	42ac      	cmp	r4, r5
 80a3a5c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80a3a60:	f043 0301 	orr.w	r3, r3, #1
 80a3a64:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80a3a68:	bf14      	ite	ne
 80a3a6a:	4622      	movne	r2, r4
 80a3a6c:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
 80a3a70:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 80a3a72:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 80a3a76:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 80a3a7a:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 80a3a7e:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 80a3a80:	f7ff fd0a 	bl	80a3498 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80a3a84:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 80a3a86:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 80a3a88:	f887 a01a 	strb.w	sl, [r7, #26]
 80a3a8c:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80a3a90:	f002 021f 	and.w	r2, r2, #31
 80a3a94:	230d      	movs	r3, #13
 80a3a96:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 80a3a98:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80a3a9c:	435a      	muls	r2, r3
 80a3a9e:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80a3aa0:	9902      	ldr	r1, [sp, #8]
 80a3aa2:	4291      	cmp	r1, r2
 80a3aa4:	d915      	bls.n	80a3ad2 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
 80a3aa6:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 80a3aaa:	2b04      	cmp	r3, #4
 80a3aac:	fa5f fc83 	uxtb.w	ip, r3
 80a3ab0:	f103 0001 	add.w	r0, r3, #1
 80a3ab4:	d813      	bhi.n	80a3ade <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
 80a3ab6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80a3aba:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 80a3abe:	280d      	cmp	r0, #13
 80a3ac0:	f102 0201 	add.w	r2, r2, #1
 80a3ac4:	4603      	mov	r3, r0
 80a3ac6:	d1eb      	bne.n	80a3aa0 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80a3ac8:	3c01      	subs	r4, #1
 80a3aca:	b2e4      	uxtb	r4, r4
 80a3acc:	2c00      	cmp	r4, #0
 80a3ace:	d1bb      	bne.n	80a3a48 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
 80a3ad0:	e00e      	b.n	80a3af0 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80a3ad2:	bf14      	ite	ne
 80a3ad4:	f04f 31ff 	movne.w	r1, #4294967295
 80a3ad8:	2100      	moveq	r1, #0
 80a3ada:	b289      	uxth	r1, r1
 80a3adc:	e7e5      	b.n	80a3aaa <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80a3ade:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 80a3ae2:	bf94      	ite	ls
 80a3ae4:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 80a3ae8:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 80a3aec:	8099      	strh	r1, [r3, #4]
 80a3aee:	e7e6      	b.n	80a3abe <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80a3af0:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 80a3af2:	4621      	mov	r1, r4
 80a3af4:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80a3af6:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 80a3afa:	f7ff f8e7 	bl	80a2ccc <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 80a3afe:	4607      	mov	r7, r0
 80a3b00:	2800      	cmp	r0, #0
 80a3b02:	f43f ae9e 	beq.w	80a3842 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 80a3b06:	2220      	movs	r2, #32
 80a3b08:	4621      	mov	r1, r4
 80a3b0a:	f005 f842 	bl	80a8b92 <memset>
  memcpy(dir->name, fname->sfn, 11);
 80a3b0e:	464b      	mov	r3, r9
 80a3b10:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 80a3b14:	603a      	str	r2, [r7, #0]
 80a3b16:	685a      	ldr	r2, [r3, #4]
 80a3b18:	607a      	str	r2, [r7, #4]
 80a3b1a:	891a      	ldrh	r2, [r3, #8]
 80a3b1c:	813a      	strh	r2, [r7, #8]
 80a3b1e:	7a9b      	ldrb	r3, [r3, #10]
 80a3b20:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 80a3b22:	f899 3000 	ldrb.w	r3, [r9]
 80a3b26:	f003 0318 	and.w	r3, r3, #24
 80a3b2a:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 80a3b2c:	4b18      	ldr	r3, [pc, #96]	; (80a3b90 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
 80a3b2e:	681b      	ldr	r3, [r3, #0]
 80a3b30:	b12b      	cbz	r3, 80a3b3e <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 80a3b32:	f107 010e 	add.w	r1, r7, #14
 80a3b36:	f107 0010 	add.w	r0, r7, #16
 80a3b3a:	4798      	blx	r3
 80a3b3c:	e006      	b.n	80a3b4c <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 80a3b3e:	2321      	movs	r3, #33	; 0x21
 80a3b40:	743b      	strb	r3, [r7, #16]
 80a3b42:	2328      	movs	r3, #40	; 0x28
 80a3b44:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 80a3b46:	2308      	movs	r3, #8
 80a3b48:	73bc      	strb	r4, [r7, #14]
 80a3b4a:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 80a3b4c:	8a3b      	ldrh	r3, [r7, #16]
 80a3b4e:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 80a3b50:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 80a3b52:	89fb      	ldrh	r3, [r7, #14]
 80a3b54:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 80a3b56:	68b2      	ldr	r2, [r6, #8]
 80a3b58:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 80a3b5c:	f043 0301 	orr.w	r3, r3, #1
 80a3b60:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 80a3b64:	9500      	str	r5, [sp, #0]
 80a3b66:	465b      	mov	r3, fp
 80a3b68:	4652      	mov	r2, sl
 80a3b6a:	4631      	mov	r1, r6
 80a3b6c:	9805      	ldr	r0, [sp, #20]
 80a3b6e:	f7ff f913 	bl	80a2d98 <_ZN7FatFile15openCachedEntryEPS_tih>
 80a3b72:	e009      	b.n	80a3b88 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 80a3b74:	2701      	movs	r7, #1
 80a3b76:	e677      	b.n	80a3868 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
 80a3b78:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 80a3b7c:	f1be 0f0d 	cmp.w	lr, #13
 80a3b80:	f43f ae82 	beq.w	80a3888 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80a3b84:	46d4      	mov	ip, sl
 80a3b86:	e6c3      	b.n	80a3910 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
 80a3b88:	b009      	add	sp, #36	; 0x24
 80a3b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3b8e:	bf00      	nop
 80a3b90:	20000254 	.word	0x20000254

080a3b94 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 80a3b94:	f000 b9c2 	b.w	80a3f1c <HAL_Pin_Map>

080a3b98 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 80a3b98:	f000 b9c0 	b.w	80a3f1c <HAL_Pin_Map>

080a3b9c <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 80a3b9c:	f000 b9be 	b.w	80a3f1c <HAL_Pin_Map>

080a3ba0 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 80a3ba0:	f000 b9bc 	b.w	80a3f1c <HAL_Pin_Map>

080a3ba4 <_GLOBAL__sub_I__ZN7istream3getEv>:
 80a3ba4:	f000 b9ba 	b.w	80a3f1c <HAL_Pin_Map>

080a3ba8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a3ba8:	b508      	push	{r3, lr}
 80a3baa:	4b02      	ldr	r3, [pc, #8]	; (80a3bb4 <inet_gethostbyname+0xc>)
 80a3bac:	681b      	ldr	r3, [r3, #0]
 80a3bae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a3bb0:	9301      	str	r3, [sp, #4]
 80a3bb2:	bd08      	pop	{r3, pc}
 80a3bb4:	080601c0 	.word	0x080601c0

080a3bb8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a3bb8:	b508      	push	{r3, lr}
 80a3bba:	4b02      	ldr	r3, [pc, #8]	; (80a3bc4 <HAL_USB_USART_Init+0xc>)
 80a3bbc:	681b      	ldr	r3, [r3, #0]
 80a3bbe:	681b      	ldr	r3, [r3, #0]
 80a3bc0:	9301      	str	r3, [sp, #4]
 80a3bc2:	bd08      	pop	{r3, pc}
 80a3bc4:	080601d8 	.word	0x080601d8

080a3bc8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a3bc8:	b508      	push	{r3, lr}
 80a3bca:	4b02      	ldr	r3, [pc, #8]	; (80a3bd4 <HAL_USB_USART_Begin+0xc>)
 80a3bcc:	681b      	ldr	r3, [r3, #0]
 80a3bce:	685b      	ldr	r3, [r3, #4]
 80a3bd0:	9301      	str	r3, [sp, #4]
 80a3bd2:	bd08      	pop	{r3, pc}
 80a3bd4:	080601d8 	.word	0x080601d8

080a3bd8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80a3bd8:	b508      	push	{r3, lr}
 80a3bda:	4b02      	ldr	r3, [pc, #8]	; (80a3be4 <HAL_USB_USART_End+0xc>)
 80a3bdc:	681b      	ldr	r3, [r3, #0]
 80a3bde:	689b      	ldr	r3, [r3, #8]
 80a3be0:	9301      	str	r3, [sp, #4]
 80a3be2:	bd08      	pop	{r3, pc}
 80a3be4:	080601d8 	.word	0x080601d8

080a3be8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a3be8:	b508      	push	{r3, lr}
 80a3bea:	4b02      	ldr	r3, [pc, #8]	; (80a3bf4 <HAL_USB_USART_Available_Data+0xc>)
 80a3bec:	681b      	ldr	r3, [r3, #0]
 80a3bee:	691b      	ldr	r3, [r3, #16]
 80a3bf0:	9301      	str	r3, [sp, #4]
 80a3bf2:	bd08      	pop	{r3, pc}
 80a3bf4:	080601d8 	.word	0x080601d8

080a3bf8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a3bf8:	b508      	push	{r3, lr}
 80a3bfa:	4b02      	ldr	r3, [pc, #8]	; (80a3c04 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a3bfc:	681b      	ldr	r3, [r3, #0]
 80a3bfe:	695b      	ldr	r3, [r3, #20]
 80a3c00:	9301      	str	r3, [sp, #4]
 80a3c02:	bd08      	pop	{r3, pc}
 80a3c04:	080601d8 	.word	0x080601d8

080a3c08 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3c08:	b508      	push	{r3, lr}
 80a3c0a:	4b02      	ldr	r3, [pc, #8]	; (80a3c14 <HAL_USB_USART_Receive_Data+0xc>)
 80a3c0c:	681b      	ldr	r3, [r3, #0]
 80a3c0e:	699b      	ldr	r3, [r3, #24]
 80a3c10:	9301      	str	r3, [sp, #4]
 80a3c12:	bd08      	pop	{r3, pc}
 80a3c14:	080601d8 	.word	0x080601d8

080a3c18 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a3c18:	b508      	push	{r3, lr}
 80a3c1a:	4b02      	ldr	r3, [pc, #8]	; (80a3c24 <HAL_USB_USART_Send_Data+0xc>)
 80a3c1c:	681b      	ldr	r3, [r3, #0]
 80a3c1e:	69db      	ldr	r3, [r3, #28]
 80a3c20:	9301      	str	r3, [sp, #4]
 80a3c22:	bd08      	pop	{r3, pc}
 80a3c24:	080601d8 	.word	0x080601d8

080a3c28 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a3c28:	b508      	push	{r3, lr}
 80a3c2a:	4b02      	ldr	r3, [pc, #8]	; (80a3c34 <HAL_USB_USART_Flush_Data+0xc>)
 80a3c2c:	681b      	ldr	r3, [r3, #0]
 80a3c2e:	6a1b      	ldr	r3, [r3, #32]
 80a3c30:	9301      	str	r3, [sp, #4]
 80a3c32:	bd08      	pop	{r3, pc}
 80a3c34:	080601d8 	.word	0x080601d8

080a3c38 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a3c38:	b508      	push	{r3, lr}
 80a3c3a:	4b02      	ldr	r3, [pc, #8]	; (80a3c44 <HAL_USB_USART_Is_Enabled+0xc>)
 80a3c3c:	681b      	ldr	r3, [r3, #0]
 80a3c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3c40:	9301      	str	r3, [sp, #4]
 80a3c42:	bd08      	pop	{r3, pc}
 80a3c44:	080601d8 	.word	0x080601d8

080a3c48 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a3c48:	b508      	push	{r3, lr}
 80a3c4a:	4b02      	ldr	r3, [pc, #8]	; (80a3c54 <HAL_I2C_Begin+0xc>)
 80a3c4c:	681b      	ldr	r3, [r3, #0]
 80a3c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3c50:	9301      	str	r3, [sp, #4]
 80a3c52:	bd08      	pop	{r3, pc}
 80a3c54:	080601ac 	.word	0x080601ac

080a3c58 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a3c58:	b508      	push	{r3, lr}
 80a3c5a:	4b02      	ldr	r3, [pc, #8]	; (80a3c64 <HAL_I2C_Request_Data+0xc>)
 80a3c5c:	681b      	ldr	r3, [r3, #0]
 80a3c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3c60:	9301      	str	r3, [sp, #4]
 80a3c62:	bd08      	pop	{r3, pc}
 80a3c64:	080601ac 	.word	0x080601ac

080a3c68 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a3c68:	b508      	push	{r3, lr}
 80a3c6a:	4b02      	ldr	r3, [pc, #8]	; (80a3c74 <HAL_I2C_Begin_Transmission+0xc>)
 80a3c6c:	681b      	ldr	r3, [r3, #0]
 80a3c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3c70:	9301      	str	r3, [sp, #4]
 80a3c72:	bd08      	pop	{r3, pc}
 80a3c74:	080601ac 	.word	0x080601ac

080a3c78 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a3c78:	b508      	push	{r3, lr}
 80a3c7a:	4b02      	ldr	r3, [pc, #8]	; (80a3c84 <HAL_I2C_End_Transmission+0xc>)
 80a3c7c:	681b      	ldr	r3, [r3, #0]
 80a3c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a3c80:	9301      	str	r3, [sp, #4]
 80a3c82:	bd08      	pop	{r3, pc}
 80a3c84:	080601ac 	.word	0x080601ac

080a3c88 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a3c88:	b508      	push	{r3, lr}
 80a3c8a:	4b02      	ldr	r3, [pc, #8]	; (80a3c94 <HAL_I2C_Write_Data+0xc>)
 80a3c8c:	681b      	ldr	r3, [r3, #0]
 80a3c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a3c90:	9301      	str	r3, [sp, #4]
 80a3c92:	bd08      	pop	{r3, pc}
 80a3c94:	080601ac 	.word	0x080601ac

080a3c98 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a3c98:	b508      	push	{r3, lr}
 80a3c9a:	4b02      	ldr	r3, [pc, #8]	; (80a3ca4 <HAL_I2C_Available_Data+0xc>)
 80a3c9c:	681b      	ldr	r3, [r3, #0]
 80a3c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a3ca0:	9301      	str	r3, [sp, #4]
 80a3ca2:	bd08      	pop	{r3, pc}
 80a3ca4:	080601ac 	.word	0x080601ac

080a3ca8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a3ca8:	b508      	push	{r3, lr}
 80a3caa:	4b02      	ldr	r3, [pc, #8]	; (80a3cb4 <HAL_I2C_Read_Data+0xc>)
 80a3cac:	681b      	ldr	r3, [r3, #0]
 80a3cae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a3cb0:	9301      	str	r3, [sp, #4]
 80a3cb2:	bd08      	pop	{r3, pc}
 80a3cb4:	080601ac 	.word	0x080601ac

080a3cb8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a3cb8:	b508      	push	{r3, lr}
 80a3cba:	4b02      	ldr	r3, [pc, #8]	; (80a3cc4 <HAL_I2C_Peek_Data+0xc>)
 80a3cbc:	681b      	ldr	r3, [r3, #0]
 80a3cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a3cc0:	9301      	str	r3, [sp, #4]
 80a3cc2:	bd08      	pop	{r3, pc}
 80a3cc4:	080601ac 	.word	0x080601ac

080a3cc8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a3cc8:	b508      	push	{r3, lr}
 80a3cca:	4b02      	ldr	r3, [pc, #8]	; (80a3cd4 <HAL_I2C_Flush_Data+0xc>)
 80a3ccc:	681b      	ldr	r3, [r3, #0]
 80a3cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a3cd0:	9301      	str	r3, [sp, #4]
 80a3cd2:	bd08      	pop	{r3, pc}
 80a3cd4:	080601ac 	.word	0x080601ac

080a3cd8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a3cd8:	b508      	push	{r3, lr}
 80a3cda:	4b02      	ldr	r3, [pc, #8]	; (80a3ce4 <HAL_I2C_Is_Enabled+0xc>)
 80a3cdc:	681b      	ldr	r3, [r3, #0]
 80a3cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a3ce0:	9301      	str	r3, [sp, #4]
 80a3ce2:	bd08      	pop	{r3, pc}
 80a3ce4:	080601ac 	.word	0x080601ac

080a3ce8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a3ce8:	b508      	push	{r3, lr}
 80a3cea:	4b03      	ldr	r3, [pc, #12]	; (80a3cf8 <HAL_I2C_Init+0x10>)
 80a3cec:	681b      	ldr	r3, [r3, #0]
 80a3cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a3cf2:	9301      	str	r3, [sp, #4]
 80a3cf4:	bd08      	pop	{r3, pc}
 80a3cf6:	0000      	.short	0x0000
 80a3cf8:	080601ac 	.word	0x080601ac

080a3cfc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a3cfc:	b508      	push	{r3, lr}
 80a3cfe:	4b02      	ldr	r3, [pc, #8]	; (80a3d08 <HAL_USART_Init+0xc>)
 80a3d00:	681b      	ldr	r3, [r3, #0]
 80a3d02:	699b      	ldr	r3, [r3, #24]
 80a3d04:	9301      	str	r3, [sp, #4]
 80a3d06:	bd08      	pop	{r3, pc}
 80a3d08:	080601c4 	.word	0x080601c4

080a3d0c <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
 80a3d0c:	b508      	push	{r3, lr}
 80a3d0e:	4b02      	ldr	r3, [pc, #8]	; (80a3d18 <HAL_USART_End+0xc>)
 80a3d10:	681b      	ldr	r3, [r3, #0]
 80a3d12:	6a1b      	ldr	r3, [r3, #32]
 80a3d14:	9301      	str	r3, [sp, #4]
 80a3d16:	bd08      	pop	{r3, pc}
 80a3d18:	080601c4 	.word	0x080601c4

080a3d1c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a3d1c:	b508      	push	{r3, lr}
 80a3d1e:	4b02      	ldr	r3, [pc, #8]	; (80a3d28 <HAL_USART_Write_Data+0xc>)
 80a3d20:	681b      	ldr	r3, [r3, #0]
 80a3d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3d24:	9301      	str	r3, [sp, #4]
 80a3d26:	bd08      	pop	{r3, pc}
 80a3d28:	080601c4 	.word	0x080601c4

080a3d2c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a3d2c:	b508      	push	{r3, lr}
 80a3d2e:	4b02      	ldr	r3, [pc, #8]	; (80a3d38 <HAL_USART_Available_Data+0xc>)
 80a3d30:	681b      	ldr	r3, [r3, #0]
 80a3d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3d34:	9301      	str	r3, [sp, #4]
 80a3d36:	bd08      	pop	{r3, pc}
 80a3d38:	080601c4 	.word	0x080601c4

080a3d3c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a3d3c:	b508      	push	{r3, lr}
 80a3d3e:	4b02      	ldr	r3, [pc, #8]	; (80a3d48 <HAL_USART_Read_Data+0xc>)
 80a3d40:	681b      	ldr	r3, [r3, #0]
 80a3d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a3d44:	9301      	str	r3, [sp, #4]
 80a3d46:	bd08      	pop	{r3, pc}
 80a3d48:	080601c4 	.word	0x080601c4

080a3d4c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a3d4c:	b508      	push	{r3, lr}
 80a3d4e:	4b02      	ldr	r3, [pc, #8]	; (80a3d58 <HAL_USART_Peek_Data+0xc>)
 80a3d50:	681b      	ldr	r3, [r3, #0]
 80a3d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3d54:	9301      	str	r3, [sp, #4]
 80a3d56:	bd08      	pop	{r3, pc}
 80a3d58:	080601c4 	.word	0x080601c4

080a3d5c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a3d5c:	b508      	push	{r3, lr}
 80a3d5e:	4b02      	ldr	r3, [pc, #8]	; (80a3d68 <HAL_USART_Flush_Data+0xc>)
 80a3d60:	681b      	ldr	r3, [r3, #0]
 80a3d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3d64:	9301      	str	r3, [sp, #4]
 80a3d66:	bd08      	pop	{r3, pc}
 80a3d68:	080601c4 	.word	0x080601c4

080a3d6c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a3d6c:	b508      	push	{r3, lr}
 80a3d6e:	4b02      	ldr	r3, [pc, #8]	; (80a3d78 <HAL_USART_Is_Enabled+0xc>)
 80a3d70:	681b      	ldr	r3, [r3, #0]
 80a3d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3d74:	9301      	str	r3, [sp, #4]
 80a3d76:	bd08      	pop	{r3, pc}
 80a3d78:	080601c4 	.word	0x080601c4

080a3d7c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a3d7c:	b508      	push	{r3, lr}
 80a3d7e:	4b02      	ldr	r3, [pc, #8]	; (80a3d88 <HAL_USART_Available_Data_For_Write+0xc>)
 80a3d80:	681b      	ldr	r3, [r3, #0]
 80a3d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3d84:	9301      	str	r3, [sp, #4]
 80a3d86:	bd08      	pop	{r3, pc}
 80a3d88:	080601c4 	.word	0x080601c4

080a3d8c <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a3d8c:	b508      	push	{r3, lr}
 80a3d8e:	4b02      	ldr	r3, [pc, #8]	; (80a3d98 <HAL_USART_BeginConfig+0xc>)
 80a3d90:	681b      	ldr	r3, [r3, #0]
 80a3d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3d94:	9301      	str	r3, [sp, #4]
 80a3d96:	bd08      	pop	{r3, pc}
 80a3d98:	080601c4 	.word	0x080601c4

080a3d9c <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 80a3d9c:	b508      	push	{r3, lr}
 80a3d9e:	4b02      	ldr	r3, [pc, #8]	; (80a3da8 <os_thread_yield+0xc>)
 80a3da0:	681b      	ldr	r3, [r3, #0]
 80a3da2:	68db      	ldr	r3, [r3, #12]
 80a3da4:	9301      	str	r3, [sp, #4]
 80a3da6:	bd08      	pop	{r3, pc}
 80a3da8:	080601d0 	.word	0x080601d0

080a3dac <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a3dac:	b508      	push	{r3, lr}
 80a3dae:	4b02      	ldr	r3, [pc, #8]	; (80a3db8 <os_mutex_create+0xc>)
 80a3db0:	681b      	ldr	r3, [r3, #0]
 80a3db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3db4:	9301      	str	r3, [sp, #4]
 80a3db6:	bd08      	pop	{r3, pc}
 80a3db8:	080601d0 	.word	0x080601d0

080a3dbc <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80a3dbc:	b508      	push	{r3, lr}
 80a3dbe:	4b02      	ldr	r3, [pc, #8]	; (80a3dc8 <os_mutex_lock+0xc>)
 80a3dc0:	681b      	ldr	r3, [r3, #0]
 80a3dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3dc4:	9301      	str	r3, [sp, #4]
 80a3dc6:	bd08      	pop	{r3, pc}
 80a3dc8:	080601d0 	.word	0x080601d0

080a3dcc <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80a3dcc:	b508      	push	{r3, lr}
 80a3dce:	4b02      	ldr	r3, [pc, #8]	; (80a3dd8 <os_mutex_unlock+0xc>)
 80a3dd0:	681b      	ldr	r3, [r3, #0]
 80a3dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a3dd4:	9301      	str	r3, [sp, #4]
 80a3dd6:	bd08      	pop	{r3, pc}
 80a3dd8:	080601d0 	.word	0x080601d0

080a3ddc <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a3ddc:	b508      	push	{r3, lr}
 80a3dde:	4b02      	ldr	r3, [pc, #8]	; (80a3de8 <os_mutex_recursive_create+0xc>)
 80a3de0:	681b      	ldr	r3, [r3, #0]
 80a3de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a3de4:	9301      	str	r3, [sp, #4]
 80a3de6:	bd08      	pop	{r3, pc}
 80a3de8:	080601d0 	.word	0x080601d0

080a3dec <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a3dec:	b508      	push	{r3, lr}
 80a3dee:	4b02      	ldr	r3, [pc, #8]	; (80a3df8 <os_mutex_recursive_lock+0xc>)
 80a3df0:	681b      	ldr	r3, [r3, #0]
 80a3df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a3df4:	9301      	str	r3, [sp, #4]
 80a3df6:	bd08      	pop	{r3, pc}
 80a3df8:	080601d0 	.word	0x080601d0

080a3dfc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a3dfc:	b508      	push	{r3, lr}
 80a3dfe:	4b02      	ldr	r3, [pc, #8]	; (80a3e08 <os_mutex_recursive_unlock+0xc>)
 80a3e00:	681b      	ldr	r3, [r3, #0]
 80a3e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a3e04:	9301      	str	r3, [sp, #4]
 80a3e06:	bd08      	pop	{r3, pc}
 80a3e08:	080601d0 	.word	0x080601d0

080a3e0c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a3e0c:	b508      	push	{r3, lr}
 80a3e0e:	4b02      	ldr	r3, [pc, #8]	; (80a3e18 <HAL_RNG_GetRandomNumber+0xc>)
 80a3e10:	681b      	ldr	r3, [r3, #0]
 80a3e12:	685b      	ldr	r3, [r3, #4]
 80a3e14:	9301      	str	r3, [sp, #4]
 80a3e16:	bd08      	pop	{r3, pc}
 80a3e18:	0806019c 	.word	0x0806019c

080a3e1c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a3e1c:	b508      	push	{r3, lr}
 80a3e1e:	4b02      	ldr	r3, [pc, #8]	; (80a3e28 <HAL_Delay_Microseconds+0xc>)
 80a3e20:	681b      	ldr	r3, [r3, #0]
 80a3e22:	68db      	ldr	r3, [r3, #12]
 80a3e24:	9301      	str	r3, [sp, #4]
 80a3e26:	bd08      	pop	{r3, pc}
 80a3e28:	0806019c 	.word	0x0806019c

080a3e2c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a3e2c:	b508      	push	{r3, lr}
 80a3e2e:	4b02      	ldr	r3, [pc, #8]	; (80a3e38 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a3e30:	681b      	ldr	r3, [r3, #0]
 80a3e32:	691b      	ldr	r3, [r3, #16]
 80a3e34:	9301      	str	r3, [sp, #4]
 80a3e36:	bd08      	pop	{r3, pc}
 80a3e38:	0806019c 	.word	0x0806019c

080a3e3c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a3e3c:	b508      	push	{r3, lr}
 80a3e3e:	4b02      	ldr	r3, [pc, #8]	; (80a3e48 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a3e40:	681b      	ldr	r3, [r3, #0]
 80a3e42:	695b      	ldr	r3, [r3, #20]
 80a3e44:	9301      	str	r3, [sp, #4]
 80a3e46:	bd08      	pop	{r3, pc}
 80a3e48:	0806019c 	.word	0x0806019c

080a3e4c <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a3e4c:	b508      	push	{r3, lr}
 80a3e4e:	4b02      	ldr	r3, [pc, #8]	; (80a3e58 <HAL_RTC_Get_UnixTime+0xc>)
 80a3e50:	681b      	ldr	r3, [r3, #0]
 80a3e52:	69db      	ldr	r3, [r3, #28]
 80a3e54:	9301      	str	r3, [sp, #4]
 80a3e56:	bd08      	pop	{r3, pc}
 80a3e58:	0806019c 	.word	0x0806019c

080a3e5c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a3e5c:	b508      	push	{r3, lr}
 80a3e5e:	4b02      	ldr	r3, [pc, #8]	; (80a3e68 <HAL_RTC_Time_Is_Valid+0xc>)
 80a3e60:	681b      	ldr	r3, [r3, #0]
 80a3e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a3e64:	9301      	str	r3, [sp, #4]
 80a3e66:	bd08      	pop	{r3, pc}
 80a3e68:	0806019c 	.word	0x0806019c

080a3e6c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a3e6c:	b508      	push	{r3, lr}
 80a3e6e:	4b02      	ldr	r3, [pc, #8]	; (80a3e78 <HAL_SPI_Begin+0xc>)
 80a3e70:	681b      	ldr	r3, [r3, #0]
 80a3e72:	681b      	ldr	r3, [r3, #0]
 80a3e74:	9301      	str	r3, [sp, #4]
 80a3e76:	bd08      	pop	{r3, pc}
 80a3e78:	080601b4 	.word	0x080601b4

080a3e7c <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a3e7c:	b508      	push	{r3, lr}
 80a3e7e:	4b02      	ldr	r3, [pc, #8]	; (80a3e88 <HAL_SPI_Set_Bit_Order+0xc>)
 80a3e80:	681b      	ldr	r3, [r3, #0]
 80a3e82:	689b      	ldr	r3, [r3, #8]
 80a3e84:	9301      	str	r3, [sp, #4]
 80a3e86:	bd08      	pop	{r3, pc}
 80a3e88:	080601b4 	.word	0x080601b4

080a3e8c <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a3e8c:	b508      	push	{r3, lr}
 80a3e8e:	4b02      	ldr	r3, [pc, #8]	; (80a3e98 <HAL_SPI_Set_Data_Mode+0xc>)
 80a3e90:	681b      	ldr	r3, [r3, #0]
 80a3e92:	68db      	ldr	r3, [r3, #12]
 80a3e94:	9301      	str	r3, [sp, #4]
 80a3e96:	bd08      	pop	{r3, pc}
 80a3e98:	080601b4 	.word	0x080601b4

080a3e9c <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a3e9c:	b508      	push	{r3, lr}
 80a3e9e:	4b02      	ldr	r3, [pc, #8]	; (80a3ea8 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a3ea0:	681b      	ldr	r3, [r3, #0]
 80a3ea2:	691b      	ldr	r3, [r3, #16]
 80a3ea4:	9301      	str	r3, [sp, #4]
 80a3ea6:	bd08      	pop	{r3, pc}
 80a3ea8:	080601b4 	.word	0x080601b4

080a3eac <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a3eac:	b508      	push	{r3, lr}
 80a3eae:	4b02      	ldr	r3, [pc, #8]	; (80a3eb8 <HAL_SPI_Send_Receive_Data+0xc>)
 80a3eb0:	681b      	ldr	r3, [r3, #0]
 80a3eb2:	695b      	ldr	r3, [r3, #20]
 80a3eb4:	9301      	str	r3, [sp, #4]
 80a3eb6:	bd08      	pop	{r3, pc}
 80a3eb8:	080601b4 	.word	0x080601b4

080a3ebc <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a3ebc:	b508      	push	{r3, lr}
 80a3ebe:	4b02      	ldr	r3, [pc, #8]	; (80a3ec8 <HAL_SPI_Init+0xc>)
 80a3ec0:	681b      	ldr	r3, [r3, #0]
 80a3ec2:	69db      	ldr	r3, [r3, #28]
 80a3ec4:	9301      	str	r3, [sp, #4]
 80a3ec6:	bd08      	pop	{r3, pc}
 80a3ec8:	080601b4 	.word	0x080601b4

080a3ecc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a3ecc:	b508      	push	{r3, lr}
 80a3ece:	4b02      	ldr	r3, [pc, #8]	; (80a3ed8 <HAL_SPI_Is_Enabled+0xc>)
 80a3ed0:	681b      	ldr	r3, [r3, #0]
 80a3ed2:	6a1b      	ldr	r3, [r3, #32]
 80a3ed4:	9301      	str	r3, [sp, #4]
 80a3ed6:	bd08      	pop	{r3, pc}
 80a3ed8:	080601b4 	.word	0x080601b4

080a3edc <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a3edc:	b508      	push	{r3, lr}
 80a3ede:	4b02      	ldr	r3, [pc, #8]	; (80a3ee8 <HAL_SPI_Info+0xc>)
 80a3ee0:	681b      	ldr	r3, [r3, #0]
 80a3ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3ee4:	9301      	str	r3, [sp, #4]
 80a3ee6:	bd08      	pop	{r3, pc}
 80a3ee8:	080601b4 	.word	0x080601b4

080a3eec <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 80a3eec:	b508      	push	{r3, lr}
 80a3eee:	4b02      	ldr	r3, [pc, #8]	; (80a3ef8 <HAL_SPI_DMA_Transfer+0xc>)
 80a3ef0:	681b      	ldr	r3, [r3, #0]
 80a3ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a3ef4:	9301      	str	r3, [sp, #4]
 80a3ef6:	bd08      	pop	{r3, pc}
 80a3ef8:	080601b4 	.word	0x080601b4

080a3efc <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 80a3efc:	b508      	push	{r3, lr}
 80a3efe:	4b02      	ldr	r3, [pc, #8]	; (80a3f08 <HAL_SPI_DMA_Transfer_Status+0xc>)
 80a3f00:	681b      	ldr	r3, [r3, #0]
 80a3f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a3f04:	9301      	str	r3, [sp, #4]
 80a3f06:	bd08      	pop	{r3, pc}
 80a3f08:	080601b4 	.word	0x080601b4

080a3f0c <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a3f0c:	b508      	push	{r3, lr}
 80a3f0e:	4b02      	ldr	r3, [pc, #8]	; (80a3f18 <HAL_SPI_Set_Settings+0xc>)
 80a3f10:	681b      	ldr	r3, [r3, #0]
 80a3f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a3f14:	9301      	str	r3, [sp, #4]
 80a3f16:	bd08      	pop	{r3, pc}
 80a3f18:	080601b4 	.word	0x080601b4

080a3f1c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a3f1c:	b508      	push	{r3, lr}
 80a3f1e:	4b02      	ldr	r3, [pc, #8]	; (80a3f28 <HAL_Pin_Map+0xc>)
 80a3f20:	681b      	ldr	r3, [r3, #0]
 80a3f22:	681b      	ldr	r3, [r3, #0]
 80a3f24:	9301      	str	r3, [sp, #4]
 80a3f26:	bd08      	pop	{r3, pc}
 80a3f28:	080601b0 	.word	0x080601b0

080a3f2c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a3f2c:	b508      	push	{r3, lr}
 80a3f2e:	4b02      	ldr	r3, [pc, #8]	; (80a3f38 <HAL_Validate_Pin_Function+0xc>)
 80a3f30:	681b      	ldr	r3, [r3, #0]
 80a3f32:	685b      	ldr	r3, [r3, #4]
 80a3f34:	9301      	str	r3, [sp, #4]
 80a3f36:	bd08      	pop	{r3, pc}
 80a3f38:	080601b0 	.word	0x080601b0

080a3f3c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a3f3c:	b508      	push	{r3, lr}
 80a3f3e:	4b02      	ldr	r3, [pc, #8]	; (80a3f48 <HAL_Pin_Mode+0xc>)
 80a3f40:	681b      	ldr	r3, [r3, #0]
 80a3f42:	689b      	ldr	r3, [r3, #8]
 80a3f44:	9301      	str	r3, [sp, #4]
 80a3f46:	bd08      	pop	{r3, pc}
 80a3f48:	080601b0 	.word	0x080601b0

080a3f4c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a3f4c:	b508      	push	{r3, lr}
 80a3f4e:	4b02      	ldr	r3, [pc, #8]	; (80a3f58 <HAL_Get_Pin_Mode+0xc>)
 80a3f50:	681b      	ldr	r3, [r3, #0]
 80a3f52:	68db      	ldr	r3, [r3, #12]
 80a3f54:	9301      	str	r3, [sp, #4]
 80a3f56:	bd08      	pop	{r3, pc}
 80a3f58:	080601b0 	.word	0x080601b0

080a3f5c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a3f5c:	b508      	push	{r3, lr}
 80a3f5e:	4b02      	ldr	r3, [pc, #8]	; (80a3f68 <HAL_GPIO_Write+0xc>)
 80a3f60:	681b      	ldr	r3, [r3, #0]
 80a3f62:	691b      	ldr	r3, [r3, #16]
 80a3f64:	9301      	str	r3, [sp, #4]
 80a3f66:	bd08      	pop	{r3, pc}
 80a3f68:	080601b0 	.word	0x080601b0

080a3f6c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a3f6c:	b508      	push	{r3, lr}
 80a3f6e:	4b02      	ldr	r3, [pc, #8]	; (80a3f78 <HAL_GPIO_Read+0xc>)
 80a3f70:	681b      	ldr	r3, [r3, #0]
 80a3f72:	695b      	ldr	r3, [r3, #20]
 80a3f74:	9301      	str	r3, [sp, #4]
 80a3f76:	bd08      	pop	{r3, pc}
 80a3f78:	080601b0 	.word	0x080601b0

080a3f7c <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a3f7c:	b508      	push	{r3, lr}
 80a3f7e:	4b02      	ldr	r3, [pc, #8]	; (80a3f88 <HAL_Interrupts_Enable_All+0xc>)
 80a3f80:	681b      	ldr	r3, [r3, #0]
 80a3f82:	6a1b      	ldr	r3, [r3, #32]
 80a3f84:	9301      	str	r3, [sp, #4]
 80a3f86:	bd08      	pop	{r3, pc}
 80a3f88:	080601b0 	.word	0x080601b0

080a3f8c <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a3f8c:	b508      	push	{r3, lr}
 80a3f8e:	4b02      	ldr	r3, [pc, #8]	; (80a3f98 <HAL_Interrupts_Disable_All+0xc>)
 80a3f90:	681b      	ldr	r3, [r3, #0]
 80a3f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a3f94:	9301      	str	r3, [sp, #4]
 80a3f96:	bd08      	pop	{r3, pc}
 80a3f98:	080601b0 	.word	0x080601b0

080a3f9c <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a3f9c:	b508      	push	{r3, lr}
 80a3f9e:	4b02      	ldr	r3, [pc, #8]	; (80a3fa8 <HAL_ADC_Read+0xc>)
 80a3fa0:	681b      	ldr	r3, [r3, #0]
 80a3fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a3fa4:	9301      	str	r3, [sp, #4]
 80a3fa6:	bd08      	pop	{r3, pc}
 80a3fa8:	080601b0 	.word	0x080601b0

080a3fac <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a3fac:	b508      	push	{r3, lr}
 80a3fae:	4b02      	ldr	r3, [pc, #8]	; (80a3fb8 <panic_+0xc>)
 80a3fb0:	681b      	ldr	r3, [r3, #0]
 80a3fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a3fb4:	9301      	str	r3, [sp, #4]
 80a3fb6:	bd08      	pop	{r3, pc}
 80a3fb8:	080201a8 	.word	0x080201a8

080a3fbc <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80a3fbc:	b508      	push	{r3, lr}
 80a3fbe:	4b02      	ldr	r3, [pc, #8]	; (80a3fc8 <log_level_name+0xc>)
 80a3fc0:	681b      	ldr	r3, [r3, #0]
 80a3fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a3fc4:	9301      	str	r3, [sp, #4]
 80a3fc6:	bd08      	pop	{r3, pc}
 80a3fc8:	080201a8 	.word	0x080201a8

080a3fcc <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80a3fcc:	b508      	push	{r3, lr}
 80a3fce:	4b02      	ldr	r3, [pc, #8]	; (80a3fd8 <log_set_callbacks+0xc>)
 80a3fd0:	681b      	ldr	r3, [r3, #0]
 80a3fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a3fd4:	9301      	str	r3, [sp, #4]
 80a3fd6:	bd08      	pop	{r3, pc}
 80a3fd8:	080201a8 	.word	0x080201a8

080a3fdc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a3fdc:	b508      	push	{r3, lr}
 80a3fde:	4b02      	ldr	r3, [pc, #8]	; (80a3fe8 <spark_variable+0xc>)
 80a3fe0:	681b      	ldr	r3, [r3, #0]
 80a3fe2:	681b      	ldr	r3, [r3, #0]
 80a3fe4:	9301      	str	r3, [sp, #4]
 80a3fe6:	bd08      	pop	{r3, pc}
 80a3fe8:	080601cc 	.word	0x080601cc

080a3fec <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a3fec:	b508      	push	{r3, lr}
 80a3fee:	4b02      	ldr	r3, [pc, #8]	; (80a3ff8 <spark_function+0xc>)
 80a3ff0:	681b      	ldr	r3, [r3, #0]
 80a3ff2:	685b      	ldr	r3, [r3, #4]
 80a3ff4:	9301      	str	r3, [sp, #4]
 80a3ff6:	bd08      	pop	{r3, pc}
 80a3ff8:	080601cc 	.word	0x080601cc

080a3ffc <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a3ffc:	b508      	push	{r3, lr}
 80a3ffe:	4b02      	ldr	r3, [pc, #8]	; (80a4008 <spark_process+0xc>)
 80a4000:	681b      	ldr	r3, [r3, #0]
 80a4002:	689b      	ldr	r3, [r3, #8]
 80a4004:	9301      	str	r3, [sp, #4]
 80a4006:	bd08      	pop	{r3, pc}
 80a4008:	080601cc 	.word	0x080601cc

080a400c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a400c:	b508      	push	{r3, lr}
 80a400e:	4b02      	ldr	r3, [pc, #8]	; (80a4018 <spark_cloud_flag_connected+0xc>)
 80a4010:	681b      	ldr	r3, [r3, #0]
 80a4012:	695b      	ldr	r3, [r3, #20]
 80a4014:	9301      	str	r3, [sp, #4]
 80a4016:	bd08      	pop	{r3, pc}
 80a4018:	080601cc 	.word	0x080601cc

080a401c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a401c:	b508      	push	{r3, lr}
 80a401e:	4b02      	ldr	r3, [pc, #8]	; (80a4028 <spark_send_event+0xc>)
 80a4020:	681b      	ldr	r3, [r3, #0]
 80a4022:	6a1b      	ldr	r3, [r3, #32]
 80a4024:	9301      	str	r3, [sp, #4]
 80a4026:	bd08      	pop	{r3, pc}
 80a4028:	080601cc 	.word	0x080601cc

080a402c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a402c:	b508      	push	{r3, lr}
 80a402e:	4b02      	ldr	r3, [pc, #8]	; (80a4038 <spark_sync_time_pending+0xc>)
 80a4030:	681b      	ldr	r3, [r3, #0]
 80a4032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a4034:	9301      	str	r3, [sp, #4]
 80a4036:	bd08      	pop	{r3, pc}
 80a4038:	080601cc 	.word	0x080601cc

080a403c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a403c:	b508      	push	{r3, lr}
 80a403e:	4b02      	ldr	r3, [pc, #8]	; (80a4048 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a4040:	681b      	ldr	r3, [r3, #0]
 80a4042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a4044:	9301      	str	r3, [sp, #4]
 80a4046:	bd08      	pop	{r3, pc}
 80a4048:	080601cc 	.word	0x080601cc

080a404c <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
 80a404c:	b508      	push	{r3, lr}
 80a404e:	4b02      	ldr	r3, [pc, #8]	; (80a4058 <spark_publish_vitals+0xc>)
 80a4050:	681b      	ldr	r3, [r3, #0]
 80a4052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a4054:	9301      	str	r3, [sp, #4]
 80a4056:	bd08      	pop	{r3, pc}
 80a4058:	080601cc 	.word	0x080601cc

080a405c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a405c:	b508      	push	{r3, lr}
 80a405e:	4b02      	ldr	r3, [pc, #8]	; (80a4068 <network_connect+0xc>)
 80a4060:	681b      	ldr	r3, [r3, #0]
 80a4062:	685b      	ldr	r3, [r3, #4]
 80a4064:	9301      	str	r3, [sp, #4]
 80a4066:	bd08      	pop	{r3, pc}
 80a4068:	080601c8 	.word	0x080601c8

080a406c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a406c:	b508      	push	{r3, lr}
 80a406e:	4b02      	ldr	r3, [pc, #8]	; (80a4078 <network_connecting+0xc>)
 80a4070:	681b      	ldr	r3, [r3, #0]
 80a4072:	689b      	ldr	r3, [r3, #8]
 80a4074:	9301      	str	r3, [sp, #4]
 80a4076:	bd08      	pop	{r3, pc}
 80a4078:	080601c8 	.word	0x080601c8

080a407c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a407c:	b508      	push	{r3, lr}
 80a407e:	4b02      	ldr	r3, [pc, #8]	; (80a4088 <network_disconnect+0xc>)
 80a4080:	681b      	ldr	r3, [r3, #0]
 80a4082:	68db      	ldr	r3, [r3, #12]
 80a4084:	9301      	str	r3, [sp, #4]
 80a4086:	bd08      	pop	{r3, pc}
 80a4088:	080601c8 	.word	0x080601c8

080a408c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a408c:	b508      	push	{r3, lr}
 80a408e:	4b02      	ldr	r3, [pc, #8]	; (80a4098 <network_ready+0xc>)
 80a4090:	681b      	ldr	r3, [r3, #0]
 80a4092:	691b      	ldr	r3, [r3, #16]
 80a4094:	9301      	str	r3, [sp, #4]
 80a4096:	bd08      	pop	{r3, pc}
 80a4098:	080601c8 	.word	0x080601c8

080a409c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a409c:	b508      	push	{r3, lr}
 80a409e:	4b02      	ldr	r3, [pc, #8]	; (80a40a8 <network_on+0xc>)
 80a40a0:	681b      	ldr	r3, [r3, #0]
 80a40a2:	695b      	ldr	r3, [r3, #20]
 80a40a4:	9301      	str	r3, [sp, #4]
 80a40a6:	bd08      	pop	{r3, pc}
 80a40a8:	080601c8 	.word	0x080601c8

080a40ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a40ac:	b508      	push	{r3, lr}
 80a40ae:	4b02      	ldr	r3, [pc, #8]	; (80a40b8 <network_off+0xc>)
 80a40b0:	681b      	ldr	r3, [r3, #0]
 80a40b2:	699b      	ldr	r3, [r3, #24]
 80a40b4:	9301      	str	r3, [sp, #4]
 80a40b6:	bd08      	pop	{r3, pc}
 80a40b8:	080601c8 	.word	0x080601c8

080a40bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a40bc:	b508      	push	{r3, lr}
 80a40be:	4b02      	ldr	r3, [pc, #8]	; (80a40c8 <network_listen+0xc>)
 80a40c0:	681b      	ldr	r3, [r3, #0]
 80a40c2:	69db      	ldr	r3, [r3, #28]
 80a40c4:	9301      	str	r3, [sp, #4]
 80a40c6:	bd08      	pop	{r3, pc}
 80a40c8:	080601c8 	.word	0x080601c8

080a40cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a40cc:	b508      	push	{r3, lr}
 80a40ce:	4b02      	ldr	r3, [pc, #8]	; (80a40d8 <network_listening+0xc>)
 80a40d0:	681b      	ldr	r3, [r3, #0]
 80a40d2:	6a1b      	ldr	r3, [r3, #32]
 80a40d4:	9301      	str	r3, [sp, #4]
 80a40d6:	bd08      	pop	{r3, pc}
 80a40d8:	080601c8 	.word	0x080601c8

080a40dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a40dc:	b508      	push	{r3, lr}
 80a40de:	4b02      	ldr	r3, [pc, #8]	; (80a40e8 <network_set_listen_timeout+0xc>)
 80a40e0:	681b      	ldr	r3, [r3, #0]
 80a40e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a40e4:	9301      	str	r3, [sp, #4]
 80a40e6:	bd08      	pop	{r3, pc}
 80a40e8:	080601c8 	.word	0x080601c8

080a40ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a40ec:	b508      	push	{r3, lr}
 80a40ee:	4b02      	ldr	r3, [pc, #8]	; (80a40f8 <network_get_listen_timeout+0xc>)
 80a40f0:	681b      	ldr	r3, [r3, #0]
 80a40f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a40f4:	9301      	str	r3, [sp, #4]
 80a40f6:	bd08      	pop	{r3, pc}
 80a40f8:	080601c8 	.word	0x080601c8

080a40fc <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a40fc:	b508      	push	{r3, lr}
 80a40fe:	4b02      	ldr	r3, [pc, #8]	; (80a4108 <system_mode+0xc>)
 80a4100:	681b      	ldr	r3, [r3, #0]
 80a4102:	681b      	ldr	r3, [r3, #0]
 80a4104:	9301      	str	r3, [sp, #4]
 80a4106:	bd08      	pop	{r3, pc}
 80a4108:	080601a4 	.word	0x080601a4

080a410c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a410c:	b508      	push	{r3, lr}
 80a410e:	4b02      	ldr	r3, [pc, #8]	; (80a4118 <set_system_mode+0xc>)
 80a4110:	681b      	ldr	r3, [r3, #0]
 80a4112:	685b      	ldr	r3, [r3, #4]
 80a4114:	9301      	str	r3, [sp, #4]
 80a4116:	bd08      	pop	{r3, pc}
 80a4118:	080601a4 	.word	0x080601a4

080a411c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a411c:	b508      	push	{r3, lr}
 80a411e:	4b02      	ldr	r3, [pc, #8]	; (80a4128 <system_delay_ms+0xc>)
 80a4120:	681b      	ldr	r3, [r3, #0]
 80a4122:	695b      	ldr	r3, [r3, #20]
 80a4124:	9301      	str	r3, [sp, #4]
 80a4126:	bd08      	pop	{r3, pc}
 80a4128:	080601a4 	.word	0x080601a4

080a412c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a412c:	b508      	push	{r3, lr}
 80a412e:	4b02      	ldr	r3, [pc, #8]	; (80a4138 <application_thread_current+0xc>)
 80a4130:	681b      	ldr	r3, [r3, #0]
 80a4132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a4134:	9301      	str	r3, [sp, #4]
 80a4136:	bd08      	pop	{r3, pc}
 80a4138:	080601a4 	.word	0x080601a4

080a413c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a413c:	b508      	push	{r3, lr}
 80a413e:	4b02      	ldr	r3, [pc, #8]	; (80a4148 <application_thread_invoke+0xc>)
 80a4140:	681b      	ldr	r3, [r3, #0]
 80a4142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a4144:	9301      	str	r3, [sp, #4]
 80a4146:	bd08      	pop	{r3, pc}
 80a4148:	080601a4 	.word	0x080601a4

080a414c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a414c:	b508      	push	{r3, lr}
 80a414e:	4b02      	ldr	r3, [pc, #8]	; (80a4158 <system_thread_get_state+0xc>)
 80a4150:	681b      	ldr	r3, [r3, #0]
 80a4152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a4154:	9301      	str	r3, [sp, #4]
 80a4156:	bd08      	pop	{r3, pc}
 80a4158:	080601a4 	.word	0x080601a4

080a415c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a415c:	b508      	push	{r3, lr}
 80a415e:	4b03      	ldr	r3, [pc, #12]	; (80a416c <system_ctrl_set_app_request_handler+0x10>)
 80a4160:	681b      	ldr	r3, [r3, #0]
 80a4162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a4166:	9301      	str	r3, [sp, #4]
 80a4168:	bd08      	pop	{r3, pc}
 80a416a:	0000      	.short	0x0000
 80a416c:	080601a4 	.word	0x080601a4

080a4170 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a4170:	b508      	push	{r3, lr}
 80a4172:	4b03      	ldr	r3, [pc, #12]	; (80a4180 <system_ctrl_set_result+0x10>)
 80a4174:	681b      	ldr	r3, [r3, #0]
 80a4176:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a417a:	9301      	str	r3, [sp, #4]
 80a417c:	bd08      	pop	{r3, pc}
 80a417e:	0000      	.short	0x0000
 80a4180:	080601a4 	.word	0x080601a4

080a4184 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a4184:	b508      	push	{r3, lr}
 80a4186:	4b02      	ldr	r3, [pc, #8]	; (80a4190 <malloc+0xc>)
 80a4188:	681b      	ldr	r3, [r3, #0]
 80a418a:	681b      	ldr	r3, [r3, #0]
 80a418c:	9301      	str	r3, [sp, #4]
 80a418e:	bd08      	pop	{r3, pc}
 80a4190:	080601a0 	.word	0x080601a0

080a4194 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a4194:	b508      	push	{r3, lr}
 80a4196:	4b02      	ldr	r3, [pc, #8]	; (80a41a0 <free+0xc>)
 80a4198:	681b      	ldr	r3, [r3, #0]
 80a419a:	685b      	ldr	r3, [r3, #4]
 80a419c:	9301      	str	r3, [sp, #4]
 80a419e:	bd08      	pop	{r3, pc}
 80a41a0:	080601a0 	.word	0x080601a0

080a41a4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a41a4:	b508      	push	{r3, lr}
 80a41a6:	4b02      	ldr	r3, [pc, #8]	; (80a41b0 <realloc+0xc>)
 80a41a8:	681b      	ldr	r3, [r3, #0]
 80a41aa:	689b      	ldr	r3, [r3, #8]
 80a41ac:	9301      	str	r3, [sp, #4]
 80a41ae:	bd08      	pop	{r3, pc}
 80a41b0:	080601a0 	.word	0x080601a0

080a41b4 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a41b4:	b508      	push	{r3, lr}
 80a41b6:	4b02      	ldr	r3, [pc, #8]	; (80a41c0 <sprintf+0xc>)
 80a41b8:	681b      	ldr	r3, [r3, #0]
 80a41ba:	68db      	ldr	r3, [r3, #12]
 80a41bc:	9301      	str	r3, [sp, #4]
 80a41be:	bd08      	pop	{r3, pc}
 80a41c0:	080601a0 	.word	0x080601a0

080a41c4 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a41c4:	b508      	push	{r3, lr}
 80a41c6:	4b02      	ldr	r3, [pc, #8]	; (80a41d0 <siprintf+0xc>)
 80a41c8:	681b      	ldr	r3, [r3, #0]
 80a41ca:	691b      	ldr	r3, [r3, #16]
 80a41cc:	9301      	str	r3, [sp, #4]
 80a41ce:	bd08      	pop	{r3, pc}
 80a41d0:	080601a0 	.word	0x080601a0

080a41d4 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a41d4:	b508      	push	{r3, lr}
 80a41d6:	4b02      	ldr	r3, [pc, #8]	; (80a41e0 <siscanf+0xc>)
 80a41d8:	681b      	ldr	r3, [r3, #0]
 80a41da:	699b      	ldr	r3, [r3, #24]
 80a41dc:	9301      	str	r3, [sp, #4]
 80a41de:	bd08      	pop	{r3, pc}
 80a41e0:	080601a0 	.word	0x080601a0

080a41e4 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a41e4:	b508      	push	{r3, lr}
 80a41e6:	4b02      	ldr	r3, [pc, #8]	; (80a41f0 <snprintf+0xc>)
 80a41e8:	681b      	ldr	r3, [r3, #0]
 80a41ea:	69db      	ldr	r3, [r3, #28]
 80a41ec:	9301      	str	r3, [sp, #4]
 80a41ee:	bd08      	pop	{r3, pc}
 80a41f0:	080601a0 	.word	0x080601a0

080a41f4 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80a41f4:	b508      	push	{r3, lr}
 80a41f6:	4b02      	ldr	r3, [pc, #8]	; (80a4200 <sniprintf+0xc>)
 80a41f8:	681b      	ldr	r3, [r3, #0]
 80a41fa:	6a1b      	ldr	r3, [r3, #32]
 80a41fc:	9301      	str	r3, [sp, #4]
 80a41fe:	bd08      	pop	{r3, pc}
 80a4200:	080601a0 	.word	0x080601a0

080a4204 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a4204:	b508      	push	{r3, lr}
 80a4206:	4b02      	ldr	r3, [pc, #8]	; (80a4210 <vsnprintf+0xc>)
 80a4208:	681b      	ldr	r3, [r3, #0]
 80a420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a420c:	9301      	str	r3, [sp, #4]
 80a420e:	bd08      	pop	{r3, pc}
 80a4210:	080601a0 	.word	0x080601a0

080a4214 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a4214:	b508      	push	{r3, lr}
 80a4216:	4b02      	ldr	r3, [pc, #8]	; (80a4220 <abort+0xc>)
 80a4218:	681b      	ldr	r3, [r3, #0]
 80a421a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a421c:	9301      	str	r3, [sp, #4]
 80a421e:	bd08      	pop	{r3, pc}
 80a4220:	080601a0 	.word	0x080601a0

080a4224 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a4224:	b508      	push	{r3, lr}
 80a4226:	4b02      	ldr	r3, [pc, #8]	; (80a4230 <_malloc_r+0xc>)
 80a4228:	681b      	ldr	r3, [r3, #0]
 80a422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a422c:	9301      	str	r3, [sp, #4]
 80a422e:	bd08      	pop	{r3, pc}
 80a4230:	080601a0 	.word	0x080601a0

080a4234 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
 80a4234:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
 80a4238:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
 80a423a:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 80a423e:	4610      	mov	r0, r2
 80a4240:	2901      	cmp	r1, #1
 80a4242:	d104      	bne.n	80a424e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
 80a4244:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80a4248:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80a424c:	e004      	b.n	80a4258 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
 80a424e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80a4250:	bf04      	itt	eq
 80a4252:	f852 1c04 	ldreq.w	r1, [r2, #-4]
 80a4256:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
 80a4258:	3b01      	subs	r3, #1
 80a425a:	f102 0210 	add.w	r2, r2, #16
 80a425e:	d1ec      	bne.n	80a423a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
 80a4260:	4770      	bx	lr

080a4262 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 80a4262:	b40e      	push	{r1, r2, r3}
 80a4264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4268:	b087      	sub	sp, #28
 80a426a:	af00      	add	r7, sp, #0
 80a426c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80a4270:	f854 6b04 	ldr.w	r6, [r4], #4
 80a4274:	4605      	mov	r5, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a4276:	4623      	mov	r3, r4
 80a4278:	4632      	mov	r2, r6
 80a427a:	2110      	movs	r1, #16
 80a427c:	f107 0008 	add.w	r0, r7, #8
}

void spark::JSONWriter::printf(const char *fmt, ...) {
    char buf[16];
    va_list args;
    va_start(args, fmt);
 80a4280:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a4282:	f7ff ffbf 	bl	80a4204 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80a4286:	280f      	cmp	r0, #15
 80a4288:	d916      	bls.n	80a42b8 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
 80a428a:	f100 0308 	add.w	r3, r0, #8
 80a428e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 80a4292:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
 80a4294:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a4298:	4632      	mov	r2, r6
 80a429a:	1c41      	adds	r1, r0, #1
 80a429c:	4623      	mov	r3, r4
 80a429e:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
 80a42a0:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a42a2:	f7ff ffaf 	bl	80a4204 <vsnprintf>
        va_end(args);
        if (n > 0) {
 80a42a6:	1e02      	subs	r2, r0, #0
 80a42a8:	dd04      	ble.n	80a42b4 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80a42aa:	682b      	ldr	r3, [r5, #0]
 80a42ac:	4669      	mov	r1, sp
 80a42ae:	689b      	ldr	r3, [r3, #8]
 80a42b0:	4628      	mov	r0, r5
 80a42b2:	4798      	blx	r3
 80a42b4:	46c5      	mov	sp, r8
 80a42b6:	e007      	b.n	80a42c8 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
 80a42b8:	b130      	cbz	r0, 80a42c8 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
 80a42ba:	682b      	ldr	r3, [r5, #0]
 80a42bc:	4602      	mov	r2, r0
 80a42be:	689b      	ldr	r3, [r3, #8]
 80a42c0:	f107 0108 	add.w	r1, r7, #8
 80a42c4:	4628      	mov	r0, r5
 80a42c6:	4798      	blx	r3
    }
}
 80a42c8:	371c      	adds	r7, #28
 80a42ca:	46bd      	mov	sp, r7
 80a42cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a42d0:	b003      	add	sp, #12
 80a42d2:	4770      	bx	lr

080a42d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a42d4:	b510      	push	{r4, lr}
 80a42d6:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a42d8:	6803      	ldr	r3, [r0, #0]
 80a42da:	689b      	ldr	r3, [r3, #8]
 80a42dc:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a42de:	68a3      	ldr	r3, [r4, #8]
 80a42e0:	3b01      	subs	r3, #1
 80a42e2:	60a3      	str	r3, [r4, #8]
 80a42e4:	b92b      	cbnz	r3, 80a42f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12+0x1e>
            _M_destroy();
 80a42e6:	6823      	ldr	r3, [r4, #0]
 80a42e8:	4620      	mov	r0, r4
        }
    }
 80a42ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a42ee:	68db      	ldr	r3, [r3, #12]
 80a42f0:	4718      	bx	r3
 80a42f2:	bd10      	pop	{r4, pc}

080a42f4 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80a42f4:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 80a42f6:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80a42f8:	ab02      	add	r3, sp, #8
 80a42fa:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 80a42fe:	6894      	ldr	r4, [r2, #8]
 80a4300:	4619      	mov	r1, r3
 80a4302:	2201      	movs	r2, #1
 80a4304:	47a0      	blx	r4
}
 80a4306:	b002      	add	sp, #8
 80a4308:	bd10      	pop	{r4, pc}

080a430a <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
 80a430a:	6883      	ldr	r3, [r0, #8]
 80a430c:	b1fb      	cbz	r3, 80a434e <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
 80a430e:	781a      	ldrb	r2, [r3, #0]
 80a4310:	2a03      	cmp	r2, #3
 80a4312:	d81a      	bhi.n	80a434a <_ZNK5spark9JSONValue4typeEv+0x40>
 80a4314:	e8df f002 	tbb	[pc, r2]
 80a4318:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
 80a431c:	2005      	movs	r0, #5
 80a431e:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
 80a4320:	6802      	ldr	r2, [r0, #0]
 80a4322:	685b      	ldr	r3, [r3, #4]
 80a4324:	6852      	ldr	r2, [r2, #4]
 80a4326:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80a4328:	282d      	cmp	r0, #45	; 0x2d
 80a432a:	d014      	beq.n	80a4356 <_ZNK5spark9JSONValue4typeEv+0x4c>
 80a432c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a4330:	2b09      	cmp	r3, #9
 80a4332:	d910      	bls.n	80a4356 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80a4334:	2874      	cmp	r0, #116	; 0x74
 80a4336:	d010      	beq.n	80a435a <_ZNK5spark9JSONValue4typeEv+0x50>
 80a4338:	2866      	cmp	r0, #102	; 0x66
 80a433a:	d00e      	beq.n	80a435a <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
 80a433c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80a4340:	4258      	negs	r0, r3
 80a4342:	4158      	adcs	r0, r3
 80a4344:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
 80a4346:	2006      	movs	r0, #6
 80a4348:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
 80a434a:	2000      	movs	r0, #0
 80a434c:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
 80a434e:	4618      	mov	r0, r3
 80a4350:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
 80a4352:	2004      	movs	r0, #4
 80a4354:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
 80a4356:	2003      	movs	r0, #3
 80a4358:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
 80a435a:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
 80a435c:	4770      	bx	lr

080a435e <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
 80a435e:	b510      	push	{r4, lr}
 80a4360:	4604      	mov	r4, r0
    switch (type()) {
 80a4362:	f7ff ffd2 	bl	80a430a <_ZNK5spark9JSONValue4typeEv>
 80a4366:	2802      	cmp	r0, #2
 80a4368:	d00d      	beq.n	80a4386 <_ZNK5spark9JSONValue5toIntEv+0x28>
 80a436a:	d316      	bcc.n	80a439a <_ZNK5spark9JSONValue5toIntEv+0x3c>
 80a436c:	2804      	cmp	r0, #4
 80a436e:	d814      	bhi.n	80a439a <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
 80a4370:	6822      	ldr	r2, [r4, #0]
 80a4372:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
 80a4374:	6850      	ldr	r0, [r2, #4]
 80a4376:	685b      	ldr	r3, [r3, #4]
 80a4378:	220a      	movs	r2, #10
 80a437a:	2100      	movs	r1, #0
 80a437c:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
 80a437e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
 80a4382:	f006 b8ab 	b.w	80aa4dc <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
 80a4386:	6822      	ldr	r2, [r4, #0]
 80a4388:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a438a:	6852      	ldr	r2, [r2, #4]
 80a438c:	685b      	ldr	r3, [r3, #4]
 80a438e:	5cd0      	ldrb	r0, [r2, r3]
 80a4390:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a4394:	4258      	negs	r0, r3
 80a4396:	4158      	adcs	r0, r3
 80a4398:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
 80a439a:	2000      	movs	r0, #0
    }
}
 80a439c:	bd10      	pop	{r4, pc}

080a439e <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
 80a439e:	b510      	push	{r4, lr}
    if (!n_) {
 80a43a0:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
 80a43a2:	4604      	mov	r4, r0
    if (!n_) {
 80a43a4:	b15b      	cbz	r3, 80a43be <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
 80a43a6:	6880      	ldr	r0, [r0, #8]
    ++t_;
    v_ = t_; // Value
    --n_;
 80a43a8:	3b01      	subs	r3, #1

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
 80a43aa:	60e0      	str	r0, [r4, #12]
    ++t_;
 80a43ac:	3010      	adds	r0, #16
 80a43ae:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80a43b0:	6120      	str	r0, [r4, #16]
    --n_;
 80a43b2:	6163      	str	r3, [r4, #20]
    if (n_) {
 80a43b4:	b12b      	cbz	r3, 80a43c2 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
 80a43b6:	f7ff ff3d 	bl	80a4234 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80a43ba:	60a0      	str	r0, [r4, #8]
 80a43bc:	e001      	b.n	80a43c2 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
 80a43be:	4618      	mov	r0, r3
 80a43c0:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
 80a43c2:	2001      	movs	r0, #1
}
 80a43c4:	bd10      	pop	{r4, pc}

080a43c6 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
 80a43c6:	b510      	push	{r4, lr}
 80a43c8:	4604      	mov	r4, r0
    write('}');
 80a43ca:	217d      	movs	r1, #125	; 0x7d
 80a43cc:	f7ff ff92 	bl	80a42f4 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80a43d0:	2301      	movs	r3, #1
 80a43d2:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a43d4:	4620      	mov	r0, r4
 80a43d6:	bd10      	pop	{r4, pc}

080a43d8 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
 80a43d8:	b508      	push	{r3, lr}
    switch (state_) {
 80a43da:	7903      	ldrb	r3, [r0, #4]
 80a43dc:	2b01      	cmp	r3, #1
 80a43de:	d002      	beq.n	80a43e6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80a43e0:	2b02      	cmp	r3, #2
 80a43e2:	d002      	beq.n	80a43ea <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
 80a43e4:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
 80a43e6:	212c      	movs	r1, #44	; 0x2c
 80a43e8:	e000      	b.n	80a43ec <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
 80a43ea:	213a      	movs	r1, #58	; 0x3a
 80a43ec:	f7ff ff82 	bl	80a42f4 <_ZN5spark10JSONWriter5writeEc>
 80a43f0:	bd08      	pop	{r3, pc}

080a43f2 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
 80a43f2:	b510      	push	{r4, lr}
 80a43f4:	4604      	mov	r4, r0
    writeSeparator();
 80a43f6:	f7ff ffef 	bl	80a43d8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80a43fa:	4620      	mov	r0, r4
 80a43fc:	217b      	movs	r1, #123	; 0x7b
 80a43fe:	f7ff ff79 	bl	80a42f4 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80a4402:	2300      	movs	r3, #0
 80a4404:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a4406:	4620      	mov	r0, r4
 80a4408:	bd10      	pop	{r4, pc}
	...

080a440c <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
 80a440c:	b538      	push	{r3, r4, r5, lr}
 80a440e:	4604      	mov	r4, r0
 80a4410:	460d      	mov	r5, r1
    writeSeparator();
 80a4412:	f7ff ffe1 	bl	80a43d8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80a4416:	6823      	ldr	r3, [r4, #0]
 80a4418:	4620      	mov	r0, r4
 80a441a:	68db      	ldr	r3, [r3, #12]
 80a441c:	462a      	mov	r2, r5
 80a441e:	4903      	ldr	r1, [pc, #12]	; (80a442c <_ZN5spark10JSONWriter5valueEi+0x20>)
 80a4420:	4798      	blx	r3
    state_ = NEXT;
 80a4422:	2301      	movs	r3, #1
 80a4424:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a4426:	4620      	mov	r0, r4
 80a4428:	bd38      	pop	{r3, r4, r5, pc}
 80a442a:	bf00      	nop
 80a442c:	080aea3d 	.word	0x080aea3d

080a4430 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80a4430:	b538      	push	{r3, r4, r5, lr}
 80a4432:	4604      	mov	r4, r0
 80a4434:	460d      	mov	r5, r1
    writeSeparator();
 80a4436:	f7ff ffcf 	bl	80a43d8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80a443a:	6823      	ldr	r3, [r4, #0]
 80a443c:	4620      	mov	r0, r4
 80a443e:	68db      	ldr	r3, [r3, #12]
 80a4440:	462a      	mov	r2, r5
 80a4442:	4903      	ldr	r1, [pc, #12]	; (80a4450 <_ZN5spark10JSONWriter5valueEj+0x20>)
 80a4444:	4798      	blx	r3
    state_ = NEXT;
 80a4446:	2301      	movs	r3, #1
 80a4448:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a444a:	4620      	mov	r0, r4
 80a444c:	bd38      	pop	{r3, r4, r5, pc}
 80a444e:	bf00      	nop
 80a4450:	080ae269 	.word	0x080ae269

080a4454 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a4454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4456:	460d      	mov	r5, r1
 80a4458:	4617      	mov	r7, r2
    write('"');
 80a445a:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a445c:	4604      	mov	r4, r0
    write('"');
 80a445e:	f7ff ff49 	bl	80a42f4 <_ZN5spark10JSONWriter5writeEc>
 80a4462:	462a      	mov	r2, r5
    const char* const end = str + size;
 80a4464:	4629      	mov	r1, r5
 80a4466:	442f      	add	r7, r5
    const char *s = str;
    while (s != end) {
 80a4468:	42ba      	cmp	r2, r7
 80a446a:	d038      	beq.n	80a44de <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
 80a446c:	4616      	mov	r6, r2
 80a446e:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80a4472:	2d22      	cmp	r5, #34	; 0x22
 80a4474:	d003      	beq.n	80a447e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 80a4476:	2d5c      	cmp	r5, #92	; 0x5c
 80a4478:	d001      	beq.n	80a447e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 80a447a:	2d1f      	cmp	r5, #31
 80a447c:	d82d      	bhi.n	80a44da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
 80a447e:	6823      	ldr	r3, [r4, #0]
 80a4480:	1a52      	subs	r2, r2, r1
 80a4482:	689b      	ldr	r3, [r3, #8]
 80a4484:	4620      	mov	r0, r4
 80a4486:	4798      	blx	r3
            write('\\');
 80a4488:	215c      	movs	r1, #92	; 0x5c
 80a448a:	4620      	mov	r0, r4
 80a448c:	f7ff ff32 	bl	80a42f4 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80a4490:	2d0c      	cmp	r5, #12
 80a4492:	d019      	beq.n	80a44c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
 80a4494:	d807      	bhi.n	80a44a6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
 80a4496:	2d09      	cmp	r5, #9
 80a4498:	d00f      	beq.n	80a44ba <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
 80a449a:	2d0a      	cmp	r5, #10
 80a449c:	d012      	beq.n	80a44c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
 80a449e:	2d08      	cmp	r5, #8
 80a44a0:	d114      	bne.n	80a44cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 80a44a2:	2162      	movs	r1, #98	; 0x62
 80a44a4:	e00a      	b.n	80a44bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
 80a44a6:	2d22      	cmp	r5, #34	; 0x22
 80a44a8:	d005      	beq.n	80a44b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a44aa:	2d5c      	cmp	r5, #92	; 0x5c
 80a44ac:	d003      	beq.n	80a44b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a44ae:	2d0d      	cmp	r5, #13
 80a44b0:	d10c      	bne.n	80a44cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
 80a44b2:	2172      	movs	r1, #114	; 0x72
 80a44b4:	e002      	b.n	80a44bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
 80a44b6:	4629      	mov	r1, r5
 80a44b8:	e000      	b.n	80a44bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
 80a44ba:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 80a44bc:	4620      	mov	r0, r4
 80a44be:	f7ff ff19 	bl	80a42f4 <_ZN5spark10JSONWriter5writeEc>
                break;
 80a44c2:	e009      	b.n	80a44d8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
 80a44c4:	216e      	movs	r1, #110	; 0x6e
 80a44c6:	e7f9      	b.n	80a44bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
 80a44c8:	2166      	movs	r1, #102	; 0x66
 80a44ca:	e7f7      	b.n	80a44bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80a44cc:	6823      	ldr	r3, [r4, #0]
 80a44ce:	462a      	mov	r2, r5
 80a44d0:	68db      	ldr	r3, [r3, #12]
 80a44d2:	4909      	ldr	r1, [pc, #36]	; (80a44f8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
 80a44d4:	4620      	mov	r0, r4
 80a44d6:	4798      	blx	r3
                break;
            }
            str = s + 1;
 80a44d8:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
 80a44da:	4632      	mov	r2, r6
 80a44dc:	e7c4      	b.n	80a4468 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
 80a44de:	4291      	cmp	r1, r2
 80a44e0:	d004      	beq.n	80a44ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
 80a44e2:	6823      	ldr	r3, [r4, #0]
 80a44e4:	1a52      	subs	r2, r2, r1
 80a44e6:	689d      	ldr	r5, [r3, #8]
 80a44e8:	4620      	mov	r0, r4
 80a44ea:	47a8      	blx	r5
    }
    write('"');
 80a44ec:	2122      	movs	r1, #34	; 0x22
 80a44ee:	4620      	mov	r0, r4
 80a44f0:	f7ff ff00 	bl	80a42f4 <_ZN5spark10JSONWriter5writeEc>
 80a44f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a44f6:	bf00      	nop
 80a44f8:	080ae274 	.word	0x080ae274

080a44fc <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80a44fc:	b570      	push	{r4, r5, r6, lr}
 80a44fe:	4604      	mov	r4, r0
 80a4500:	460d      	mov	r5, r1
 80a4502:	4616      	mov	r6, r2
    writeSeparator();
 80a4504:	f7ff ff68 	bl	80a43d8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80a4508:	4620      	mov	r0, r4
 80a450a:	4632      	mov	r2, r6
 80a450c:	4629      	mov	r1, r5
 80a450e:	f7ff ffa1 	bl	80a4454 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80a4512:	2302      	movs	r3, #2
 80a4514:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a4516:	4620      	mov	r0, r4
 80a4518:	bd70      	pop	{r4, r5, r6, pc}

080a451a <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80a451a:	b570      	push	{r4, r5, r6, lr}
 80a451c:	4604      	mov	r4, r0
 80a451e:	460d      	mov	r5, r1
 80a4520:	4616      	mov	r6, r2
    writeSeparator();
 80a4522:	f7ff ff59 	bl	80a43d8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80a4526:	4620      	mov	r0, r4
 80a4528:	4632      	mov	r2, r6
 80a452a:	4629      	mov	r1, r5
 80a452c:	f7ff ff92 	bl	80a4454 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80a4530:	2301      	movs	r3, #1
 80a4532:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a4534:	4620      	mov	r0, r4
 80a4536:	bd70      	pop	{r4, r5, r6, pc}

080a4538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a4538:	b510      	push	{r4, lr}
 80a453a:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
 80a453c:	6800      	ldr	r0, [r0, #0]
 80a453e:	b128      	cbz	r0, 80a454c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a4540:	6843      	ldr	r3, [r0, #4]
 80a4542:	3b01      	subs	r3, #1
 80a4544:	6043      	str	r3, [r0, #4]
 80a4546:	b90b      	cbnz	r3, 80a454c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
 80a4548:	f7ff fec4 	bl	80a42d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a454c:	4620      	mov	r0, r4
 80a454e:	bd10      	pop	{r4, pc}

080a4550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
 80a4550:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a4552:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
 80a4554:	6803      	ldr	r3, [r0, #0]
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
 80a4556:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
 80a4558:	429c      	cmp	r4, r3
 80a455a:	d00c      	beq.n	80a4576 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
 80a455c:	b114      	cbz	r4, 80a4564 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a455e:	6863      	ldr	r3, [r4, #4]
 80a4560:	3301      	adds	r3, #1
 80a4562:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 80a4564:	6828      	ldr	r0, [r5, #0]
 80a4566:	b128      	cbz	r0, 80a4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a4568:	6843      	ldr	r3, [r0, #4]
 80a456a:	3b01      	subs	r3, #1
 80a456c:	6043      	str	r3, [r0, #4]
 80a456e:	b90b      	cbnz	r3, 80a4574 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
 80a4570:	f7ff feb0 	bl	80a42d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 80a4574:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
 80a4576:	4628      	mov	r0, r5
 80a4578:	bd38      	pop	{r3, r4, r5, pc}
	...

080a457c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a457c:	b510      	push	{r4, lr}
 80a457e:	4604      	mov	r4, r0

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80a4580:	2300      	movs	r3, #0
 80a4582:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a4584:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
 80a4586:	4810      	ldr	r0, [pc, #64]	; (80a45c8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
 80a4588:	60e3      	str	r3, [r4, #12]
 80a458a:	60a0      	str	r0, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80a458c:	b1d1      	cbz	r1, 80a45c4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
 80a458e:	780b      	ldrb	r3, [r1, #0]
 80a4590:	2b03      	cmp	r3, #3
 80a4592:	d006      	beq.n	80a45a2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 80a4594:	b9b3      	cbnz	r3, 80a45c4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80a4596:	6813      	ldr	r3, [r2, #0]
 80a4598:	6858      	ldr	r0, [r3, #4]
 80a459a:	684b      	ldr	r3, [r1, #4]
 80a459c:	5cc3      	ldrb	r3, [r0, r3]
 80a459e:	2b6e      	cmp	r3, #110	; 0x6e
 80a45a0:	d008      	beq.n	80a45b4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
 80a45a2:	6813      	ldr	r3, [r2, #0]
 80a45a4:	6858      	ldr	r0, [r3, #4]
 80a45a6:	684b      	ldr	r3, [r1, #4]
 80a45a8:	4403      	add	r3, r0
 80a45aa:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
 80a45ac:	688b      	ldr	r3, [r1, #8]
 80a45ae:	6849      	ldr	r1, [r1, #4]
 80a45b0:	1a5b      	subs	r3, r3, r1
 80a45b2:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a45b4:	4611      	mov	r1, r2
 80a45b6:	4620      	mov	r0, r4
 80a45b8:	f851 3b04 	ldr.w	r3, [r1], #4
 80a45bc:	f840 3b04 	str.w	r3, [r0], #4
 80a45c0:	f7ff ffc6 	bl	80a4550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
 80a45c4:	4620      	mov	r0, r4
 80a45c6:	bd10      	pop	{r4, pc}
 80a45c8:	080ae498 	.word	0x080ae498

080a45cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80a45cc:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a45ce:	b510      	push	{r4, lr}
 80a45d0:	4604      	mov	r4, r0
 80a45d2:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a45d4:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
 80a45d6:	6083      	str	r3, [r0, #8]
 80a45d8:	60c3      	str	r3, [r0, #12]
 80a45da:	6103      	str	r3, [r0, #16]
 80a45dc:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
 80a45de:	b171      	cbz	r1, 80a45fe <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
 80a45e0:	780b      	ldrb	r3, [r1, #0]
 80a45e2:	2b01      	cmp	r3, #1
 80a45e4:	d10b      	bne.n	80a45fe <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
 80a45e6:	f101 0310 	add.w	r3, r1, #16
 80a45ea:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
 80a45ec:	68cb      	ldr	r3, [r1, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a45ee:	4611      	mov	r1, r2
 80a45f0:	6143      	str	r3, [r0, #20]
 80a45f2:	f851 3b04 	ldr.w	r3, [r1], #4
 80a45f6:	f840 3b04 	str.w	r3, [r0], #4
 80a45fa:	f7ff ffa9 	bl	80a4550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
 80a45fe:	4620      	mov	r0, r4
 80a4600:	bd10      	pop	{r4, pc}

080a4602 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80a4602:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a4604:	b510      	push	{r4, lr}
 80a4606:	4604      	mov	r4, r0
 80a4608:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a460a:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
 80a460c:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
 80a460e:	b131      	cbz	r1, 80a461e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a4610:	4611      	mov	r1, r2
 80a4612:	f851 3b04 	ldr.w	r3, [r1], #4
 80a4616:	f840 3b04 	str.w	r3, [r0], #4
 80a461a:	f7ff ff99 	bl	80a4550 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
 80a461e:	4620      	mov	r0, r4
 80a4620:	bd10      	pop	{r4, pc}

080a4622 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a4622:	2300      	movs	r3, #0
 80a4624:	461a      	mov	r2, r3
 80a4626:	6840      	ldr	r0, [r0, #4]
 80a4628:	f7ff bd18 	b.w	80a405c <network_connect>

080a462c <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a462c:	2200      	movs	r2, #0
 80a462e:	2102      	movs	r1, #2
 80a4630:	6840      	ldr	r0, [r0, #4]
 80a4632:	f7ff bd23 	b.w	80a407c <network_disconnect>

080a4636 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a4636:	2200      	movs	r2, #0
 80a4638:	4611      	mov	r1, r2
 80a463a:	6840      	ldr	r0, [r0, #4]
 80a463c:	f7ff bd16 	b.w	80a406c <network_connecting>

080a4640 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a4640:	2200      	movs	r2, #0
 80a4642:	4611      	mov	r1, r2
 80a4644:	6840      	ldr	r0, [r0, #4]
 80a4646:	f7ff bd21 	b.w	80a408c <network_ready>

080a464a <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a464a:	2300      	movs	r3, #0
 80a464c:	461a      	mov	r2, r3
 80a464e:	4619      	mov	r1, r3
 80a4650:	6840      	ldr	r0, [r0, #4]
 80a4652:	f7ff bd23 	b.w	80a409c <network_on>

080a4656 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a4656:	2300      	movs	r3, #0
 80a4658:	461a      	mov	r2, r3
 80a465a:	4619      	mov	r1, r3
 80a465c:	6840      	ldr	r0, [r0, #4]
 80a465e:	f7ff bd25 	b.w	80a40ac <network_off>

080a4662 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a4662:	2200      	movs	r2, #0
 80a4664:	f081 0101 	eor.w	r1, r1, #1
 80a4668:	6840      	ldr	r0, [r0, #4]
 80a466a:	f7ff bd27 	b.w	80a40bc <network_listen>

080a466e <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a466e:	2200      	movs	r2, #0
 80a4670:	6840      	ldr	r0, [r0, #4]
 80a4672:	f7ff bd33 	b.w	80a40dc <network_set_listen_timeout>

080a4676 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a4676:	2200      	movs	r2, #0
 80a4678:	4611      	mov	r1, r2
 80a467a:	6840      	ldr	r0, [r0, #4]
 80a467c:	f7ff bd36 	b.w	80a40ec <network_get_listen_timeout>

080a4680 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a4680:	2200      	movs	r2, #0
 80a4682:	4611      	mov	r1, r2
 80a4684:	6840      	ldr	r0, [r0, #4]
 80a4686:	f7ff bd21 	b.w	80a40cc <network_listening>
	...

080a468c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a468c:	b570      	push	{r4, r5, r6, lr}
 80a468e:	4616      	mov	r6, r2
 80a4690:	b08e      	sub	sp, #56	; 0x38
 80a4692:	4604      	mov	r4, r0
    IPAddress addr;
 80a4694:	a808      	add	r0, sp, #32
 80a4696:	f000 fb0b 	bl	80a4cb0 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a469a:	2211      	movs	r2, #17
 80a469c:	2100      	movs	r1, #0
 80a469e:	a803      	add	r0, sp, #12
 80a46a0:	f004 fa77 	bl	80a8b92 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a46a4:	4630      	mov	r0, r6
 80a46a6:	f005 f839 	bl	80a971c <strlen>
 80a46aa:	2500      	movs	r5, #0
 80a46ac:	4b0a      	ldr	r3, [pc, #40]	; (80a46d8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a46ae:	9500      	str	r5, [sp, #0]
 80a46b0:	b281      	uxth	r1, r0
 80a46b2:	685b      	ldr	r3, [r3, #4]
 80a46b4:	aa03      	add	r2, sp, #12
 80a46b6:	4630      	mov	r0, r6
 80a46b8:	f7ff fa76 	bl	80a3ba8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a46bc:	b120      	cbz	r0, 80a46c8 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a46be:	4629      	mov	r1, r5
 80a46c0:	4620      	mov	r0, r4
 80a46c2:	f000 fb15 	bl	80a4cf0 <_ZN9IPAddressC1Em>
 80a46c6:	e003      	b.n	80a46d0 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a46c8:	a903      	add	r1, sp, #12
 80a46ca:	4620      	mov	r0, r4
 80a46cc:	f000 fafe 	bl	80a4ccc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a46d0:	4620      	mov	r0, r4
 80a46d2:	b00e      	add	sp, #56	; 0x38
 80a46d4:	bd70      	pop	{r4, r5, r6, pc}
 80a46d6:	bf00      	nop
 80a46d8:	20000260 	.word	0x20000260

080a46dc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a46dc:	4b02      	ldr	r3, [pc, #8]	; (80a46e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a46de:	4a03      	ldr	r2, [pc, #12]	; (80a46ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a46e0:	601a      	str	r2, [r3, #0]
 80a46e2:	2200      	movs	r2, #0
 80a46e4:	605a      	str	r2, [r3, #4]
 80a46e6:	4770      	bx	lr
 80a46e8:	20000258 	.word	0x20000258
 80a46ec:	080ae284 	.word	0x080ae284

080a46f0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a46f0:	2200      	movs	r2, #0
 80a46f2:	4611      	mov	r1, r2
 80a46f4:	6840      	ldr	r0, [r0, #4]
 80a46f6:	f7ff bcc9 	b.w	80a408c <network_ready>

080a46fa <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a46fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a46fc:	4616      	mov	r6, r2
 80a46fe:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a4700:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a4702:	460f      	mov	r7, r1
 80a4704:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a4706:	2100      	movs	r1, #0
 80a4708:	a803      	add	r0, sp, #12
 80a470a:	f004 fa42 	bl	80a8b92 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a470e:	4630      	mov	r0, r6
 80a4710:	f005 f804 	bl	80a971c <strlen>
 80a4714:	2500      	movs	r5, #0
 80a4716:	9500      	str	r5, [sp, #0]
 80a4718:	b281      	uxth	r1, r0
 80a471a:	687b      	ldr	r3, [r7, #4]
 80a471c:	aa03      	add	r2, sp, #12
 80a471e:	4630      	mov	r0, r6
 80a4720:	f7ff fa42 	bl	80a3ba8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4724:	b120      	cbz	r0, 80a4730 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a4726:	4629      	mov	r1, r5
 80a4728:	4620      	mov	r0, r4
 80a472a:	f000 fae1 	bl	80a4cf0 <_ZN9IPAddressC1Em>
 80a472e:	e003      	b.n	80a4738 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a4730:	a903      	add	r1, sp, #12
 80a4732:	4620      	mov	r0, r4
 80a4734:	f000 faca 	bl	80a4ccc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a4738:	4620      	mov	r0, r4
 80a473a:	b009      	add	sp, #36	; 0x24
 80a473c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a473e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a473e:	2200      	movs	r2, #0
 80a4740:	4611      	mov	r1, r2
 80a4742:	6840      	ldr	r0, [r0, #4]
 80a4744:	f7ff bcc2 	b.w	80a40cc <network_listening>

080a4748 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a4748:	2200      	movs	r2, #0
 80a474a:	4611      	mov	r1, r2
 80a474c:	6840      	ldr	r0, [r0, #4]
 80a474e:	f7ff bccd 	b.w	80a40ec <network_get_listen_timeout>

080a4752 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a4752:	2200      	movs	r2, #0
 80a4754:	6840      	ldr	r0, [r0, #4]
 80a4756:	f7ff bcc1 	b.w	80a40dc <network_set_listen_timeout>

080a475a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a475a:	2200      	movs	r2, #0
 80a475c:	f081 0101 	eor.w	r1, r1, #1
 80a4760:	6840      	ldr	r0, [r0, #4]
 80a4762:	f7ff bcab 	b.w	80a40bc <network_listen>

080a4766 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a4766:	2300      	movs	r3, #0
 80a4768:	461a      	mov	r2, r3
 80a476a:	4619      	mov	r1, r3
 80a476c:	6840      	ldr	r0, [r0, #4]
 80a476e:	f7ff bc9d 	b.w	80a40ac <network_off>

080a4772 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a4772:	2300      	movs	r3, #0
 80a4774:	461a      	mov	r2, r3
 80a4776:	4619      	mov	r1, r3
 80a4778:	6840      	ldr	r0, [r0, #4]
 80a477a:	f7ff bc8f 	b.w	80a409c <network_on>

080a477e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a477e:	2200      	movs	r2, #0
 80a4780:	4611      	mov	r1, r2
 80a4782:	6840      	ldr	r0, [r0, #4]
 80a4784:	f7ff bc72 	b.w	80a406c <network_connecting>

080a4788 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a4788:	2200      	movs	r2, #0
 80a478a:	2102      	movs	r1, #2
 80a478c:	6840      	ldr	r0, [r0, #4]
 80a478e:	f7ff bc75 	b.w	80a407c <network_disconnect>

080a4792 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a4792:	2300      	movs	r3, #0
 80a4794:	461a      	mov	r2, r3
 80a4796:	6840      	ldr	r0, [r0, #4]
 80a4798:	f7ff bc60 	b.w	80a405c <network_connect>

080a479c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a479c:	4b02      	ldr	r3, [pc, #8]	; (80a47a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a479e:	2204      	movs	r2, #4
 80a47a0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a47a2:	4a02      	ldr	r2, [pc, #8]	; (80a47ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a47a4:	601a      	str	r2, [r3, #0]
 80a47a6:	4770      	bx	lr
 80a47a8:	20000260 	.word	0x20000260
 80a47ac:	080ae2b8 	.word	0x080ae2b8

080a47b0 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a47b0:	4770      	bx	lr

080a47b2 <_ZN8SPIClassD0Ev>:
 80a47b2:	b510      	push	{r4, lr}
 80a47b4:	4604      	mov	r4, r0
 80a47b6:	2110      	movs	r1, #16
 80a47b8:	f002 fb1c 	bl	80a6df4 <_ZdlPvj>
 80a47bc:	4620      	mov	r0, r4
 80a47be:	bd10      	pop	{r4, pc}

080a47c0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a47c0:	b570      	push	{r4, r5, r6, lr}
 80a47c2:	4604      	mov	r4, r0
 80a47c4:	460e      	mov	r6, r1
 80a47c6:	4b07      	ldr	r3, [pc, #28]	; (80a47e4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a47c8:	2500      	movs	r5, #0
 80a47ca:	6003      	str	r3, [r0, #0]
 80a47cc:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a47d0:	f7ff faec 	bl	80a3dac <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a47d4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a47d6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a47d8:	f7ff fb70 	bl	80a3ebc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a47dc:	60a5      	str	r5, [r4, #8]
}
 80a47de:	4620      	mov	r0, r4
 80a47e0:	bd70      	pop	{r4, r5, r6, pc}
 80a47e2:	bf00      	nop
 80a47e4:	080ae2ec 	.word	0x080ae2ec

080a47e8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a47e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a47ec:	7900      	ldrb	r0, [r0, #4]
 80a47ee:	f7ff bb3d 	b.w	80a3e6c <HAL_SPI_Begin>

080a47f2 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a47f2:	7900      	ldrb	r0, [r0, #4]
 80a47f4:	f7ff bb42 	b.w	80a3e7c <HAL_SPI_Set_Bit_Order>

080a47f8 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a47f8:	7900      	ldrb	r0, [r0, #4]
 80a47fa:	f7ff bb47 	b.w	80a3e8c <HAL_SPI_Set_Data_Mode>

080a47fe <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
 80a47fe:	68c0      	ldr	r0, [r0, #12]
 80a4800:	f7ff bae4 	b.w	80a3dcc <os_mutex_unlock>

080a4804 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a4804:	4a05      	ldr	r2, [pc, #20]	; (80a481c <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a4806:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a4808:	5c99      	ldrb	r1, [r3, r2]
 80a480a:	4281      	cmp	r1, r0
 80a480c:	d002      	beq.n	80a4814 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a480e:	3301      	adds	r3, #1
 80a4810:	2b08      	cmp	r3, #8
 80a4812:	d1f9      	bne.n	80a4808 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a4814:	1c58      	adds	r0, r3, #1
}
 80a4816:	b2c0      	uxtb	r0, r0
 80a4818:	4770      	bx	lr
 80a481a:	bf00      	nop
 80a481c:	080ae2f4 	.word	0x080ae2f4

080a4820 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a4820:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a4822:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a4824:	6018      	str	r0, [r3, #0]
 80a4826:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a4828:	6818      	ldr	r0, [r3, #0]
 80a482a:	b2e5      	uxtb	r5, r4
 80a482c:	4288      	cmp	r0, r1
 80a482e:	d906      	bls.n	80a483e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a4830:	3401      	adds	r4, #1
 80a4832:	2c08      	cmp	r4, #8
 80a4834:	d002      	beq.n	80a483c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a4836:	0840      	lsrs	r0, r0, #1
 80a4838:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a483a:	e7f5      	b.n	80a4828 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a483c:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a483e:	4b02      	ldr	r3, [pc, #8]	; (80a4848 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a4840:	5d5b      	ldrb	r3, [r3, r5]
 80a4842:	7013      	strb	r3, [r2, #0]
 80a4844:	bd30      	pop	{r4, r5, pc}
 80a4846:	bf00      	nop
 80a4848:	080ae2f4 	.word	0x080ae2f4

080a484c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 80a484c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a4850:	4680      	mov	r8, r0
 80a4852:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
 80a4854:	68c0      	ldr	r0, [r0, #12]
 80a4856:	460f      	mov	r7, r1
 80a4858:	f7ff fab0 	bl	80a3dbc <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
 80a485c:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a4860:	2214      	movs	r2, #20
 80a4862:	2100      	movs	r1, #0
 80a4864:	a809      	add	r0, sp, #36	; 0x24
 80a4866:	f004 f994 	bl	80a8b92 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a486a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a486c:	4620      	mov	r0, r4
 80a486e:	2200      	movs	r2, #0
 80a4870:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a4872:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
 80a4876:	f7ff fb31 	bl	80a3edc <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
 80a487a:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 80a487e:	b14c      	cbz	r4, 80a4894 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 80a4880:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a4884:	b92d      	cbnz	r5, 80a4892 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 80a4886:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80a4888:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a488c:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 80a4890:	e003      	b.n	80a489a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 80a4892:	2400      	movs	r4, #0
 80a4894:	46a1      	mov	r9, r4
 80a4896:	4626      	mov	r6, r4
 80a4898:	2501      	movs	r5, #1
 80a489a:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a489c:	b10d      	cbz	r5, 80a48a2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 80a489e:	2b00      	cmp	r3, #0
 80a48a0:	d140      	bne.n	80a4924 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
 80a48a2:	429d      	cmp	r5, r3
 80a48a4:	d10b      	bne.n	80a48be <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 80a48a6:	68ba      	ldr	r2, [r7, #8]
 80a48a8:	42b2      	cmp	r2, r6
 80a48aa:	d108      	bne.n	80a48be <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a48ac:	f88d 9020 	strb.w	r9, [sp, #32]
 80a48b0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a48b4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80a48b8:	89ba      	ldrh	r2, [r7, #12]
 80a48ba:	4291      	cmp	r1, r2
 80a48bc:	d032      	beq.n	80a4924 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
 80a48be:	bb23      	cbnz	r3, 80a490a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
 80a48c0:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
 80a48c4:	f10d 020f 	add.w	r2, sp, #15
 80a48c8:	ab04      	add	r3, sp, #16
 80a48ca:	68b9      	ldr	r1, [r7, #8]
 80a48cc:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a48ce:	f7ff ffa7 	bl	80a4820 <_ZN8SPIClass19computeClockDividerEjjRhRj>
 80a48d2:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a48d4:	b105      	cbz	r5, 80a48d8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
 80a48d6:	bb13      	cbnz	r3, 80a491e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
 80a48d8:	42ab      	cmp	r3, r5
 80a48da:	d009      	beq.n	80a48f0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
 80a48dc:	2100      	movs	r1, #0
 80a48de:	7b3b      	ldrb	r3, [r7, #12]
 80a48e0:	9101      	str	r1, [sp, #4]
 80a48e2:	7b7c      	ldrb	r4, [r7, #13]
 80a48e4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a48e8:	f898 0004 	ldrb.w	r0, [r8, #4]
 80a48ec:	9400      	str	r4, [sp, #0]
 80a48ee:	e013      	b.n	80a4918 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
 80a48f0:	68bb      	ldr	r3, [r7, #8]
 80a48f2:	42b3      	cmp	r3, r6
 80a48f4:	d3f2      	bcc.n	80a48dc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a48f6:	f88d 9020 	strb.w	r9, [sp, #32]
 80a48fa:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a48fe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a4902:	89bb      	ldrh	r3, [r7, #12]
 80a4904:	429a      	cmp	r2, r3
 80a4906:	d1e9      	bne.n	80a48dc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
 80a4908:	e009      	b.n	80a491e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
 80a490a:	2300      	movs	r3, #0
 80a490c:	461a      	mov	r2, r3
 80a490e:	f898 0004 	ldrb.w	r0, [r8, #4]
 80a4912:	9301      	str	r3, [sp, #4]
 80a4914:	9300      	str	r3, [sp, #0]
 80a4916:	2101      	movs	r1, #1
 80a4918:	f7ff faf8 	bl	80a3f0c <HAL_SPI_Set_Settings>
 80a491c:	e002      	b.n	80a4924 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
 80a491e:	9b04      	ldr	r3, [sp, #16]
 80a4920:	42b3      	cmp	r3, r6
 80a4922:	d1db      	bne.n	80a48dc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
 80a4924:	2000      	movs	r0, #0
 80a4926:	b00f      	add	sp, #60	; 0x3c
 80a4928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a492c <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a492c:	b570      	push	{r4, r5, r6, lr}
 80a492e:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a4930:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a4934:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a4936:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a4938:	2214      	movs	r2, #20
 80a493a:	2100      	movs	r1, #0
 80a493c:	a803      	add	r0, sp, #12
 80a493e:	f004 f928 	bl	80a8b92 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a4942:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a4944:	a903      	add	r1, sp, #12
 80a4946:	4630      	mov	r0, r6
 80a4948:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a494a:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a494e:	f7ff fac5 	bl	80a3edc <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a4952:	ab02      	add	r3, sp, #8
 80a4954:	f10d 0207 	add.w	r2, sp, #7
 80a4958:	4629      	mov	r1, r5
 80a495a:	9804      	ldr	r0, [sp, #16]
 80a495c:	f7ff ff60 	bl	80a4820 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a4960:	7920      	ldrb	r0, [r4, #4]
 80a4962:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a4966:	f7ff fa99 	bl	80a3e9c <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a496a:	9802      	ldr	r0, [sp, #8]
 80a496c:	b008      	add	sp, #32
 80a496e:	bd70      	pop	{r4, r5, r6, pc}

080a4970 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a4970:	b538      	push	{r3, r4, r5, lr}
 80a4972:	4604      	mov	r4, r0
    if (dividerReference)
 80a4974:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a4976:	4608      	mov	r0, r1
    if (dividerReference)
 80a4978:	b14d      	cbz	r5, 80a498e <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a497a:	f7ff ff43 	bl	80a4804 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a497e:	2201      	movs	r2, #1
 80a4980:	fa25 f100 	lsr.w	r1, r5, r0
 80a4984:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a4986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a498a:	f7ff bfcf 	b.w	80a492c <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a498e:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a4990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a4994:	f7ff ba82 	b.w	80a3e9c <HAL_SPI_Set_Clock_Divider>

080a4998 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a4998:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a499a:	7900      	ldrb	r0, [r0, #4]
 80a499c:	f7ff fa86 	bl	80a3eac <HAL_SPI_Send_Receive_Data>
}
 80a49a0:	b2c0      	uxtb	r0, r0
 80a49a2:	bd08      	pop	{r3, pc}

080a49a4 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 80a49a4:	b530      	push	{r4, r5, lr}
 80a49a6:	b087      	sub	sp, #28
 80a49a8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a49aa:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 80a49ac:	7900      	ldrb	r0, [r0, #4]
 80a49ae:	9500      	str	r5, [sp, #0]
 80a49b0:	f7ff fa9c 	bl	80a3eec <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 80a49b4:	b93d      	cbnz	r5, 80a49c6 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 80a49b6:	a902      	add	r1, sp, #8
 80a49b8:	7920      	ldrb	r0, [r4, #4]
 80a49ba:	f7ff fa9f 	bl	80a3efc <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 80a49be:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80a49c2:	07db      	lsls	r3, r3, #31
 80a49c4:	d4f7      	bmi.n	80a49b6 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 80a49c6:	b007      	add	sp, #28
 80a49c8:	bd30      	pop	{r4, r5, pc}

080a49ca <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a49ca:	7900      	ldrb	r0, [r0, #4]
 80a49cc:	f7ff ba7e 	b.w	80a3ecc <HAL_SPI_Is_Enabled>

080a49d0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a49d0:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a49d2:	6883      	ldr	r3, [r0, #8]
 80a49d4:	4604      	mov	r4, r0
 80a49d6:	b90b      	cbnz	r3, 80a49dc <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a49d8:	f002 fa41 	bl	80a6e5e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a49dc:	68c3      	ldr	r3, [r0, #12]
 80a49de:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a49e0:	68a3      	ldr	r3, [r4, #8]
 80a49e2:	b11b      	cbz	r3, 80a49ec <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a49e4:	2203      	movs	r2, #3
 80a49e6:	4621      	mov	r1, r4
 80a49e8:	4620      	mov	r0, r4
 80a49ea:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a49ec:	4620      	mov	r0, r4
}
 80a49ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a49f2:	2110      	movs	r1, #16
 80a49f4:	f002 b9fe 	b.w	80a6df4 <_ZdlPvj>

080a49f8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a49f8:	4770      	bx	lr

080a49fa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a49fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a49fc:	4606      	mov	r6, r0
 80a49fe:	4615      	mov	r5, r2
 80a4a00:	460c      	mov	r4, r1
 80a4a02:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4a04:	42bc      	cmp	r4, r7
 80a4a06:	d006      	beq.n	80a4a16 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a4a08:	6833      	ldr	r3, [r6, #0]
 80a4a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a4a0e:	689b      	ldr	r3, [r3, #8]
 80a4a10:	4630      	mov	r0, r6
 80a4a12:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4a14:	e7f6      	b.n	80a4a04 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a4a16:	4628      	mov	r0, r5
 80a4a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a4a1a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a4a1a:	2200      	movs	r2, #0
 80a4a1c:	7c00      	ldrb	r0, [r0, #16]
 80a4a1e:	f7ff b933 	b.w	80a3c88 <HAL_I2C_Write_Data>

080a4a22 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a4a22:	2100      	movs	r1, #0
 80a4a24:	7c00      	ldrb	r0, [r0, #16]
 80a4a26:	f7ff b937 	b.w	80a3c98 <HAL_I2C_Available_Data>

080a4a2a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a4a2a:	2100      	movs	r1, #0
 80a4a2c:	7c00      	ldrb	r0, [r0, #16]
 80a4a2e:	f7ff b93b 	b.w	80a3ca8 <HAL_I2C_Read_Data>

080a4a32 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a4a32:	2100      	movs	r1, #0
 80a4a34:	7c00      	ldrb	r0, [r0, #16]
 80a4a36:	f7ff b93f 	b.w	80a3cb8 <HAL_I2C_Peek_Data>

080a4a3a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a4a3a:	2100      	movs	r1, #0
 80a4a3c:	7c00      	ldrb	r0, [r0, #16]
 80a4a3e:	f7ff b943 	b.w	80a3cc8 <HAL_I2C_Flush_Data>

080a4a42 <_ZN7TwoWireD0Ev>:
 80a4a42:	b510      	push	{r4, lr}
 80a4a44:	4604      	mov	r4, r0
 80a4a46:	2114      	movs	r1, #20
 80a4a48:	f002 f9d4 	bl	80a6df4 <_ZdlPvj>
 80a4a4c:	4620      	mov	r0, r4
 80a4a4e:	bd10      	pop	{r4, pc}

080a4a50 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a4a50:	b510      	push	{r4, lr}
 80a4a52:	4604      	mov	r4, r0
 80a4a54:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a4a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4a5a:	60a3      	str	r3, [r4, #8]
 80a4a5c:	4b04      	ldr	r3, [pc, #16]	; (80a4a70 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a4a5e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a4a60:	7420      	strb	r0, [r4, #16]
 80a4a62:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a4a64:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a4a66:	f7ff f93f 	bl	80a3ce8 <HAL_I2C_Init>

}
 80a4a6a:	4620      	mov	r0, r4
 80a4a6c:	bd10      	pop	{r4, pc}
 80a4a6e:	bf00      	nop
 80a4a70:	080ae304 	.word	0x080ae304

080a4a74 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a4a74:	2300      	movs	r3, #0
 80a4a76:	461a      	mov	r2, r3
 80a4a78:	4619      	mov	r1, r3
 80a4a7a:	7c00      	ldrb	r0, [r0, #16]
 80a4a7c:	f7ff b8e4 	b.w	80a3c48 <HAL_I2C_Begin>

080a4a80 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a4a80:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a4a82:	2400      	movs	r4, #0
 80a4a84:	7c00      	ldrb	r0, [r0, #16]
 80a4a86:	9400      	str	r4, [sp, #0]
 80a4a88:	f7ff f8e6 	bl	80a3c58 <HAL_I2C_Request_Data>
  return result;
}
 80a4a8c:	b2c0      	uxtb	r0, r0
 80a4a8e:	b002      	add	sp, #8
 80a4a90:	bd10      	pop	{r4, pc}

080a4a92 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a4a92:	2301      	movs	r3, #1
 80a4a94:	f7ff bff4 	b.w	80a4a80 <_ZN7TwoWire11requestFromEhhh>

080a4a98 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a4a98:	2200      	movs	r2, #0
 80a4a9a:	7c00      	ldrb	r0, [r0, #16]
 80a4a9c:	f7ff b8e4 	b.w	80a3c68 <HAL_I2C_Begin_Transmission>

080a4aa0 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a4aa0:	2200      	movs	r2, #0
 80a4aa2:	7c00      	ldrb	r0, [r0, #16]
 80a4aa4:	f7ff b8e8 	b.w	80a3c78 <HAL_I2C_End_Transmission>

080a4aa8 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a4aa8:	2101      	movs	r1, #1
 80a4aaa:	f7ff bff9 	b.w	80a4aa0 <_ZN7TwoWire15endTransmissionEh>

080a4aae <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a4aae:	2100      	movs	r1, #0
 80a4ab0:	7c00      	ldrb	r0, [r0, #16]
 80a4ab2:	f7ff b911 	b.w	80a3cd8 <HAL_I2C_Is_Enabled>

080a4ab6 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a4ab6:	7441      	strb	r1, [r0, #17]
 80a4ab8:	4770      	bx	lr

080a4aba <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a4aba:	4770      	bx	lr

080a4abc <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a4abc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a4abe:	2100      	movs	r1, #0
 80a4ac0:	7c00      	ldrb	r0, [r0, #16]
 80a4ac2:	f7ff f8a1 	bl	80a3c08 <HAL_USB_USART_Receive_Data>
}
 80a4ac6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a4aca:	bf28      	it	cs
 80a4acc:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4ad0:	bd08      	pop	{r3, pc}

080a4ad2 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a4ad2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a4ad4:	2101      	movs	r1, #1
 80a4ad6:	7c00      	ldrb	r0, [r0, #16]
 80a4ad8:	f7ff f896 	bl	80a3c08 <HAL_USB_USART_Receive_Data>
}
 80a4adc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a4ae0:	bf28      	it	cs
 80a4ae2:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4ae6:	bd08      	pop	{r3, pc}

080a4ae8 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a4ae8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a4aea:	7c00      	ldrb	r0, [r0, #16]
 80a4aec:	f7ff f884 	bl	80a3bf8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a4af0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4af4:	bd08      	pop	{r3, pc}

080a4af6 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a4af6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a4af8:	7c00      	ldrb	r0, [r0, #16]
 80a4afa:	f7ff f875 	bl	80a3be8 <HAL_USB_USART_Available_Data>
}
 80a4afe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4b02:	bd08      	pop	{r3, pc}

080a4b04 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a4b04:	7c00      	ldrb	r0, [r0, #16]
 80a4b06:	f7ff b88f 	b.w	80a3c28 <HAL_USB_USART_Flush_Data>

080a4b0a <_ZN9USBSerialD0Ev>:
 80a4b0a:	b510      	push	{r4, lr}
 80a4b0c:	4604      	mov	r4, r0
 80a4b0e:	2114      	movs	r1, #20
 80a4b10:	f002 f970 	bl	80a6df4 <_ZdlPvj>
 80a4b14:	4620      	mov	r0, r4
 80a4b16:	bd10      	pop	{r4, pc}

080a4b18 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a4b18:	b538      	push	{r3, r4, r5, lr}
 80a4b1a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4b1c:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a4b1e:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4b20:	f7ff f86a 	bl	80a3bf8 <HAL_USB_USART_Available_Data_For_Write>
 80a4b24:	2800      	cmp	r0, #0
 80a4b26:	dc01      	bgt.n	80a4b2c <_ZN9USBSerial5writeEh+0x14>
 80a4b28:	7c60      	ldrb	r0, [r4, #17]
 80a4b2a:	b128      	cbz	r0, 80a4b38 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a4b2c:	4629      	mov	r1, r5
 80a4b2e:	7c20      	ldrb	r0, [r4, #16]
 80a4b30:	f7ff f872 	bl	80a3c18 <HAL_USB_USART_Send_Data>
 80a4b34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a4b38:	bd38      	pop	{r3, r4, r5, pc}
	...

080a4b3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a4b3c:	b510      	push	{r4, lr}
 80a4b3e:	4604      	mov	r4, r0
 80a4b40:	2300      	movs	r3, #0
 80a4b42:	6063      	str	r3, [r4, #4]
 80a4b44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4b48:	60a3      	str	r3, [r4, #8]
 80a4b4a:	4b05      	ldr	r3, [pc, #20]	; (80a4b60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a4b4c:	4608      	mov	r0, r1
 80a4b4e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a4b50:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a4b52:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a4b54:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a4b56:	4611      	mov	r1, r2
 80a4b58:	f7ff f82e 	bl	80a3bb8 <HAL_USB_USART_Init>
}
 80a4b5c:	4620      	mov	r0, r4
 80a4b5e:	bd10      	pop	{r4, pc}
 80a4b60:	080ae32c 	.word	0x080ae32c

080a4b64 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a4b64:	2200      	movs	r2, #0
 80a4b66:	7c00      	ldrb	r0, [r0, #16]
 80a4b68:	f7ff b82e 	b.w	80a3bc8 <HAL_USB_USART_Begin>

080a4b6c <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
 80a4b6c:	7c00      	ldrb	r0, [r0, #16]
 80a4b6e:	f7ff b833 	b.w	80a3bd8 <HAL_USB_USART_End>

080a4b72 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a4b72:	7c00      	ldrb	r0, [r0, #16]
 80a4b74:	f7ff b860 	b.w	80a3c38 <HAL_USB_USART_Is_Enabled>

080a4b78 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a4b78:	f7ff bffb 	b.w	80a4b72 <_ZN9USBSerial9isEnabledEv>

080a4b7c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a4b7c:	b510      	push	{r4, lr}
 80a4b7e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4b80:	2214      	movs	r2, #20
 80a4b82:	2100      	movs	r1, #0
 80a4b84:	f004 f805 	bl	80a8b92 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a4b88:	4b05      	ldr	r3, [pc, #20]	; (80a4ba0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4b8a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a4b8c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a4b8e:	4b05      	ldr	r3, [pc, #20]	; (80a4ba4 <_Z19acquireSerialBufferv+0x28>)
 80a4b90:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a4b92:	f240 1301 	movw	r3, #257	; 0x101
 80a4b96:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a4b98:	2381      	movs	r3, #129	; 0x81
 80a4b9a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a4b9c:	bd10      	pop	{r4, pc}
 80a4b9e:	bf00      	nop
 80a4ba0:	200002ed 	.word	0x200002ed
 80a4ba4:	2000026c 	.word	0x2000026c

080a4ba8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a4ba8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4baa:	4d0e      	ldr	r5, [pc, #56]	; (80a4be4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a4bac:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a4bae:	a801      	add	r0, sp, #4
 80a4bb0:	f7ff ffe4 	bl	80a4b7c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a4bb4:	6829      	ldr	r1, [r5, #0]
 80a4bb6:	f011 0401 	ands.w	r4, r1, #1
 80a4bba:	d110      	bne.n	80a4bde <_Z16_fetch_usbserialv+0x36>
 80a4bbc:	4628      	mov	r0, r5
 80a4bbe:	f7fb fa7f 	bl	80a00c0 <__cxa_guard_acquire>
 80a4bc2:	b160      	cbz	r0, 80a4bde <_Z16_fetch_usbserialv+0x36>
 80a4bc4:	aa01      	add	r2, sp, #4
 80a4bc6:	4621      	mov	r1, r4
 80a4bc8:	4807      	ldr	r0, [pc, #28]	; (80a4be8 <_Z16_fetch_usbserialv+0x40>)
 80a4bca:	f7ff ffb7 	bl	80a4b3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4bce:	4628      	mov	r0, r5
 80a4bd0:	f7fb fa7b 	bl	80a00ca <__cxa_guard_release>
 80a4bd4:	4a05      	ldr	r2, [pc, #20]	; (80a4bec <_Z16_fetch_usbserialv+0x44>)
 80a4bd6:	4906      	ldr	r1, [pc, #24]	; (80a4bf0 <_Z16_fetch_usbserialv+0x48>)
 80a4bd8:	4803      	ldr	r0, [pc, #12]	; (80a4be8 <_Z16_fetch_usbserialv+0x40>)
 80a4bda:	f002 f8fd 	bl	80a6dd8 <__aeabi_atexit>
	return _usbserial;
}
 80a4bde:	4802      	ldr	r0, [pc, #8]	; (80a4be8 <_Z16_fetch_usbserialv+0x40>)
 80a4be0:	b007      	add	sp, #28
 80a4be2:	bd30      	pop	{r4, r5, pc}
 80a4be4:	20000268 	.word	0x20000268
 80a4be8:	200003f0 	.word	0x200003f0
 80a4bec:	2000017c 	.word	0x2000017c
 80a4bf0:	080a4abb 	.word	0x080a4abb

080a4bf4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a4bf4:	b510      	push	{r4, lr}
 80a4bf6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4bf8:	2214      	movs	r2, #20
 80a4bfa:	2100      	movs	r1, #0
 80a4bfc:	f003 ffc9 	bl	80a8b92 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a4c00:	4b05      	ldr	r3, [pc, #20]	; (80a4c18 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a4c02:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a4c04:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a4c06:	4b05      	ldr	r3, [pc, #20]	; (80a4c1c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a4c08:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a4c0a:	f240 1301 	movw	r3, #257	; 0x101
 80a4c0e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a4c10:	2381      	movs	r3, #129	; 0x81
 80a4c12:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a4c14:	bd10      	pop	{r4, pc}
 80a4c16:	bf00      	nop
 80a4c18:	200004a0 	.word	0x200004a0
 80a4c1c:	20000408 	.word	0x20000408

080a4c20 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a4c20:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4c22:	4c0e      	ldr	r4, [pc, #56]	; (80a4c5c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a4c24:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a4c26:	a801      	add	r0, sp, #4
 80a4c28:	f7ff ffe4 	bl	80a4bf4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4c2c:	6823      	ldr	r3, [r4, #0]
 80a4c2e:	07db      	lsls	r3, r3, #31
 80a4c30:	d410      	bmi.n	80a4c54 <_Z17_fetch_usbserial1v+0x34>
 80a4c32:	4620      	mov	r0, r4
 80a4c34:	f7fb fa44 	bl	80a00c0 <__cxa_guard_acquire>
 80a4c38:	b160      	cbz	r0, 80a4c54 <_Z17_fetch_usbserial1v+0x34>
 80a4c3a:	aa01      	add	r2, sp, #4
 80a4c3c:	2101      	movs	r1, #1
 80a4c3e:	4808      	ldr	r0, [pc, #32]	; (80a4c60 <_Z17_fetch_usbserial1v+0x40>)
 80a4c40:	f7ff ff7c 	bl	80a4b3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a4c44:	4620      	mov	r0, r4
 80a4c46:	f7fb fa40 	bl	80a00ca <__cxa_guard_release>
 80a4c4a:	4a06      	ldr	r2, [pc, #24]	; (80a4c64 <_Z17_fetch_usbserial1v+0x44>)
 80a4c4c:	4906      	ldr	r1, [pc, #24]	; (80a4c68 <_Z17_fetch_usbserial1v+0x48>)
 80a4c4e:	4804      	ldr	r0, [pc, #16]	; (80a4c60 <_Z17_fetch_usbserial1v+0x40>)
 80a4c50:	f002 f8c2 	bl	80a6dd8 <__aeabi_atexit>
  return _usbserial1;
}
 80a4c54:	4802      	ldr	r0, [pc, #8]	; (80a4c60 <_Z17_fetch_usbserial1v+0x40>)
 80a4c56:	b006      	add	sp, #24
 80a4c58:	bd10      	pop	{r4, pc}
 80a4c5a:	bf00      	nop
 80a4c5c:	20000404 	.word	0x20000404
 80a4c60:	2000048c 	.word	0x2000048c
 80a4c64:	2000017c 	.word	0x2000017c
 80a4c68:	080a4abb 	.word	0x080a4abb

080a4c6c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a4c6c:	4770      	bx	lr

080a4c6e <_ZN9IPAddressD0Ev>:
 80a4c6e:	b510      	push	{r4, lr}
 80a4c70:	4604      	mov	r4, r0
 80a4c72:	2118      	movs	r1, #24
 80a4c74:	f002 f8be 	bl	80a6df4 <_ZdlPvj>
 80a4c78:	4620      	mov	r0, r4
 80a4c7a:	bd10      	pop	{r4, pc}

080a4c7c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a4c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4c7e:	460f      	mov	r7, r1
 80a4c80:	f100 0608 	add.w	r6, r0, #8
 80a4c84:	1d05      	adds	r5, r0, #4
 80a4c86:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4c88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a4c8c:	220a      	movs	r2, #10
 80a4c8e:	4638      	mov	r0, r7
 80a4c90:	f001 fd57 	bl	80a6742 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4c94:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4c96:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4c98:	d007      	beq.n	80a4caa <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a4c9a:	2c00      	cmp	r4, #0
 80a4c9c:	d0f4      	beq.n	80a4c88 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a4c9e:	212e      	movs	r1, #46	; 0x2e
 80a4ca0:	4638      	mov	r0, r7
 80a4ca2:	f001 fd0b 	bl	80a66bc <_ZN5Print5printEc>
 80a4ca6:	4404      	add	r4, r0
 80a4ca8:	e7ee      	b.n	80a4c88 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a4caa:	4620      	mov	r0, r4
 80a4cac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a4cb0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a4cb0:	b510      	push	{r4, lr}
 80a4cb2:	4604      	mov	r4, r0
 80a4cb4:	4b04      	ldr	r3, [pc, #16]	; (80a4cc8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a4cb6:	2211      	movs	r2, #17
 80a4cb8:	f840 3b04 	str.w	r3, [r0], #4
 80a4cbc:	2100      	movs	r1, #0
 80a4cbe:	f003 ff68 	bl	80a8b92 <memset>
{
    clear();
}
 80a4cc2:	4620      	mov	r0, r4
 80a4cc4:	bd10      	pop	{r4, pc}
 80a4cc6:	bf00      	nop
 80a4cc8:	080ae35c 	.word	0x080ae35c

080a4ccc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a4ccc:	4603      	mov	r3, r0
 80a4cce:	4a07      	ldr	r2, [pc, #28]	; (80a4cec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a4cd0:	b510      	push	{r4, lr}
 80a4cd2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a4cd6:	f101 0210 	add.w	r2, r1, #16
 80a4cda:	f851 4b04 	ldr.w	r4, [r1], #4
 80a4cde:	4291      	cmp	r1, r2
 80a4ce0:	f843 4b04 	str.w	r4, [r3], #4
 80a4ce4:	d1f9      	bne.n	80a4cda <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a4ce6:	780a      	ldrb	r2, [r1, #0]
 80a4ce8:	701a      	strb	r2, [r3, #0]
}
 80a4cea:	bd10      	pop	{r4, pc}
 80a4cec:	080ae35c 	.word	0x080ae35c

080a4cf0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a4cf0:	4a02      	ldr	r2, [pc, #8]	; (80a4cfc <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a4cf2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a4cf4:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a4cf6:	2204      	movs	r2, #4
 80a4cf8:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a4cfa:	4770      	bx	lr
 80a4cfc:	080ae35c 	.word	0x080ae35c

080a4d00 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a4d00:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a4d02:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a4d06:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a4d0a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a4d0e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a4d12:	2304      	movs	r3, #4
 80a4d14:	6041      	str	r1, [r0, #4]
 80a4d16:	7503      	strb	r3, [r0, #20]
 80a4d18:	bd10      	pop	{r4, pc}
	...

080a4d1c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a4d1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a4d1e:	4d04      	ldr	r5, [pc, #16]	; (80a4d30 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a4d20:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a4d22:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a4d26:	9500      	str	r5, [sp, #0]
 80a4d28:	f7ff ffea 	bl	80a4d00 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a4d2c:	b003      	add	sp, #12
 80a4d2e:	bd30      	pop	{r4, r5, pc}
 80a4d30:	080ae35c 	.word	0x080ae35c

080a4d34 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a4d34:	4770      	bx	lr

080a4d36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a4d36:	2000      	movs	r0, #0
 80a4d38:	4770      	bx	lr

080a4d3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a4d3a:	b510      	push	{r4, lr}
 80a4d3c:	4604      	mov	r4, r0
 80a4d3e:	2110      	movs	r1, #16
 80a4d40:	f002 f858 	bl	80a6df4 <_ZdlPvj>
 80a4d44:	4620      	mov	r0, r4
 80a4d46:	bd10      	pop	{r4, pc}

080a4d48 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a4d48:	b508      	push	{r3, lr}
      { delete this; }
 80a4d4a:	b108      	cbz	r0, 80a4d50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a4d4c:	f7ff fff5 	bl	80a4d3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a4d50:	bd08      	pop	{r3, pc}

080a4d52 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a4d52:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a4d54:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a4d56:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a4d58:	b113      	cbz	r3, 80a4d60 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a4d5a:	2203      	movs	r2, #3
 80a4d5c:	4601      	mov	r1, r0
 80a4d5e:	4798      	blx	r3
    }
 80a4d60:	4620      	mov	r0, r4
 80a4d62:	bd10      	pop	{r4, pc}

080a4d64 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a4d64:	2200      	movs	r2, #0
 80a4d66:	6002      	str	r2, [r0, #0]
 80a4d68:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a4d6c:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a4d6e:	b510      	push	{r4, lr}
 80a4d70:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a4d74:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4d76:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4d78:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a4d7a:	680c      	ldr	r4, [r1, #0]
 80a4d7c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4d7e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a4d80:	bd10      	pop	{r4, pc}

080a4d82 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a4d82:	b510      	push	{r4, lr}
 80a4d84:	4604      	mov	r4, r0
    free((void*)msg_);
 80a4d86:	6800      	ldr	r0, [r0, #0]
 80a4d88:	f7ff fa04 	bl	80a4194 <free>
}
 80a4d8c:	4620      	mov	r0, r4
 80a4d8e:	bd10      	pop	{r4, pc}

080a4d90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a4d90:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a4d92:	68c4      	ldr	r4, [r0, #12]
 80a4d94:	b1f4      	cbz	r4, 80a4dd4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a4d96:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a4d98:	2b02      	cmp	r3, #2
 80a4d9a:	d103      	bne.n	80a4da4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a4d9c:	f104 000c 	add.w	r0, r4, #12
 80a4da0:	f7ff ffef 	bl	80a4d82 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a4da4:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a4da6:	b135      	cbz	r5, 80a4db6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a4da8:	4628      	mov	r0, r5
 80a4daa:	f7ff ffd2 	bl	80a4d52 <_ZNSt14_Function_baseD1Ev>
 80a4dae:	2110      	movs	r1, #16
 80a4db0:	4628      	mov	r0, r5
 80a4db2:	f002 f81f 	bl	80a6df4 <_ZdlPvj>
 80a4db6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a4db8:	b135      	cbz	r5, 80a4dc8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a4dba:	4628      	mov	r0, r5
 80a4dbc:	f7ff ffc9 	bl	80a4d52 <_ZNSt14_Function_baseD1Ev>
 80a4dc0:	2110      	movs	r1, #16
 80a4dc2:	4628      	mov	r0, r5
 80a4dc4:	f002 f816 	bl	80a6df4 <_ZdlPvj>
 80a4dc8:	4620      	mov	r0, r4
 80a4dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a4dce:	2114      	movs	r1, #20
 80a4dd0:	f002 b810 	b.w	80a6df4 <_ZdlPvj>
 80a4dd4:	bd38      	pop	{r3, r4, r5, pc}

080a4dd6 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_>:
    String p(param);
    return (*fn)(p);
}

int CloudClass::call_std_user_function(void* data, const char* param, void* reserved)
{
 80a4dd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a4dd8:	4604      	mov	r4, r0
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
 80a4dda:	4668      	mov	r0, sp
 80a4ddc:	f001 fec5 	bl	80a6b6a <_ZN6StringC1EPK19__FlashStringHelper>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a4de0:	68a3      	ldr	r3, [r4, #8]
 80a4de2:	b90b      	cbnz	r3, 80a4de8 <_ZN10CloudClass22call_std_user_functionEPvPKcS0_+0x12>
	__throw_bad_function_call();
 80a4de4:	f002 f83b 	bl	80a6e5e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4de8:	68e3      	ldr	r3, [r4, #12]
 80a4dea:	4669      	mov	r1, sp
 80a4dec:	4620      	mov	r0, r4
 80a4dee:	4798      	blx	r3
 80a4df0:	4604      	mov	r4, r0
 80a4df2:	4668      	mov	r0, sp
 80a4df4:	f001 fe72 	bl	80a6adc <_ZN6StringD1Ev>
}
 80a4df8:	4620      	mov	r0, r4
 80a4dfa:	b004      	add	sp, #16
 80a4dfc:	bd10      	pop	{r4, pc}

080a4dfe <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a4dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4e00:	4607      	mov	r7, r0
 80a4e02:	460e      	mov	r6, r1
 80a4e04:	4615      	mov	r5, r2
 80a4e06:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a4e08:	2410      	movs	r4, #16
 80a4e0a:	4622      	mov	r2, r4
 80a4e0c:	2100      	movs	r1, #0
 80a4e0e:	4668      	mov	r0, sp
 80a4e10:	f003 febf 	bl	80a8b92 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a4e14:	2200      	movs	r2, #0
 80a4e16:	4669      	mov	r1, sp
 80a4e18:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a4e1a:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a4e1e:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a4e20:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a4e22:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a4e24:	f7ff f8e2 	bl	80a3fec <spark_function>
}
 80a4e28:	b005      	add	sp, #20
 80a4e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4e2c <_ZN10CloudClass13publishVitalsEm>:
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}

int CloudClass::publishVitals(system_tick_t period_s_) {
 80a4e2c:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
 80a4e2e:	2100      	movs	r1, #0
 80a4e30:	f7ff b90c 	b.w	80a404c <spark_publish_vitals>

080a4e34 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a4e34:	b513      	push	{r0, r1, r4, lr}
 80a4e36:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a4e38:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a4e3c:	2300      	movs	r3, #0
 80a4e3e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a4e40:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a4e42:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a4e44:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a4e46:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a4e48:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a4e4a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a4e4c:	f7ff fb74 	bl	80a4538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a4e50:	4620      	mov	r0, r4
 80a4e52:	b002      	add	sp, #8
 80a4e54:	bd10      	pop	{r4, pc}

080a4e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a4e56:	680b      	ldr	r3, [r1, #0]
 80a4e58:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a4e5a:	b113      	cbz	r3, 80a4e62 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a4e5c:	685a      	ldr	r2, [r3, #4]
 80a4e5e:	3201      	adds	r2, #1
 80a4e60:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a4e62:	4770      	bx	lr

080a4e64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a4e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a4e66:	460c      	mov	r4, r1
 80a4e68:	4606      	mov	r6, r0
 80a4e6a:	460f      	mov	r7, r1
 80a4e6c:	f854 3b04 	ldr.w	r3, [r4], #4
 80a4e70:	ad02      	add	r5, sp, #8
 80a4e72:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a4e76:	4621      	mov	r1, r4
 80a4e78:	a801      	add	r0, sp, #4
 80a4e7a:	f7ff ffec 	bl	80a4e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a4e7e:	4629      	mov	r1, r5
 80a4e80:	4630      	mov	r0, r6
 80a4e82:	f7ff ffd7 	bl	80a4e34 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a4e86:	a801      	add	r0, sp, #4
 80a4e88:	f7ff fb56 	bl	80a4538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a4e8c:	4620      	mov	r0, r4
 80a4e8e:	f7ff fb53 	bl	80a4538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a4e92:	4638      	mov	r0, r7
 80a4e94:	2108      	movs	r1, #8
 80a4e96:	f001 ffad 	bl	80a6df4 <_ZdlPvj>
        return p;
    }
 80a4e9a:	4630      	mov	r0, r6
 80a4e9c:	b003      	add	sp, #12
 80a4e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a4ea0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a4ea0:	b513      	push	{r0, r1, r4, lr}
 80a4ea2:	460b      	mov	r3, r1
 80a4ea4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4ea6:	c803      	ldmia	r0, {r0, r1}
 80a4ea8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a4eac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a4eb0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a4eb4:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a4eb8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a4ebc:	b002      	add	sp, #8
 80a4ebe:	bd10      	pop	{r4, pc}

080a4ec0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a4ec0:	b538      	push	{r3, r4, r5, lr}
 80a4ec2:	2300      	movs	r3, #0
 80a4ec4:	4604      	mov	r4, r0
 80a4ec6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a4ec8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a4eca:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a4ecc:	f7fb f8e7 	bl	80a009e <_Znwj>
 80a4ed0:	b128      	cbz	r0, 80a4ede <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a4ed2:	2301      	movs	r3, #1
 80a4ed4:	6043      	str	r3, [r0, #4]
 80a4ed6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a4ed8:	4b02      	ldr	r3, [pc, #8]	; (80a4ee4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a4eda:	60c5      	str	r5, [r0, #12]
 80a4edc:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a4ede:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a4ee0:	4620      	mov	r0, r4
 80a4ee2:	bd38      	pop	{r3, r4, r5, pc}
 80a4ee4:	080ae370 	.word	0x080ae370

080a4ee8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a4ee8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a4eea:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a4eec:	b90a      	cbnz	r2, 80a4ef2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a4eee:	f001 ffb6 	bl	80a6e5e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4ef2:	68c3      	ldr	r3, [r0, #12]
    }
 80a4ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4ef8:	4718      	bx	r3

080a4efa <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a4efa:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a4efc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a4efe:	f100 0110 	add.w	r1, r0, #16
 80a4f02:	f7ff fff1 	bl	80a4ee8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a4f06:	bd08      	pop	{r3, pc}

080a4f08 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a4f08:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a4f0a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a4f0c:	b90a      	cbnz	r2, 80a4f12 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a4f0e:	f001 ffa6 	bl	80a6e5e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4f12:	68c3      	ldr	r3, [r0, #12]
    }
 80a4f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4f18:	4718      	bx	r3

080a4f1a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a4f1a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a4f1c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a4f1e:	f100 0110 	add.w	r1, r0, #16
 80a4f22:	f7ff fff1 	bl	80a4f08 <_ZNKSt8functionIFvRKbEEclES1_>
 80a4f26:	bd08      	pop	{r3, pc}

080a4f28 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a4f28:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a4f2a:	2300      	movs	r3, #0
 80a4f2c:	6083      	str	r3, [r0, #8]
 80a4f2e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a4f30:	4604      	mov	r4, r0
 80a4f32:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a4f34:	b12b      	cbz	r3, 80a4f42 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a4f36:	2202      	movs	r2, #2
 80a4f38:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a4f3a:	68eb      	ldr	r3, [r5, #12]
 80a4f3c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a4f3e:	68ab      	ldr	r3, [r5, #8]
 80a4f40:	60a3      	str	r3, [r4, #8]
	}
    }
 80a4f42:	4620      	mov	r0, r4
 80a4f44:	bd38      	pop	{r3, r4, r5, pc}
	...

080a4f48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a4f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4f4a:	b089      	sub	sp, #36	; 0x24
 80a4f4c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a4f4e:	4668      	mov	r0, sp
 80a4f50:	f7ff ff08 	bl	80a4d64 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a4f54:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a4f58:	2300      	movs	r3, #0
 80a4f5a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a4f5e:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a4f62:	2b00      	cmp	r3, #0
 80a4f64:	d103      	bne.n	80a4f6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a4f66:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a4f6a:	2900      	cmp	r1, #0
 80a4f6c:	d1f7      	bne.n	80a4f5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a4f6e:	d002      	beq.n	80a4f76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a4f70:	f88d 3008 	strb.w	r3, [sp, #8]
 80a4f74:	e063      	b.n	80a503e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a4f76:	f114 050c 	adds.w	r5, r4, #12
 80a4f7a:	d003      	beq.n	80a4f84 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a4f7c:	4669      	mov	r1, sp
 80a4f7e:	4628      	mov	r0, r5
 80a4f80:	f7ff fef0 	bl	80a4d64 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a4f84:	f3bf 8f5f 	dmb	sy
 80a4f88:	2301      	movs	r3, #1
 80a4f8a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a4f8c:	f3bf 8f5f 	dmb	sy
 80a4f90:	f104 0308 	add.w	r3, r4, #8
 80a4f94:	2000      	movs	r0, #0
 80a4f96:	e853 6f00 	ldrex	r6, [r3]
 80a4f9a:	e843 0200 	strex	r2, r0, [r3]
 80a4f9e:	2a00      	cmp	r2, #0
 80a4fa0:	d1f9      	bne.n	80a4f96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a4fa2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a4fa6:	2e00      	cmp	r6, #0
 80a4fa8:	d049      	beq.n	80a503e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a4faa:	f7ff f8bf 	bl	80a412c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a4fae:	b120      	cbz	r0, 80a4fba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a4fb0:	4629      	mov	r1, r5
 80a4fb2:	4630      	mov	r0, r6
 80a4fb4:	f7ff ff98 	bl	80a4ee8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a4fb8:	e03a      	b.n	80a5030 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a4fba:	4631      	mov	r1, r6
 80a4fbc:	a802      	add	r0, sp, #8
 80a4fbe:	f7ff ffb3 	bl	80a4f28 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a4fc2:	68e0      	ldr	r0, [r4, #12]
 80a4fc4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a4fc8:	b108      	cbz	r0, 80a4fce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a4fca:	f003 fe77 	bl	80a8cbc <strdup>
 80a4fce:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a4fd0:	2010      	movs	r0, #16
 80a4fd2:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a4fd6:	f7fb f862 	bl	80a009e <_Znwj>
 80a4fda:	4605      	mov	r5, r0
 80a4fdc:	b1e8      	cbz	r0, 80a501a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a4fde:	2700      	movs	r7, #0
 80a4fe0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4fe2:	2018      	movs	r0, #24
 80a4fe4:	f7fb f85b 	bl	80a009e <_Znwj>
 80a4fe8:	4604      	mov	r4, r0
 80a4fea:	b188      	cbz	r0, 80a5010 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a4fec:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a4fee:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a4ff0:	a802      	add	r0, sp, #8
 80a4ff2:	f7ff ff55 	bl	80a4ea0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4ff6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a4ff8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4ffa:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4ffc:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a4ffe:	9204      	str	r2, [sp, #16]
 80a5000:	68e2      	ldr	r2, [r4, #12]
 80a5002:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a5004:	60e3      	str	r3, [r4, #12]
 80a5006:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a500a:	9205      	str	r2, [sp, #20]
 80a500c:	f7ff feaa 	bl	80a4d64 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a5010:	4b0d      	ldr	r3, [pc, #52]	; (80a5048 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a5012:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a5014:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a5016:	4b0d      	ldr	r3, [pc, #52]	; (80a504c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a5018:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a501a:	a806      	add	r0, sp, #24
 80a501c:	f7ff feb1 	bl	80a4d82 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a5020:	a802      	add	r0, sp, #8
 80a5022:	f7ff fe96 	bl	80a4d52 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a5026:	2200      	movs	r2, #0
 80a5028:	4629      	mov	r1, r5
 80a502a:	4809      	ldr	r0, [pc, #36]	; (80a5050 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a502c:	f7ff f886 	bl	80a413c <application_thread_invoke>
 80a5030:	4630      	mov	r0, r6
 80a5032:	f7ff fe8e 	bl	80a4d52 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a5036:	2110      	movs	r1, #16
 80a5038:	4630      	mov	r0, r6
 80a503a:	f001 fedb 	bl	80a6df4 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a503e:	4668      	mov	r0, sp
 80a5040:	f7ff fe9f 	bl	80a4d82 <_ZN8particle5ErrorD1Ev>
    }
 80a5044:	b009      	add	sp, #36	; 0x24
 80a5046:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5048:	080a4efb 	.word	0x080a4efb
 80a504c:	080a5171 	.word	0x080a5171
 80a5050:	080a49d1 	.word	0x080a49d1

080a5054 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a5054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5058:	b08b      	sub	sp, #44	; 0x2c
 80a505a:	4606      	mov	r6, r0
 80a505c:	460f      	mov	r7, r1
 80a505e:	4690      	mov	r8, r2
 80a5060:	4699      	mov	r9, r3
 80a5062:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a5066:	f7fe ffd1 	bl	80a400c <spark_cloud_flag_connected>
 80a506a:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a506c:	4683      	mov	fp, r0
 80a506e:	bb30      	cbnz	r0, 80a50be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a5070:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a5074:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a5076:	a905      	add	r1, sp, #20
 80a5078:	4628      	mov	r0, r5
 80a507a:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a507e:	f7ff fe71 	bl	80a4d64 <_ZN8particle5ErrorC1EOS0_>
 80a5082:	2014      	movs	r0, #20
 80a5084:	f7fb f80b 	bl	80a009e <_Znwj>
 80a5088:	4604      	mov	r4, r0
 80a508a:	b158      	cbz	r0, 80a50a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a508c:	2302      	movs	r3, #2
 80a508e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a5090:	2301      	movs	r3, #1
 80a5092:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a5094:	f8c0 b004 	str.w	fp, [r0, #4]
 80a5098:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a509c:	4629      	mov	r1, r5
 80a509e:	300c      	adds	r0, #12
 80a50a0:	f7ff fe60 	bl	80a4d64 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a50a4:	4630      	mov	r0, r6
 80a50a6:	4621      	mov	r1, r4
 80a50a8:	f840 4b04 	str.w	r4, [r0], #4
 80a50ac:	f7ff ff08 	bl	80a4ec0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a50b0:	4628      	mov	r0, r5
 80a50b2:	f7ff fe66 	bl	80a4d82 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a50b6:	a805      	add	r0, sp, #20
 80a50b8:	f7ff fe63 	bl	80a4d82 <_ZN8particle5ErrorD1Ev>
 80a50bc:	e052      	b.n	80a5164 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a50be:	2400      	movs	r4, #0
 80a50c0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a50c2:	2014      	movs	r0, #20
 80a50c4:	606c      	str	r4, [r5, #4]
 80a50c6:	60ac      	str	r4, [r5, #8]
 80a50c8:	9307      	str	r3, [sp, #28]
 80a50ca:	f7fa ffe8 	bl	80a009e <_Znwj>
 80a50ce:	4601      	mov	r1, r0
 80a50d0:	b118      	cbz	r0, 80a50da <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a50d2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a50d4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a50d6:	6044      	str	r4, [r0, #4]
 80a50d8:	6084      	str	r4, [r0, #8]
 80a50da:	a804      	add	r0, sp, #16
 80a50dc:	9103      	str	r1, [sp, #12]
 80a50de:	f7ff feef 	bl	80a4ec0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a50e2:	4b22      	ldr	r3, [pc, #136]	; (80a516c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a50e4:	2008      	movs	r0, #8
 80a50e6:	9308      	str	r3, [sp, #32]
 80a50e8:	f7fa ffd9 	bl	80a009e <_Znwj>
 80a50ec:	4604      	mov	r4, r0
 80a50ee:	b128      	cbz	r0, 80a50fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a50f0:	9b03      	ldr	r3, [sp, #12]
 80a50f2:	a904      	add	r1, sp, #16
 80a50f4:	f840 3b04 	str.w	r3, [r0], #4
 80a50f8:	f7ff fead 	bl	80a4e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a50fc:	9500      	str	r5, [sp, #0]
 80a50fe:	fa5f f38a 	uxtb.w	r3, sl
 80a5102:	464a      	mov	r2, r9
 80a5104:	4641      	mov	r1, r8
 80a5106:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a5108:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a510a:	f7fe ff87 	bl	80a401c <spark_send_event>
 80a510e:	b920      	cbnz	r0, 80a511a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a5110:	9b03      	ldr	r3, [sp, #12]
 80a5112:	785b      	ldrb	r3, [r3, #1]
 80a5114:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a5118:	b183      	cbz	r3, 80a513c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a511a:	9b03      	ldr	r3, [sp, #12]
 80a511c:	a904      	add	r1, sp, #16
 80a511e:	a806      	add	r0, sp, #24
 80a5120:	9305      	str	r3, [sp, #20]
 80a5122:	f7ff fe98 	bl	80a4e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a5126:	a905      	add	r1, sp, #20
 80a5128:	4630      	mov	r0, r6
 80a512a:	f7ff fe83 	bl	80a4e34 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a512e:	a806      	add	r0, sp, #24
 80a5130:	f7ff fa02 	bl	80a4538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a5134:	a804      	add	r0, sp, #16
 80a5136:	f7ff f9ff 	bl	80a4538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a513a:	e013      	b.n	80a5164 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a513c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a5140:	a905      	add	r1, sp, #20
 80a5142:	a803      	add	r0, sp, #12
 80a5144:	9205      	str	r2, [sp, #20]
 80a5146:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a514a:	f7ff fefd 	bl	80a4f48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a514e:	a805      	add	r0, sp, #20
 80a5150:	f7ff fe17 	bl	80a4d82 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a5154:	a805      	add	r0, sp, #20
 80a5156:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a5158:	f7ff fe84 	bl	80a4e64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a515c:	a806      	add	r0, sp, #24
 80a515e:	f7ff f9eb 	bl	80a4538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a5162:	e7da      	b.n	80a511a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a5164:	4630      	mov	r0, r6
 80a5166:	b00b      	add	sp, #44	; 0x2c
 80a5168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a516c:	080a52e1 	.word	0x080a52e1

080a5170 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a5170:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a5172:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5174:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a5176:	d006      	beq.n	80a5186 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a5178:	2a03      	cmp	r2, #3
 80a517a:	d017      	beq.n	80a51ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a517c:	2a01      	cmp	r2, #1
 80a517e:	d122      	bne.n	80a51c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a5180:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a5182:	6003      	str	r3, [r0, #0]
	      break;
 80a5184:	e01f      	b.n	80a51c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a5186:	2018      	movs	r0, #24
 80a5188:	680e      	ldr	r6, [r1, #0]
 80a518a:	f7fa ff88 	bl	80a009e <_Znwj>
 80a518e:	4605      	mov	r5, r0
 80a5190:	b150      	cbz	r0, 80a51a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a5192:	4631      	mov	r1, r6
 80a5194:	f7ff fec8 	bl	80a4f28 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a5198:	6930      	ldr	r0, [r6, #16]
 80a519a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a519e:	b108      	cbz	r0, 80a51a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a51a0:	f003 fd8c 	bl	80a8cbc <strdup>
 80a51a4:	6128      	str	r0, [r5, #16]
 80a51a6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a51a8:	6025      	str	r5, [r4, #0]
 80a51aa:	e00c      	b.n	80a51c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a51ac:	6804      	ldr	r4, [r0, #0]
 80a51ae:	b154      	cbz	r4, 80a51c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a51b0:	f104 0010 	add.w	r0, r4, #16
 80a51b4:	f7ff fde5 	bl	80a4d82 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a51b8:	4620      	mov	r0, r4
 80a51ba:	f7ff fdca 	bl	80a4d52 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a51be:	2118      	movs	r1, #24
 80a51c0:	4620      	mov	r0, r4
 80a51c2:	f001 fe17 	bl	80a6df4 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a51c6:	2000      	movs	r0, #0
 80a51c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a51ca <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a51ca:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a51cc:	2300      	movs	r3, #0
 80a51ce:	6083      	str	r3, [r0, #8]
 80a51d0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a51d2:	4604      	mov	r4, r0
 80a51d4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a51d6:	b12b      	cbz	r3, 80a51e4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a51d8:	2202      	movs	r2, #2
 80a51da:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a51dc:	68eb      	ldr	r3, [r5, #12]
 80a51de:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a51e0:	68ab      	ldr	r3, [r5, #8]
 80a51e2:	60a3      	str	r3, [r4, #8]
	}
    }
 80a51e4:	4620      	mov	r0, r4
 80a51e6:	bd38      	pop	{r3, r4, r5, pc}

080a51e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a51e8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a51ea:	b570      	push	{r4, r5, r6, lr}
 80a51ec:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a51ee:	d006      	beq.n	80a51fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a51f0:	2a03      	cmp	r2, #3
 80a51f2:	d011      	beq.n	80a5218 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a51f4:	2a01      	cmp	r2, #1
 80a51f6:	d118      	bne.n	80a522a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a51f8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a51fa:	6003      	str	r3, [r0, #0]
	      break;
 80a51fc:	e015      	b.n	80a522a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a51fe:	2014      	movs	r0, #20
 80a5200:	680e      	ldr	r6, [r1, #0]
 80a5202:	f7fa ff4c 	bl	80a009e <_Znwj>
 80a5206:	4605      	mov	r5, r0
 80a5208:	b120      	cbz	r0, 80a5214 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a520a:	4631      	mov	r1, r6
 80a520c:	f7ff ffdd 	bl	80a51ca <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a5210:	7c33      	ldrb	r3, [r6, #16]
 80a5212:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a5214:	6025      	str	r5, [r4, #0]
 80a5216:	e008      	b.n	80a522a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a5218:	6804      	ldr	r4, [r0, #0]
 80a521a:	b134      	cbz	r4, 80a522a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a521c:	4620      	mov	r0, r4
 80a521e:	f7ff fd98 	bl	80a4d52 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a5222:	2114      	movs	r1, #20
 80a5224:	4620      	mov	r0, r4
 80a5226:	f001 fde5 	bl	80a6df4 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a522a:	2000      	movs	r0, #0
 80a522c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a5230 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a5230:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5232:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a5234:	f3bf 8f5f 	dmb	sy
 80a5238:	b087      	sub	sp, #28
 80a523a:	2300      	movs	r3, #0
 80a523c:	e850 6f00 	ldrex	r6, [r0]
 80a5240:	e840 3200 	strex	r2, r3, [r0]
 80a5244:	2a00      	cmp	r2, #0
 80a5246:	d1f9      	bne.n	80a523c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a5248:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a524c:	2e00      	cmp	r6, #0
 80a524e:	d03f      	beq.n	80a52d0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a5250:	4618      	mov	r0, r3
 80a5252:	f7fe ff6b 	bl	80a412c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a5256:	4607      	mov	r7, r0
 80a5258:	b120      	cbz	r0, 80a5264 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a525a:	4621      	mov	r1, r4
 80a525c:	4630      	mov	r0, r6
 80a525e:	f7ff fe53 	bl	80a4f08 <_ZNKSt8functionIFvRKbEEclES1_>
 80a5262:	e02e      	b.n	80a52c2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a5264:	4631      	mov	r1, r6
 80a5266:	a801      	add	r0, sp, #4
 80a5268:	f7ff ffaf 	bl	80a51ca <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a526c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a526e:	2010      	movs	r0, #16
 80a5270:	f88d 3014 	strb.w	r3, [sp, #20]
 80a5274:	f7fa ff13 	bl	80a009e <_Znwj>
 80a5278:	4605      	mov	r5, r0
 80a527a:	b1d0      	cbz	r0, 80a52b2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a527c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a527e:	2014      	movs	r0, #20
 80a5280:	f7fa ff0d 	bl	80a009e <_Znwj>
 80a5284:	4604      	mov	r4, r0
 80a5286:	b178      	cbz	r0, 80a52a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a5288:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a528a:	4601      	mov	r1, r0
 80a528c:	a801      	add	r0, sp, #4
 80a528e:	f7ff fe07 	bl	80a4ea0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a5292:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a5294:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a5296:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a5298:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a529a:	9203      	str	r2, [sp, #12]
 80a529c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a529e:	60e3      	str	r3, [r4, #12]
 80a52a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a52a4:	9204      	str	r2, [sp, #16]
 80a52a6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a52a8:	4b0a      	ldr	r3, [pc, #40]	; (80a52d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a52aa:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a52ac:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a52ae:	4b0a      	ldr	r3, [pc, #40]	; (80a52d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a52b0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a52b2:	a801      	add	r0, sp, #4
 80a52b4:	f7ff fd4d 	bl	80a4d52 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a52b8:	2200      	movs	r2, #0
 80a52ba:	4629      	mov	r1, r5
 80a52bc:	4807      	ldr	r0, [pc, #28]	; (80a52dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a52be:	f7fe ff3d 	bl	80a413c <application_thread_invoke>
 80a52c2:	4630      	mov	r0, r6
 80a52c4:	f7ff fd45 	bl	80a4d52 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a52c8:	2110      	movs	r1, #16
 80a52ca:	4630      	mov	r0, r6
 80a52cc:	f001 fd92 	bl	80a6df4 <_ZdlPvj>
        }
    }
 80a52d0:	b007      	add	sp, #28
 80a52d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a52d4:	080a4f1b 	.word	0x080a4f1b
 80a52d8:	080a51e9 	.word	0x080a51e9
 80a52dc:	080a49d1 	.word	0x080a49d1

080a52e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a52e0:	b530      	push	{r4, r5, lr}
 80a52e2:	4604      	mov	r4, r0
 80a52e4:	b085      	sub	sp, #20
 80a52e6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a52e8:	4668      	mov	r0, sp
 80a52ea:	4611      	mov	r1, r2
 80a52ec:	f7ff fdba 	bl	80a4e64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a52f0:	b17c      	cbz	r4, 80a5312 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a52f2:	b224      	sxth	r4, r4
 80a52f4:	4628      	mov	r0, r5
 80a52f6:	b10d      	cbz	r5, 80a52fc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a52f8:	f003 fce0 	bl	80a8cbc <strdup>
 80a52fc:	9002      	str	r0, [sp, #8]
 80a52fe:	a902      	add	r1, sp, #8
 80a5300:	4668      	mov	r0, sp
 80a5302:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a5306:	f7ff fe1f 	bl	80a4f48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a530a:	a802      	add	r0, sp, #8
 80a530c:	f7ff fd39 	bl	80a4d82 <_ZN8particle5ErrorD1Ev>
 80a5310:	e01d      	b.n	80a534e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a5312:	f04f 0201 	mov.w	r2, #1
 80a5316:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a5318:	f88d 4008 	strb.w	r4, [sp, #8]
 80a531c:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a5320:	42a3      	cmp	r3, r4
 80a5322:	d103      	bne.n	80a532c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a5324:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a5328:	2900      	cmp	r1, #0
 80a532a:	d1f7      	bne.n	80a531c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a532c:	d002      	beq.n	80a5334 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a532e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a5332:	e00c      	b.n	80a534e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a5334:	f110 010c 	adds.w	r1, r0, #12
 80a5338:	f04f 0301 	mov.w	r3, #1
 80a533c:	bf18      	it	ne
 80a533e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a5340:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a5344:	3004      	adds	r0, #4
 80a5346:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a534a:	f7ff ff71 	bl	80a5230 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a534e:	a801      	add	r0, sp, #4
 80a5350:	f7ff f8f2 	bl	80a4538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a5354:	b005      	add	sp, #20
 80a5356:	bd30      	pop	{r4, r5, pc}

080a5358 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a5358:	2100      	movs	r1, #0
 80a535a:	f7fe bedf 	b.w	80a411c <system_delay_ms>
	...

080a5360 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a5360:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a5362:	4b14      	ldr	r3, [pc, #80]	; (80a53b4 <serialEventRun+0x54>)
 80a5364:	b133      	cbz	r3, 80a5374 <serialEventRun+0x14>
 80a5366:	f7ff fc1f 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a536a:	6803      	ldr	r3, [r0, #0]
 80a536c:	691b      	ldr	r3, [r3, #16]
 80a536e:	4798      	blx	r3
 80a5370:	2800      	cmp	r0, #0
 80a5372:	dc16      	bgt.n	80a53a2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a5374:	4b10      	ldr	r3, [pc, #64]	; (80a53b8 <serialEventRun+0x58>)
 80a5376:	b133      	cbz	r3, 80a5386 <serialEventRun+0x26>
 80a5378:	f001 fb6e 	bl	80a6a58 <_Z22__fetch_global_Serial1v>
 80a537c:	6803      	ldr	r3, [r0, #0]
 80a537e:	691b      	ldr	r3, [r3, #16]
 80a5380:	4798      	blx	r3
 80a5382:	2800      	cmp	r0, #0
 80a5384:	dc10      	bgt.n	80a53a8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a5386:	4b0d      	ldr	r3, [pc, #52]	; (80a53bc <serialEventRun+0x5c>)
 80a5388:	b10b      	cbz	r3, 80a538e <serialEventRun+0x2e>
 80a538a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a538e:	4b0c      	ldr	r3, [pc, #48]	; (80a53c0 <serialEventRun+0x60>)
 80a5390:	b17b      	cbz	r3, 80a53b2 <serialEventRun+0x52>
 80a5392:	f7ff fc45 	bl	80a4c20 <_Z17_fetch_usbserial1v>
 80a5396:	6803      	ldr	r3, [r0, #0]
 80a5398:	691b      	ldr	r3, [r3, #16]
 80a539a:	4798      	blx	r3
 80a539c:	2800      	cmp	r0, #0
 80a539e:	dc06      	bgt.n	80a53ae <serialEventRun+0x4e>
 80a53a0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a53a2:	f3af 8000 	nop.w
 80a53a6:	e7e5      	b.n	80a5374 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a53a8:	f3af 8000 	nop.w
 80a53ac:	e7eb      	b.n	80a5386 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a53ae:	f3af 8000 	nop.w
 80a53b2:	bd08      	pop	{r3, pc}
	...

080a53c4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a53c4:	b508      	push	{r3, lr}
	serialEventRun();
 80a53c6:	f7ff ffcb 	bl	80a5360 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a53ca:	f7fe fd37 	bl	80a3e3c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a53ce:	4b01      	ldr	r3, [pc, #4]	; (80a53d4 <_post_loop+0x10>)
 80a53d0:	6018      	str	r0, [r3, #0]
 80a53d2:	bd08      	pop	{r3, pc}
 80a53d4:	20000760 	.word	0x20000760

080a53d8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a53d8:	4802      	ldr	r0, [pc, #8]	; (80a53e4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a53da:	4a03      	ldr	r2, [pc, #12]	; (80a53e8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a53dc:	4903      	ldr	r1, [pc, #12]	; (80a53ec <_Z33system_initialize_user_backup_ramv+0x14>)
 80a53de:	1a12      	subs	r2, r2, r0
 80a53e0:	f003 bbb1 	b.w	80a8b46 <memcpy>
 80a53e4:	40024000 	.word	0x40024000
 80a53e8:	40024004 	.word	0x40024004
 80a53ec:	080aeee8 	.word	0x080aeee8

080a53f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a53f0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a53f2:	2300      	movs	r3, #0
 80a53f4:	9300      	str	r3, [sp, #0]
 80a53f6:	461a      	mov	r2, r3
 80a53f8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a53fc:	f7fe feb8 	bl	80a4170 <system_ctrl_set_result>
}
 80a5400:	b003      	add	sp, #12
 80a5402:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a5408 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a5408:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a540a:	8843      	ldrh	r3, [r0, #2]
 80a540c:	2b0a      	cmp	r3, #10
 80a540e:	d008      	beq.n	80a5422 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a5410:	2b50      	cmp	r3, #80	; 0x50
 80a5412:	d109      	bne.n	80a5428 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a5414:	4b09      	ldr	r3, [pc, #36]	; (80a543c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a5416:	681b      	ldr	r3, [r3, #0]
 80a5418:	b13b      	cbz	r3, 80a542a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a541a:	b003      	add	sp, #12
 80a541c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a5420:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a5422:	f7ff ffe5 	bl	80a53f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a5426:	e006      	b.n	80a5436 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a5428:	2300      	movs	r3, #0
 80a542a:	9300      	str	r3, [sp, #0]
 80a542c:	461a      	mov	r2, r3
 80a542e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a5432:	f7fe fe9d 	bl	80a4170 <system_ctrl_set_result>
        break;
    }
}
 80a5436:	b003      	add	sp, #12
 80a5438:	f85d fb04 	ldr.w	pc, [sp], #4
 80a543c:	200005a4 	.word	0x200005a4

080a5440 <module_user_init_hook>:

void module_user_init_hook()
{
 80a5440:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a5442:	4c10      	ldr	r4, [pc, #64]	; (80a5484 <module_user_init_hook+0x44>)
 80a5444:	4d10      	ldr	r5, [pc, #64]	; (80a5488 <module_user_init_hook+0x48>)
 80a5446:	6823      	ldr	r3, [r4, #0]
 80a5448:	42ab      	cmp	r3, r5
 80a544a:	4b10      	ldr	r3, [pc, #64]	; (80a548c <module_user_init_hook+0x4c>)
 80a544c:	bf0c      	ite	eq
 80a544e:	2201      	moveq	r2, #1
 80a5450:	2200      	movne	r2, #0
 80a5452:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a5454:	d002      	beq.n	80a545c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a5456:	f7ff ffbf 	bl	80a53d8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a545a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a545c:	f7fe fcd6 	bl	80a3e0c <HAL_RNG_GetRandomNumber>
 80a5460:	4604      	mov	r4, r0
    srand(seed);
 80a5462:	f003 fb9f 	bl	80a8ba4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a5466:	4b0a      	ldr	r3, [pc, #40]	; (80a5490 <module_user_init_hook+0x50>)
 80a5468:	b113      	cbz	r3, 80a5470 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a546a:	4620      	mov	r0, r4
 80a546c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a5470:	2100      	movs	r1, #0
 80a5472:	4807      	ldr	r0, [pc, #28]	; (80a5490 <module_user_init_hook+0x50>)
 80a5474:	f7fe fde2 	bl	80a403c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a5478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a547c:	2100      	movs	r1, #0
 80a547e:	4805      	ldr	r0, [pc, #20]	; (80a5494 <module_user_init_hook+0x54>)
 80a5480:	f7fe be6c 	b.w	80a415c <system_ctrl_set_app_request_handler>
 80a5484:	40024000 	.word	0x40024000
 80a5488:	9a271c1e 	.word	0x9a271c1e
 80a548c:	200005a8 	.word	0x200005a8
 80a5490:	00000000 	.word	0x00000000
 80a5494:	080a5409 	.word	0x080a5409

080a5498 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a5498:	b510      	push	{r4, lr}
 80a549a:	4604      	mov	r4, r0
 80a549c:	f7ff fc59 	bl	80a4d52 <_ZNSt14_Function_baseD1Ev>
 80a54a0:	4620      	mov	r0, r4
 80a54a2:	bd10      	pop	{r4, pc}

080a54a4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a54a4:	4803      	ldr	r0, [pc, #12]	; (80a54b4 <_GLOBAL__sub_I_RGB+0x10>)
 80a54a6:	2300      	movs	r3, #0
 80a54a8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a54aa:	4a03      	ldr	r2, [pc, #12]	; (80a54b8 <_GLOBAL__sub_I_RGB+0x14>)
 80a54ac:	4903      	ldr	r1, [pc, #12]	; (80a54bc <_GLOBAL__sub_I_RGB+0x18>)
 80a54ae:	f001 bc93 	b.w	80a6dd8 <__aeabi_atexit>
 80a54b2:	bf00      	nop
 80a54b4:	200005ac 	.word	0x200005ac
 80a54b8:	2000017c 	.word	0x2000017c
 80a54bc:	080a5499 	.word	0x080a5499

080a54c0 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a54c0:	f7fe bd64 	b.w	80a3f8c <HAL_Interrupts_Disable_All>

080a54c4 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a54c4:	f7fe bd5a 	b.w	80a3f7c <HAL_Interrupts_Enable_All>

080a54c8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a54c8:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a54ca:	2000      	movs	r0, #0
 80a54cc:	f7fe fdae 	bl	80a402c <spark_sync_time_pending>
 80a54d0:	b128      	cbz	r0, 80a54de <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a54d2:	f7fe fd9b 	bl	80a400c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a54d6:	f080 0001 	eor.w	r0, r0, #1
 80a54da:	b2c0      	uxtb	r0, r0
 80a54dc:	bd08      	pop	{r3, pc}
 80a54de:	2001      	movs	r0, #1
    }
 80a54e0:	bd08      	pop	{r3, pc}
	...

080a54e4 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a54e4:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a54e6:	4909      	ldr	r1, [pc, #36]	; (80a550c <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80a54e8:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80a54ea:	f002 ffc9 	bl	80a8480 <__aeabi_fcmplt>
 80a54ee:	b960      	cbnz	r0, 80a550a <_ZN9TimeClass4zoneEf+0x26>
 80a54f0:	4907      	ldr	r1, [pc, #28]	; (80a5510 <_ZN9TimeClass4zoneEf+0x2c>)
 80a54f2:	4620      	mov	r0, r4
 80a54f4:	f002 ffe2 	bl	80a84bc <__aeabi_fcmpgt>
 80a54f8:	b938      	cbnz	r0, 80a550a <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80a54fa:	4906      	ldr	r1, [pc, #24]	; (80a5514 <_ZN9TimeClass4zoneEf+0x30>)
 80a54fc:	4620      	mov	r0, r4
 80a54fe:	f002 fe21 	bl	80a8144 <__aeabi_fmul>
 80a5502:	f002 fffb 	bl	80a84fc <__aeabi_f2iz>
 80a5506:	4b04      	ldr	r3, [pc, #16]	; (80a5518 <_ZN9TimeClass4zoneEf+0x34>)
 80a5508:	6018      	str	r0, [r3, #0]
 80a550a:	bd10      	pop	{r4, pc}
 80a550c:	c1400000 	.word	0xc1400000
 80a5510:	41600000 	.word	0x41600000
 80a5514:	45610000 	.word	0x45610000
 80a5518:	200005c8 	.word	0x200005c8

080a551c <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a551c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80a551e:	4b0e      	ldr	r3, [pc, #56]	; (80a5558 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a5520:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80a5522:	681b      	ldr	r3, [r3, #0]
 80a5524:	a802      	add	r0, sp, #8
 80a5526:	4419      	add	r1, r3
 80a5528:	4b0c      	ldr	r3, [pc, #48]	; (80a555c <_ZN9TimeClass7timeStrEl+0x40>)
 80a552a:	681b      	ldr	r3, [r3, #0]
 80a552c:	4419      	add	r1, r3
 80a552e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80a5532:	f003 f9ef 	bl	80a8914 <localtime>
        char* ascstr = asctime(calendar_time);
 80a5536:	f003 f997 	bl	80a8868 <asctime>
 80a553a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80a553c:	f004 f8ee 	bl	80a971c <strlen>
        ascstr[len-1] = 0; // remove final newline
 80a5540:	2300      	movs	r3, #0
 80a5542:	4428      	add	r0, r5
 80a5544:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80a5548:	4629      	mov	r1, r5
 80a554a:	4620      	mov	r0, r4
 80a554c:	f001 fb0d 	bl	80a6b6a <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a5550:	4620      	mov	r0, r4
 80a5552:	b003      	add	sp, #12
 80a5554:	bd30      	pop	{r4, r5, pc}
 80a5556:	bf00      	nop
 80a5558:	200005c8 	.word	0x200005c8
 80a555c:	200005c4 	.word	0x200005c4

080a5560 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a5560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a5564:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
 80a5566:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a5568:	4607      	mov	r7, r0
 80a556a:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
 80a556c:	4620      	mov	r0, r4
 80a556e:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a5570:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
 80a5572:	f003 fb9b 	bl	80a8cac <strcpy>
    size_t len = strlen(format_str);
 80a5576:	4620      	mov	r0, r4
 80a5578:	f004 f8d0 	bl	80a971c <strlen>
 80a557c:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80a557e:	b925      	cbnz	r5, 80a558a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
 80a5580:	4924      	ldr	r1, [pc, #144]	; (80a5614 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
 80a5582:	a803      	add	r0, sp, #12
 80a5584:	f003 fb92 	bl	80a8cac <strcpy>
 80a5588:	e013      	b.n	80a55b2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80a558a:	213c      	movs	r1, #60	; 0x3c
 80a558c:	fb95 f2f1 	sdiv	r2, r5, r1
 80a5590:	2a00      	cmp	r2, #0
 80a5592:	bfb8      	it	lt
 80a5594:	4252      	neglt	r2, r2
 80a5596:	fb92 f3f1 	sdiv	r3, r2, r1
 80a559a:	fb01 2213 	mls	r2, r1, r3, r2
 80a559e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a55a2:	9200      	str	r2, [sp, #0]
 80a55a4:	fb95 f3f3 	sdiv	r3, r5, r3
 80a55a8:	4a1b      	ldr	r2, [pc, #108]	; (80a5618 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
 80a55aa:	2110      	movs	r1, #16
 80a55ac:	a803      	add	r0, sp, #12
 80a55ae:	f7fe fe19 	bl	80a41e4 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a55b2:	4625      	mov	r5, r4
 80a55b4:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a55b6:	f108 3aff 	add.w	sl, r8, #4294967295
 80a55ba:	45b2      	cmp	sl, r6
 80a55bc:	d91b      	bls.n	80a55f6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80a55be:	782b      	ldrb	r3, [r5, #0]
 80a55c0:	2b25      	cmp	r3, #37	; 0x25
 80a55c2:	d116      	bne.n	80a55f2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
 80a55c4:	786b      	ldrb	r3, [r5, #1]
 80a55c6:	2b7a      	cmp	r3, #122	; 0x7a
 80a55c8:	d113      	bne.n	80a55f2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
 80a55ca:	a803      	add	r0, sp, #12
 80a55cc:	f004 f8a6 	bl	80a971c <strlen>
 80a55d0:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80a55d2:	4430      	add	r0, r6
 80a55d4:	ebc6 020a 	rsb	r2, r6, sl
 80a55d8:	1ca9      	adds	r1, r5, #2
 80a55da:	4420      	add	r0, r4
 80a55dc:	f003 fab3 	bl	80a8b46 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80a55e0:	4642      	mov	r2, r8
 80a55e2:	a903      	add	r1, sp, #12
 80a55e4:	4628      	mov	r0, r5
 80a55e6:	f003 faae 	bl	80a8b46 <memcpy>
            len = strlen(format_str);
 80a55ea:	4620      	mov	r0, r4
 80a55ec:	f004 f896 	bl	80a971c <strlen>
 80a55f0:	4680      	mov	r8, r0
 80a55f2:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a55f4:	e7de      	b.n	80a55b4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 80a55f6:	464b      	mov	r3, r9
 80a55f8:	4622      	mov	r2, r4
 80a55fa:	2132      	movs	r1, #50	; 0x32
 80a55fc:	a807      	add	r0, sp, #28
 80a55fe:	f003 fbd9 	bl	80a8db4 <strftime>
    return String(buf);
 80a5602:	a907      	add	r1, sp, #28
 80a5604:	4638      	mov	r0, r7
 80a5606:	f001 fab0 	bl	80a6b6a <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a560a:	4638      	mov	r0, r7
 80a560c:	b024      	add	sp, #144	; 0x90
 80a560e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a5612:	bf00      	nop
 80a5614:	080aecf5 	.word	0x080aecf5
 80a5618:	080ae384 	.word	0x080ae384

080a561c <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 80a561c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a561e:	4605      	mov	r5, r0
 80a5620:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 80a5622:	461c      	mov	r4, r3
 80a5624:	b913      	cbnz	r3, 80a562c <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 80a5626:	4b12      	ldr	r3, [pc, #72]	; (80a5670 <_ZN9TimeClass6formatElPKc+0x54>)
 80a5628:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 80a562a:	b12c      	cbz	r4, 80a5638 <_ZN9TimeClass6formatElPKc+0x1c>
 80a562c:	4b11      	ldr	r3, [pc, #68]	; (80a5674 <_ZN9TimeClass6formatElPKc+0x58>)
 80a562e:	4620      	mov	r0, r4
 80a5630:	6819      	ldr	r1, [r3, #0]
 80a5632:	f003 fb31 	bl	80a8c98 <strcmp>
 80a5636:	b920      	cbnz	r0, 80a5642 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 80a5638:	9901      	ldr	r1, [sp, #4]
 80a563a:	4628      	mov	r0, r5
 80a563c:	f7ff ff6e 	bl	80a551c <_ZN9TimeClass7timeStrEl>
 80a5640:	e013      	b.n	80a566a <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 80a5642:	4f0d      	ldr	r7, [pc, #52]	; (80a5678 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 80a5644:	9a01      	ldr	r2, [sp, #4]
 80a5646:	683b      	ldr	r3, [r7, #0]
 80a5648:	4e0c      	ldr	r6, [pc, #48]	; (80a567c <_ZN9TimeClass6formatElPKc+0x60>)
 80a564a:	441a      	add	r2, r3
 80a564c:	6833      	ldr	r3, [r6, #0]
 80a564e:	a802      	add	r0, sp, #8
 80a5650:	4413      	add	r3, r2
 80a5652:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 80a5656:	f003 f95d 	bl	80a8914 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80a565a:	683a      	ldr	r2, [r7, #0]
 80a565c:	6833      	ldr	r3, [r6, #0]
 80a565e:	4601      	mov	r1, r0
 80a5660:	4413      	add	r3, r2
 80a5662:	4628      	mov	r0, r5
 80a5664:	4622      	mov	r2, r4
 80a5666:	f7ff ff7b 	bl	80a5560 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 80a566a:	4628      	mov	r0, r5
 80a566c:	b003      	add	sp, #12
 80a566e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a5670:	200005c0 	.word	0x200005c0
 80a5674:	20000080 	.word	0x20000080
 80a5678:	200005c8 	.word	0x200005c8
 80a567c:	200005c4 	.word	0x200005c4

080a5680 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a5680:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a5682:	2000      	movs	r0, #0
 80a5684:	f7fe fbea 	bl	80a3e5c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a5688:	4604      	mov	r4, r0
 80a568a:	b968      	cbnz	r0, 80a56a8 <_ZN9TimeClass7isValidEv+0x28>
    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a568c:	f7fe fd36 	bl	80a40fc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a5690:	2801      	cmp	r0, #1
 80a5692:	d10b      	bne.n	80a56ac <_ZN9TimeClass7isValidEv+0x2c>
 80a5694:	4620      	mov	r0, r4
 80a5696:	f7fe fd59 	bl	80a414c <system_thread_get_state>
 80a569a:	b938      	cbnz	r0, 80a56ac <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a569c:	f7ff ff14 	bl	80a54c8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a56a0:	b930      	cbnz	r0, 80a56b0 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a56a2:	f7fe fcab 	bl	80a3ffc <spark_process>
 80a56a6:	e7f9      	b.n	80a569c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a56a8:	2001      	movs	r0, #1
 80a56aa:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a56ac:	2000      	movs	r0, #0
 80a56ae:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a56b0:	f7ff ff0a 	bl	80a54c8 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a56b4:	2000      	movs	r0, #0
 80a56b6:	f7fe fbd1 	bl	80a3e5c <HAL_RTC_Time_Is_Valid>
 80a56ba:	3000      	adds	r0, #0
 80a56bc:	bf18      	it	ne
 80a56be:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a56c0:	bd10      	pop	{r4, pc}

080a56c2 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a56c2:	b508      	push	{r3, lr}
    (void)isValid();
 80a56c4:	f7ff ffdc 	bl	80a5680 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a56c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a56cc:	f7fe bbbe 	b.w	80a3e4c <HAL_RTC_Get_UnixTime>

080a56d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a56d0:	4b02      	ldr	r3, [pc, #8]	; (80a56dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a56d2:	681a      	ldr	r2, [r3, #0]
 80a56d4:	4b02      	ldr	r3, [pc, #8]	; (80a56e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a56d6:	601a      	str	r2, [r3, #0]
 80a56d8:	4770      	bx	lr
 80a56da:	bf00      	nop
 80a56dc:	20000080 	.word	0x20000080
 80a56e0:	200005c0 	.word	0x200005c0

080a56e4 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80a56e4:	6880      	ldr	r0, [r0, #8]
 80a56e6:	6803      	ldr	r3, [r0, #0]
 80a56e8:	68db      	ldr	r3, [r3, #12]
 80a56ea:	4718      	bx	r3

080a56ec <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
 80a56ec:	4770      	bx	lr

080a56ee <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80a56ee:	b119      	cbz	r1, 80a56f8 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80a56f0:	680b      	ldr	r3, [r1, #0]
 80a56f2:	4608      	mov	r0, r1
 80a56f4:	685b      	ldr	r3, [r3, #4]
 80a56f6:	4718      	bx	r3
 80a56f8:	4770      	bx	lr

080a56fa <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80a56fa:	b119      	cbz	r1, 80a5704 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
 80a56fc:	680b      	ldr	r3, [r1, #0]
 80a56fe:	4608      	mov	r0, r1
 80a5700:	685b      	ldr	r3, [r3, #4]
 80a5702:	4718      	bx	r3
 80a5704:	4770      	bx	lr

080a5706 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a5706:	4770      	bx	lr

080a5708 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
 80a5708:	4770      	bx	lr

080a570a <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
 80a570a:	4770      	bx	lr

080a570c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80a570c:	b538      	push	{r3, r4, r5, lr}
 80a570e:	4604      	mov	r4, r0
 80a5710:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80a5712:	6800      	ldr	r0, [r0, #0]
 80a5714:	212e      	movs	r1, #46	; 0x2e
 80a5716:	f003 fab5 	bl	80a8c84 <strchrnul>
    size = s - category;
 80a571a:	6823      	ldr	r3, [r4, #0]
 80a571c:	1ac3      	subs	r3, r0, r3
 80a571e:	602b      	str	r3, [r5, #0]
    if (size) {
 80a5720:	b123      	cbz	r3, 80a572c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 80a5722:	7803      	ldrb	r3, [r0, #0]
 80a5724:	b103      	cbz	r3, 80a5728 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 80a5726:	3001      	adds	r0, #1
 80a5728:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a572a:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
 80a572c:	4618      	mov	r0, r3
}
 80a572e:	bd38      	pop	{r3, r4, r5, pc}

080a5730 <_ZN5spark16JSONStreamWriterD0Ev>:
 80a5730:	b510      	push	{r4, lr}
 80a5732:	4604      	mov	r4, r0
 80a5734:	210c      	movs	r1, #12
 80a5736:	f001 fb5d 	bl	80a6df4 <_ZdlPvj>
 80a573a:	4620      	mov	r0, r4
 80a573c:	bd10      	pop	{r4, pc}

080a573e <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80a573e:	b510      	push	{r4, lr}
 80a5740:	4604      	mov	r4, r0
 80a5742:	2104      	movs	r1, #4
 80a5744:	f001 fb56 	bl	80a6df4 <_ZdlPvj>
 80a5748:	4620      	mov	r0, r4
 80a574a:	bd10      	pop	{r4, pc}

080a574c <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a574c:	b510      	push	{r4, lr}
 80a574e:	4604      	mov	r4, r0
 80a5750:	2104      	movs	r1, #4
 80a5752:	f001 fb4f 	bl	80a6df4 <_ZdlPvj>
 80a5756:	4620      	mov	r0, r4
 80a5758:	bd10      	pop	{r4, pc}

080a575a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80a575a:	b538      	push	{r3, r4, r5, lr}
 80a575c:	460c      	mov	r4, r1
 80a575e:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80a5760:	f7ff fa22 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a5764:	4284      	cmp	r4, r0
 80a5766:	d102      	bne.n	80a576e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x14>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80a5768:	f7ff fa1e 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a576c:	e005      	b.n	80a577a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
#endif
        return;
    }
#if Wiring_USBSerial1
    if (stream == &USBSerial1) {
 80a576e:	f7ff fa57 	bl	80a4c20 <_Z17_fetch_usbserial1v>
 80a5772:	4284      	cmp	r4, r0
 80a5774:	d105      	bne.n	80a5782 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x28>
        USBSerial1.end();
 80a5776:	f7ff fa53 	bl	80a4c20 <_Z17_fetch_usbserial1v>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a577a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
        return;
    }
#if Wiring_USBSerial1
    if (stream == &USBSerial1) {
        USBSerial1.end();
 80a577e:	f7ff b9f5 	b.w	80a4b6c <_ZN9USBSerial3endEv>
        return;
    }
#endif
    if (stream == &Serial1) {
 80a5782:	f001 f969 	bl	80a6a58 <_Z22__fetch_global_Serial1v>
 80a5786:	4284      	cmp	r4, r0
 80a5788:	d105      	bne.n	80a5796 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3c>
        Serial1.end();
 80a578a:	f001 f965 	bl	80a6a58 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a578e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
 80a5792:	f001 b95a 	b.w	80a6a4a <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
 80a5796:	4621      	mov	r1, r4
 80a5798:	4628      	mov	r0, r5
 80a579a:	f7ff ffae 	bl	80a56fa <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
 80a579e:	bd38      	pop	{r3, r4, r5, pc}

080a57a0 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
 80a57a0:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 80a57a2:	f003 fa79 	bl	80a8c98 <strcmp>
}
 80a57a6:	fab0 f080 	clz	r0, r0
 80a57aa:	0940      	lsrs	r0, r0, #5
 80a57ac:	bd08      	pop	{r3, pc}

080a57ae <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a57ae:	b538      	push	{r3, r4, r5, lr}
 80a57b0:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80a57b2:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a57b4:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80a57b6:	f003 ffb1 	bl	80a971c <strlen>
 80a57ba:	4621      	mov	r1, r4
 80a57bc:	4602      	mov	r2, r0
 80a57be:	4628      	mov	r0, r5
}
 80a57c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
 80a57c4:	f7fe bea9 	b.w	80a451a <_ZN5spark10JSONWriter5valueEPKcj>

080a57c8 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a57c8:	6800      	ldr	r0, [r0, #0]
 80a57ca:	f7fe bb0f 	b.w	80a3dec <os_mutex_recursive_lock>

080a57ce <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
 80a57ce:	b570      	push	{r4, r5, r6, lr}
 80a57d0:	4604      	mov	r4, r0
    write(str, strlen(str));
 80a57d2:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
 80a57d4:	460d      	mov	r5, r1
    write(str, strlen(str));
 80a57d6:	f003 ffa1 	bl	80a971c <strlen>
 80a57da:	6823      	ldr	r3, [r4, #0]
 80a57dc:	4602      	mov	r2, r0
 80a57de:	4629      	mov	r1, r5
 80a57e0:	4620      	mov	r0, r4
}
 80a57e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
 80a57e6:	68db      	ldr	r3, [r3, #12]
 80a57e8:	4718      	bx	r3

080a57ea <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
 80a57ea:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 80a57ec:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
 80a57ee:	ab02      	add	r3, sp, #8
 80a57f0:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 80a57f4:	68d4      	ldr	r4, [r2, #12]
 80a57f6:	4619      	mov	r1, r3
 80a57f8:	2201      	movs	r2, #1
 80a57fa:	47a0      	blx	r4
}
 80a57fc:	b002      	add	sp, #8
 80a57fe:	bd10      	pop	{r4, pc}

080a5800 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a5800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5804:	6807      	ldr	r7, [r0, #0]
 80a5806:	468b      	mov	fp, r1
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a5808:	463c      	mov	r4, r7
 80a580a:	6845      	ldr	r5, [r0, #4]
 80a580c:	4691      	mov	r9, r2
 80a580e:	2214      	movs	r2, #20
 80a5810:	4355      	muls	r5, r2
 80a5812:	b085      	sub	sp, #20
 80a5814:	9301      	str	r3, [sp, #4]
 80a5816:	10ab      	asrs	r3, r5, #2
 80a5818:	4d18      	ldr	r5, [pc, #96]	; (80a587c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 80a581a:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a581c:	435d      	muls	r5, r3
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a581e:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80a5820:	2d00      	cmp	r5, #0
 80a5822:	9303      	str	r3, [sp, #12]
 80a5824:	dd23      	ble.n	80a586e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 80a5826:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
 80a5828:	106e      	asrs	r6, r5, #1
 80a582a:	fb03 f006 	mul.w	r0, r3, r6
 80a582e:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80a5832:	f8b8 a004 	ldrh.w	sl, [r8, #4]
 80a5836:	464a      	mov	r2, r9
 80a5838:	45d1      	cmp	r9, sl
 80a583a:	bf28      	it	cs
 80a583c:	4652      	movcs	r2, sl
 80a583e:	4659      	mov	r1, fp
 80a5840:	5820      	ldr	r0, [r4, r0]
 80a5842:	f003 ff73 	bl	80a972c <strncmp>
                if (cmp == 0) {
 80a5846:	9b03      	ldr	r3, [sp, #12]
 80a5848:	b948      	cbnz	r0, 80a585e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
 80a584a:	45d1      	cmp	r9, sl
 80a584c:	d103      	bne.n	80a5856 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a584e:	9a01      	ldr	r2, [sp, #4]
 80a5850:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a5852:	4635      	mov	r5, r6
 80a5854:	e7e4      	b.n	80a5820 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
 80a5856:	bf8c      	ite	hi
 80a5858:	2001      	movhi	r0, #1
 80a585a:	2000      	movls	r0, #0
 80a585c:	e000      	b.n	80a5860 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
 80a585e:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80a5860:	2800      	cmp	r0, #0
 80a5862:	d0f6      	beq.n	80a5852 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80a5864:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
 80a5866:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
 80a586a:	3e01      	subs	r6, #1
 80a586c:	e7f1      	b.n	80a5852 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
 80a586e:	1be4      	subs	r4, r4, r7
}
 80a5870:	4802      	ldr	r0, [pc, #8]	; (80a587c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
 80a5872:	10a4      	asrs	r4, r4, #2
}
 80a5874:	4360      	muls	r0, r4
 80a5876:	b005      	add	sp, #20
 80a5878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a587c:	cccccccd 	.word	0xcccccccd

080a5880 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a5880:	b5f0      	push	{r4, r5, r6, r7, lr}
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
 80a5882:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a5884:	b085      	sub	sp, #20
 80a5886:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
 80a5888:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
 80a588a:	b313      	cbz	r3, 80a58d2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
 80a588c:	b309      	cbz	r1, 80a58d2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a588e:	2300      	movs	r3, #0
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
 80a5890:	461d      	mov	r5, r3
LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a5892:	af04      	add	r7, sp, #16
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80a5894:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a5898:	f847 3d04 	str.w	r3, [r7, #-4]!
        while ((name = nextSubcategoryName(category, size))) {
 80a589c:	4639      	mov	r1, r7
 80a589e:	a801      	add	r0, sp, #4
 80a58a0:	f7ff ff34 	bl	80a570c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a58a4:	4601      	mov	r1, r0
 80a58a6:	b1a0      	cbz	r0, 80a58d2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
 80a58a8:	ab04      	add	r3, sp, #16
 80a58aa:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
 80a58ae:	9a03      	ldr	r2, [sp, #12]
 80a58b0:	4620      	mov	r0, r4
 80a58b2:	f7ff ffa5 	bl	80a5800 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80a58b6:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a58ba:	b153      	cbz	r3, 80a58d2 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
 80a58bc:	6823      	ldr	r3, [r4, #0]
 80a58be:	2414      	movs	r4, #20
 80a58c0:	fb04 3400 	mla	r4, r4, r0, r3
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
 80a58c4:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
 80a58c8:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
 80a58ca:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80a58cc:	bfa8      	it	ge
 80a58ce:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 80a58d0:	e7e4      	b.n	80a589c <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
 80a58d2:	4630      	mov	r0, r6
 80a58d4:	b005      	add	sp, #20
 80a58d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a58d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80a58d8:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80a58da:	4c09      	ldr	r4, [pc, #36]	; (80a5900 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 80a58dc:	6823      	ldr	r3, [r4, #0]
 80a58de:	07db      	lsls	r3, r3, #31
 80a58e0:	d40b      	bmi.n	80a58fa <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80a58e2:	4620      	mov	r0, r4
 80a58e4:	f7fa fbec 	bl	80a00c0 <__cxa_guard_acquire>
 80a58e8:	b138      	cbz	r0, 80a58fa <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80a58ea:	4620      	mov	r0, r4
 80a58ec:	f7fa fbed 	bl	80a00ca <__cxa_guard_release>
 80a58f0:	4a04      	ldr	r2, [pc, #16]	; (80a5904 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80a58f2:	4905      	ldr	r1, [pc, #20]	; (80a5908 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80a58f4:	4805      	ldr	r0, [pc, #20]	; (80a590c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a58f6:	f001 fa6f 	bl	80a6dd8 <__aeabi_atexit>
    return &factory;
}
 80a58fa:	4804      	ldr	r0, [pc, #16]	; (80a590c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a58fc:	bd10      	pop	{r4, pc}
 80a58fe:	bf00      	nop
 80a5900:	200005cc 	.word	0x200005cc
 80a5904:	2000017c 	.word	0x2000017c
 80a5908:	080a5709 	.word	0x080a5709
 80a590c:	20000088 	.word	0x20000088

080a5910 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80a5910:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80a5912:	4c09      	ldr	r4, [pc, #36]	; (80a5938 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 80a5914:	6823      	ldr	r3, [r4, #0]
 80a5916:	07db      	lsls	r3, r3, #31
 80a5918:	d40b      	bmi.n	80a5932 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80a591a:	4620      	mov	r0, r4
 80a591c:	f7fa fbd0 	bl	80a00c0 <__cxa_guard_acquire>
 80a5920:	b138      	cbz	r0, 80a5932 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80a5922:	4620      	mov	r0, r4
 80a5924:	f7fa fbd1 	bl	80a00ca <__cxa_guard_release>
 80a5928:	4a04      	ldr	r2, [pc, #16]	; (80a593c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80a592a:	4905      	ldr	r1, [pc, #20]	; (80a5940 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80a592c:	4805      	ldr	r0, [pc, #20]	; (80a5944 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a592e:	f001 fa53 	bl	80a6dd8 <__aeabi_atexit>
    return &factory;
}
 80a5932:	4804      	ldr	r0, [pc, #16]	; (80a5944 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a5934:	bd10      	pop	{r4, pc}
 80a5936:	bf00      	nop
 80a5938:	200005fc 	.word	0x200005fc
 80a593c:	2000017c 	.word	0x2000017c
 80a5940:	080a5707 	.word	0x080a5707
 80a5944:	20000084 	.word	0x20000084

080a5948 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80a5948:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a594a:	2500      	movs	r5, #0
 80a594c:	4604      	mov	r4, r0
 80a594e:	6005      	str	r5, [r0, #0]
 80a5950:	6045      	str	r5, [r0, #4]
 80a5952:	6085      	str	r5, [r0, #8]
 80a5954:	6105      	str	r5, [r0, #16]
 80a5956:	6145      	str	r5, [r0, #20]
 80a5958:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a595a:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 80a595e:	f7fe fa3d 	bl	80a3ddc <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80a5962:	f7ff ffb9 	bl	80a58d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80a5966:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a5968:	f7ff ffd2 	bl	80a5910 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80a596c:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a596e:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
 80a5970:	4620      	mov	r0, r4
 80a5972:	bd38      	pop	{r3, r4, r5, pc}

080a5974 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80a5974:	b510      	push	{r4, lr}
    static LogManager mgr;
 80a5976:	4c0a      	ldr	r4, [pc, #40]	; (80a59a0 <_ZN5spark10LogManager8instanceEv+0x2c>)
 80a5978:	6823      	ldr	r3, [r4, #0]
 80a597a:	07db      	lsls	r3, r3, #31
 80a597c:	d40e      	bmi.n	80a599c <_ZN5spark10LogManager8instanceEv+0x28>
 80a597e:	4620      	mov	r0, r4
 80a5980:	f7fa fb9e 	bl	80a00c0 <__cxa_guard_acquire>
 80a5984:	b150      	cbz	r0, 80a599c <_ZN5spark10LogManager8instanceEv+0x28>
 80a5986:	4807      	ldr	r0, [pc, #28]	; (80a59a4 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a5988:	f7ff ffde 	bl	80a5948 <_ZN5spark10LogManagerC1Ev>
 80a598c:	4620      	mov	r0, r4
 80a598e:	f7fa fb9c 	bl	80a00ca <__cxa_guard_release>
 80a5992:	4a05      	ldr	r2, [pc, #20]	; (80a59a8 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a5994:	4905      	ldr	r1, [pc, #20]	; (80a59ac <_ZN5spark10LogManager8instanceEv+0x38>)
 80a5996:	4803      	ldr	r0, [pc, #12]	; (80a59a4 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a5998:	f001 fa1e 	bl	80a6dd8 <__aeabi_atexit>
    return &mgr;
}
 80a599c:	4801      	ldr	r0, [pc, #4]	; (80a59a4 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a599e:	bd10      	pop	{r4, pc}
 80a59a0:	200005d0 	.word	0x200005d0
 80a59a4:	200005d4 	.word	0x200005d4
 80a59a8:	2000017c 	.word	0x2000017c
 80a59ac:	080a5dfd 	.word	0x080a5dfd

080a59b0 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80a59b0:	2300      	movs	r3, #0
 80a59b2:	4a02      	ldr	r2, [pc, #8]	; (80a59bc <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80a59b4:	4902      	ldr	r1, [pc, #8]	; (80a59c0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80a59b6:	4803      	ldr	r0, [pc, #12]	; (80a59c4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80a59b8:	f7fe bb08 	b.w	80a3fcc <log_set_callbacks>
 80a59bc:	080a5ce1 	.word	0x080a5ce1
 80a59c0:	080a5c71 	.word	0x080a5c71
 80a59c4:	080a5bf9 	.word	0x080a5bf9

080a59c8 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80a59c8:	2300      	movs	r3, #0
 80a59ca:	461a      	mov	r2, r3
 80a59cc:	4619      	mov	r1, r3
 80a59ce:	4618      	mov	r0, r3
 80a59d0:	f7fe bafc 	b.w	80a3fcc <log_set_callbacks>

080a59d4 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80a59d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a59d6:	4605      	mov	r5, r0
    return JSONValue(v_, d_);
 80a59d8:	690e      	ldr	r6, [r1, #16]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a59da:	f851 3b04 	ldr.w	r3, [r1], #4
 80a59de:	ac02      	add	r4, sp, #8
 80a59e0:	f844 3d08 	str.w	r3, [r4, #-8]!
 80a59e4:	a801      	add	r0, sp, #4
 80a59e6:	f7ff fa36 	bl	80a4e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a59ea:	4622      	mov	r2, r4
 80a59ec:	4631      	mov	r1, r6
 80a59ee:	4628      	mov	r0, r5
 80a59f0:	f7fe fe07 	bl	80a4602 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a59f4:	a801      	add	r0, sp, #4
 80a59f6:	f7fe fd9f 	bl	80a4538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a59fa:	4628      	mov	r0, r5
 80a59fc:	b002      	add	sp, #8
 80a59fe:	bd70      	pop	{r4, r5, r6, pc}

080a5a00 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 80a5a00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a5a02:	4605      	mov	r5, r0
        JSONObjectIterator(value.t_, value.d_) {
 80a5a04:	688e      	ldr	r6, [r1, #8]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a5a06:	f851 3b04 	ldr.w	r3, [r1], #4
 80a5a0a:	ac02      	add	r4, sp, #8
 80a5a0c:	f844 3d08 	str.w	r3, [r4, #-8]!
 80a5a10:	a801      	add	r0, sp, #4
 80a5a12:	f7ff fa20 	bl	80a4e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a5a16:	4622      	mov	r2, r4
 80a5a18:	4631      	mov	r1, r6
 80a5a1a:	4628      	mov	r0, r5
 80a5a1c:	f7fe fdd6 	bl	80a45cc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a5a20:	a801      	add	r0, sp, #4
 80a5a22:	f7fe fd89 	bl	80a4538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a5a26:	4628      	mov	r0, r5
 80a5a28:	b002      	add	sp, #8
 80a5a2a:	bd70      	pop	{r4, r5, r6, pc}

080a5a2c <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
 80a5a2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a5a2e:	4605      	mov	r5, r0
    return JSONString(k_, d_);
 80a5a30:	68ce      	ldr	r6, [r1, #12]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a5a32:	f851 3b04 	ldr.w	r3, [r1], #4
 80a5a36:	ac02      	add	r4, sp, #8
 80a5a38:	f844 3d08 	str.w	r3, [r4, #-8]!
 80a5a3c:	a801      	add	r0, sp, #4
 80a5a3e:	f7ff fa0a 	bl	80a4e56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a5a42:	4622      	mov	r2, r4
 80a5a44:	4631      	mov	r1, r6
 80a5a46:	4628      	mov	r0, r5
 80a5a48:	f7fe fd98 	bl	80a457c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a5a4c:	a801      	add	r0, sp, #4
 80a5a4e:	f7fe fd73 	bl	80a4538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a5a52:	4628      	mov	r0, r5
 80a5a54:	b002      	add	sp, #8
 80a5a56:	bd70      	pop	{r4, r5, r6, pc}

080a5a58 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80a5a58:	b530      	push	{r4, r5, lr}
 80a5a5a:	b08b      	sub	sp, #44	; 0x2c
 80a5a5c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80a5a5e:	4601      	mov	r1, r0
 80a5a60:	a804      	add	r0, sp, #16
 80a5a62:	f7ff ffcd 	bl	80a5a00 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
 80a5a66:	a804      	add	r0, sp, #16
 80a5a68:	f7fe fc99 	bl	80a439e <_ZN5spark18JSONObjectIterator4nextEv>
 80a5a6c:	b1e8      	cbz	r0, 80a5aaa <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
 80a5a6e:	a904      	add	r1, sp, #16
 80a5a70:	4668      	mov	r0, sp
 80a5a72:	f7ff ffdb 	bl	80a5a2c <_ZNK5spark18JSONObjectIterator4nameEv>
 80a5a76:	490f      	ldr	r1, [pc, #60]	; (80a5ab4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
 80a5a78:	9802      	ldr	r0, [sp, #8]
 80a5a7a:	f7ff fe91 	bl	80a57a0 <_ZNK5spark10JSONStringeqEPKc.isra.7>
 80a5a7e:	4604      	mov	r4, r0
 80a5a80:	b110      	cbz	r0, 80a5a88 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
 80a5a82:	1c2c      	adds	r4, r5, #0
 80a5a84:	bf18      	it	ne
 80a5a86:	2401      	movne	r4, #1
 80a5a88:	a801      	add	r0, sp, #4
 80a5a8a:	f7fe fd55 	bl	80a4538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a5a8e:	2c00      	cmp	r4, #0
 80a5a90:	d0e9      	beq.n	80a5a66 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
 80a5a92:	a904      	add	r1, sp, #16
 80a5a94:	4668      	mov	r0, sp
 80a5a96:	f7ff ff9d 	bl	80a59d4 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a5a9a:	4668      	mov	r0, sp
 80a5a9c:	f7fe fc5f 	bl	80a435e <_ZNK5spark9JSONValue5toIntEv>
 80a5aa0:	6028      	str	r0, [r5, #0]
 80a5aa2:	a801      	add	r0, sp, #4
 80a5aa4:	f7fe fd48 	bl	80a4538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a5aa8:	e7dd      	b.n	80a5a66 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
 80a5aaa:	a805      	add	r0, sp, #20
 80a5aac:	f7fe fd44 	bl	80a4538 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
 80a5ab0:	b00b      	add	sp, #44	; 0x2c
 80a5ab2:	bd30      	pop	{r4, r5, pc}
 80a5ab4:	080ae3f4 	.word	0x080ae3f4

080a5ab8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a5ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a5aba:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
 80a5abc:	491a      	ldr	r1, [pc, #104]	; (80a5b28 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 80a5abe:	4620      	mov	r0, r4
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a5ac0:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
 80a5ac2:	f003 f8e9 	bl	80a8c98 <strcmp>
 80a5ac6:	b940      	cbnz	r0, 80a5ada <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
 80a5ac8:	f7ff f86e 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a5acc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a5ad0:	f7ff f848 	bl	80a4b64 <_ZN9USBSerial5beginEl>
        return &Serial;
 80a5ad4:	f7ff f868 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a5ad8:	e023      	b.n	80a5b22 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#if Wiring_USBSerial1
    if (strcmp(type, "USBSerial1") == 0) {
 80a5ada:	4914      	ldr	r1, [pc, #80]	; (80a5b2c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 80a5adc:	4620      	mov	r0, r4
 80a5ade:	f003 f8db 	bl	80a8c98 <strcmp>
 80a5ae2:	b940      	cbnz	r0, 80a5af6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x3e>
        USBSerial1.begin();
 80a5ae4:	f7ff f89c 	bl	80a4c20 <_Z17_fetch_usbserial1v>
 80a5ae8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a5aec:	f7ff f83a 	bl	80a4b64 <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 80a5af0:	f7ff f896 	bl	80a4c20 <_Z17_fetch_usbserial1v>
 80a5af4:	e015      	b.n	80a5b22 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
 80a5af6:	490e      	ldr	r1, [pc, #56]	; (80a5b30 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x78>)
 80a5af8:	4620      	mov	r0, r4
 80a5afa:	f003 f8cd 	bl	80a8c98 <strcmp>
 80a5afe:	b978      	cbnz	r0, 80a5b20 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 80a5b00:	a902      	add	r1, sp, #8
 80a5b02:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80a5b06:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
 80a5b0a:	4628      	mov	r0, r5
 80a5b0c:	f7ff ffa4 	bl	80a5a58 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80a5b10:	f000 ffa2 	bl	80a6a58 <_Z22__fetch_global_Serial1v>
 80a5b14:	9901      	ldr	r1, [sp, #4]
 80a5b16:	f000 ff95 	bl	80a6a44 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80a5b1a:	f000 ff9d 	bl	80a6a58 <_Z22__fetch_global_Serial1v>
 80a5b1e:	e000      	b.n	80a5b22 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
 80a5b20:	2000      	movs	r0, #0
}
 80a5b22:	b003      	add	sp, #12
 80a5b24:	bd30      	pop	{r4, r5, pc}
 80a5b26:	bf00      	nop
 80a5b28:	080ae3f9 	.word	0x080ae3f9
 80a5b2c:	080ae400 	.word	0x080ae400
 80a5b30:	080ae403 	.word	0x080ae403

080a5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a5b34:	b570      	push	{r4, r5, r6, lr}
 80a5b36:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 80a5b38:	6804      	ldr	r4, [r0, #0]
 80a5b3a:	6843      	ldr	r3, [r0, #4]
 80a5b3c:	2614      	movs	r6, #20
 80a5b3e:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a5b42:	42a6      	cmp	r6, r4
 80a5b44:	d005      	beq.n	80a5b52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 80a5b46:	f104 0008 	add.w	r0, r4, #8
 80a5b4a:	f7ff fff3 	bl	80a5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a5b4e:	3414      	adds	r4, #20
 80a5b50:	e7f7      	b.n	80a5b42 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a5b52:	6828      	ldr	r0, [r5, #0]
 80a5b54:	f7fe fb1e 	bl	80a4194 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 80a5b58:	4628      	mov	r0, r5
 80a5b5a:	bd70      	pop	{r4, r5, r6, pc}

080a5b5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a5b5c:	b570      	push	{r4, r5, r6, lr}
 80a5b5e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 80a5b60:	6804      	ldr	r4, [r0, #0]
 80a5b62:	6843      	ldr	r3, [r0, #4]
 80a5b64:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a5b68:	42a6      	cmp	r6, r4
 80a5b6a:	d004      	beq.n	80a5b76 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80a5b6c:	4620      	mov	r0, r4
 80a5b6e:	f000 ffb5 	bl	80a6adc <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a5b72:	3410      	adds	r4, #16
 80a5b74:	e7f8      	b.n	80a5b68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a5b76:	6828      	ldr	r0, [r5, #0]
 80a5b78:	f7fe fb0c 	bl	80a4194 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 80a5b7c:	4628      	mov	r0, r5
 80a5b7e:	bd70      	pop	{r4, r5, r6, pc}

080a5b80 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
 80a5b80:	b510      	push	{r4, lr}
 80a5b82:	4604      	mov	r4, r0
 80a5b84:	300c      	adds	r0, #12
 80a5b86:	f7ff ffd5 	bl	80a5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a5b8a:	4620      	mov	r0, r4
 80a5b8c:	f7ff ffe6 	bl	80a5b5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a5b90:	4620      	mov	r0, r4
 80a5b92:	bd10      	pop	{r4, pc}

080a5b94 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
 80a5b94:	b510      	push	{r4, lr}
 80a5b96:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
 80a5b98:	4b03      	ldr	r3, [pc, #12]	; (80a5ba8 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80a5b9a:	f840 3b04 	str.w	r3, [r0], #4
 80a5b9e:	f7ff ffef 	bl	80a5b80 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
 80a5ba2:	4620      	mov	r0, r4
 80a5ba4:	bd10      	pop	{r4, pc}
 80a5ba6:	bf00      	nop
 80a5ba8:	080aba98 	.word	0x080aba98

080a5bac <_ZN5spark16StreamLogHandlerD0Ev>:
 80a5bac:	b510      	push	{r4, lr}
 80a5bae:	4604      	mov	r4, r0
 80a5bb0:	f7ff fff0 	bl	80a5b94 <_ZN5spark16StreamLogHandlerD1Ev>
 80a5bb4:	4620      	mov	r0, r4
 80a5bb6:	2124      	movs	r1, #36	; 0x24
 80a5bb8:	f001 f91c 	bl	80a6df4 <_ZdlPvj>
 80a5bbc:	4620      	mov	r0, r4
 80a5bbe:	bd10      	pop	{r4, pc}

080a5bc0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
 80a5bc0:	b510      	push	{r4, lr}
 80a5bc2:	4604      	mov	r4, r0
 80a5bc4:	4b02      	ldr	r3, [pc, #8]	; (80a5bd0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80a5bc6:	6003      	str	r3, [r0, #0]
 80a5bc8:	f7ff ffe4 	bl	80a5b94 <_ZN5spark16StreamLogHandlerD1Ev>
 80a5bcc:	4620      	mov	r0, r4
 80a5bce:	bd10      	pop	{r4, pc}
 80a5bd0:	080ae3cc 	.word	0x080ae3cc

080a5bd4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80a5bd4:	b510      	push	{r4, lr}
 80a5bd6:	4604      	mov	r4, r0
 80a5bd8:	f7ff fff2 	bl	80a5bc0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80a5bdc:	4620      	mov	r0, r4
 80a5bde:	2124      	movs	r1, #36	; 0x24
 80a5be0:	f001 f908 	bl	80a6df4 <_ZdlPvj>
 80a5be4:	4620      	mov	r0, r4
 80a5be6:	bd10      	pop	{r4, pc}

080a5be8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80a5be8:	b510      	push	{r4, lr}
 80a5bea:	4604      	mov	r4, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a5bec:	6803      	ldr	r3, [r0, #0]
 80a5bee:	6818      	ldr	r0, [r3, #0]
 80a5bf0:	f7fe f904 	bl	80a3dfc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 80a5bf4:	4620      	mov	r0, r4
 80a5bf6:	bd10      	pop	{r4, pc}

080a5bf8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a5bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5bfc:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80a5bfe:	4b1b      	ldr	r3, [pc, #108]	; (80a5c6c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
 80a5c00:	b085      	sub	sp, #20
 80a5c02:	685b      	ldr	r3, [r3, #4]
 80a5c04:	4682      	mov	sl, r0
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a5c06:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a5c0a:	460e      	mov	r6, r1
 80a5c0c:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a5c0e:	bb53      	cbnz	r3, 80a5c66 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
 80a5c10:	f7ff feb0 	bl	80a5974 <_ZN5spark10LogManager8instanceEv>
 80a5c14:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a5c16:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a5c18:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 80a5c1a:	f7ff fdd5 	bl	80a57c8 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
 80a5c1e:	7b23      	ldrb	r3, [r4, #12]
 80a5c20:	b9f3      	cbnz	r3, 80a5c60 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a5c22:	2301      	movs	r3, #1
 80a5c24:	7323      	strb	r3, [r4, #12]
 80a5c26:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 80a5c28:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
 80a5c2a:	b2f6      	uxtb	r6, r6
 80a5c2c:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
 80a5c30:	454d      	cmp	r5, r9
 80a5c32:	d013      	beq.n	80a5c5c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
 80a5c34:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
 80a5c38:	4641      	mov	r1, r8
 80a5c3a:	1d38      	adds	r0, r7, #4
 80a5c3c:	f7ff fe20 	bl	80a5880 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a5c40:	4286      	cmp	r6, r0
 80a5c42:	d3f5      	bcc.n	80a5c30 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
 80a5c44:	683b      	ldr	r3, [r7, #0]
 80a5c46:	f8cd b000 	str.w	fp, [sp]
 80a5c4a:	689b      	ldr	r3, [r3, #8]
 80a5c4c:	4638      	mov	r0, r7
 80a5c4e:	469e      	mov	lr, r3
 80a5c50:	4632      	mov	r2, r6
 80a5c52:	4643      	mov	r3, r8
 80a5c54:	4651      	mov	r1, sl
 80a5c56:	4677      	mov	r7, lr
 80a5c58:	47b8      	blx	r7
 80a5c5a:	e7e9      	b.n	80a5c30 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a5c5c:	2300      	movs	r3, #0
 80a5c5e:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
 80a5c60:	a803      	add	r0, sp, #12
 80a5c62:	f7ff ffc1 	bl	80a5be8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80a5c66:	b005      	add	sp, #20
 80a5c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5c6c:	e000ed00 	.word	0xe000ed00

080a5c70 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a5c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5c74:	4699      	mov	r9, r3
 80a5c76:	4b19      	ldr	r3, [pc, #100]	; (80a5cdc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
 80a5c78:	4607      	mov	r7, r0
 80a5c7a:	685b      	ldr	r3, [r3, #4]
 80a5c7c:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a5c7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a5c82:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a5c84:	bb33      	cbnz	r3, 80a5cd4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
 80a5c86:	f7ff fe75 	bl	80a5974 <_ZN5spark10LogManager8instanceEv>
 80a5c8a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a5c8c:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a5c8e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80a5c90:	f7ff fd9a 	bl	80a57c8 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
 80a5c94:	7b23      	ldrb	r3, [r4, #12]
 80a5c96:	b9d3      	cbnz	r3, 80a5cce <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a5c98:	2301      	movs	r3, #1
 80a5c9a:	7323      	strb	r3, [r4, #12]
 80a5c9c:	6825      	ldr	r5, [r4, #0]
 80a5c9e:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
 80a5ca0:	fa5f fb86 	uxtb.w	fp, r6
 80a5ca4:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
 80a5ca8:	4555      	cmp	r5, sl
 80a5caa:	d00e      	beq.n	80a5cca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
 80a5cac:	f855 6b04 	ldr.w	r6, [r5], #4
 80a5cb0:	4649      	mov	r1, r9
 80a5cb2:	1d30      	adds	r0, r6, #4
 80a5cb4:	f7ff fde4 	bl	80a5880 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a5cb8:	4583      	cmp	fp, r0
 80a5cba:	d3f5      	bcc.n	80a5ca8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
 80a5cbc:	6833      	ldr	r3, [r6, #0]
 80a5cbe:	4642      	mov	r2, r8
 80a5cc0:	68db      	ldr	r3, [r3, #12]
 80a5cc2:	4639      	mov	r1, r7
 80a5cc4:	4630      	mov	r0, r6
 80a5cc6:	4798      	blx	r3
 80a5cc8:	e7ee      	b.n	80a5ca8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a5cca:	2300      	movs	r3, #0
 80a5ccc:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
 80a5cce:	a801      	add	r0, sp, #4
 80a5cd0:	f7ff ff8a 	bl	80a5be8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
 80a5cd4:	b003      	add	sp, #12
 80a5cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a5cda:	bf00      	nop
 80a5cdc:	e000ed00 	.word	0xe000ed00

080a5ce0 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80a5ce0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a5ce4:	4b15      	ldr	r3, [pc, #84]	; (80a5d3c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
 80a5ce6:	4604      	mov	r4, r0
 80a5ce8:	685b      	ldr	r3, [r3, #4]
 80a5cea:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a5cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a5cf0:	b9fb      	cbnz	r3, 80a5d32 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
 80a5cf2:	f7ff fe3f 	bl	80a5974 <_ZN5spark10LogManager8instanceEv>
 80a5cf6:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
 80a5cf8:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a5cfa:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80a5cfc:	f7ff fd64 	bl	80a57c8 <_ZN14RecursiveMutex4lockEv>
 80a5d00:	e896 00a0 	ldmia.w	r6, {r5, r7}
 80a5d04:	2646      	movs	r6, #70	; 0x46
 80a5d06:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a5d0a:	42af      	cmp	r7, r5
 80a5d0c:	d107      	bne.n	80a5d1e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
 80a5d0e:	a801      	add	r0, sp, #4
 80a5d10:	f7ff ff6a 	bl	80a5be8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
 80a5d14:	42b4      	cmp	r4, r6
 80a5d16:	bfb4      	ite	lt
 80a5d18:	2000      	movlt	r0, #0
 80a5d1a:	2001      	movge	r0, #1
 80a5d1c:	e00a      	b.n	80a5d34 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
 80a5d1e:	f855 0b04 	ldr.w	r0, [r5], #4
 80a5d22:	4641      	mov	r1, r8
 80a5d24:	3004      	adds	r0, #4
 80a5d26:	f7ff fdab 	bl	80a5880 <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a5d2a:	4286      	cmp	r6, r0
 80a5d2c:	bfa8      	it	ge
 80a5d2e:	4606      	movge	r6, r0
 80a5d30:	e7eb      	b.n	80a5d0a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
 80a5d32:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
 80a5d34:	b002      	add	sp, #8
 80a5d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a5d3a:	bf00      	nop
 80a5d3c:	e000ed00 	.word	0xe000ed00

080a5d40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80a5d40:	b570      	push	{r4, r5, r6, lr}
 80a5d42:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80a5d44:	6803      	ldr	r3, [r0, #0]
 80a5d46:	6842      	ldr	r2, [r0, #4]
 80a5d48:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
 80a5d4c:	429a      	cmp	r2, r3
 80a5d4e:	4618      	mov	r0, r3
 80a5d50:	d00d      	beq.n	80a5d6e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
            if (*p == value) {
 80a5d52:	6806      	ldr	r6, [r0, #0]
 80a5d54:	680d      	ldr	r5, [r1, #0]
 80a5d56:	3304      	adds	r3, #4
 80a5d58:	42ae      	cmp	r6, r5
 80a5d5a:	d1f7      	bne.n	80a5d4c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
 80a5d5c:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a5d5e:	1a52      	subs	r2, r2, r1
 80a5d60:	f002 fefc 	bl	80a8b5c <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
 80a5d64:	6863      	ldr	r3, [r4, #4]
    return true;
 80a5d66:	2001      	movs	r0, #1
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
 80a5d68:	3b01      	subs	r3, #1
 80a5d6a:	6063      	str	r3, [r4, #4]
    return true;
}
 80a5d6c:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
 80a5d6e:	2000      	movs	r0, #0
 80a5d70:	bd70      	pop	{r4, r5, r6, pc}

080a5d72 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
 80a5d72:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a5d74:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a5d76:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
 80a5d78:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a5d7a:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 80a5d7c:	f7ff fd24 	bl	80a57c8 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a5d80:	a901      	add	r1, sp, #4
 80a5d82:	4620      	mov	r0, r4
 80a5d84:	f7ff ffdc 	bl	80a5d40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80a5d88:	b920      	cbnz	r0, 80a5d94 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
 80a5d8a:	a803      	add	r0, sp, #12
 80a5d8c:	f7ff ff2c 	bl	80a5be8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
 80a5d90:	b004      	add	sp, #16
 80a5d92:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a5d94:	6863      	ldr	r3, [r4, #4]
 80a5d96:	2b00      	cmp	r3, #0
 80a5d98:	d1f7      	bne.n	80a5d8a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
 80a5d9a:	f7ff fe15 	bl	80a59c8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
 80a5d9e:	e7f4      	b.n	80a5d8a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

080a5da0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
 80a5da0:	b570      	push	{r4, r5, r6, lr}
 80a5da2:	4604      	mov	r4, r0
 80a5da4:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 80a5da6:	6943      	ldr	r3, [r0, #20]
 80a5da8:	2618      	movs	r6, #24
 80a5daa:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80a5dae:	42ae      	cmp	r6, r5
 80a5db0:	d015      	beq.n	80a5dde <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80a5db2:	f105 0110 	add.w	r1, r5, #16
 80a5db6:	4620      	mov	r0, r4
 80a5db8:	f7ff ffc2 	bl	80a5d40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 80a5dbc:	6863      	ldr	r3, [r4, #4]
 80a5dbe:	b90b      	cbnz	r3, 80a5dc4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 80a5dc0:	f7ff fe02 	bl	80a59c8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
 80a5dc4:	69e0      	ldr	r0, [r4, #28]
 80a5dc6:	6929      	ldr	r1, [r5, #16]
 80a5dc8:	6803      	ldr	r3, [r0, #0]
 80a5dca:	68db      	ldr	r3, [r3, #12]
 80a5dcc:	4798      	blx	r3
        if (h.stream) {
 80a5dce:	6969      	ldr	r1, [r5, #20]
 80a5dd0:	b119      	cbz	r1, 80a5dda <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80a5dd2:	6a20      	ldr	r0, [r4, #32]
 80a5dd4:	6803      	ldr	r3, [r0, #0]
 80a5dd6:	68db      	ldr	r3, [r3, #12]
 80a5dd8:	4798      	blx	r3
 80a5dda:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
 80a5ddc:	e7e7      	b.n	80a5dae <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
 80a5dde:	6925      	ldr	r5, [r4, #16]
 80a5de0:	6963      	ldr	r3, [r4, #20]
 80a5de2:	2618      	movs	r6, #24
 80a5de4:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a5de8:	42b5      	cmp	r5, r6
 80a5dea:	d004      	beq.n	80a5df6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
 80a5dec:	4628      	mov	r0, r5
 80a5dee:	f000 fe75 	bl	80a6adc <_ZN6StringD1Ev>
 80a5df2:	3518      	adds	r5, #24
 80a5df4:	e7f8      	b.n	80a5de8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
 80a5df6:	2300      	movs	r3, #0
 80a5df8:	6163      	str	r3, [r4, #20]
 80a5dfa:	bd70      	pop	{r4, r5, r6, pc}

080a5dfc <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
 80a5dfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a5dfe:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a5e00:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
 80a5e02:	f7ff fde1 	bl	80a59c8 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
 80a5e06:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80a5e0a:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
 80a5e0e:	f7ff fcdb 	bl	80a57c8 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
 80a5e12:	4620      	mov	r0, r4
 80a5e14:	f7ff ffc4 	bl	80a5da0 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
 80a5e18:	4628      	mov	r0, r5
 80a5e1a:	f7ff fee5 	bl	80a5be8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
 80a5e1e:	6925      	ldr	r5, [r4, #16]
 80a5e20:	6963      	ldr	r3, [r4, #20]
 80a5e22:	2618      	movs	r6, #24
 80a5e24:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a5e28:	42b5      	cmp	r5, r6
 80a5e2a:	d004      	beq.n	80a5e36 <_ZN5spark10LogManagerD1Ev+0x3a>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
 80a5e2c:	4628      	mov	r0, r5
 80a5e2e:	f000 fe55 	bl	80a6adc <_ZN6StringD1Ev>
 80a5e32:	3518      	adds	r5, #24
 80a5e34:	e7f8      	b.n	80a5e28 <_ZN5spark10LogManagerD1Ev+0x2c>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a5e36:	6920      	ldr	r0, [r4, #16]
 80a5e38:	f7fe f9ac 	bl	80a4194 <free>
 80a5e3c:	6820      	ldr	r0, [r4, #0]
 80a5e3e:	f7fe f9a9 	bl	80a4194 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
 80a5e42:	4620      	mov	r0, r4
 80a5e44:	b002      	add	sp, #8
 80a5e46:	bd70      	pop	{r4, r5, r6, pc}

080a5e48 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a5e48:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a5e4a:	680a      	ldr	r2, [r1, #0]
 80a5e4c:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a5e4e:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a5e50:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a5e52:	684a      	ldr	r2, [r1, #4]
 80a5e54:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a5e56:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a5e58:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a5e5a:	688a      	ldr	r2, [r1, #8]
 80a5e5c:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a5e5e:	608b      	str	r3, [r1, #8]
 80a5e60:	4770      	bx	lr

080a5e62 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 80a5e62:	b510      	push	{r4, lr}
 80a5e64:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a5e66:	2300      	movs	r3, #0
 80a5e68:	6003      	str	r3, [r0, #0]
 80a5e6a:	6043      	str	r3, [r0, #4]
 80a5e6c:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a5e6e:	f7ff ffeb 	bl	80a5e48 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
 80a5e72:	4620      	mov	r0, r4
 80a5e74:	bd10      	pop	{r4, pc}

080a5e76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 80a5e76:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 80a5e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5e7a:	4604      	mov	r4, r0
 80a5e7c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a5e7e:	d925      	bls.n	80a5ecc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
 80a5e80:	4290      	cmp	r0, r2
 80a5e82:	d224      	bcs.n	80a5ece <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
 80a5e84:	1a55      	subs	r5, r2, r1
 80a5e86:	3d14      	subs	r5, #20
 80a5e88:	442c      	add	r4, r5
 80a5e8a:	f1a1 0714 	sub.w	r7, r1, #20
 80a5e8e:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a5e92:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a5e94:	f1a5 0308 	sub.w	r3, r5, #8
 80a5e98:	429f      	cmp	r7, r3
 80a5e9a:	d037      	beq.n	80a5f0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
 80a5e9c:	b184      	cbz	r4, 80a5ec0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 80a5e9e:	f855 3c08 	ldr.w	r3, [r5, #-8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a5ea2:	4629      	mov	r1, r5
 80a5ea4:	6023      	str	r3, [r4, #0]
 80a5ea6:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 80a5eaa:	f104 0008 	add.w	r0, r4, #8
 80a5eae:	80a3      	strh	r3, [r4, #4]
 80a5eb0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a5eb4:	60a6      	str	r6, [r4, #8]
 80a5eb6:	80e3      	strh	r3, [r4, #6]
 80a5eb8:	60e6      	str	r6, [r4, #12]
 80a5eba:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a5ebc:	f7ff ffc4 	bl	80a5e48 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
 80a5ec0:	4628      	mov	r0, r5
 80a5ec2:	f7ff fe37 	bl	80a5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a5ec6:	3c14      	subs	r4, #20
 80a5ec8:	3d14      	subs	r5, #20
 80a5eca:	e7e3      	b.n	80a5e94 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 80a5ecc:	d01e      	beq.n	80a5f0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
 80a5ece:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a5ed2:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a5ed4:	f1a5 0308 	sub.w	r3, r5, #8
 80a5ed8:	429e      	cmp	r6, r3
 80a5eda:	d017      	beq.n	80a5f0c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
 80a5edc:	b184      	cbz	r4, 80a5f00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
 80a5ede:	f855 3c08 	ldr.w	r3, [r5, #-8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a5ee2:	4629      	mov	r1, r5
 80a5ee4:	6023      	str	r3, [r4, #0]
 80a5ee6:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 80a5eea:	f104 0008 	add.w	r0, r4, #8
 80a5eee:	80a3      	strh	r3, [r4, #4]
 80a5ef0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a5ef4:	60a7      	str	r7, [r4, #8]
 80a5ef6:	80e3      	strh	r3, [r4, #6]
 80a5ef8:	60e7      	str	r7, [r4, #12]
 80a5efa:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a5efc:	f7ff ffa4 	bl	80a5e48 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
 80a5f00:	4628      	mov	r0, r5
 80a5f02:	f7ff fe17 	bl	80a5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a5f06:	3414      	adds	r4, #20
 80a5f08:	3514      	adds	r5, #20
 80a5f0a:	e7e3      	b.n	80a5ed4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
 80a5f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a5f0e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a5f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a5f10:	6845      	ldr	r5, [r0, #4]
 80a5f12:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a5f14:	4604      	mov	r4, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a5f16:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a5f18:	460e      	mov	r6, r1
 80a5f1a:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a5f1c:	db0e      	blt.n	80a5f3c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
 80a5f1e:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
 80a5f20:	2d00      	cmp	r5, #0
 80a5f22:	dd05      	ble.n	80a5f30 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
 80a5f24:	00a9      	lsls	r1, r5, #2
 80a5f26:	6800      	ldr	r0, [r0, #0]
 80a5f28:	f7fe f93c 	bl	80a41a4 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
 80a5f2c:	b920      	cbnz	r0, 80a5f38 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
 80a5f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a5f30:	6800      	ldr	r0, [r0, #0]
 80a5f32:	f7fe f92f 	bl	80a4194 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80a5f36:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
 80a5f38:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80a5f3a:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a5f3c:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a5f3e:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a5f40:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a5f44:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80a5f48:	1a52      	subs	r2, r2, r1
 80a5f4a:	1d08      	adds	r0, r1, #4
 80a5f4c:	f002 fe06 	bl	80a8b5c <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
 80a5f50:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80a5f54:	6863      	ldr	r3, [r4, #4]
 80a5f56:	2001      	movs	r0, #1
 80a5f58:	3301      	adds	r3, #1
 80a5f5a:	6063      	str	r3, [r4, #4]
    return true;
}
 80a5f5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a5f5e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
 80a5f5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a5f60:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a5f62:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
 80a5f64:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a5f66:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80a5f68:	f7ff fc2e 	bl	80a57c8 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
 80a5f6c:	6823      	ldr	r3, [r4, #0]
 80a5f6e:	6861      	ldr	r1, [r4, #4]
 80a5f70:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
 80a5f74:	4283      	cmp	r3, r0
 80a5f76:	461a      	mov	r2, r3
 80a5f78:	d008      	beq.n	80a5f8c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2e>
            if (*p == value) {
 80a5f7a:	6812      	ldr	r2, [r2, #0]
 80a5f7c:	3304      	adds	r3, #4
 80a5f7e:	42aa      	cmp	r2, r5
 80a5f80:	d1f8      	bne.n	80a5f74 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
 80a5f82:	a801      	add	r0, sp, #4
 80a5f84:	f7ff fe30 	bl	80a5be8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80a5f88:	2500      	movs	r5, #0
 80a5f8a:	e00e      	b.n	80a5faa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4c>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 80a5f8c:	462a      	mov	r2, r5
 80a5f8e:	4620      	mov	r0, r4
 80a5f90:	f7ff ffbd 	bl	80a5f0e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80a5f94:	4605      	mov	r5, r0
 80a5f96:	2800      	cmp	r0, #0
 80a5f98:	d0f3      	beq.n	80a5f82 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x24>
            return false;
        }
        if (activeHandlers_.size() == 1) {
 80a5f9a:	6863      	ldr	r3, [r4, #4]
 80a5f9c:	2b01      	cmp	r3, #1
 80a5f9e:	d101      	bne.n	80a5fa4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x46>
            setSystemCallbacks();
 80a5fa0:	f7ff fd06 	bl	80a59b0 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
 80a5fa4:	a801      	add	r0, sp, #4
 80a5fa6:	f7ff fe1f 	bl	80a5be8 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
 80a5faa:	4628      	mov	r0, r5
 80a5fac:	b003      	add	sp, #12
 80a5fae:	bd30      	pop	{r4, r5, pc}

080a5fb0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 80a5fb0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 80a5fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a5fb4:	4606      	mov	r6, r0
 80a5fb6:	460c      	mov	r4, r1
 80a5fb8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a5fba:	d914      	bls.n	80a5fe6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80a5fbc:	4290      	cmp	r0, r2
 80a5fbe:	d213      	bcs.n	80a5fe8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
 80a5fc0:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
 80a5fc4:	1a6c      	subs	r4, r5, r1
 80a5fc6:	f1a1 0710 	sub.w	r7, r1, #16
 80a5fca:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a5fcc:	42af      	cmp	r7, r5
 80a5fce:	d018      	beq.n	80a6002 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80a5fd0:	b11c      	cbz	r4, 80a5fda <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80a5fd2:	4629      	mov	r1, r5
 80a5fd4:	4620      	mov	r0, r4
 80a5fd6:	f000 fd71 	bl	80a6abc <_ZN6StringC1EOS_>
                end->~T();
 80a5fda:	4628      	mov	r0, r5
 80a5fdc:	f000 fd7e 	bl	80a6adc <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a5fe0:	3d10      	subs	r5, #16
 80a5fe2:	3c10      	subs	r4, #16
 80a5fe4:	e7f2      	b.n	80a5fcc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 80a5fe6:	d00c      	beq.n	80a6002 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80a5fe8:	42ac      	cmp	r4, r5
 80a5fea:	d00a      	beq.n	80a6002 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80a5fec:	b11e      	cbz	r6, 80a5ff6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80a5fee:	4621      	mov	r1, r4
 80a5ff0:	4630      	mov	r0, r6
 80a5ff2:	f000 fd63 	bl	80a6abc <_ZN6StringC1EOS_>
                p->~T();
 80a5ff6:	4620      	mov	r0, r4
 80a5ff8:	f000 fd70 	bl	80a6adc <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a5ffc:	3410      	adds	r4, #16
 80a5ffe:	3610      	adds	r6, #16
 80a6000:	e7f2      	b.n	80a5fe8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
 80a6002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a6004 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
 80a6004:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
 80a6006:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
 80a6008:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
 80a600a:	dd0b      	ble.n	80a6024 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 80a600c:	0130      	lsls	r0, r6, #4
 80a600e:	f7fe f8b9 	bl	80a4184 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 80a6012:	4604      	mov	r4, r0
 80a6014:	b170      	cbz	r0, 80a6034 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
 80a6016:	e895 0006 	ldmia.w	r5, {r1, r2}
 80a601a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80a601e:	f7ff ffc7 	bl	80a5fb0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
 80a6022:	e000      	b.n	80a6026 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80a6024:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a6026:	6828      	ldr	r0, [r5, #0]
 80a6028:	f7fe f8b4 	bl	80a4194 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80a602c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80a602e:	60ae      	str	r6, [r5, #8]
        return true;
 80a6030:	2001      	movs	r0, #1
 80a6032:	bd70      	pop	{r4, r5, r6, pc}
    }
 80a6034:	bd70      	pop	{r4, r5, r6, pc}

080a6036 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a6036:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a603a:	4692      	mov	sl, r2
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a603c:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a603e:	2246      	movs	r2, #70	; 0x46

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a6040:	b095      	sub	sp, #84	; 0x54
 80a6042:	6003      	str	r3, [r0, #0]
 80a6044:	6043      	str	r3, [r0, #4]
 80a6046:	6083      	str	r3, [r0, #8]
 80a6048:	60c3      	str	r3, [r0, #12]
 80a604a:	6103      	str	r3, [r0, #16]
 80a604c:	6143      	str	r3, [r0, #20]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a604e:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a6050:	9102      	str	r1, [sp, #8]
 80a6052:	f8da 1004 	ldr.w	r1, [sl, #4]
 80a6056:	4605      	mov	r5, r0
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
 80a6058:	4299      	cmp	r1, r3
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a605a:	9308      	str	r3, [sp, #32]
 80a605c:	9309      	str	r3, [sp, #36]	; 0x24
 80a605e:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
 80a6060:	f340 809d 	ble.w	80a619e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
 80a6064:	a808      	add	r0, sp, #32
 80a6066:	f7ff ffcd 	bl	80a6004 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a606a:	2800      	cmp	r0, #0
 80a606c:	f040 8097 	bne.w	80a619e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
 80a6070:	e08e      	b.n	80a6190 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
 80a6072:	4621      	mov	r1, r4
 80a6074:	a80b      	add	r0, sp, #44	; 0x2c
 80a6076:	f000 fd21 	bl	80a6abc <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 80a607a:	a90b      	add	r1, sp, #44	; 0x2c
 80a607c:	a80f      	add	r0, sp, #60	; 0x3c
 80a607e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a6080:	f000 fd1c 	bl	80a6abc <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a6084:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a6086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6088:	4299      	cmp	r1, r3
 80a608a:	f2c0 80ce 	blt.w	80a622a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
 80a608e:	3101      	adds	r1, #1
 80a6090:	a808      	add	r0, sp, #32
 80a6092:	f7ff ffb7 	bl	80a6004 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a6096:	2800      	cmp	r0, #0
 80a6098:	f040 80c7 	bne.w	80a622a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 80a609c:	a80f      	add	r0, sp, #60	; 0x3c
 80a609e:	f000 fd1d 	bl	80a6adc <_ZN6StringD1Ev>
 80a60a2:	a80b      	add	r0, sp, #44	; 0x2c
 80a60a4:	f000 fd1a 	bl	80a6adc <_ZN6StringD1Ev>
 80a60a8:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
 80a60aa:	42a7      	cmp	r7, r4
 80a60ac:	d1e1      	bne.n	80a6072 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a60ae:	2600      	movs	r6, #0
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a60b0:	46b1      	mov	r9, r6
 80a60b2:	960b      	str	r6, [sp, #44]	; 0x2c
 80a60b4:	960c      	str	r6, [sp, #48]	; 0x30
 80a60b6:	960d      	str	r6, [sp, #52]	; 0x34
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
 80a60b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a60ba:	429e      	cmp	r6, r3
 80a60bc:	f280 80a8 	bge.w	80a6210 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80a60c0:	9a08      	ldr	r2, [sp, #32]
 80a60c2:	0133      	lsls	r3, r6, #4
 80a60c4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 80a60c6:	9306      	str	r3, [sp, #24]
        if (!category) {
 80a60c8:	2b00      	cmp	r3, #0
 80a60ca:	f000 809f 	beq.w	80a620c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
 80a60ce:	2314      	movs	r3, #20
 80a60d0:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a60d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80a60d6:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
 80a60d8:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 80a60da:	a907      	add	r1, sp, #28
 80a60dc:	a806      	add	r0, sp, #24
 80a60de:	f7ff fb15 	bl	80a570c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a60e2:	4607      	mov	r7, r0
 80a60e4:	2800      	cmp	r0, #0
 80a60e6:	f000 8091 	beq.w	80a620c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
 80a60ea:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
 80a60ec:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
 80a60ee:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
 80a60f2:	9a07      	ldr	r2, [sp, #28]
 80a60f4:	4620      	mov	r0, r4
 80a60f6:	f7ff fb83 	bl	80a5800 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a60fa:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
 80a60fe:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a6100:	f1b8 0f00 	cmp.w	r8, #0
 80a6104:	d153      	bne.n	80a61ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
 80a6106:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
 80a610a:	970f      	str	r7, [sp, #60]	; 0x3c
 80a610c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80a6110:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a6114:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80a6118:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80a611c:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 80a6120:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a6124:	6867      	ldr	r7, [r4, #4]
 80a6126:	68a3      	ldr	r3, [r4, #8]
 80a6128:	429f      	cmp	r7, r3
 80a612a:	da4f      	bge.n	80a61cc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
 80a612c:	9b00      	ldr	r3, [sp, #0]
 80a612e:	2214      	movs	r2, #20
 80a6130:	4353      	muls	r3, r2
 80a6132:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
 80a6136:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a6138:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
 80a613c:	fb02 b201 	mla	r2, r2, r1, fp
 80a6140:	f107 0014 	add.w	r0, r7, #20
 80a6144:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a6146:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
 80a6148:	f7ff fe95 	bl	80a5e76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80a614c:	b1a7      	cbz	r7, 80a6178 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 80a614e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a6150:	9b03      	ldr	r3, [sp, #12]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a6152:	a911      	add	r1, sp, #68	; 0x44
 80a6154:	f84b 2003 	str.w	r2, [fp, r3]
 80a6158:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80a615c:	f107 0008 	add.w	r0, r7, #8
 80a6160:	80bb      	strh	r3, [r7, #4]
 80a6162:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a6166:	f8c7 9008 	str.w	r9, [r7, #8]
 80a616a:	80fb      	strh	r3, [r7, #6]
 80a616c:	f8c7 900c 	str.w	r9, [r7, #12]
 80a6170:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a6174:	f7ff fe68 	bl	80a5e48 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
 80a6178:	6863      	ldr	r3, [r4, #4]
 80a617a:	3301      	adds	r3, #1
 80a617c:	6063      	str	r3, [r4, #4]
 80a617e:	a811      	add	r0, sp, #68	; 0x44
 80a6180:	f7ff fcd8 	bl	80a5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a6184:	f1b8 0f00 	cmp.w	r8, #0
 80a6188:	d011      	beq.n	80a61ae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
 80a618a:	a80b      	add	r0, sp, #44	; 0x2c
 80a618c:	f7ff fcd2 	bl	80a5b34 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a6190:	a808      	add	r0, sp, #32
 80a6192:	f7ff fce3 	bl	80a5b5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
 80a6196:	4628      	mov	r0, r5
 80a6198:	b015      	add	sp, #84	; 0x54
 80a619a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a619e:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 80a61a2:	f8da 3004 	ldr.w	r3, [sl, #4]
 80a61a6:	2714      	movs	r7, #20
 80a61a8:	fb07 4703 	mla	r7, r7, r3, r4
 80a61ac:	e77d      	b.n	80a60aa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
 80a61ae:	6823      	ldr	r3, [r4, #0]
 80a61b0:	9a00      	ldr	r2, [sp, #0]
 80a61b2:	2414      	movs	r4, #20
 80a61b4:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
 80a61b8:	9b06      	ldr	r3, [sp, #24]
 80a61ba:	781b      	ldrb	r3, [r3, #0]
 80a61bc:	bb23      	cbnz	r3, 80a6208 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
 80a61be:	f8da 3000 	ldr.w	r3, [sl]
 80a61c2:	9a01      	ldr	r2, [sp, #4]
 80a61c4:	4413      	add	r3, r2
 80a61c6:	7c1b      	ldrb	r3, [r3, #16]
 80a61c8:	80e3      	strh	r3, [r4, #6]
 80a61ca:	e01d      	b.n	80a6208 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a61cc:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
 80a61ce:	2f00      	cmp	r7, #0
 80a61d0:	dd0f      	ble.n	80a61f2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 80a61d2:	2314      	movs	r3, #20
 80a61d4:	fb03 f007 	mul.w	r0, r3, r7
 80a61d8:	9303      	str	r3, [sp, #12]
 80a61da:	f7fd ffd3 	bl	80a4184 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 80a61de:	4683      	mov	fp, r0
 80a61e0:	b178      	cbz	r0, 80a6202 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
 80a61e2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80a61e6:	9b03      	ldr	r3, [sp, #12]
 80a61e8:	fb03 1202 	mla	r2, r3, r2, r1
 80a61ec:	f7ff fe43 	bl	80a5e76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80a61f0:	e000      	b.n	80a61f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80a61f2:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a61f4:	6820      	ldr	r0, [r4, #0]
 80a61f6:	f7fd ffcd 	bl	80a4194 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80a61fa:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
 80a61fe:	60a7      	str	r7, [r4, #8]
 80a6200:	e794      	b.n	80a612c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a6202:	f04f 0801 	mov.w	r8, #1
 80a6206:	e7ba      	b.n	80a617e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
 80a6208:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 80a620a:	e766      	b.n	80a60da <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
 80a620c:	3601      	adds	r6, #1
 80a620e:	e753      	b.n	80a60b8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
 80a6210:	a908      	add	r1, sp, #32
 80a6212:	4628      	mov	r0, r5
 80a6214:	f7ff fe18 	bl	80a5e48 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
 80a6218:	a90b      	add	r1, sp, #44	; 0x2c
 80a621a:	f105 000c 	add.w	r0, r5, #12
 80a621e:	f7ff fe13 	bl	80a5e48 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
 80a6222:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a6226:	762b      	strb	r3, [r5, #24]
 80a6228:	e7af      	b.n	80a618a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a622a:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 80a622c:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a622e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80a6232:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80a6236:	4631      	mov	r1, r6
 80a6238:	f106 0010 	add.w	r0, r6, #16
 80a623c:	f7ff feb8 	bl	80a5fb0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80a6240:	b11e      	cbz	r6, 80a624a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
 80a6242:	a90f      	add	r1, sp, #60	; 0x3c
 80a6244:	4630      	mov	r0, r6
 80a6246:	f000 fc39 	bl	80a6abc <_ZN6StringC1EOS_>
    ++size_;
 80a624a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a624c:	3301      	adds	r3, #1
 80a624e:	9309      	str	r3, [sp, #36]	; 0x24
 80a6250:	e724      	b.n	80a609c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

080a6254 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a6254:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 80a6256:	4604      	mov	r4, r0
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a6258:	460e      	mov	r6, r1
 80a625a:	4605      	mov	r5, r0
        filter_(level, filters) {
 80a625c:	4b08      	ldr	r3, [pc, #32]	; (80a6280 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 80a625e:	4611      	mov	r1, r2
 80a6260:	f844 3b04 	str.w	r3, [r4], #4
 80a6264:	a801      	add	r0, sp, #4
 80a6266:	f7fa f8a4 	bl	80a03b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a626a:	aa01      	add	r2, sp, #4
 80a626c:	4631      	mov	r1, r6
 80a626e:	4620      	mov	r0, r4
 80a6270:	f7ff fee1 	bl	80a6036 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a6274:	a801      	add	r0, sp, #4
 80a6276:	f7fa f85b 	bl	80a0330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80a627a:	4628      	mov	r0, r5
 80a627c:	b004      	add	sp, #16
 80a627e:	bd70      	pop	{r4, r5, r6, pc}
 80a6280:	080aba98 	.word	0x080aba98

080a6284 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
 80a6284:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a6286:	460f      	mov	r7, r1
 80a6288:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a628a:	492b      	ldr	r1, [pc, #172]	; (80a6338 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)
 80a628c:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
 80a628e:	4616      	mov	r6, r2
 80a6290:	461d      	mov	r5, r3
 80a6292:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a6294:	f002 fd00 	bl	80a8c98 <strcmp>
 80a6298:	bb28      	cbnz	r0, 80a62e6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
 80a629a:	2c00      	cmp	r4, #0
 80a629c:	d049      	beq.n	80a6332 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80a629e:	4629      	mov	r1, r5
 80a62a0:	a801      	add	r0, sp, #4
 80a62a2:	f7ff fdde 	bl	80a5e62 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a62a6:	4925      	ldr	r1, [pc, #148]	; (80a633c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
 80a62a8:	2024      	movs	r0, #36	; 0x24
 80a62aa:	f000 fda5 	bl	80a6df8 <_ZnwjRKSt9nothrow_t>
 80a62ae:	4605      	mov	r5, r0
 80a62b0:	b1b8      	cbz	r0, 80a62e2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
 80a62b2:	a901      	add	r1, sp, #4
 80a62b4:	a804      	add	r0, sp, #16
 80a62b6:	f7ff fdd4 	bl	80a5e62 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a62ba:	a904      	add	r1, sp, #16
 80a62bc:	a807      	add	r0, sp, #28
 80a62be:	f7fa f878 	bl	80a03b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a62c2:	aa07      	add	r2, sp, #28
 80a62c4:	4631      	mov	r1, r6
 80a62c6:	4628      	mov	r0, r5
 80a62c8:	f7ff ffc4 	bl	80a6254 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a62cc:	a807      	add	r0, sp, #28
 80a62ce:	f7fa f82f 	bl	80a0330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a62d2:	4b1b      	ldr	r3, [pc, #108]	; (80a6340 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
 80a62d4:	622c      	str	r4, [r5, #32]
 80a62d6:	602b      	str	r3, [r5, #0]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
 80a62d8:	a804      	add	r0, sp, #16
 80a62da:	f7fa f829 	bl	80a0330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a62de:	4b19      	ldr	r3, [pc, #100]	; (80a6344 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
 80a62e0:	602b      	str	r3, [r5, #0]
 80a62e2:	a801      	add	r0, sp, #4
 80a62e4:	e01f      	b.n	80a6326 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80a62e6:	4918      	ldr	r1, [pc, #96]	; (80a6348 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
 80a62e8:	4638      	mov	r0, r7
 80a62ea:	f002 fcd5 	bl	80a8c98 <strcmp>
 80a62ee:	b9f0      	cbnz	r0, 80a632e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
 80a62f0:	b1fc      	cbz	r4, 80a6332 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a62f2:	4629      	mov	r1, r5
 80a62f4:	a804      	add	r0, sp, #16
 80a62f6:	f7ff fdb4 	bl	80a5e62 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a62fa:	4910      	ldr	r1, [pc, #64]	; (80a633c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
 80a62fc:	2024      	movs	r0, #36	; 0x24
 80a62fe:	f000 fd7b 	bl	80a6df8 <_ZnwjRKSt9nothrow_t>
 80a6302:	4605      	mov	r5, r0
 80a6304:	b170      	cbz	r0, 80a6324 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a6306:	a904      	add	r1, sp, #16
 80a6308:	a807      	add	r0, sp, #28
 80a630a:	f7fa f852 	bl	80a03b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a630e:	aa07      	add	r2, sp, #28
 80a6310:	4631      	mov	r1, r6
 80a6312:	4628      	mov	r0, r5
 80a6314:	f7ff ff9e 	bl	80a6254 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a6318:	a807      	add	r0, sp, #28
 80a631a:	f7fa f809 	bl	80a0330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a631e:	4b08      	ldr	r3, [pc, #32]	; (80a6340 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
 80a6320:	622c      	str	r4, [r5, #32]
 80a6322:	602b      	str	r3, [r5, #0]
 80a6324:	a804      	add	r0, sp, #16
 80a6326:	f7fa f803 	bl	80a0330 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a632a:	4628      	mov	r0, r5
 80a632c:	e002      	b.n	80a6334 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
 80a632e:	2000      	movs	r0, #0
 80a6330:	e000      	b.n	80a6334 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
 80a6332:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
 80a6334:	b00b      	add	sp, #44	; 0x2c
 80a6336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a6338:	080ae452 	.word	0x080ae452
 80a633c:	080ae53c 	.word	0x080ae53c
 80a6340:	080ae4d4 	.word	0x080ae4d4
 80a6344:	080ae3cc 	.word	0x080ae3cc
 80a6348:	080ae456 	.word	0x080ae456

080a634c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a634c:	4a01      	ldr	r2, [pc, #4]	; (80a6354 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a634e:	4b02      	ldr	r3, [pc, #8]	; (80a6358 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a6350:	601a      	str	r2, [r3, #0]
 80a6352:	4770      	bx	lr
 80a6354:	080ae467 	.word	0x080ae467
 80a6358:	20000600 	.word	0x20000600

080a635c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a635c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6360:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
 80a6362:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a6366:	4604      	mov	r4, r0
 80a6368:	460e      	mov	r6, r1
 80a636a:	4617      	mov	r7, r2
 80a636c:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
 80a636e:	f7fe fc1b 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a6372:	4581      	cmp	r9, r0
 80a6374:	d105      	bne.n	80a6382 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
 80a6376:	485a      	ldr	r0, [pc, #360]	; (80a64e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80a6378:	f7fe f982 	bl	80a4680 <_ZN5spark12NetworkClass9listeningEv>
 80a637c:	2800      	cmp	r0, #0
 80a637e:	f040 80ac 	bne.w	80a64da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
 80a6382:	792b      	ldrb	r3, [r5, #4]
 80a6384:	071b      	lsls	r3, r3, #28
 80a6386:	d505      	bpl.n	80a6394 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a6388:	696b      	ldr	r3, [r5, #20]
 80a638a:	4a56      	ldr	r2, [pc, #344]	; (80a64e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a638c:	2100      	movs	r1, #0
 80a638e:	6a20      	ldr	r0, [r4, #32]
 80a6390:	f000 fac2 	bl	80a6918 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
 80a6394:	f1b8 0f00 	cmp.w	r8, #0
 80a6398:	d00d      	beq.n	80a63b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
 80a639a:	215b      	movs	r1, #91	; 0x5b
 80a639c:	4620      	mov	r0, r4
 80a639e:	f7ff fa24 	bl	80a57ea <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80a63a2:	4641      	mov	r1, r8
 80a63a4:	4620      	mov	r0, r4
 80a63a6:	f7ff fa12 	bl	80a57ce <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80a63aa:	6823      	ldr	r3, [r4, #0]
 80a63ac:	2202      	movs	r2, #2
 80a63ae:	68db      	ldr	r3, [r3, #12]
 80a63b0:	494d      	ldr	r1, [pc, #308]	; (80a64e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 80a63b2:	4620      	mov	r0, r4
 80a63b4:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
 80a63b6:	792b      	ldrb	r3, [r5, #4]
 80a63b8:	07d9      	lsls	r1, r3, #31
 80a63ba:	d525      	bpl.n	80a6408 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
 80a63bc:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
 80a63c0:	212f      	movs	r1, #47	; 0x2f
 80a63c2:	4640      	mov	r0, r8
 80a63c4:	f003 f9c7 	bl	80a9756 <strrchr>
    if (s1) {
 80a63c8:	b108      	cbz	r0, 80a63ce <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
 80a63ca:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
 80a63ce:	4641      	mov	r1, r8
 80a63d0:	4620      	mov	r0, r4
 80a63d2:	f7ff f9fc 	bl	80a57ce <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80a63d6:	792b      	ldrb	r3, [r5, #4]
 80a63d8:	079a      	lsls	r2, r3, #30
 80a63da:	d509      	bpl.n	80a63f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
 80a63dc:	213a      	movs	r1, #58	; 0x3a
 80a63de:	4620      	mov	r0, r4
 80a63e0:	f7ff fa03 	bl	80a57ea <_ZN5spark16StreamLogHandler5writeEc>
 80a63e4:	68eb      	ldr	r3, [r5, #12]
 80a63e6:	4a41      	ldr	r2, [pc, #260]	; (80a64ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80a63e8:	2100      	movs	r1, #0
 80a63ea:	6a20      	ldr	r0, [r4, #32]
 80a63ec:	f000 fa94 	bl	80a6918 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
 80a63f0:	792b      	ldrb	r3, [r5, #4]
            write(", ", 2);
 80a63f2:	2202      	movs	r2, #2
        write(s); // File name
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
 80a63f4:	f013 0f04 	tst.w	r3, #4
 80a63f8:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
 80a63fa:	bf18      	it	ne
 80a63fc:	493c      	ldrne	r1, [pc, #240]	; (80a64f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a63fe:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
 80a6400:	bf08      	it	eq
 80a6402:	493c      	ldreq	r1, [pc, #240]	; (80a64f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a6404:	4620      	mov	r0, r4
 80a6406:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
 80a6408:	792b      	ldrb	r3, [r5, #4]
 80a640a:	075b      	lsls	r3, r3, #29
 80a640c:	d518      	bpl.n	80a6440 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a640e:	6929      	ldr	r1, [r5, #16]
 80a6410:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
 80a6412:	4613      	mov	r3, r2
 80a6414:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a6418:	b138      	cbz	r0, 80a642a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
 80a641a:	2820      	cmp	r0, #32
 80a641c:	d101      	bne.n	80a6422 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
 80a641e:	4619      	mov	r1, r3
 80a6420:	e001      	b.n	80a6426 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
 80a6422:	2828      	cmp	r0, #40	; 0x28
 80a6424:	d001      	beq.n	80a642a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a6426:	461a      	mov	r2, r3
 80a6428:	e7f3      	b.n	80a6412 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
 80a642a:	6823      	ldr	r3, [r4, #0]
 80a642c:	1a52      	subs	r2, r2, r1
 80a642e:	68db      	ldr	r3, [r3, #12]
 80a6430:	4620      	mov	r0, r4
 80a6432:	4798      	blx	r3
        write("(): ", 4);
 80a6434:	6823      	ldr	r3, [r4, #0]
 80a6436:	2204      	movs	r2, #4
 80a6438:	68db      	ldr	r3, [r3, #12]
 80a643a:	492f      	ldr	r1, [pc, #188]	; (80a64f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80a643c:	4620      	mov	r0, r4
 80a643e:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
 80a6440:	2100      	movs	r1, #0
 80a6442:	4638      	mov	r0, r7
 80a6444:	f7fd fdba 	bl	80a3fbc <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
 80a6448:	4601      	mov	r1, r0
 80a644a:	4620      	mov	r0, r4
 80a644c:	f7ff f9bf 	bl	80a57ce <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80a6450:	6823      	ldr	r3, [r4, #0]
 80a6452:	2202      	movs	r2, #2
 80a6454:	68db      	ldr	r3, [r3, #12]
 80a6456:	4927      	ldr	r1, [pc, #156]	; (80a64f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a6458:	4620      	mov	r0, r4
 80a645a:	4798      	blx	r3
    // Message
    if (msg) {
 80a645c:	b11e      	cbz	r6, 80a6466 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
 80a645e:	4631      	mov	r1, r6
 80a6460:	4620      	mov	r0, r4
 80a6462:	f7ff f9b4 	bl	80a57ce <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
 80a6466:	792b      	ldrb	r3, [r5, #4]
 80a6468:	f013 0f30 	tst.w	r3, #48	; 0x30
 80a646c:	d02d      	beq.n	80a64ca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
 80a646e:	6823      	ldr	r3, [r4, #0]
 80a6470:	4620      	mov	r0, r4
 80a6472:	68db      	ldr	r3, [r3, #12]
 80a6474:	2202      	movs	r2, #2
 80a6476:	4921      	ldr	r1, [pc, #132]	; (80a64fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80a6478:	4798      	blx	r3
        // Code
        if (attr.has_code) {
 80a647a:	792b      	ldrb	r3, [r5, #4]
 80a647c:	06d8      	lsls	r0, r3, #27
 80a647e:	d50b      	bpl.n	80a6498 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
 80a6480:	6823      	ldr	r3, [r4, #0]
 80a6482:	2207      	movs	r2, #7
 80a6484:	68db      	ldr	r3, [r3, #12]
 80a6486:	491e      	ldr	r1, [pc, #120]	; (80a6500 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80a6488:	4620      	mov	r0, r4
 80a648a:	4798      	blx	r3
 80a648c:	69ab      	ldr	r3, [r5, #24]
 80a648e:	4a1d      	ldr	r2, [pc, #116]	; (80a6504 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
 80a6490:	2100      	movs	r1, #0
 80a6492:	6a20      	ldr	r0, [r4, #32]
 80a6494:	f000 fa40 	bl	80a6918 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
 80a6498:	792b      	ldrb	r3, [r5, #4]
 80a649a:	0699      	lsls	r1, r3, #26
 80a649c:	d511      	bpl.n	80a64c2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
 80a649e:	06da      	lsls	r2, r3, #27
 80a64a0:	d505      	bpl.n	80a64ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
 80a64a2:	6823      	ldr	r3, [r4, #0]
 80a64a4:	2202      	movs	r2, #2
 80a64a6:	68db      	ldr	r3, [r3, #12]
 80a64a8:	4911      	ldr	r1, [pc, #68]	; (80a64f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a64aa:	4620      	mov	r0, r4
 80a64ac:	4798      	blx	r3
            }
            write("details = ", 10);
 80a64ae:	6823      	ldr	r3, [r4, #0]
 80a64b0:	4915      	ldr	r1, [pc, #84]	; (80a6508 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
 80a64b2:	4620      	mov	r0, r4
 80a64b4:	68db      	ldr	r3, [r3, #12]
 80a64b6:	220a      	movs	r2, #10
 80a64b8:	4798      	blx	r3
            write(attr.details);
 80a64ba:	69e9      	ldr	r1, [r5, #28]
 80a64bc:	4620      	mov	r0, r4
 80a64be:	f7ff f986 	bl	80a57ce <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
 80a64c2:	215d      	movs	r1, #93	; 0x5d
 80a64c4:	4620      	mov	r0, r4
 80a64c6:	f7ff f990 	bl	80a57ea <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
 80a64ca:	6823      	ldr	r3, [r4, #0]
 80a64cc:	4620      	mov	r0, r4
}
 80a64ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
 80a64d2:	68db      	ldr	r3, [r3, #12]
 80a64d4:	2202      	movs	r2, #2
 80a64d6:	490d      	ldr	r1, [pc, #52]	; (80a650c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
 80a64d8:	4718      	bx	r3
 80a64da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a64de:	bf00      	nop
 80a64e0:	20000258 	.word	0x20000258
 80a64e4:	080ae46b 	.word	0x080ae46b
 80a64e8:	080ae472 	.word	0x080ae472
 80a64ec:	080aea3d 	.word	0x080aea3d
 80a64f0:	080ae475 	.word	0x080ae475
 80a64f4:	080ae47a 	.word	0x080ae47a
 80a64f8:	080ae478 	.word	0x080ae478
 80a64fc:	080ae47d 	.word	0x080ae47d
 80a6500:	080ae480 	.word	0x080ae480
 80a6504:	080ae488 	.word	0x080ae488
 80a6508:	080ae48b 	.word	0x080ae48b
 80a650c:	080ae496 	.word	0x080ae496

080a6510 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a6510:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a6514:	b085      	sub	sp, #20
 80a6516:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80a651a:	4606      	mov	r6, r0
 80a651c:	460f      	mov	r7, r1
 80a651e:	4691      	mov	r9, r2
 80a6520:	461d      	mov	r5, r3
 80a6522:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
 80a6524:	f7fe fb40 	bl	80a4ba8 <_Z16_fetch_usbserialv>
 80a6528:	4580      	cmp	r8, r0
 80a652a:	d105      	bne.n	80a6538 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 80a652c:	484a      	ldr	r0, [pc, #296]	; (80a6658 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
 80a652e:	f7fe f8a7 	bl	80a4680 <_ZN5spark12NetworkClass9listeningEv>
 80a6532:	2800      	cmp	r0, #0
 80a6534:	f040 808c 	bne.w	80a6650 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
 80a6538:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
 80a653a:	4a48      	ldr	r2, [pc, #288]	; (80a665c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 80a653c:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
 80a6540:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
 80a6542:	9201      	str	r2, [sp, #4]
 80a6544:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 80a6546:	f88d 8008 	strb.w	r8, [sp, #8]
 80a654a:	f7fd ff52 	bl	80a43f2 <_ZN5spark10JSONWriter11beginObjectEv>
 80a654e:	4641      	mov	r1, r8
 80a6550:	4648      	mov	r0, r9
 80a6552:	f7fd fd33 	bl	80a3fbc <log_level_name>
 80a6556:	4680      	mov	r8, r0
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
 80a6558:	4941      	ldr	r1, [pc, #260]	; (80a6660 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80a655a:	2201      	movs	r2, #1
 80a655c:	a801      	add	r0, sp, #4
 80a655e:	f7fd ffcd 	bl	80a44fc <_ZN5spark10JSONWriter4nameEPKcj>
 80a6562:	4641      	mov	r1, r8
 80a6564:	f7ff f923 	bl	80a57ae <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
 80a6568:	b13f      	cbz	r7, 80a657a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80a656a:	493e      	ldr	r1, [pc, #248]	; (80a6664 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80a656c:	2201      	movs	r2, #1
 80a656e:	a801      	add	r0, sp, #4
 80a6570:	f7fd ffc4 	bl	80a44fc <_ZN5spark10JSONWriter4nameEPKcj>
 80a6574:	4639      	mov	r1, r7
 80a6576:	f7ff f91a 	bl	80a57ae <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
 80a657a:	b13d      	cbz	r5, 80a658c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80a657c:	493a      	ldr	r1, [pc, #232]	; (80a6668 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80a657e:	2201      	movs	r2, #1
 80a6580:	a801      	add	r0, sp, #4
 80a6582:	f7fd ffbb 	bl	80a44fc <_ZN5spark10JSONWriter4nameEPKcj>
 80a6586:	4629      	mov	r1, r5
 80a6588:	f7ff f911 	bl	80a57ae <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
 80a658c:	7923      	ldrb	r3, [r4, #4]
 80a658e:	07df      	lsls	r7, r3, #31
 80a6590:	d50e      	bpl.n	80a65b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80a6592:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
 80a6594:	212f      	movs	r1, #47	; 0x2f
 80a6596:	4628      	mov	r0, r5
 80a6598:	f003 f8dd 	bl	80a9756 <strrchr>
    if (s1) {
 80a659c:	b100      	cbz	r0, 80a65a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80a659e:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
 80a65a0:	4932      	ldr	r1, [pc, #200]	; (80a666c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 80a65a2:	2201      	movs	r2, #1
 80a65a4:	a801      	add	r0, sp, #4
 80a65a6:	f7fd ffa9 	bl	80a44fc <_ZN5spark10JSONWriter4nameEPKcj>
 80a65aa:	4629      	mov	r1, r5
 80a65ac:	f7ff f8ff 	bl	80a57ae <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
 80a65b0:	7923      	ldrb	r3, [r4, #4]
 80a65b2:	079d      	lsls	r5, r3, #30
 80a65b4:	d507      	bpl.n	80a65c6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 80a65b6:	492e      	ldr	r1, [pc, #184]	; (80a6670 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 80a65b8:	2202      	movs	r2, #2
 80a65ba:	a801      	add	r0, sp, #4
 80a65bc:	f7fd ff9e 	bl	80a44fc <_ZN5spark10JSONWriter4nameEPKcj>
 80a65c0:	68e1      	ldr	r1, [r4, #12]
 80a65c2:	f7fd ff23 	bl	80a440c <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
 80a65c6:	7923      	ldrb	r3, [r4, #4]
 80a65c8:	0758      	lsls	r0, r3, #29
 80a65ca:	d516      	bpl.n	80a65fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a65cc:	6925      	ldr	r5, [r4, #16]
 80a65ce:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
 80a65d0:	463b      	mov	r3, r7
 80a65d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a65d6:	b13a      	cbz	r2, 80a65e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
 80a65d8:	2a20      	cmp	r2, #32
 80a65da:	d101      	bne.n	80a65e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 80a65dc:	461d      	mov	r5, r3
 80a65de:	e001      	b.n	80a65e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
 80a65e0:	2a28      	cmp	r2, #40	; 0x28
 80a65e2:	d001      	beq.n	80a65e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a65e4:	461f      	mov	r7, r3
 80a65e6:	e7f3      	b.n	80a65d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
 80a65e8:	2202      	movs	r2, #2
 80a65ea:	4922      	ldr	r1, [pc, #136]	; (80a6674 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 80a65ec:	a801      	add	r0, sp, #4
 80a65ee:	f7fd ff85 	bl	80a44fc <_ZN5spark10JSONWriter4nameEPKcj>
 80a65f2:	1b7a      	subs	r2, r7, r5
 80a65f4:	4629      	mov	r1, r5
 80a65f6:	f7fd ff90 	bl	80a451a <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
 80a65fa:	7923      	ldrb	r3, [r4, #4]
 80a65fc:	0719      	lsls	r1, r3, #28
 80a65fe:	d507      	bpl.n	80a6610 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
 80a6600:	491d      	ldr	r1, [pc, #116]	; (80a6678 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80a6602:	2201      	movs	r2, #1
 80a6604:	a801      	add	r0, sp, #4
 80a6606:	f7fd ff79 	bl	80a44fc <_ZN5spark10JSONWriter4nameEPKcj>
 80a660a:	6961      	ldr	r1, [r4, #20]
 80a660c:	f7fd ff10 	bl	80a4430 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
 80a6610:	7923      	ldrb	r3, [r4, #4]
 80a6612:	06da      	lsls	r2, r3, #27
 80a6614:	d508      	bpl.n	80a6628 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
 80a6616:	2204      	movs	r2, #4
 80a6618:	4918      	ldr	r1, [pc, #96]	; (80a667c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 80a661a:	eb0d 0002 	add.w	r0, sp, r2
 80a661e:	f7fd ff6d 	bl	80a44fc <_ZN5spark10JSONWriter4nameEPKcj>
 80a6622:	69a1      	ldr	r1, [r4, #24]
 80a6624:	f7fd fef2 	bl	80a440c <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
 80a6628:	7923      	ldrb	r3, [r4, #4]
 80a662a:	069b      	lsls	r3, r3, #26
 80a662c:	d507      	bpl.n	80a663e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
 80a662e:	4914      	ldr	r1, [pc, #80]	; (80a6680 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80a6630:	2206      	movs	r2, #6
 80a6632:	a801      	add	r0, sp, #4
 80a6634:	f7fd ff62 	bl	80a44fc <_ZN5spark10JSONWriter4nameEPKcj>
 80a6638:	69e1      	ldr	r1, [r4, #28]
 80a663a:	f7ff f8b8 	bl	80a57ae <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
 80a663e:	a801      	add	r0, sp, #4
 80a6640:	f7fd fec1 	bl	80a43c6 <_ZN5spark10JSONWriter9endObjectEv>
 80a6644:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80a6646:	2202      	movs	r2, #2
 80a6648:	6803      	ldr	r3, [r0, #0]
 80a664a:	490e      	ldr	r1, [pc, #56]	; (80a6684 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
 80a664c:	68db      	ldr	r3, [r3, #12]
 80a664e:	4798      	blx	r3
}
 80a6650:	b005      	add	sp, #20
 80a6652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a6656:	bf00      	nop
 80a6658:	20000258 	.word	0x20000258
 80a665c:	080ae3b4 	.word	0x080ae3b4
 80a6660:	080ae3fe 	.word	0x080ae3fe
 80a6664:	080ae414 	.word	0x080ae414
 80a6668:	080aeafe 	.word	0x080aeafe
 80a666c:	080abe02 	.word	0x080abe02
 80a6670:	080ae499 	.word	0x080ae499
 80a6674:	080ae49c 	.word	0x080ae49c
 80a6678:	080aeb6c 	.word	0x080aeb6c
 80a667c:	080abbcf 	.word	0x080abbcf
 80a6680:	080ae49f 	.word	0x080ae49f
 80a6684:	080ae496 	.word	0x080ae496

080a6688 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a6688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a668a:	4606      	mov	r6, r0
 80a668c:	460d      	mov	r5, r1
 80a668e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a6690:	2400      	movs	r4, #0
  while (size--) {
 80a6692:	42bd      	cmp	r5, r7
 80a6694:	d00c      	beq.n	80a66b0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a6696:	6833      	ldr	r3, [r6, #0]
 80a6698:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a669c:	689b      	ldr	r3, [r3, #8]
 80a669e:	4630      	mov	r0, r6
 80a66a0:	4798      	blx	r3
     if (chunk>=0)
 80a66a2:	2800      	cmp	r0, #0
 80a66a4:	db01      	blt.n	80a66aa <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a66a6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a66a8:	e7f3      	b.n	80a6692 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a66aa:	2c00      	cmp	r4, #0
 80a66ac:	bf08      	it	eq
 80a66ae:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a66b0:	4620      	mov	r0, r4
 80a66b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a66b4 <_ZN5Print5printEPKc>:
 80a66b4:	b508      	push	{r3, lr}
 80a66b6:	f7fc fedd 	bl	80a3474 <_ZN5Print5writeEPKc>
 80a66ba:	bd08      	pop	{r3, pc}

080a66bc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a66bc:	6803      	ldr	r3, [r0, #0]
 80a66be:	689b      	ldr	r3, [r3, #8]
 80a66c0:	4718      	bx	r3

080a66c2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a66c2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a66c4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a66c6:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a66c8:	f7ff fff8 	bl	80a66bc <_ZN5Print5printEc>
  n += print('\n');
 80a66cc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a66ce:	4604      	mov	r4, r0
  n += print('\n');
 80a66d0:	4628      	mov	r0, r5
 80a66d2:	f7ff fff3 	bl	80a66bc <_ZN5Print5printEc>
  return n;
}
 80a66d6:	4420      	add	r0, r4
 80a66d8:	bd38      	pop	{r3, r4, r5, pc}

080a66da <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a66da:	b538      	push	{r3, r4, r5, lr}
 80a66dc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a66de:	f7fc fec9 	bl	80a3474 <_ZN5Print5writeEPKc>
 80a66e2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a66e4:	4628      	mov	r0, r5
 80a66e6:	f7ff ffec 	bl	80a66c2 <_ZN5Print7printlnEv>
  return n;
}
 80a66ea:	4420      	add	r0, r4
 80a66ec:	bd38      	pop	{r3, r4, r5, pc}

080a66ee <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a66ee:	2a01      	cmp	r2, #1
 80a66f0:	bf98      	it	ls
 80a66f2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a66f4:	b530      	push	{r4, r5, lr}
 80a66f6:	460b      	mov	r3, r1
 80a66f8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a66fa:	2100      	movs	r1, #0
 80a66fc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a6700:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a6704:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a6708:	fb05 3312 	mls	r3, r5, r2, r3
 80a670c:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a670e:	2b09      	cmp	r3, #9
 80a6710:	bf94      	ite	ls
 80a6712:	3330      	addls	r3, #48	; 0x30
 80a6714:	3337      	addhi	r3, #55	; 0x37
 80a6716:	b2db      	uxtb	r3, r3
 80a6718:	4621      	mov	r1, r4
 80a671a:	f804 3901 	strb.w	r3, [r4], #-1
 80a671e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a6720:	2d00      	cmp	r5, #0
 80a6722:	d1ef      	bne.n	80a6704 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a6724:	f7fc fea6 	bl	80a3474 <_ZN5Print5writeEPKc>
}
 80a6728:	b00b      	add	sp, #44	; 0x2c
 80a672a:	bd30      	pop	{r4, r5, pc}

080a672c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a672c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a672e:	b922      	cbnz	r2, 80a673a <_ZN5Print5printEmi+0xe>
 80a6730:	6803      	ldr	r3, [r0, #0]
 80a6732:	b2c9      	uxtb	r1, r1
 80a6734:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a6736:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a6738:	4718      	bx	r3
  else return printNumber(n, base);
 80a673a:	b2d2      	uxtb	r2, r2
}
 80a673c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a673e:	f7ff bfd6 	b.w	80a66ee <_ZN5Print11printNumberEmh>

080a6742 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a6742:	f7ff bff3 	b.w	80a672c <_ZN5Print5printEmi>

080a6746 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a6746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a674a:	4607      	mov	r7, r0
 80a674c:	460e      	mov	r6, r1
  if (base == 0) {
 80a674e:	4615      	mov	r5, r2
 80a6750:	b92a      	cbnz	r2, 80a675e <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a6752:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a6756:	6803      	ldr	r3, [r0, #0]
 80a6758:	b2c9      	uxtb	r1, r1
 80a675a:	689b      	ldr	r3, [r3, #8]
 80a675c:	4718      	bx	r3
  } else if (base == 10) {
 80a675e:	2a0a      	cmp	r2, #10
 80a6760:	d102      	bne.n	80a6768 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a6762:	2900      	cmp	r1, #0
 80a6764:	da01      	bge.n	80a676a <_ZN5Print5printEli+0x24>
 80a6766:	e004      	b.n	80a6772 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a6768:	b2d2      	uxtb	r2, r2
  }
}
 80a676a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a676e:	f7ff bfbe 	b.w	80a66ee <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a6772:	212d      	movs	r1, #45	; 0x2d
 80a6774:	f7ff ffa2 	bl	80a66bc <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a6778:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a677a:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a677c:	4271      	negs	r1, r6
 80a677e:	4638      	mov	r0, r7
 80a6780:	f7ff ffb5 	bl	80a66ee <_ZN5Print11printNumberEmh>
 80a6784:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a6786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a678a <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a678a:	b538      	push	{r3, r4, r5, lr}
 80a678c:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a678e:	f7ff ffda 	bl	80a6746 <_ZN5Print5printEli>
 80a6792:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a6794:	4628      	mov	r0, r5
 80a6796:	f7ff ff94 	bl	80a66c2 <_ZN5Print7printlnEv>
  return n;
}
 80a679a:	4420      	add	r0, r4
 80a679c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a67a0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a67a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a67a4:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a67a6:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a67a8:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a67aa:	4617      	mov	r7, r2
 80a67ac:	461e      	mov	r6, r3
 80a67ae:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a67b2:	f001 fb0b 	bl	80a7dcc <__aeabi_dcmpun>
 80a67b6:	b108      	cbz	r0, 80a67bc <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a67b8:	4947      	ldr	r1, [pc, #284]	; (80a68d8 <_ZN5Print10printFloatEdh+0x138>)
 80a67ba:	e012      	b.n	80a67e2 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a67bc:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a67c0:	f04f 32ff 	mov.w	r2, #4294967295
 80a67c4:	4b45      	ldr	r3, [pc, #276]	; (80a68dc <_ZN5Print10printFloatEdh+0x13c>)
 80a67c6:	4638      	mov	r0, r7
 80a67c8:	4621      	mov	r1, r4
 80a67ca:	f001 faff 	bl	80a7dcc <__aeabi_dcmpun>
 80a67ce:	b968      	cbnz	r0, 80a67ec <_ZN5Print10printFloatEdh+0x4c>
 80a67d0:	f04f 32ff 	mov.w	r2, #4294967295
 80a67d4:	4b41      	ldr	r3, [pc, #260]	; (80a68dc <_ZN5Print10printFloatEdh+0x13c>)
 80a67d6:	4638      	mov	r0, r7
 80a67d8:	4621      	mov	r1, r4
 80a67da:	f001 fad9 	bl	80a7d90 <__aeabi_dcmple>
 80a67de:	b928      	cbnz	r0, 80a67ec <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a67e0:	493f      	ldr	r1, [pc, #252]	; (80a68e0 <_ZN5Print10printFloatEdh+0x140>)
 80a67e2:	4640      	mov	r0, r8
 80a67e4:	f7fc fe46 	bl	80a3474 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a67e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a67ec:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a67f0:	4b3c      	ldr	r3, [pc, #240]	; (80a68e4 <_ZN5Print10printFloatEdh+0x144>)
 80a67f2:	4638      	mov	r0, r7
 80a67f4:	4631      	mov	r1, r6
 80a67f6:	f001 fadf 	bl	80a7db8 <__aeabi_dcmpgt>
 80a67fa:	b108      	cbz	r0, 80a6800 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a67fc:	493a      	ldr	r1, [pc, #232]	; (80a68e8 <_ZN5Print10printFloatEdh+0x148>)
 80a67fe:	e7f0      	b.n	80a67e2 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a6800:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a6804:	4b39      	ldr	r3, [pc, #228]	; (80a68ec <_ZN5Print10printFloatEdh+0x14c>)
 80a6806:	4638      	mov	r0, r7
 80a6808:	4631      	mov	r1, r6
 80a680a:	f001 fab7 	bl	80a7d7c <__aeabi_dcmplt>
 80a680e:	2800      	cmp	r0, #0
 80a6810:	d1f4      	bne.n	80a67fc <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a6812:	2200      	movs	r2, #0
 80a6814:	2300      	movs	r3, #0
 80a6816:	4638      	mov	r0, r7
 80a6818:	4631      	mov	r1, r6
 80a681a:	f001 faaf 	bl	80a7d7c <__aeabi_dcmplt>
 80a681e:	b138      	cbz	r0, 80a6830 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a6820:	212d      	movs	r1, #45	; 0x2d
 80a6822:	4640      	mov	r0, r8
 80a6824:	f7ff ff4a 	bl	80a66bc <_ZN5Print5printEc>
     number = -number;
 80a6828:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a682c:	4604      	mov	r4, r0
 80a682e:	e000      	b.n	80a6832 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a6830:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a6832:	492f      	ldr	r1, [pc, #188]	; (80a68f0 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a6834:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a6838:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a683a:	fa5f f389 	uxtb.w	r3, r9
 80a683e:	429d      	cmp	r5, r3
 80a6840:	d906      	bls.n	80a6850 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a6842:	2200      	movs	r2, #0
 80a6844:	4b2b      	ldr	r3, [pc, #172]	; (80a68f4 <_ZN5Print10printFloatEdh+0x154>)
 80a6846:	f001 f951 	bl	80a7aec <__aeabi_ddiv>
 80a684a:	f109 0901 	add.w	r9, r9, #1
 80a684e:	e7f4      	b.n	80a683a <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a6850:	463a      	mov	r2, r7
 80a6852:	4633      	mov	r3, r6
 80a6854:	f000 fe6e 	bl	80a7534 <__adddf3>
 80a6858:	460f      	mov	r7, r1
 80a685a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a685c:	f001 faf4 	bl	80a7e48 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a6860:	220a      	movs	r2, #10
 80a6862:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a6864:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a6866:	4640      	mov	r0, r8
 80a6868:	f7ff ff41 	bl	80a66ee <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a686c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a686e:	b37d      	cbz	r5, 80a68d0 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a6870:	4648      	mov	r0, r9
 80a6872:	f000 ff9b 	bl	80a77ac <__aeabi_ui2d>
 80a6876:	4602      	mov	r2, r0
 80a6878:	460b      	mov	r3, r1
 80a687a:	4630      	mov	r0, r6
 80a687c:	4639      	mov	r1, r7
 80a687e:	f000 fe57 	bl	80a7530 <__aeabi_dsub>
 80a6882:	4606      	mov	r6, r0
 80a6884:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a6886:	4640      	mov	r0, r8
 80a6888:	491b      	ldr	r1, [pc, #108]	; (80a68f8 <_ZN5Print10printFloatEdh+0x158>)
 80a688a:	f7fc fdf3 	bl	80a3474 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a688e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a6890:	4b18      	ldr	r3, [pc, #96]	; (80a68f4 <_ZN5Print10printFloatEdh+0x154>)
 80a6892:	2200      	movs	r2, #0
 80a6894:	4630      	mov	r0, r6
 80a6896:	4639      	mov	r1, r7
 80a6898:	f000 fffe 	bl	80a7898 <__aeabi_dmul>
 80a689c:	460f      	mov	r7, r1
 80a689e:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a68a0:	f001 faaa 	bl	80a7df8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a68a4:	220a      	movs	r2, #10
 80a68a6:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a68a8:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a68aa:	4640      	mov	r0, r8
 80a68ac:	f7ff ff4b 	bl	80a6746 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a68b0:	4404      	add	r4, r0
    remainder -= toPrint;
 80a68b2:	4648      	mov	r0, r9
 80a68b4:	f000 ff8a 	bl	80a77cc <__aeabi_i2d>
 80a68b8:	4602      	mov	r2, r0
 80a68ba:	460b      	mov	r3, r1
 80a68bc:	4630      	mov	r0, r6
 80a68be:	4639      	mov	r1, r7
 80a68c0:	f000 fe36 	bl	80a7530 <__aeabi_dsub>
 80a68c4:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a68c6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a68ca:	4606      	mov	r6, r0
 80a68cc:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a68ce:	d1df      	bne.n	80a6890 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a68d0:	4620      	mov	r0, r4
 80a68d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a68d6:	bf00      	nop
 80a68d8:	080ae4fc 	.word	0x080ae4fc
 80a68dc:	7fefffff 	.word	0x7fefffff
 80a68e0:	080ae506 	.word	0x080ae506
 80a68e4:	41efffff 	.word	0x41efffff
 80a68e8:	080ae500 	.word	0x080ae500
 80a68ec:	c1efffff 	.word	0xc1efffff
 80a68f0:	3fe00000 	.word	0x3fe00000
 80a68f4:	40240000 	.word	0x40240000
 80a68f8:	080ae504 	.word	0x080ae504

080a68fc <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a68fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a68fe:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a6902:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a6904:	9100      	str	r1, [sp, #0]
 80a6906:	f7ff ff4b 	bl	80a67a0 <_ZN5Print10printFloatEdh>
 80a690a:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a690c:	4628      	mov	r0, r5
 80a690e:	f7ff fed8 	bl	80a66c2 <_ZN5Print7printlnEv>
  return n;
}
 80a6912:	4420      	add	r0, r4
 80a6914:	b003      	add	sp, #12
 80a6916:	bd30      	pop	{r4, r5, pc}

080a6918 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a6918:	b40c      	push	{r2, r3}
 80a691a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a691e:	b087      	sub	sp, #28
 80a6920:	af00      	add	r7, sp, #0
 80a6922:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a6926:	f854 9b04 	ldr.w	r9, [r4], #4
 80a692a:	4605      	mov	r5, r0
 80a692c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a692e:	4623      	mov	r3, r4
 80a6930:	464a      	mov	r2, r9
 80a6932:	2114      	movs	r1, #20
 80a6934:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a6936:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a6938:	f7fd fc64 	bl	80a4204 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a693c:	2813      	cmp	r0, #19
 80a693e:	d805      	bhi.n	80a694c <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a6940:	1d39      	adds	r1, r7, #4
 80a6942:	4628      	mov	r0, r5
 80a6944:	f7fc fd96 	bl	80a3474 <_ZN5Print5writeEPKc>
 80a6948:	4604      	mov	r4, r0
 80a694a:	e013      	b.n	80a6974 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a694c:	f100 0308 	add.w	r3, r0, #8
 80a6950:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a6954:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a6956:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a695a:	1c41      	adds	r1, r0, #1
 80a695c:	4623      	mov	r3, r4
 80a695e:	464a      	mov	r2, r9
 80a6960:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a6962:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a6964:	f7fd fc4e 	bl	80a4204 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a6968:	4669      	mov	r1, sp
 80a696a:	4628      	mov	r0, r5
 80a696c:	f7fc fd82 	bl	80a3474 <_ZN5Print5writeEPKc>
 80a6970:	4604      	mov	r4, r0
 80a6972:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a6974:	b11e      	cbz	r6, 80a697e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a6976:	4628      	mov	r0, r5
 80a6978:	f7ff fea3 	bl	80a66c2 <_ZN5Print7printlnEv>
 80a697c:	4404      	add	r4, r0
    return n;
}
 80a697e:	4620      	mov	r0, r4
 80a6980:	371c      	adds	r7, #28
 80a6982:	46bd      	mov	sp, r7
 80a6984:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a6988:	b002      	add	sp, #8
 80a698a:	4770      	bx	lr

080a698c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a698c:	4770      	bx	lr

080a698e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a698e:	7441      	strb	r1, [r0, #17]
 80a6990:	4770      	bx	lr

080a6992 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a6992:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a6994:	7c00      	ldrb	r0, [r0, #16]
 80a6996:	f7fd f9f1 	bl	80a3d7c <HAL_USART_Available_Data_For_Write>
}
 80a699a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a699e:	bd08      	pop	{r3, pc}

080a69a0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a69a0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a69a2:	7c00      	ldrb	r0, [r0, #16]
 80a69a4:	f7fd f9c2 	bl	80a3d2c <HAL_USART_Available_Data>
}
 80a69a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a69ac:	bd08      	pop	{r3, pc}

080a69ae <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a69ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a69b0:	7c00      	ldrb	r0, [r0, #16]
 80a69b2:	f7fd f9cb 	bl	80a3d4c <HAL_USART_Peek_Data>
}
 80a69b6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a69ba:	bf28      	it	cs
 80a69bc:	f04f 30ff 	movcs.w	r0, #4294967295
 80a69c0:	bd08      	pop	{r3, pc}

080a69c2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a69c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a69c4:	7c00      	ldrb	r0, [r0, #16]
 80a69c6:	f7fd f9b9 	bl	80a3d3c <HAL_USART_Read_Data>
}
 80a69ca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a69ce:	bf28      	it	cs
 80a69d0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a69d4:	bd08      	pop	{r3, pc}

080a69d6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a69d6:	7c00      	ldrb	r0, [r0, #16]
 80a69d8:	f7fd b9c0 	b.w	80a3d5c <HAL_USART_Flush_Data>

080a69dc <_ZN11USARTSerialD0Ev>:
 80a69dc:	b510      	push	{r4, lr}
 80a69de:	4604      	mov	r4, r0
 80a69e0:	2114      	movs	r1, #20
 80a69e2:	f000 fa07 	bl	80a6df4 <_ZdlPvj>
 80a69e6:	4620      	mov	r0, r4
 80a69e8:	bd10      	pop	{r4, pc}

080a69ea <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a69ea:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a69ec:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a69ee:	4604      	mov	r4, r0
 80a69f0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a69f2:	b925      	cbnz	r5, 80a69fe <_ZN11USARTSerial5writeEh+0x14>
 80a69f4:	7c00      	ldrb	r0, [r0, #16]
 80a69f6:	f7fd f9c1 	bl	80a3d7c <HAL_USART_Available_Data_For_Write>
 80a69fa:	2800      	cmp	r0, #0
 80a69fc:	dd05      	ble.n	80a6a0a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a69fe:	4631      	mov	r1, r6
 80a6a00:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a6a02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a6a06:	f7fd b989 	b.w	80a3d1c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a6a0a:	4628      	mov	r0, r5
 80a6a0c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a6a10 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a6a10:	b510      	push	{r4, lr}
 80a6a12:	4604      	mov	r4, r0
 80a6a14:	4608      	mov	r0, r1
 80a6a16:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a6a18:	2200      	movs	r2, #0
 80a6a1a:	6062      	str	r2, [r4, #4]
 80a6a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a6a20:	60a2      	str	r2, [r4, #8]
 80a6a22:	4a05      	ldr	r2, [pc, #20]	; (80a6a38 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a6a24:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a6a26:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a6a28:	2201      	movs	r2, #1
 80a6a2a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a6a2c:	461a      	mov	r2, r3
 80a6a2e:	f7fd f965 	bl	80a3cfc <HAL_USART_Init>
}
 80a6a32:	4620      	mov	r0, r4
 80a6a34:	bd10      	pop	{r4, pc}
 80a6a36:	bf00      	nop
 80a6a38:	080ae514 	.word	0x080ae514

080a6a3c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a6a3c:	2300      	movs	r3, #0
 80a6a3e:	7c00      	ldrb	r0, [r0, #16]
 80a6a40:	f7fd b9a4 	b.w	80a3d8c <HAL_USART_BeginConfig>

080a6a44 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a6a44:	2200      	movs	r2, #0
 80a6a46:	f7ff bff9 	b.w	80a6a3c <_ZN11USARTSerial5beginEmm>

080a6a4a <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
 80a6a4a:	7c00      	ldrb	r0, [r0, #16]
 80a6a4c:	f7fd b95e 	b.w	80a3d0c <HAL_USART_End>

080a6a50 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a6a50:	7c00      	ldrb	r0, [r0, #16]
 80a6a52:	f7fd b98b 	b.w	80a3d6c <HAL_USART_Is_Enabled>
	...

080a6a58 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a6a58:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a6a5a:	4d0c      	ldr	r5, [pc, #48]	; (80a6a8c <_Z22__fetch_global_Serial1v+0x34>)
 80a6a5c:	6829      	ldr	r1, [r5, #0]
 80a6a5e:	f011 0401 	ands.w	r4, r1, #1
 80a6a62:	d111      	bne.n	80a6a88 <_Z22__fetch_global_Serial1v+0x30>
 80a6a64:	4628      	mov	r0, r5
 80a6a66:	f7f9 fb2b 	bl	80a00c0 <__cxa_guard_acquire>
 80a6a6a:	b168      	cbz	r0, 80a6a88 <_Z22__fetch_global_Serial1v+0x30>
 80a6a6c:	4a08      	ldr	r2, [pc, #32]	; (80a6a90 <_Z22__fetch_global_Serial1v+0x38>)
 80a6a6e:	4621      	mov	r1, r4
 80a6a70:	4b08      	ldr	r3, [pc, #32]	; (80a6a94 <_Z22__fetch_global_Serial1v+0x3c>)
 80a6a72:	4809      	ldr	r0, [pc, #36]	; (80a6a98 <_Z22__fetch_global_Serial1v+0x40>)
 80a6a74:	f7ff ffcc 	bl	80a6a10 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a6a78:	4628      	mov	r0, r5
 80a6a7a:	f7f9 fb26 	bl	80a00ca <__cxa_guard_release>
 80a6a7e:	4a07      	ldr	r2, [pc, #28]	; (80a6a9c <_Z22__fetch_global_Serial1v+0x44>)
 80a6a80:	4907      	ldr	r1, [pc, #28]	; (80a6aa0 <_Z22__fetch_global_Serial1v+0x48>)
 80a6a82:	4805      	ldr	r0, [pc, #20]	; (80a6a98 <_Z22__fetch_global_Serial1v+0x40>)
 80a6a84:	f000 f9a8 	bl	80a6dd8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a6a88:	4803      	ldr	r0, [pc, #12]	; (80a6a98 <_Z22__fetch_global_Serial1v+0x40>)
 80a6a8a:	bd38      	pop	{r3, r4, r5, pc}
 80a6a8c:	2000069c 	.word	0x2000069c
 80a6a90:	200006a0 	.word	0x200006a0
 80a6a94:	20000618 	.word	0x20000618
 80a6a98:	20000604 	.word	0x20000604
 80a6a9c:	2000017c 	.word	0x2000017c
 80a6aa0:	080a698d 	.word	0x080a698d

080a6aa4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a6aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a6aa8:	4b03      	ldr	r3, [pc, #12]	; (80a6ab8 <_GLOBAL__sub_I_System+0x14>)
 80a6aaa:	2000      	movs	r0, #0
 80a6aac:	7018      	strb	r0, [r3, #0]
 80a6aae:	8058      	strh	r0, [r3, #2]
 80a6ab0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a6ab2:	f7fd bb2b 	b.w	80a410c <set_system_mode>
 80a6ab6:	bf00      	nop
 80a6ab8:	20000724 	.word	0x20000724

080a6abc <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a6abc:	2300      	movs	r3, #0
 80a6abe:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a6ac0:	6043      	str	r3, [r0, #4]
	len = 0;
 80a6ac2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a6ac4:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
 80a6ac6:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
 80a6ac8:	680c      	ldr	r4, [r1, #0]
 80a6aca:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
 80a6acc:	684c      	ldr	r4, [r1, #4]
 80a6ace:	6044      	str	r4, [r0, #4]
	len = rhs.len;
 80a6ad0:	688c      	ldr	r4, [r1, #8]
 80a6ad2:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
 80a6ad4:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
 80a6ad6:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
 80a6ad8:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
 80a6ada:	bd10      	pop	{r4, pc}

080a6adc <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a6adc:	b510      	push	{r4, lr}
 80a6ade:	4604      	mov	r4, r0
{
	free(buffer);
 80a6ae0:	6800      	ldr	r0, [r0, #0]
 80a6ae2:	f7fd fb57 	bl	80a4194 <free>
}
 80a6ae6:	4620      	mov	r0, r4
 80a6ae8:	bd10      	pop	{r4, pc}

080a6aea <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a6aea:	b510      	push	{r4, lr}
 80a6aec:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a6aee:	6800      	ldr	r0, [r0, #0]
 80a6af0:	b108      	cbz	r0, 80a6af6 <_ZN6String10invalidateEv+0xc>
 80a6af2:	f7fd fb4f 	bl	80a4194 <free>
	buffer = NULL;
 80a6af6:	2300      	movs	r3, #0
 80a6af8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a6afa:	60a3      	str	r3, [r4, #8]
 80a6afc:	6063      	str	r3, [r4, #4]
 80a6afe:	bd10      	pop	{r4, pc}

080a6b00 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a6b00:	b538      	push	{r3, r4, r5, lr}
 80a6b02:	4604      	mov	r4, r0
 80a6b04:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a6b06:	6800      	ldr	r0, [r0, #0]
 80a6b08:	3101      	adds	r1, #1
 80a6b0a:	f7fd fb4b 	bl	80a41a4 <realloc>
	if (newbuffer) {
 80a6b0e:	b110      	cbz	r0, 80a6b16 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a6b10:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a6b14:	2001      	movs	r0, #1
	}
	return 0;
}
 80a6b16:	bd38      	pop	{r3, r4, r5, pc}

080a6b18 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a6b18:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a6b1a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a6b1c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a6b1e:	b113      	cbz	r3, 80a6b26 <_ZN6String7reserveEj+0xe>
 80a6b20:	6843      	ldr	r3, [r0, #4]
 80a6b22:	428b      	cmp	r3, r1
 80a6b24:	d207      	bcs.n	80a6b36 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a6b26:	4620      	mov	r0, r4
 80a6b28:	f7ff ffea 	bl	80a6b00 <_ZN6String12changeBufferEj>
 80a6b2c:	b120      	cbz	r0, 80a6b38 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a6b2e:	68a3      	ldr	r3, [r4, #8]
 80a6b30:	b90b      	cbnz	r3, 80a6b36 <_ZN6String7reserveEj+0x1e>
 80a6b32:	6822      	ldr	r2, [r4, #0]
 80a6b34:	7013      	strb	r3, [r2, #0]
 80a6b36:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a6b38:	bd10      	pop	{r4, pc}

080a6b3a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a6b3a:	b570      	push	{r4, r5, r6, lr}
 80a6b3c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a6b3e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a6b40:	4604      	mov	r4, r0
 80a6b42:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a6b44:	f7ff ffe8 	bl	80a6b18 <_ZN6String7reserveEj>
 80a6b48:	b918      	cbnz	r0, 80a6b52 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a6b4a:	4620      	mov	r0, r4
 80a6b4c:	f7ff ffcd 	bl	80a6aea <_ZN6String10invalidateEv>
		return *this;
 80a6b50:	e009      	b.n	80a6b66 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a6b52:	462a      	mov	r2, r5
 80a6b54:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a6b56:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a6b58:	6820      	ldr	r0, [r4, #0]
 80a6b5a:	f001 fff4 	bl	80a8b46 <memcpy>
	buffer[len] = 0;
 80a6b5e:	6822      	ldr	r2, [r4, #0]
 80a6b60:	68a3      	ldr	r3, [r4, #8]
 80a6b62:	2100      	movs	r1, #0
 80a6b64:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a6b66:	4620      	mov	r0, r4
 80a6b68:	bd70      	pop	{r4, r5, r6, pc}

080a6b6a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a6b6a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a6b6c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a6b6e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a6b70:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a6b72:	6043      	str	r3, [r0, #4]
	len = 0;
 80a6b74:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a6b76:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a6b78:	460d      	mov	r5, r1
 80a6b7a:	b139      	cbz	r1, 80a6b8c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a6b7c:	4608      	mov	r0, r1
 80a6b7e:	f002 fdcd 	bl	80a971c <strlen>
 80a6b82:	4629      	mov	r1, r5
 80a6b84:	4602      	mov	r2, r0
 80a6b86:	4620      	mov	r0, r4
 80a6b88:	f7ff ffd7 	bl	80a6b3a <_ZN6String4copyEPKcj>
}
 80a6b8c:	4620      	mov	r0, r4
 80a6b8e:	bd38      	pop	{r3, r4, r5, pc}

080a6b90 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a6b90:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a6b92:	b510      	push	{r4, lr}
 80a6b94:	460b      	mov	r3, r1
 80a6b96:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a6b98:	d007      	beq.n	80a6baa <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a6b9a:	6809      	ldr	r1, [r1, #0]
 80a6b9c:	b119      	cbz	r1, 80a6ba6 <_ZN6StringaSERKS_+0x16>
 80a6b9e:	689a      	ldr	r2, [r3, #8]
 80a6ba0:	f7ff ffcb 	bl	80a6b3a <_ZN6String4copyEPKcj>
 80a6ba4:	e001      	b.n	80a6baa <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a6ba6:	f7ff ffa0 	bl	80a6aea <_ZN6String10invalidateEv>

	return *this;
}
 80a6baa:	4620      	mov	r0, r4
 80a6bac:	bd10      	pop	{r4, pc}

080a6bae <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a6bae:	b510      	push	{r4, lr}
 80a6bb0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a6bb2:	2300      	movs	r3, #0
 80a6bb4:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a6bb6:	6043      	str	r3, [r0, #4]
	len = 0;
 80a6bb8:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a6bba:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a6bbc:	f7ff ffe8 	bl	80a6b90 <_ZN6StringaSERKS_>
}
 80a6bc0:	4620      	mov	r0, r4
 80a6bc2:	bd10      	pop	{r4, pc}

080a6bc4 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a6bc4:	6800      	ldr	r0, [r0, #0]
 80a6bc6:	b108      	cbz	r0, 80a6bcc <_ZNK6String5toIntEv+0x8>
 80a6bc8:	f001 be91 	b.w	80a88ee <atol>
	return 0;
}
 80a6bcc:	4770      	bx	lr

080a6bce <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 80a6bce:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 80a6bd0:	6800      	ldr	r0, [r0, #0]
 80a6bd2:	b120      	cbz	r0, 80a6bde <_ZNK6String7toFloatEv+0x10>
 80a6bd4:	f001 fe84 	bl	80a88e0 <atof>
 80a6bd8:	f001 f956 	bl	80a7e88 <__aeabi_d2f>
 80a6bdc:	bd08      	pop	{r3, pc}
	return 0;
 80a6bde:	2000      	movs	r0, #0
}
 80a6be0:	bd08      	pop	{r3, pc}
	...

080a6be4 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a6be4:	b40e      	push	{r1, r2, r3}
 80a6be6:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a6be8:	ac09      	add	r4, sp, #36	; 0x24
 80a6bea:	f854 7b04 	ldr.w	r7, [r4], #4
 80a6bee:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a6bf0:	4623      	mov	r3, r4
 80a6bf2:	463a      	mov	r2, r7
 80a6bf4:	2105      	movs	r1, #5
 80a6bf6:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 80a6bf8:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a6bfa:	f7fd fb03 	bl	80a4204 <vsnprintf>
 80a6bfe:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a6c00:	490b      	ldr	r1, [pc, #44]	; (80a6c30 <_ZN6String6formatEPKcz+0x4c>)
 80a6c02:	4628      	mov	r0, r5
 80a6c04:	f7ff ffb1 	bl	80a6b6a <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80a6c08:	4631      	mov	r1, r6
 80a6c0a:	4628      	mov	r0, r5
 80a6c0c:	f7ff ff84 	bl	80a6b18 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a6c10:	6828      	ldr	r0, [r5, #0]
 80a6c12:	b130      	cbz	r0, 80a6c22 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a6c14:	4623      	mov	r3, r4
 80a6c16:	463a      	mov	r2, r7
 80a6c18:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 80a6c1a:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a6c1c:	f7fd faf2 	bl	80a4204 <vsnprintf>
        va_end(marker);
        result.len = n;
 80a6c20:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 80a6c22:	4628      	mov	r0, r5
 80a6c24:	b004      	add	sp, #16
 80a6c26:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a6c2a:	b003      	add	sp, #12
 80a6c2c:	4770      	bx	lr
 80a6c2e:	bf00      	nop
 80a6c30:	080ae498 	.word	0x080ae498

080a6c34 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a6c34:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a6c36:	4d0b      	ldr	r5, [pc, #44]	; (80a6c64 <_Z19__fetch_global_Wirev+0x30>)
 80a6c38:	6829      	ldr	r1, [r5, #0]
 80a6c3a:	f011 0401 	ands.w	r4, r1, #1
 80a6c3e:	d10f      	bne.n	80a6c60 <_Z19__fetch_global_Wirev+0x2c>
 80a6c40:	4628      	mov	r0, r5
 80a6c42:	f7f9 fa3d 	bl	80a00c0 <__cxa_guard_acquire>
 80a6c46:	b158      	cbz	r0, 80a6c60 <_Z19__fetch_global_Wirev+0x2c>
 80a6c48:	4621      	mov	r1, r4
 80a6c4a:	4807      	ldr	r0, [pc, #28]	; (80a6c68 <_Z19__fetch_global_Wirev+0x34>)
 80a6c4c:	f7fd ff00 	bl	80a4a50 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a6c50:	4628      	mov	r0, r5
 80a6c52:	f7f9 fa3a 	bl	80a00ca <__cxa_guard_release>
 80a6c56:	4a05      	ldr	r2, [pc, #20]	; (80a6c6c <_Z19__fetch_global_Wirev+0x38>)
 80a6c58:	4905      	ldr	r1, [pc, #20]	; (80a6c70 <_Z19__fetch_global_Wirev+0x3c>)
 80a6c5a:	4803      	ldr	r0, [pc, #12]	; (80a6c68 <_Z19__fetch_global_Wirev+0x34>)
 80a6c5c:	f000 f8bc 	bl	80a6dd8 <__aeabi_atexit>
	return wire;
}
 80a6c60:	4801      	ldr	r0, [pc, #4]	; (80a6c68 <_Z19__fetch_global_Wirev+0x34>)
 80a6c62:	bd38      	pop	{r3, r4, r5, pc}
 80a6c64:	2000072c 	.word	0x2000072c
 80a6c68:	20000730 	.word	0x20000730
 80a6c6c:	2000017c 	.word	0x2000017c
 80a6c70:	080a49f9 	.word	0x080a49f9

080a6c74 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a6c74:	b513      	push	{r0, r1, r4, lr}
 80a6c76:	4c08      	ldr	r4, [pc, #32]	; (80a6c98 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a6c78:	2300      	movs	r3, #0
 80a6c7a:	461a      	mov	r2, r3
 80a6c7c:	4619      	mov	r1, r3
 80a6c7e:	9300      	str	r3, [sp, #0]
 80a6c80:	4620      	mov	r0, r4
 80a6c82:	f7fe f84b 	bl	80a4d1c <_ZN9IPAddressC1Ehhhh>
 80a6c86:	4620      	mov	r0, r4
 80a6c88:	4a04      	ldr	r2, [pc, #16]	; (80a6c9c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a6c8a:	4905      	ldr	r1, [pc, #20]	; (80a6ca0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a6c8c:	b002      	add	sp, #8
 80a6c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a6c92:	f000 b8a1 	b.w	80a6dd8 <__aeabi_atexit>
 80a6c96:	bf00      	nop
 80a6c98:	20000744 	.word	0x20000744
 80a6c9c:	2000017c 	.word	0x2000017c
 80a6ca0:	080a4c6d 	.word	0x080a4c6d

080a6ca4 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a6ca4:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a6ca6:	4c0c      	ldr	r4, [pc, #48]	; (80a6cd8 <_GLOBAL__sub_I_SPI+0x34>)
 80a6ca8:	4e0c      	ldr	r6, [pc, #48]	; (80a6cdc <_GLOBAL__sub_I_SPI+0x38>)
 80a6caa:	4d0d      	ldr	r5, [pc, #52]	; (80a6ce0 <_GLOBAL__sub_I_SPI+0x3c>)
 80a6cac:	2100      	movs	r1, #0
 80a6cae:	4620      	mov	r0, r4
 80a6cb0:	f7fd fd86 	bl	80a47c0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a6cb4:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a6cb6:	4c0b      	ldr	r4, [pc, #44]	; (80a6ce4 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a6cb8:	4632      	mov	r2, r6
 80a6cba:	4629      	mov	r1, r5
 80a6cbc:	f000 f88c 	bl	80a6dd8 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a6cc0:	2101      	movs	r1, #1
 80a6cc2:	4620      	mov	r0, r4
 80a6cc4:	f7fd fd7c 	bl	80a47c0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a6cc8:	4632      	mov	r2, r6
 80a6cca:	4629      	mov	r1, r5
 80a6ccc:	4620      	mov	r0, r4
 80a6cce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a6cd2:	f000 b881 	b.w	80a6dd8 <__aeabi_atexit>
 80a6cd6:	bf00      	nop
 80a6cd8:	20000764 	.word	0x20000764
 80a6cdc:	2000017c 	.word	0x2000017c
 80a6ce0:	080a47b1 	.word	0x080a47b1
 80a6ce4:	20000774 	.word	0x20000774

080a6ce8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a6ce8:	b510      	push	{r4, lr}
 80a6cea:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a6cec:	480f      	ldr	r0, [pc, #60]	; (80a6d2c <pinAvailable+0x44>)
 80a6cee:	f7fd fe6c 	bl	80a49ca <_ZN8SPIClass9isEnabledEv>
 80a6cf2:	b128      	cbz	r0, 80a6d00 <pinAvailable+0x18>
 80a6cf4:	f1a4 030d 	sub.w	r3, r4, #13
 80a6cf8:	2b02      	cmp	r3, #2
 80a6cfa:	d801      	bhi.n	80a6d00 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a6cfc:	2000      	movs	r0, #0
 80a6cfe:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a6d00:	f7ff ff98 	bl	80a6c34 <_Z19__fetch_global_Wirev>
 80a6d04:	f7fd fed3 	bl	80a4aae <_ZN7TwoWire9isEnabledEv>
 80a6d08:	b108      	cbz	r0, 80a6d0e <pinAvailable+0x26>
 80a6d0a:	2c01      	cmp	r4, #1
 80a6d0c:	d9f6      	bls.n	80a6cfc <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a6d0e:	f7ff fea3 	bl	80a6a58 <_Z22__fetch_global_Serial1v>
 80a6d12:	f7ff fe9d 	bl	80a6a50 <_ZN11USARTSerial9isEnabledEv>
 80a6d16:	b118      	cbz	r0, 80a6d20 <pinAvailable+0x38>
 80a6d18:	f1a4 0312 	sub.w	r3, r4, #18
 80a6d1c:	2b01      	cmp	r3, #1
 80a6d1e:	d9ed      	bls.n	80a6cfc <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a6d20:	2c17      	cmp	r4, #23
 80a6d22:	bf8c      	ite	hi
 80a6d24:	2000      	movhi	r0, #0
 80a6d26:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a6d28:	bd10      	pop	{r4, pc}
 80a6d2a:	bf00      	nop
 80a6d2c:	20000764 	.word	0x20000764

080a6d30 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a6d30:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a6d32:	b538      	push	{r3, r4, r5, lr}
 80a6d34:	4604      	mov	r4, r0
 80a6d36:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a6d38:	d80a      	bhi.n	80a6d50 <pinMode+0x20>
 80a6d3a:	29ff      	cmp	r1, #255	; 0xff
 80a6d3c:	d008      	beq.n	80a6d50 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a6d3e:	f7ff ffd3 	bl	80a6ce8 <pinAvailable>
 80a6d42:	b128      	cbz	r0, 80a6d50 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a6d44:	4629      	mov	r1, r5
 80a6d46:	4620      	mov	r0, r4
}
 80a6d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a6d4c:	f7fd b8f6 	b.w	80a3f3c <HAL_Pin_Mode>
 80a6d50:	bd38      	pop	{r3, r4, r5, pc}

080a6d52 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a6d52:	b538      	push	{r3, r4, r5, lr}
 80a6d54:	4604      	mov	r4, r0
 80a6d56:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a6d58:	f7fd f8f8 	bl	80a3f4c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a6d5c:	28ff      	cmp	r0, #255	; 0xff
 80a6d5e:	d010      	beq.n	80a6d82 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a6d60:	2806      	cmp	r0, #6
 80a6d62:	d804      	bhi.n	80a6d6e <digitalWrite+0x1c>
 80a6d64:	234d      	movs	r3, #77	; 0x4d
 80a6d66:	fa23 f000 	lsr.w	r0, r3, r0
 80a6d6a:	07c3      	lsls	r3, r0, #31
 80a6d6c:	d409      	bmi.n	80a6d82 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a6d6e:	4620      	mov	r0, r4
 80a6d70:	f7ff ffba 	bl	80a6ce8 <pinAvailable>
 80a6d74:	b128      	cbz	r0, 80a6d82 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a6d76:	4629      	mov	r1, r5
 80a6d78:	4620      	mov	r0, r4
}
 80a6d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a6d7e:	f7fd b8ed 	b.w	80a3f5c <HAL_GPIO_Write>
 80a6d82:	bd38      	pop	{r3, r4, r5, pc}

080a6d84 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a6d84:	b510      	push	{r4, lr}
 80a6d86:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a6d88:	f7fd f8e0 	bl	80a3f4c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a6d8c:	3804      	subs	r0, #4
 80a6d8e:	b2c0      	uxtb	r0, r0
 80a6d90:	2801      	cmp	r0, #1
 80a6d92:	d908      	bls.n	80a6da6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a6d94:	4620      	mov	r0, r4
 80a6d96:	f7ff ffa7 	bl	80a6ce8 <pinAvailable>
 80a6d9a:	b120      	cbz	r0, 80a6da6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a6d9c:	4620      	mov	r0, r4
}
 80a6d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a6da2:	f7fd b8e3 	b.w	80a3f6c <HAL_GPIO_Read>
}
 80a6da6:	2000      	movs	r0, #0
 80a6da8:	bd10      	pop	{r4, pc}

080a6daa <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a6daa:	b510      	push	{r4, lr}
 80a6dac:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a6dae:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a6db0:	bf9c      	itt	ls
 80a6db2:	340a      	addls	r4, #10
 80a6db4:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a6db6:	4620      	mov	r0, r4
 80a6db8:	f7ff ff96 	bl	80a6ce8 <pinAvailable>
 80a6dbc:	b150      	cbz	r0, 80a6dd4 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a6dbe:	2103      	movs	r1, #3
 80a6dc0:	4620      	mov	r0, r4
 80a6dc2:	f7fd f8b3 	bl	80a3f2c <HAL_Validate_Pin_Function>
 80a6dc6:	2803      	cmp	r0, #3
 80a6dc8:	d104      	bne.n	80a6dd4 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a6dca:	4620      	mov	r0, r4
}
 80a6dcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a6dd0:	f7fd b8e4 	b.w	80a3f9c <HAL_ADC_Read>
}
 80a6dd4:	2000      	movs	r0, #0
 80a6dd6:	bd10      	pop	{r4, pc}

080a6dd8 <__aeabi_atexit>:
 80a6dd8:	460b      	mov	r3, r1
 80a6dda:	4601      	mov	r1, r0
 80a6ddc:	4618      	mov	r0, r3
 80a6dde:	f001 bd8b 	b.w	80a88f8 <__cxa_atexit>
	...

080a6de4 <_ZSt15get_new_handlerv>:
 80a6de4:	4b02      	ldr	r3, [pc, #8]	; (80a6df0 <_ZSt15get_new_handlerv+0xc>)
 80a6de6:	6818      	ldr	r0, [r3, #0]
 80a6de8:	f3bf 8f5f 	dmb	sy
 80a6dec:	4770      	bx	lr
 80a6dee:	bf00      	nop
 80a6df0:	20000784 	.word	0x20000784

080a6df4 <_ZdlPvj>:
 80a6df4:	f7f9 b957 	b.w	80a00a6 <_ZdlPv>

080a6df8 <_ZnwjRKSt9nothrow_t>:
 80a6df8:	b510      	push	{r4, lr}
 80a6dfa:	2800      	cmp	r0, #0
 80a6dfc:	bf14      	ite	ne
 80a6dfe:	4604      	movne	r4, r0
 80a6e00:	2401      	moveq	r4, #1
 80a6e02:	4620      	mov	r0, r4
 80a6e04:	f7fd f9be 	bl	80a4184 <malloc>
 80a6e08:	b920      	cbnz	r0, 80a6e14 <_ZnwjRKSt9nothrow_t+0x1c>
 80a6e0a:	f7ff ffeb 	bl	80a6de4 <_ZSt15get_new_handlerv>
 80a6e0e:	b108      	cbz	r0, 80a6e14 <_ZnwjRKSt9nothrow_t+0x1c>
 80a6e10:	4780      	blx	r0
 80a6e12:	e7f6      	b.n	80a6e02 <_ZnwjRKSt9nothrow_t+0xa>
 80a6e14:	bd10      	pop	{r4, pc}

080a6e16 <_ZSt17__throw_bad_allocv>:
 80a6e16:	b508      	push	{r3, lr}
 80a6e18:	f7fd f9fc 	bl	80a4214 <abort>

080a6e1c <_ZSt19__throw_logic_errorPKc>:
 80a6e1c:	b508      	push	{r3, lr}
 80a6e1e:	f7fd f9f9 	bl	80a4214 <abort>

080a6e22 <_ZSt20__throw_length_errorPKc>:
 80a6e22:	b508      	push	{r3, lr}
 80a6e24:	f7fd f9f6 	bl	80a4214 <abort>

080a6e28 <_ZSt24__throw_out_of_range_fmtPKcz>:
 80a6e28:	b40f      	push	{r0, r1, r2, r3}
 80a6e2a:	b580      	push	{r7, lr}
 80a6e2c:	b082      	sub	sp, #8
 80a6e2e:	af00      	add	r7, sp, #0
 80a6e30:	f107 0410 	add.w	r4, r7, #16
 80a6e34:	f854 5b04 	ldr.w	r5, [r4], #4
 80a6e38:	4628      	mov	r0, r5
 80a6e3a:	f002 fc6f 	bl	80a971c <strlen>
 80a6e3e:	f200 230e 	addw	r3, r0, #526	; 0x20e
 80a6e42:	f023 0307 	bic.w	r3, r3, #7
 80a6e46:	ebad 0d03 	sub.w	sp, sp, r3
 80a6e4a:	f500 7100 	add.w	r1, r0, #512	; 0x200
 80a6e4e:	4623      	mov	r3, r4
 80a6e50:	462a      	mov	r2, r5
 80a6e52:	4668      	mov	r0, sp
 80a6e54:	607c      	str	r4, [r7, #4]
 80a6e56:	f000 f98d 	bl	80a7174 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 80a6e5a:	f7fd f9db 	bl	80a4214 <abort>

080a6e5e <_ZSt25__throw_bad_function_callv>:
 80a6e5e:	b508      	push	{r3, lr}
 80a6e60:	f7fd f9d8 	bl	80a4214 <abort>

080a6e64 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 80a6e64:	b10a      	cbz	r2, 80a6e6a <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 80a6e66:	f001 be5f 	b.w	80a8b28 <memcmp>
 80a6e6a:	4610      	mov	r0, r2
 80a6e6c:	4770      	bx	lr

080a6e6e <_ZNSt11char_traitsIcE4findEPKcjRS1_>:
 80a6e6e:	4613      	mov	r3, r2
 80a6e70:	460a      	mov	r2, r1
 80a6e72:	b111      	cbz	r1, 80a6e7a <_ZNSt11char_traitsIcE4findEPKcjRS1_+0xc>
 80a6e74:	7819      	ldrb	r1, [r3, #0]
 80a6e76:	f001 be49 	b.w	80a8b0c <memchr>
 80a6e7a:	4608      	mov	r0, r1
 80a6e7c:	4770      	bx	lr

080a6e7e <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 80a6e7e:	b10a      	cbz	r2, 80a6e84 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 80a6e80:	f001 be61 	b.w	80a8b46 <memcpy>
 80a6e84:	4770      	bx	lr
	...

080a6e88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80a6e88:	b508      	push	{r3, lr}
 80a6e8a:	680b      	ldr	r3, [r1, #0]
 80a6e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a6e90:	d302      	bcc.n	80a6e98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80a6e92:	480a      	ldr	r0, [pc, #40]	; (80a6ebc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x34>)
 80a6e94:	f7ff ffc5 	bl	80a6e22 <_ZSt20__throw_length_errorPKc>
 80a6e98:	4293      	cmp	r3, r2
 80a6e9a:	d909      	bls.n	80a6eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x28>
 80a6e9c:	0052      	lsls	r2, r2, #1
 80a6e9e:	4293      	cmp	r3, r2
 80a6ea0:	d206      	bcs.n	80a6eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x28>
 80a6ea2:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a6ea6:	bf2a      	itet	cs
 80a6ea8:	f06f 4300 	mvncs.w	r3, #2147483648	; 0x80000000
 80a6eac:	600a      	strcc	r2, [r1, #0]
 80a6eae:	600b      	strcs	r3, [r1, #0]
 80a6eb0:	6808      	ldr	r0, [r1, #0]
 80a6eb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a6eb6:	3001      	adds	r0, #1
 80a6eb8:	f7f9 b8f1 	b.w	80a009e <_Znwj>
 80a6ebc:	080ae53d 	.word	0x080ae53d

080a6ec0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80a6ec0:	4603      	mov	r3, r0
 80a6ec2:	f853 0b08 	ldr.w	r0, [r3], #8
 80a6ec6:	4298      	cmp	r0, r3
 80a6ec8:	d001      	beq.n	80a6ece <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80a6eca:	f7f9 b8ec 	b.w	80a00a6 <_ZdlPv>
 80a6ece:	4770      	bx	lr

080a6ed0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 80a6ed0:	6843      	ldr	r3, [r0, #4]
 80a6ed2:	b510      	push	{r4, lr}
 80a6ed4:	4299      	cmp	r1, r3
 80a6ed6:	4614      	mov	r4, r2
 80a6ed8:	d904      	bls.n	80a6ee4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x14>
 80a6eda:	460a      	mov	r2, r1
 80a6edc:	4802      	ldr	r0, [pc, #8]	; (80a6ee8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 80a6ede:	4621      	mov	r1, r4
 80a6ee0:	f7ff ffa2 	bl	80a6e28 <_ZSt24__throw_out_of_range_fmtPKcz>
 80a6ee4:	4608      	mov	r0, r1
 80a6ee6:	bd10      	pop	{r4, pc}
 80a6ee8:	080ae555 	.word	0x080ae555

080a6eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 80a6eec:	2a01      	cmp	r2, #1
 80a6eee:	b510      	push	{r4, lr}
 80a6ef0:	d102      	bne.n	80a6ef8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 80a6ef2:	780a      	ldrb	r2, [r1, #0]
 80a6ef4:	7002      	strb	r2, [r0, #0]
 80a6ef6:	bd10      	pop	{r4, pc}
 80a6ef8:	f7ff ffc1 	bl	80a6e7e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80a6efc:	bd10      	pop	{r4, pc}

080a6efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80a6efe:	b508      	push	{r3, lr}
 80a6f00:	1a52      	subs	r2, r2, r1
 80a6f02:	f7ff fff3 	bl	80a6eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80a6f06:	bd08      	pop	{r3, pc}

080a6f08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_>:
 80a6f08:	4288      	cmp	r0, r1
 80a6f0a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a6f0e:	4605      	mov	r5, r0
 80a6f10:	460c      	mov	r4, r1
 80a6f12:	d062      	beq.n	80a6fda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0xd2>
 80a6f14:	4606      	mov	r6, r0
 80a6f16:	f856 3b08 	ldr.w	r3, [r6], #8
 80a6f1a:	f101 0708 	add.w	r7, r1, #8
 80a6f1e:	429e      	cmp	r6, r3
 80a6f20:	6809      	ldr	r1, [r1, #0]
 80a6f22:	d126      	bne.n	80a6f72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x6a>
 80a6f24:	428f      	cmp	r7, r1
 80a6f26:	d117      	bne.n	80a6f58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x50>
 80a6f28:	6843      	ldr	r3, [r0, #4]
 80a6f2a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80a6f2e:	2b00      	cmp	r3, #0
 80a6f30:	d036      	beq.n	80a6fa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x98>
 80a6f32:	f1b8 0f00 	cmp.w	r8, #0
 80a6f36:	d033      	beq.n	80a6fa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x98>
 80a6f38:	4639      	mov	r1, r7
 80a6f3a:	2210      	movs	r2, #16
 80a6f3c:	4668      	mov	r0, sp
 80a6f3e:	f7ff ff9e 	bl	80a6e7e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80a6f42:	4631      	mov	r1, r6
 80a6f44:	2210      	movs	r2, #16
 80a6f46:	4638      	mov	r0, r7
 80a6f48:	f7ff ff99 	bl	80a6e7e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80a6f4c:	2210      	movs	r2, #16
 80a6f4e:	4669      	mov	r1, sp
 80a6f50:	4630      	mov	r0, r6
 80a6f52:	f7ff ff94 	bl	80a6e7e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80a6f56:	e01e      	b.n	80a6f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x8e>
 80a6f58:	2210      	movs	r2, #16
 80a6f5a:	4631      	mov	r1, r6
 80a6f5c:	4638      	mov	r0, r7
 80a6f5e:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80a6f62:	f7ff ff8c 	bl	80a6e7e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80a6f66:	6823      	ldr	r3, [r4, #0]
 80a6f68:	602b      	str	r3, [r5, #0]
 80a6f6a:	6027      	str	r7, [r4, #0]
 80a6f6c:	f8c5 8008 	str.w	r8, [r5, #8]
 80a6f70:	e011      	b.n	80a6f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x8e>
 80a6f72:	42b9      	cmp	r1, r7
 80a6f74:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80a6f78:	d107      	bne.n	80a6f8a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x82>
 80a6f7a:	2210      	movs	r2, #16
 80a6f7c:	4630      	mov	r0, r6
 80a6f7e:	f7ff ff7e 	bl	80a6e7e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80a6f82:	682b      	ldr	r3, [r5, #0]
 80a6f84:	6023      	str	r3, [r4, #0]
 80a6f86:	602e      	str	r6, [r5, #0]
 80a6f88:	e003      	b.n	80a6f92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x8a>
 80a6f8a:	6001      	str	r1, [r0, #0]
 80a6f8c:	6023      	str	r3, [r4, #0]
 80a6f8e:	68a3      	ldr	r3, [r4, #8]
 80a6f90:	6083      	str	r3, [r0, #8]
 80a6f92:	f8c4 8008 	str.w	r8, [r4, #8]
 80a6f96:	686b      	ldr	r3, [r5, #4]
 80a6f98:	6862      	ldr	r2, [r4, #4]
 80a6f9a:	606a      	str	r2, [r5, #4]
 80a6f9c:	6063      	str	r3, [r4, #4]
 80a6f9e:	e01c      	b.n	80a6fda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0xd2>
 80a6fa0:	f1b8 0f00 	cmp.w	r8, #0
 80a6fa4:	d00b      	beq.n	80a6fbe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0xb6>
 80a6fa6:	2210      	movs	r2, #16
 80a6fa8:	4639      	mov	r1, r7
 80a6faa:	4630      	mov	r0, r6
 80a6fac:	f7ff ff67 	bl	80a6e7e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80a6fb0:	6863      	ldr	r3, [r4, #4]
 80a6fb2:	6822      	ldr	r2, [r4, #0]
 80a6fb4:	606b      	str	r3, [r5, #4]
 80a6fb6:	2300      	movs	r3, #0
 80a6fb8:	6063      	str	r3, [r4, #4]
 80a6fba:	7013      	strb	r3, [r2, #0]
 80a6fbc:	e00d      	b.n	80a6fda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0xd2>
 80a6fbe:	2b00      	cmp	r3, #0
 80a6fc0:	d0e9      	beq.n	80a6f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4swapERS4_+0x8e>
 80a6fc2:	2210      	movs	r2, #16
 80a6fc4:	4631      	mov	r1, r6
 80a6fc6:	4638      	mov	r0, r7
 80a6fc8:	f7ff ff59 	bl	80a6e7e <_ZNSt11char_traitsIcE4copyEPcPKcj>
 80a6fcc:	686b      	ldr	r3, [r5, #4]
 80a6fce:	6063      	str	r3, [r4, #4]
 80a6fd0:	682b      	ldr	r3, [r5, #0]
 80a6fd2:	f8c5 8004 	str.w	r8, [r5, #4]
 80a6fd6:	f883 8000 	strb.w	r8, [r3]
 80a6fda:	b004      	add	sp, #16
 80a6fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a6fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj>:
 80a6fe0:	b513      	push	{r0, r1, r4, lr}
 80a6fe2:	f88d 1007 	strb.w	r1, [sp, #7]
 80a6fe6:	6841      	ldr	r1, [r0, #4]
 80a6fe8:	4613      	mov	r3, r2
 80a6fea:	428a      	cmp	r2, r1
 80a6fec:	d209      	bcs.n	80a7002 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x22>
 80a6fee:	6804      	ldr	r4, [r0, #0]
 80a6ff0:	f10d 0207 	add.w	r2, sp, #7
 80a6ff4:	1ac9      	subs	r1, r1, r3
 80a6ff6:	18e0      	adds	r0, r4, r3
 80a6ff8:	f7ff ff39 	bl	80a6e6e <_ZNSt11char_traitsIcE4findEPKcjRS1_>
 80a6ffc:	b108      	cbz	r0, 80a7002 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x22>
 80a6ffe:	1b00      	subs	r0, r0, r4
 80a7000:	e001      	b.n	80a7006 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4findEcj+0x26>
 80a7002:	f04f 30ff 	mov.w	r0, #4294967295
 80a7006:	b002      	add	sp, #8
 80a7008:	bd10      	pop	{r4, pc}

080a700a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 80a700a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a700c:	6845      	ldr	r5, [r0, #4]
 80a700e:	4606      	mov	r6, r0
 80a7010:	4608      	mov	r0, r1
 80a7012:	460f      	mov	r7, r1
 80a7014:	f002 fb82 	bl	80a971c <strlen>
 80a7018:	4285      	cmp	r5, r0
 80a701a:	4604      	mov	r4, r0
 80a701c:	462a      	mov	r2, r5
 80a701e:	4639      	mov	r1, r7
 80a7020:	bf28      	it	cs
 80a7022:	4602      	movcs	r2, r0
 80a7024:	6830      	ldr	r0, [r6, #0]
 80a7026:	f7ff ff1d 	bl	80a6e64 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80a702a:	b900      	cbnz	r0, 80a702e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 80a702c:	1b28      	subs	r0, r5, r4
 80a702e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a7030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80a7030:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a7032:	4604      	mov	r4, r0
 80a7034:	4616      	mov	r6, r2
 80a7036:	460d      	mov	r5, r1
 80a7038:	b901      	cbnz	r1, 80a703c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0xc>
 80a703a:	b9ba      	cbnz	r2, 80a706c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x3c>
 80a703c:	1b73      	subs	r3, r6, r5
 80a703e:	2b0f      	cmp	r3, #15
 80a7040:	9301      	str	r3, [sp, #4]
 80a7042:	d907      	bls.n	80a7054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x24>
 80a7044:	2200      	movs	r2, #0
 80a7046:	a901      	add	r1, sp, #4
 80a7048:	4620      	mov	r0, r4
 80a704a:	f7ff ff1d 	bl	80a6e88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80a704e:	9b01      	ldr	r3, [sp, #4]
 80a7050:	6020      	str	r0, [r4, #0]
 80a7052:	60a3      	str	r3, [r4, #8]
 80a7054:	4632      	mov	r2, r6
 80a7056:	4629      	mov	r1, r5
 80a7058:	6820      	ldr	r0, [r4, #0]
 80a705a:	f7ff ff50 	bl	80a6efe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80a705e:	9b01      	ldr	r3, [sp, #4]
 80a7060:	6822      	ldr	r2, [r4, #0]
 80a7062:	2100      	movs	r1, #0
 80a7064:	6063      	str	r3, [r4, #4]
 80a7066:	54d1      	strb	r1, [r2, r3]
 80a7068:	b002      	add	sp, #8
 80a706a:	bd70      	pop	{r4, r5, r6, pc}
 80a706c:	4801      	ldr	r0, [pc, #4]	; (80a7074 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80a706e:	f7ff fed5 	bl	80a6e1c <_ZSt19__throw_logic_errorPKc>
 80a7072:	bf00      	nop
 80a7074:	080ae698 	.word	0x080ae698

080a7078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>:
 80a7078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a707a:	460d      	mov	r5, r1
 80a707c:	4616      	mov	r6, r2
 80a707e:	461f      	mov	r7, r3
 80a7080:	f100 0308 	add.w	r3, r0, #8
 80a7084:	4604      	mov	r4, r0
 80a7086:	6003      	str	r3, [r0, #0]
 80a7088:	4631      	mov	r1, r6
 80a708a:	4a09      	ldr	r2, [pc, #36]	; (80a70b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj+0x38>)
 80a708c:	4628      	mov	r0, r5
 80a708e:	f7ff ff1f 	bl	80a6ed0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80a7092:	6829      	ldr	r1, [r5, #0]
 80a7094:	686a      	ldr	r2, [r5, #4]
 80a7096:	4401      	add	r1, r0
 80a7098:	1b92      	subs	r2, r2, r6
 80a709a:	4620      	mov	r0, r4
 80a709c:	f04f 0300 	mov.w	r3, #0
 80a70a0:	42ba      	cmp	r2, r7
 80a70a2:	bf94      	ite	ls
 80a70a4:	188a      	addls	r2, r1, r2
 80a70a6:	19ca      	addhi	r2, r1, r7
 80a70a8:	f7ff ffc2 	bl	80a7030 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 80a70ac:	4620      	mov	r0, r4
 80a70ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a70b0:	080ae6c2 	.word	0x080ae6c2

080a70b4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj>:
 80a70b4:	b570      	push	{r4, r5, r6, lr}
 80a70b6:	460d      	mov	r5, r1
 80a70b8:	4604      	mov	r4, r0
 80a70ba:	4611      	mov	r1, r2
 80a70bc:	4628      	mov	r0, r5
 80a70be:	4a06      	ldr	r2, [pc, #24]	; (80a70d8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEjj+0x24>)
 80a70c0:	461e      	mov	r6, r3
 80a70c2:	f7ff ff05 	bl	80a6ed0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 80a70c6:	4633      	mov	r3, r6
 80a70c8:	4602      	mov	r2, r0
 80a70ca:	4629      	mov	r1, r5
 80a70cc:	4620      	mov	r0, r4
 80a70ce:	f7ff ffd3 	bl	80a7078 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_jj>
 80a70d2:	4620      	mov	r0, r4
 80a70d4:	bd70      	pop	{r4, r5, r6, pc}
 80a70d6:	bf00      	nop
 80a70d8:	080ae6dd 	.word	0x080ae6dd

080a70dc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 80a70dc:	4680      	mov	r8, r0
 80a70de:	b580      	push	{r7, lr}
 80a70e0:	b09c      	sub	sp, #112	; 0x70
 80a70e2:	af00      	add	r7, sp, #0
 80a70e4:	1a0e      	subs	r6, r1, r0
 80a70e6:	226c      	movs	r2, #108	; 0x6c
 80a70e8:	490e      	ldr	r1, [pc, #56]	; (80a7124 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 80a70ea:	1d38      	adds	r0, r7, #4
 80a70ec:	f001 fd2b 	bl	80a8b46 <memcpy>
 80a70f0:	f106 037a 	add.w	r3, r6, #122	; 0x7a
 80a70f4:	f023 0307 	bic.w	r3, r3, #7
 80a70f8:	ebad 0d03 	sub.w	sp, sp, r3
 80a70fc:	226b      	movs	r2, #107	; 0x6b
 80a70fe:	1d39      	adds	r1, r7, #4
 80a7100:	4668      	mov	r0, sp
 80a7102:	f001 fd20 	bl	80a8b46 <memcpy>
 80a7106:	1c75      	adds	r5, r6, #1
 80a7108:	4632      	mov	r2, r6
 80a710a:	4641      	mov	r1, r8
 80a710c:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
 80a7110:	f001 fd19 	bl	80a8b46 <memcpy>
 80a7114:	446d      	add	r5, sp
 80a7116:	2300      	movs	r3, #0
 80a7118:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
 80a711c:	4668      	mov	r0, sp
 80a711e:	f7ff fe7d 	bl	80a6e1c <_ZSt19__throw_logic_errorPKc>
 80a7122:	bf00      	nop
 80a7124:	080ae701 	.word	0x080ae701

080a7128 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 80a7128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a712c:	b084      	sub	sp, #16
 80a712e:	2301      	movs	r3, #1
 80a7130:	af04      	add	r7, sp, #16
 80a7132:	b088      	sub	sp, #32
 80a7134:	9302      	str	r3, [sp, #8]
 80a7136:	2302      	movs	r3, #2
 80a7138:	9301      	str	r3, [sp, #4]
 80a713a:	4b0d      	ldr	r3, [pc, #52]	; (80a7170 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x48>)
 80a713c:	4606      	mov	r6, r0
 80a713e:	681b      	ldr	r3, [r3, #0]
 80a7140:	a80a      	add	r0, sp, #40	; 0x28
 80a7142:	9300      	str	r3, [sp, #0]
 80a7144:	2300      	movs	r3, #0
 80a7146:	4688      	mov	r8, r1
 80a7148:	f000 f8fa 	bl	80a7340 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb>
 80a714c:	4540      	cmp	r0, r8
 80a714e:	ad04      	add	r5, sp, #16
 80a7150:	4604      	mov	r4, r0
 80a7152:	d807      	bhi.n	80a7164 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x3c>
 80a7154:	f1c0 0118 	rsb	r1, r0, #24
 80a7158:	4602      	mov	r2, r0
 80a715a:	4429      	add	r1, r5
 80a715c:	4630      	mov	r0, r6
 80a715e:	f001 fcf2 	bl	80a8b46 <memcpy>
 80a7162:	e001      	b.n	80a7168 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x40>
 80a7164:	f04f 34ff 	mov.w	r4, #4294967295
 80a7168:	4620      	mov	r0, r4
 80a716a:	46bd      	mov	sp, r7
 80a716c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a7170:	2000008c 	.word	0x2000008c

080a7174 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 80a7174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7178:	4606      	mov	r6, r0
 80a717a:	4615      	mov	r5, r2
 80a717c:	4604      	mov	r4, r0
 80a717e:	3901      	subs	r1, #1
 80a7180:	1847      	adds	r7, r0, r1
 80a7182:	782a      	ldrb	r2, [r5, #0]
 80a7184:	b3a2      	cbz	r2, 80a71f0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7c>
 80a7186:	42bc      	cmp	r4, r7
 80a7188:	d22e      	bcs.n	80a71e8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 80a718a:	2a25      	cmp	r2, #37	; 0x25
 80a718c:	d123      	bne.n	80a71d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
 80a718e:	786a      	ldrb	r2, [r5, #1]
 80a7190:	2a73      	cmp	r2, #115	; 0x73
 80a7192:	d005      	beq.n	80a71a0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 80a7194:	2a7a      	cmp	r2, #122	; 0x7a
 80a7196:	d00e      	beq.n	80a71b6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x42>
 80a7198:	2a25      	cmp	r2, #37	; 0x25
 80a719a:	d11c      	bne.n	80a71d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
 80a719c:	3501      	adds	r5, #1
 80a719e:	e01a      	b.n	80a71d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
 80a71a0:	1d19      	adds	r1, r3, #4
 80a71a2:	681b      	ldr	r3, [r3, #0]
 80a71a4:	3b01      	subs	r3, #1
 80a71a6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80a71aa:	b1d2      	cbz	r2, 80a71e2 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 80a71ac:	42bc      	cmp	r4, r7
 80a71ae:	d01b      	beq.n	80a71e8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 80a71b0:	f804 2b01 	strb.w	r2, [r4], #1
 80a71b4:	e7f7      	b.n	80a71a6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x32>
 80a71b6:	78aa      	ldrb	r2, [r5, #2]
 80a71b8:	2a75      	cmp	r2, #117	; 0x75
 80a71ba:	d10c      	bne.n	80a71d6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x62>
 80a71bc:	681a      	ldr	r2, [r3, #0]
 80a71be:	1b39      	subs	r1, r7, r4
 80a71c0:	4620      	mov	r0, r4
 80a71c2:	f103 0804 	add.w	r8, r3, #4
 80a71c6:	f7ff ffaf 	bl	80a7128 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 80a71ca:	2800      	cmp	r0, #0
 80a71cc:	dd0c      	ble.n	80a71e8 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x74>
 80a71ce:	4404      	add	r4, r0
 80a71d0:	3503      	adds	r5, #3
 80a71d2:	4643      	mov	r3, r8
 80a71d4:	e7d5      	b.n	80a7182 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80a71d6:	782a      	ldrb	r2, [r5, #0]
 80a71d8:	3401      	adds	r4, #1
 80a71da:	f804 2c01 	strb.w	r2, [r4, #-1]
 80a71de:	3501      	adds	r5, #1
 80a71e0:	e7cf      	b.n	80a7182 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80a71e2:	3502      	adds	r5, #2
 80a71e4:	460b      	mov	r3, r1
 80a71e6:	e7cc      	b.n	80a7182 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0xe>
 80a71e8:	4621      	mov	r1, r4
 80a71ea:	4630      	mov	r0, r6
 80a71ec:	f7ff ff76 	bl	80a70dc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 80a71f0:	7022      	strb	r2, [r4, #0]
 80a71f2:	1ba0      	subs	r0, r4, r6
 80a71f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a71f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a71f8:	4b18      	ldr	r3, [pc, #96]	; (80a725c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a71fa:	681a      	ldr	r2, [r3, #0]
 80a71fc:	07d1      	lsls	r1, r2, #31
 80a71fe:	bf5c      	itt	pl
 80a7200:	2201      	movpl	r2, #1
 80a7202:	601a      	strpl	r2, [r3, #0]
 80a7204:	4b16      	ldr	r3, [pc, #88]	; (80a7260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a7206:	681a      	ldr	r2, [r3, #0]
 80a7208:	07d2      	lsls	r2, r2, #31
 80a720a:	bf5c      	itt	pl
 80a720c:	2201      	movpl	r2, #1
 80a720e:	601a      	strpl	r2, [r3, #0]
 80a7210:	4b14      	ldr	r3, [pc, #80]	; (80a7264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a7212:	681a      	ldr	r2, [r3, #0]
 80a7214:	07d0      	lsls	r0, r2, #31
 80a7216:	bf5c      	itt	pl
 80a7218:	2201      	movpl	r2, #1
 80a721a:	601a      	strpl	r2, [r3, #0]
 80a721c:	4b12      	ldr	r3, [pc, #72]	; (80a7268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a721e:	681a      	ldr	r2, [r3, #0]
 80a7220:	07d1      	lsls	r1, r2, #31
 80a7222:	bf5c      	itt	pl
 80a7224:	2201      	movpl	r2, #1
 80a7226:	601a      	strpl	r2, [r3, #0]
 80a7228:	4b10      	ldr	r3, [pc, #64]	; (80a726c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a722a:	681a      	ldr	r2, [r3, #0]
 80a722c:	07d2      	lsls	r2, r2, #31
 80a722e:	bf5c      	itt	pl
 80a7230:	2201      	movpl	r2, #1
 80a7232:	601a      	strpl	r2, [r3, #0]
 80a7234:	4b0e      	ldr	r3, [pc, #56]	; (80a7270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a7236:	681a      	ldr	r2, [r3, #0]
 80a7238:	07d0      	lsls	r0, r2, #31
 80a723a:	bf5c      	itt	pl
 80a723c:	2201      	movpl	r2, #1
 80a723e:	601a      	strpl	r2, [r3, #0]
 80a7240:	4b0c      	ldr	r3, [pc, #48]	; (80a7274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a7242:	681a      	ldr	r2, [r3, #0]
 80a7244:	07d1      	lsls	r1, r2, #31
 80a7246:	bf5c      	itt	pl
 80a7248:	2201      	movpl	r2, #1
 80a724a:	601a      	strpl	r2, [r3, #0]
 80a724c:	4b0a      	ldr	r3, [pc, #40]	; (80a7278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a724e:	681a      	ldr	r2, [r3, #0]
 80a7250:	07d2      	lsls	r2, r2, #31
 80a7252:	bf5c      	itt	pl
 80a7254:	2201      	movpl	r2, #1
 80a7256:	601a      	strpl	r2, [r3, #0]
 80a7258:	4770      	bx	lr
 80a725a:	bf00      	nop
 80a725c:	200007a4 	.word	0x200007a4
 80a7260:	200007a0 	.word	0x200007a0
 80a7264:	2000079c 	.word	0x2000079c
 80a7268:	20000798 	.word	0x20000798
 80a726c:	20000794 	.word	0x20000794
 80a7270:	20000790 	.word	0x20000790
 80a7274:	2000078c 	.word	0x2000078c
 80a7278:	20000788 	.word	0x20000788

080a727c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a727c:	4b24      	ldr	r3, [pc, #144]	; (80a7310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a727e:	681a      	ldr	r2, [r3, #0]
 80a7280:	07d0      	lsls	r0, r2, #31
 80a7282:	bf5c      	itt	pl
 80a7284:	2201      	movpl	r2, #1
 80a7286:	601a      	strpl	r2, [r3, #0]
 80a7288:	4b22      	ldr	r3, [pc, #136]	; (80a7314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a728a:	681a      	ldr	r2, [r3, #0]
 80a728c:	07d1      	lsls	r1, r2, #31
 80a728e:	bf5c      	itt	pl
 80a7290:	2201      	movpl	r2, #1
 80a7292:	601a      	strpl	r2, [r3, #0]
 80a7294:	4b20      	ldr	r3, [pc, #128]	; (80a7318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a7296:	681a      	ldr	r2, [r3, #0]
 80a7298:	07d2      	lsls	r2, r2, #31
 80a729a:	bf5c      	itt	pl
 80a729c:	2201      	movpl	r2, #1
 80a729e:	601a      	strpl	r2, [r3, #0]
 80a72a0:	4b1e      	ldr	r3, [pc, #120]	; (80a731c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a72a2:	681a      	ldr	r2, [r3, #0]
 80a72a4:	07d0      	lsls	r0, r2, #31
 80a72a6:	bf5c      	itt	pl
 80a72a8:	2201      	movpl	r2, #1
 80a72aa:	601a      	strpl	r2, [r3, #0]
 80a72ac:	4b1c      	ldr	r3, [pc, #112]	; (80a7320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a72ae:	681a      	ldr	r2, [r3, #0]
 80a72b0:	07d1      	lsls	r1, r2, #31
 80a72b2:	bf5c      	itt	pl
 80a72b4:	2201      	movpl	r2, #1
 80a72b6:	601a      	strpl	r2, [r3, #0]
 80a72b8:	4b1a      	ldr	r3, [pc, #104]	; (80a7324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a72ba:	681a      	ldr	r2, [r3, #0]
 80a72bc:	07d2      	lsls	r2, r2, #31
 80a72be:	bf5c      	itt	pl
 80a72c0:	2201      	movpl	r2, #1
 80a72c2:	601a      	strpl	r2, [r3, #0]
 80a72c4:	4b18      	ldr	r3, [pc, #96]	; (80a7328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a72c6:	681a      	ldr	r2, [r3, #0]
 80a72c8:	07d0      	lsls	r0, r2, #31
 80a72ca:	bf5c      	itt	pl
 80a72cc:	2201      	movpl	r2, #1
 80a72ce:	601a      	strpl	r2, [r3, #0]
 80a72d0:	4b16      	ldr	r3, [pc, #88]	; (80a732c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a72d2:	681a      	ldr	r2, [r3, #0]
 80a72d4:	07d1      	lsls	r1, r2, #31
 80a72d6:	bf5c      	itt	pl
 80a72d8:	2201      	movpl	r2, #1
 80a72da:	601a      	strpl	r2, [r3, #0]
 80a72dc:	4b14      	ldr	r3, [pc, #80]	; (80a7330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a72de:	681a      	ldr	r2, [r3, #0]
 80a72e0:	07d2      	lsls	r2, r2, #31
 80a72e2:	bf5c      	itt	pl
 80a72e4:	2201      	movpl	r2, #1
 80a72e6:	601a      	strpl	r2, [r3, #0]
 80a72e8:	4b12      	ldr	r3, [pc, #72]	; (80a7334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a72ea:	681a      	ldr	r2, [r3, #0]
 80a72ec:	07d0      	lsls	r0, r2, #31
 80a72ee:	bf5c      	itt	pl
 80a72f0:	2201      	movpl	r2, #1
 80a72f2:	601a      	strpl	r2, [r3, #0]
 80a72f4:	4b10      	ldr	r3, [pc, #64]	; (80a7338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a72f6:	681a      	ldr	r2, [r3, #0]
 80a72f8:	07d1      	lsls	r1, r2, #31
 80a72fa:	bf5c      	itt	pl
 80a72fc:	2201      	movpl	r2, #1
 80a72fe:	601a      	strpl	r2, [r3, #0]
 80a7300:	4b0e      	ldr	r3, [pc, #56]	; (80a733c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a7302:	681a      	ldr	r2, [r3, #0]
 80a7304:	07d2      	lsls	r2, r2, #31
 80a7306:	bf5c      	itt	pl
 80a7308:	2201      	movpl	r2, #1
 80a730a:	601a      	strpl	r2, [r3, #0]
 80a730c:	4770      	bx	lr
 80a730e:	bf00      	nop
 80a7310:	200007d4 	.word	0x200007d4
 80a7314:	200007d0 	.word	0x200007d0
 80a7318:	200007cc 	.word	0x200007cc
 80a731c:	200007c8 	.word	0x200007c8
 80a7320:	200007c4 	.word	0x200007c4
 80a7324:	200007c0 	.word	0x200007c0
 80a7328:	200007bc 	.word	0x200007bc
 80a732c:	200007b8 	.word	0x200007b8
 80a7330:	200007b4 	.word	0x200007b4
 80a7334:	200007b0 	.word	0x200007b0
 80a7338:	200007ac 	.word	0x200007ac
 80a733c:	200007a8 	.word	0x200007a8

080a7340 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb>:
 80a7340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a7344:	4614      	mov	r4, r2
 80a7346:	f89d 2020 	ldrb.w	r2, [sp, #32]
 80a734a:	461d      	mov	r5, r3
 80a734c:	4607      	mov	r7, r0
 80a734e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80a7352:	9b07      	ldr	r3, [sp, #28]
 80a7354:	b1b2      	cbz	r2, 80a7384 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x44>
 80a7356:	4606      	mov	r6, r0
 80a7358:	4620      	mov	r0, r4
 80a735a:	4629      	mov	r1, r5
 80a735c:	220a      	movs	r2, #10
 80a735e:	2300      	movs	r3, #0
 80a7360:	f001 f8f2 	bl	80a8548 <__aeabi_uldivmod>
 80a7364:	4442      	add	r2, r8
 80a7366:	7913      	ldrb	r3, [r2, #4]
 80a7368:	4620      	mov	r0, r4
 80a736a:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80a736e:	4629      	mov	r1, r5
 80a7370:	2300      	movs	r3, #0
 80a7372:	220a      	movs	r2, #10
 80a7374:	f001 f8e8 	bl	80a8548 <__aeabi_uldivmod>
 80a7378:	4604      	mov	r4, r0
 80a737a:	460d      	mov	r5, r1
 80a737c:	ea54 0305 	orrs.w	r3, r4, r5
 80a7380:	d1ea      	bne.n	80a7358 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x18>
 80a7382:	e029      	b.n	80a73d8 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x98>
 80a7384:	f003 024a 	and.w	r2, r3, #74	; 0x4a
 80a7388:	2a40      	cmp	r2, #64	; 0x40
 80a738a:	d110      	bne.n	80a73ae <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x6e>
 80a738c:	4606      	mov	r6, r0
 80a738e:	f004 0307 	and.w	r3, r4, #7
 80a7392:	4443      	add	r3, r8
 80a7394:	791b      	ldrb	r3, [r3, #4]
 80a7396:	08ea      	lsrs	r2, r5, #3
 80a7398:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80a739c:	08e3      	lsrs	r3, r4, #3
 80a739e:	ea43 7345 	orr.w	r3, r3, r5, lsl #29
 80a73a2:	461c      	mov	r4, r3
 80a73a4:	4615      	mov	r5, r2
 80a73a6:	ea54 0305 	orrs.w	r3, r4, r5
 80a73aa:	d1f0      	bne.n	80a738e <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x4e>
 80a73ac:	e014      	b.n	80a73d8 <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x98>
 80a73ae:	4606      	mov	r6, r0
 80a73b0:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80a73b4:	bf14      	ite	ne
 80a73b6:	2214      	movne	r2, #20
 80a73b8:	2204      	moveq	r2, #4
 80a73ba:	4442      	add	r2, r8
 80a73bc:	f004 030f 	and.w	r3, r4, #15
 80a73c0:	5cd3      	ldrb	r3, [r2, r3]
 80a73c2:	0929      	lsrs	r1, r5, #4
 80a73c4:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80a73c8:	0923      	lsrs	r3, r4, #4
 80a73ca:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 80a73ce:	461c      	mov	r4, r3
 80a73d0:	460d      	mov	r5, r1
 80a73d2:	ea54 0305 	orrs.w	r3, r4, r5
 80a73d6:	d1f1      	bne.n	80a73bc <_ZSt13__int_to_charIcyEiPT_T0_PKS0_St13_Ios_Fmtflagsb+0x7c>
 80a73d8:	1bb8      	subs	r0, r7, r6
 80a73da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a73e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a73e0:	4b24      	ldr	r3, [pc, #144]	; (80a7474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a73e2:	681a      	ldr	r2, [r3, #0]
 80a73e4:	07d0      	lsls	r0, r2, #31
 80a73e6:	bf5c      	itt	pl
 80a73e8:	2201      	movpl	r2, #1
 80a73ea:	601a      	strpl	r2, [r3, #0]
 80a73ec:	4b22      	ldr	r3, [pc, #136]	; (80a7478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a73ee:	681a      	ldr	r2, [r3, #0]
 80a73f0:	07d1      	lsls	r1, r2, #31
 80a73f2:	bf5c      	itt	pl
 80a73f4:	2201      	movpl	r2, #1
 80a73f6:	601a      	strpl	r2, [r3, #0]
 80a73f8:	4b20      	ldr	r3, [pc, #128]	; (80a747c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a73fa:	681a      	ldr	r2, [r3, #0]
 80a73fc:	07d2      	lsls	r2, r2, #31
 80a73fe:	bf5c      	itt	pl
 80a7400:	2201      	movpl	r2, #1
 80a7402:	601a      	strpl	r2, [r3, #0]
 80a7404:	4b1e      	ldr	r3, [pc, #120]	; (80a7480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a7406:	681a      	ldr	r2, [r3, #0]
 80a7408:	07d0      	lsls	r0, r2, #31
 80a740a:	bf5c      	itt	pl
 80a740c:	2201      	movpl	r2, #1
 80a740e:	601a      	strpl	r2, [r3, #0]
 80a7410:	4b1c      	ldr	r3, [pc, #112]	; (80a7484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a7412:	681a      	ldr	r2, [r3, #0]
 80a7414:	07d1      	lsls	r1, r2, #31
 80a7416:	bf5c      	itt	pl
 80a7418:	2201      	movpl	r2, #1
 80a741a:	601a      	strpl	r2, [r3, #0]
 80a741c:	4b1a      	ldr	r3, [pc, #104]	; (80a7488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a741e:	681a      	ldr	r2, [r3, #0]
 80a7420:	07d2      	lsls	r2, r2, #31
 80a7422:	bf5c      	itt	pl
 80a7424:	2201      	movpl	r2, #1
 80a7426:	601a      	strpl	r2, [r3, #0]
 80a7428:	4b18      	ldr	r3, [pc, #96]	; (80a748c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a742a:	681a      	ldr	r2, [r3, #0]
 80a742c:	07d0      	lsls	r0, r2, #31
 80a742e:	bf5c      	itt	pl
 80a7430:	2201      	movpl	r2, #1
 80a7432:	601a      	strpl	r2, [r3, #0]
 80a7434:	4b16      	ldr	r3, [pc, #88]	; (80a7490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a7436:	681a      	ldr	r2, [r3, #0]
 80a7438:	07d1      	lsls	r1, r2, #31
 80a743a:	bf5c      	itt	pl
 80a743c:	2201      	movpl	r2, #1
 80a743e:	601a      	strpl	r2, [r3, #0]
 80a7440:	4b14      	ldr	r3, [pc, #80]	; (80a7494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a7442:	681a      	ldr	r2, [r3, #0]
 80a7444:	07d2      	lsls	r2, r2, #31
 80a7446:	bf5c      	itt	pl
 80a7448:	2201      	movpl	r2, #1
 80a744a:	601a      	strpl	r2, [r3, #0]
 80a744c:	4b12      	ldr	r3, [pc, #72]	; (80a7498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a744e:	681a      	ldr	r2, [r3, #0]
 80a7450:	07d0      	lsls	r0, r2, #31
 80a7452:	bf5c      	itt	pl
 80a7454:	2201      	movpl	r2, #1
 80a7456:	601a      	strpl	r2, [r3, #0]
 80a7458:	4b10      	ldr	r3, [pc, #64]	; (80a749c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a745a:	681a      	ldr	r2, [r3, #0]
 80a745c:	07d1      	lsls	r1, r2, #31
 80a745e:	bf5c      	itt	pl
 80a7460:	2201      	movpl	r2, #1
 80a7462:	601a      	strpl	r2, [r3, #0]
 80a7464:	4b0e      	ldr	r3, [pc, #56]	; (80a74a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a7466:	681a      	ldr	r2, [r3, #0]
 80a7468:	07d2      	lsls	r2, r2, #31
 80a746a:	bf5c      	itt	pl
 80a746c:	2201      	movpl	r2, #1
 80a746e:	601a      	strpl	r2, [r3, #0]
 80a7470:	4770      	bx	lr
 80a7472:	bf00      	nop
 80a7474:	20000804 	.word	0x20000804
 80a7478:	20000800 	.word	0x20000800
 80a747c:	200007fc 	.word	0x200007fc
 80a7480:	200007f8 	.word	0x200007f8
 80a7484:	200007f4 	.word	0x200007f4
 80a7488:	200007f0 	.word	0x200007f0
 80a748c:	200007ec 	.word	0x200007ec
 80a7490:	200007e8 	.word	0x200007e8
 80a7494:	200007e4 	.word	0x200007e4
 80a7498:	200007e0 	.word	0x200007e0
 80a749c:	200007dc 	.word	0x200007dc
 80a74a0:	200007d8 	.word	0x200007d8

080a74a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a74a4:	4b18      	ldr	r3, [pc, #96]	; (80a7508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a74a6:	681a      	ldr	r2, [r3, #0]
 80a74a8:	07d1      	lsls	r1, r2, #31
 80a74aa:	bf5c      	itt	pl
 80a74ac:	2201      	movpl	r2, #1
 80a74ae:	601a      	strpl	r2, [r3, #0]
 80a74b0:	4b16      	ldr	r3, [pc, #88]	; (80a750c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a74b2:	681a      	ldr	r2, [r3, #0]
 80a74b4:	07d2      	lsls	r2, r2, #31
 80a74b6:	bf5c      	itt	pl
 80a74b8:	2201      	movpl	r2, #1
 80a74ba:	601a      	strpl	r2, [r3, #0]
 80a74bc:	4b14      	ldr	r3, [pc, #80]	; (80a7510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a74be:	681a      	ldr	r2, [r3, #0]
 80a74c0:	07d0      	lsls	r0, r2, #31
 80a74c2:	bf5c      	itt	pl
 80a74c4:	2201      	movpl	r2, #1
 80a74c6:	601a      	strpl	r2, [r3, #0]
 80a74c8:	4b12      	ldr	r3, [pc, #72]	; (80a7514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a74ca:	681a      	ldr	r2, [r3, #0]
 80a74cc:	07d1      	lsls	r1, r2, #31
 80a74ce:	bf5c      	itt	pl
 80a74d0:	2201      	movpl	r2, #1
 80a74d2:	601a      	strpl	r2, [r3, #0]
 80a74d4:	4b10      	ldr	r3, [pc, #64]	; (80a7518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a74d6:	681a      	ldr	r2, [r3, #0]
 80a74d8:	07d2      	lsls	r2, r2, #31
 80a74da:	bf5c      	itt	pl
 80a74dc:	2201      	movpl	r2, #1
 80a74de:	601a      	strpl	r2, [r3, #0]
 80a74e0:	4b0e      	ldr	r3, [pc, #56]	; (80a751c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a74e2:	681a      	ldr	r2, [r3, #0]
 80a74e4:	07d0      	lsls	r0, r2, #31
 80a74e6:	bf5c      	itt	pl
 80a74e8:	2201      	movpl	r2, #1
 80a74ea:	601a      	strpl	r2, [r3, #0]
 80a74ec:	4b0c      	ldr	r3, [pc, #48]	; (80a7520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a74ee:	681a      	ldr	r2, [r3, #0]
 80a74f0:	07d1      	lsls	r1, r2, #31
 80a74f2:	bf5c      	itt	pl
 80a74f4:	2201      	movpl	r2, #1
 80a74f6:	601a      	strpl	r2, [r3, #0]
 80a74f8:	4b0a      	ldr	r3, [pc, #40]	; (80a7524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a74fa:	681a      	ldr	r2, [r3, #0]
 80a74fc:	07d2      	lsls	r2, r2, #31
 80a74fe:	bf5c      	itt	pl
 80a7500:	2201      	movpl	r2, #1
 80a7502:	601a      	strpl	r2, [r3, #0]
 80a7504:	4770      	bx	lr
 80a7506:	bf00      	nop
 80a7508:	20000824 	.word	0x20000824
 80a750c:	20000820 	.word	0x20000820
 80a7510:	2000081c 	.word	0x2000081c
 80a7514:	20000818 	.word	0x20000818
 80a7518:	20000814 	.word	0x20000814
 80a751c:	20000810 	.word	0x20000810
 80a7520:	2000080c 	.word	0x2000080c
 80a7524:	20000808 	.word	0x20000808

080a7528 <__aeabi_drsub>:
 80a7528:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a752c:	e002      	b.n	80a7534 <__adddf3>
 80a752e:	bf00      	nop

080a7530 <__aeabi_dsub>:
 80a7530:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a7534 <__adddf3>:
 80a7534:	b530      	push	{r4, r5, lr}
 80a7536:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a753a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a753e:	ea94 0f05 	teq	r4, r5
 80a7542:	bf08      	it	eq
 80a7544:	ea90 0f02 	teqeq	r0, r2
 80a7548:	bf1f      	itttt	ne
 80a754a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a754e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a7552:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a7556:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a755a:	f000 80e2 	beq.w	80a7722 <__adddf3+0x1ee>
 80a755e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a7562:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a7566:	bfb8      	it	lt
 80a7568:	426d      	neglt	r5, r5
 80a756a:	dd0c      	ble.n	80a7586 <__adddf3+0x52>
 80a756c:	442c      	add	r4, r5
 80a756e:	ea80 0202 	eor.w	r2, r0, r2
 80a7572:	ea81 0303 	eor.w	r3, r1, r3
 80a7576:	ea82 0000 	eor.w	r0, r2, r0
 80a757a:	ea83 0101 	eor.w	r1, r3, r1
 80a757e:	ea80 0202 	eor.w	r2, r0, r2
 80a7582:	ea81 0303 	eor.w	r3, r1, r3
 80a7586:	2d36      	cmp	r5, #54	; 0x36
 80a7588:	bf88      	it	hi
 80a758a:	bd30      	pophi	{r4, r5, pc}
 80a758c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a7590:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a7594:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a7598:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a759c:	d002      	beq.n	80a75a4 <__adddf3+0x70>
 80a759e:	4240      	negs	r0, r0
 80a75a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a75a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a75a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a75ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a75b0:	d002      	beq.n	80a75b8 <__adddf3+0x84>
 80a75b2:	4252      	negs	r2, r2
 80a75b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a75b8:	ea94 0f05 	teq	r4, r5
 80a75bc:	f000 80a7 	beq.w	80a770e <__adddf3+0x1da>
 80a75c0:	f1a4 0401 	sub.w	r4, r4, #1
 80a75c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80a75c8:	db0d      	blt.n	80a75e6 <__adddf3+0xb2>
 80a75ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a75ce:	fa22 f205 	lsr.w	r2, r2, r5
 80a75d2:	1880      	adds	r0, r0, r2
 80a75d4:	f141 0100 	adc.w	r1, r1, #0
 80a75d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80a75dc:	1880      	adds	r0, r0, r2
 80a75de:	fa43 f305 	asr.w	r3, r3, r5
 80a75e2:	4159      	adcs	r1, r3
 80a75e4:	e00e      	b.n	80a7604 <__adddf3+0xd0>
 80a75e6:	f1a5 0520 	sub.w	r5, r5, #32
 80a75ea:	f10e 0e20 	add.w	lr, lr, #32
 80a75ee:	2a01      	cmp	r2, #1
 80a75f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a75f4:	bf28      	it	cs
 80a75f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a75fa:	fa43 f305 	asr.w	r3, r3, r5
 80a75fe:	18c0      	adds	r0, r0, r3
 80a7600:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a7604:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a7608:	d507      	bpl.n	80a761a <__adddf3+0xe6>
 80a760a:	f04f 0e00 	mov.w	lr, #0
 80a760e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a7612:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a7616:	eb6e 0101 	sbc.w	r1, lr, r1
 80a761a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a761e:	d31b      	bcc.n	80a7658 <__adddf3+0x124>
 80a7620:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a7624:	d30c      	bcc.n	80a7640 <__adddf3+0x10c>
 80a7626:	0849      	lsrs	r1, r1, #1
 80a7628:	ea5f 0030 	movs.w	r0, r0, rrx
 80a762c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a7630:	f104 0401 	add.w	r4, r4, #1
 80a7634:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a7638:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a763c:	f080 809a 	bcs.w	80a7774 <__adddf3+0x240>
 80a7640:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a7644:	bf08      	it	eq
 80a7646:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a764a:	f150 0000 	adcs.w	r0, r0, #0
 80a764e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a7652:	ea41 0105 	orr.w	r1, r1, r5
 80a7656:	bd30      	pop	{r4, r5, pc}
 80a7658:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a765c:	4140      	adcs	r0, r0
 80a765e:	eb41 0101 	adc.w	r1, r1, r1
 80a7662:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a7666:	f1a4 0401 	sub.w	r4, r4, #1
 80a766a:	d1e9      	bne.n	80a7640 <__adddf3+0x10c>
 80a766c:	f091 0f00 	teq	r1, #0
 80a7670:	bf04      	itt	eq
 80a7672:	4601      	moveq	r1, r0
 80a7674:	2000      	moveq	r0, #0
 80a7676:	fab1 f381 	clz	r3, r1
 80a767a:	bf08      	it	eq
 80a767c:	3320      	addeq	r3, #32
 80a767e:	f1a3 030b 	sub.w	r3, r3, #11
 80a7682:	f1b3 0220 	subs.w	r2, r3, #32
 80a7686:	da0c      	bge.n	80a76a2 <__adddf3+0x16e>
 80a7688:	320c      	adds	r2, #12
 80a768a:	dd08      	ble.n	80a769e <__adddf3+0x16a>
 80a768c:	f102 0c14 	add.w	ip, r2, #20
 80a7690:	f1c2 020c 	rsb	r2, r2, #12
 80a7694:	fa01 f00c 	lsl.w	r0, r1, ip
 80a7698:	fa21 f102 	lsr.w	r1, r1, r2
 80a769c:	e00c      	b.n	80a76b8 <__adddf3+0x184>
 80a769e:	f102 0214 	add.w	r2, r2, #20
 80a76a2:	bfd8      	it	le
 80a76a4:	f1c2 0c20 	rsble	ip, r2, #32
 80a76a8:	fa01 f102 	lsl.w	r1, r1, r2
 80a76ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a76b0:	bfdc      	itt	le
 80a76b2:	ea41 010c 	orrle.w	r1, r1, ip
 80a76b6:	4090      	lslle	r0, r2
 80a76b8:	1ae4      	subs	r4, r4, r3
 80a76ba:	bfa2      	ittt	ge
 80a76bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a76c0:	4329      	orrge	r1, r5
 80a76c2:	bd30      	popge	{r4, r5, pc}
 80a76c4:	ea6f 0404 	mvn.w	r4, r4
 80a76c8:	3c1f      	subs	r4, #31
 80a76ca:	da1c      	bge.n	80a7706 <__adddf3+0x1d2>
 80a76cc:	340c      	adds	r4, #12
 80a76ce:	dc0e      	bgt.n	80a76ee <__adddf3+0x1ba>
 80a76d0:	f104 0414 	add.w	r4, r4, #20
 80a76d4:	f1c4 0220 	rsb	r2, r4, #32
 80a76d8:	fa20 f004 	lsr.w	r0, r0, r4
 80a76dc:	fa01 f302 	lsl.w	r3, r1, r2
 80a76e0:	ea40 0003 	orr.w	r0, r0, r3
 80a76e4:	fa21 f304 	lsr.w	r3, r1, r4
 80a76e8:	ea45 0103 	orr.w	r1, r5, r3
 80a76ec:	bd30      	pop	{r4, r5, pc}
 80a76ee:	f1c4 040c 	rsb	r4, r4, #12
 80a76f2:	f1c4 0220 	rsb	r2, r4, #32
 80a76f6:	fa20 f002 	lsr.w	r0, r0, r2
 80a76fa:	fa01 f304 	lsl.w	r3, r1, r4
 80a76fe:	ea40 0003 	orr.w	r0, r0, r3
 80a7702:	4629      	mov	r1, r5
 80a7704:	bd30      	pop	{r4, r5, pc}
 80a7706:	fa21 f004 	lsr.w	r0, r1, r4
 80a770a:	4629      	mov	r1, r5
 80a770c:	bd30      	pop	{r4, r5, pc}
 80a770e:	f094 0f00 	teq	r4, #0
 80a7712:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a7716:	bf06      	itte	eq
 80a7718:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a771c:	3401      	addeq	r4, #1
 80a771e:	3d01      	subne	r5, #1
 80a7720:	e74e      	b.n	80a75c0 <__adddf3+0x8c>
 80a7722:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a7726:	bf18      	it	ne
 80a7728:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a772c:	d029      	beq.n	80a7782 <__adddf3+0x24e>
 80a772e:	ea94 0f05 	teq	r4, r5
 80a7732:	bf08      	it	eq
 80a7734:	ea90 0f02 	teqeq	r0, r2
 80a7738:	d005      	beq.n	80a7746 <__adddf3+0x212>
 80a773a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a773e:	bf04      	itt	eq
 80a7740:	4619      	moveq	r1, r3
 80a7742:	4610      	moveq	r0, r2
 80a7744:	bd30      	pop	{r4, r5, pc}
 80a7746:	ea91 0f03 	teq	r1, r3
 80a774a:	bf1e      	ittt	ne
 80a774c:	2100      	movne	r1, #0
 80a774e:	2000      	movne	r0, #0
 80a7750:	bd30      	popne	{r4, r5, pc}
 80a7752:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a7756:	d105      	bne.n	80a7764 <__adddf3+0x230>
 80a7758:	0040      	lsls	r0, r0, #1
 80a775a:	4149      	adcs	r1, r1
 80a775c:	bf28      	it	cs
 80a775e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a7762:	bd30      	pop	{r4, r5, pc}
 80a7764:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a7768:	bf3c      	itt	cc
 80a776a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a776e:	bd30      	popcc	{r4, r5, pc}
 80a7770:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a7774:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a7778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a777c:	f04f 0000 	mov.w	r0, #0
 80a7780:	bd30      	pop	{r4, r5, pc}
 80a7782:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a7786:	bf1a      	itte	ne
 80a7788:	4619      	movne	r1, r3
 80a778a:	4610      	movne	r0, r2
 80a778c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a7790:	bf1c      	itt	ne
 80a7792:	460b      	movne	r3, r1
 80a7794:	4602      	movne	r2, r0
 80a7796:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a779a:	bf06      	itte	eq
 80a779c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a77a0:	ea91 0f03 	teqeq	r1, r3
 80a77a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a77a8:	bd30      	pop	{r4, r5, pc}
 80a77aa:	bf00      	nop

080a77ac <__aeabi_ui2d>:
 80a77ac:	f090 0f00 	teq	r0, #0
 80a77b0:	bf04      	itt	eq
 80a77b2:	2100      	moveq	r1, #0
 80a77b4:	4770      	bxeq	lr
 80a77b6:	b530      	push	{r4, r5, lr}
 80a77b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a77bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a77c0:	f04f 0500 	mov.w	r5, #0
 80a77c4:	f04f 0100 	mov.w	r1, #0
 80a77c8:	e750      	b.n	80a766c <__adddf3+0x138>
 80a77ca:	bf00      	nop

080a77cc <__aeabi_i2d>:
 80a77cc:	f090 0f00 	teq	r0, #0
 80a77d0:	bf04      	itt	eq
 80a77d2:	2100      	moveq	r1, #0
 80a77d4:	4770      	bxeq	lr
 80a77d6:	b530      	push	{r4, r5, lr}
 80a77d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a77dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a77e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a77e4:	bf48      	it	mi
 80a77e6:	4240      	negmi	r0, r0
 80a77e8:	f04f 0100 	mov.w	r1, #0
 80a77ec:	e73e      	b.n	80a766c <__adddf3+0x138>
 80a77ee:	bf00      	nop

080a77f0 <__aeabi_f2d>:
 80a77f0:	0042      	lsls	r2, r0, #1
 80a77f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a77f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a77fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a77fe:	bf1f      	itttt	ne
 80a7800:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a7804:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a7808:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a780c:	4770      	bxne	lr
 80a780e:	f092 0f00 	teq	r2, #0
 80a7812:	bf14      	ite	ne
 80a7814:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a7818:	4770      	bxeq	lr
 80a781a:	b530      	push	{r4, r5, lr}
 80a781c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a7820:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a7824:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a7828:	e720      	b.n	80a766c <__adddf3+0x138>
 80a782a:	bf00      	nop

080a782c <__aeabi_ul2d>:
 80a782c:	ea50 0201 	orrs.w	r2, r0, r1
 80a7830:	bf08      	it	eq
 80a7832:	4770      	bxeq	lr
 80a7834:	b530      	push	{r4, r5, lr}
 80a7836:	f04f 0500 	mov.w	r5, #0
 80a783a:	e00a      	b.n	80a7852 <__aeabi_l2d+0x16>

080a783c <__aeabi_l2d>:
 80a783c:	ea50 0201 	orrs.w	r2, r0, r1
 80a7840:	bf08      	it	eq
 80a7842:	4770      	bxeq	lr
 80a7844:	b530      	push	{r4, r5, lr}
 80a7846:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a784a:	d502      	bpl.n	80a7852 <__aeabi_l2d+0x16>
 80a784c:	4240      	negs	r0, r0
 80a784e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a7852:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a7856:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a785a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a785e:	f43f aedc 	beq.w	80a761a <__adddf3+0xe6>
 80a7862:	f04f 0203 	mov.w	r2, #3
 80a7866:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a786a:	bf18      	it	ne
 80a786c:	3203      	addne	r2, #3
 80a786e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a7872:	bf18      	it	ne
 80a7874:	3203      	addne	r2, #3
 80a7876:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a787a:	f1c2 0320 	rsb	r3, r2, #32
 80a787e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a7882:	fa20 f002 	lsr.w	r0, r0, r2
 80a7886:	fa01 fe03 	lsl.w	lr, r1, r3
 80a788a:	ea40 000e 	orr.w	r0, r0, lr
 80a788e:	fa21 f102 	lsr.w	r1, r1, r2
 80a7892:	4414      	add	r4, r2
 80a7894:	e6c1      	b.n	80a761a <__adddf3+0xe6>
 80a7896:	bf00      	nop

080a7898 <__aeabi_dmul>:
 80a7898:	b570      	push	{r4, r5, r6, lr}
 80a789a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a789e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a78a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a78a6:	bf1d      	ittte	ne
 80a78a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a78ac:	ea94 0f0c 	teqne	r4, ip
 80a78b0:	ea95 0f0c 	teqne	r5, ip
 80a78b4:	f000 f8de 	bleq	80a7a74 <__aeabi_dmul+0x1dc>
 80a78b8:	442c      	add	r4, r5
 80a78ba:	ea81 0603 	eor.w	r6, r1, r3
 80a78be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a78c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a78c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a78ca:	bf18      	it	ne
 80a78cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a78d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a78d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a78d8:	d038      	beq.n	80a794c <__aeabi_dmul+0xb4>
 80a78da:	fba0 ce02 	umull	ip, lr, r0, r2
 80a78de:	f04f 0500 	mov.w	r5, #0
 80a78e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a78e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a78ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a78ee:	f04f 0600 	mov.w	r6, #0
 80a78f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a78f6:	f09c 0f00 	teq	ip, #0
 80a78fa:	bf18      	it	ne
 80a78fc:	f04e 0e01 	orrne.w	lr, lr, #1
 80a7900:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a7904:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a7908:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a790c:	d204      	bcs.n	80a7918 <__aeabi_dmul+0x80>
 80a790e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a7912:	416d      	adcs	r5, r5
 80a7914:	eb46 0606 	adc.w	r6, r6, r6
 80a7918:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a791c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a7920:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a7924:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a7928:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a792c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a7930:	bf88      	it	hi
 80a7932:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a7936:	d81e      	bhi.n	80a7976 <__aeabi_dmul+0xde>
 80a7938:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a793c:	bf08      	it	eq
 80a793e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a7942:	f150 0000 	adcs.w	r0, r0, #0
 80a7946:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a794a:	bd70      	pop	{r4, r5, r6, pc}
 80a794c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a7950:	ea46 0101 	orr.w	r1, r6, r1
 80a7954:	ea40 0002 	orr.w	r0, r0, r2
 80a7958:	ea81 0103 	eor.w	r1, r1, r3
 80a795c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a7960:	bfc2      	ittt	gt
 80a7962:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a7966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a796a:	bd70      	popgt	{r4, r5, r6, pc}
 80a796c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a7970:	f04f 0e00 	mov.w	lr, #0
 80a7974:	3c01      	subs	r4, #1
 80a7976:	f300 80ab 	bgt.w	80a7ad0 <__aeabi_dmul+0x238>
 80a797a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a797e:	bfde      	ittt	le
 80a7980:	2000      	movle	r0, #0
 80a7982:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a7986:	bd70      	pople	{r4, r5, r6, pc}
 80a7988:	f1c4 0400 	rsb	r4, r4, #0
 80a798c:	3c20      	subs	r4, #32
 80a798e:	da35      	bge.n	80a79fc <__aeabi_dmul+0x164>
 80a7990:	340c      	adds	r4, #12
 80a7992:	dc1b      	bgt.n	80a79cc <__aeabi_dmul+0x134>
 80a7994:	f104 0414 	add.w	r4, r4, #20
 80a7998:	f1c4 0520 	rsb	r5, r4, #32
 80a799c:	fa00 f305 	lsl.w	r3, r0, r5
 80a79a0:	fa20 f004 	lsr.w	r0, r0, r4
 80a79a4:	fa01 f205 	lsl.w	r2, r1, r5
 80a79a8:	ea40 0002 	orr.w	r0, r0, r2
 80a79ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a79b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a79b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a79b8:	fa21 f604 	lsr.w	r6, r1, r4
 80a79bc:	eb42 0106 	adc.w	r1, r2, r6
 80a79c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a79c4:	bf08      	it	eq
 80a79c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a79ca:	bd70      	pop	{r4, r5, r6, pc}
 80a79cc:	f1c4 040c 	rsb	r4, r4, #12
 80a79d0:	f1c4 0520 	rsb	r5, r4, #32
 80a79d4:	fa00 f304 	lsl.w	r3, r0, r4
 80a79d8:	fa20 f005 	lsr.w	r0, r0, r5
 80a79dc:	fa01 f204 	lsl.w	r2, r1, r4
 80a79e0:	ea40 0002 	orr.w	r0, r0, r2
 80a79e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a79e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a79ec:	f141 0100 	adc.w	r1, r1, #0
 80a79f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a79f4:	bf08      	it	eq
 80a79f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a79fa:	bd70      	pop	{r4, r5, r6, pc}
 80a79fc:	f1c4 0520 	rsb	r5, r4, #32
 80a7a00:	fa00 f205 	lsl.w	r2, r0, r5
 80a7a04:	ea4e 0e02 	orr.w	lr, lr, r2
 80a7a08:	fa20 f304 	lsr.w	r3, r0, r4
 80a7a0c:	fa01 f205 	lsl.w	r2, r1, r5
 80a7a10:	ea43 0302 	orr.w	r3, r3, r2
 80a7a14:	fa21 f004 	lsr.w	r0, r1, r4
 80a7a18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a7a1c:	fa21 f204 	lsr.w	r2, r1, r4
 80a7a20:	ea20 0002 	bic.w	r0, r0, r2
 80a7a24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a7a28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a7a2c:	bf08      	it	eq
 80a7a2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a7a32:	bd70      	pop	{r4, r5, r6, pc}
 80a7a34:	f094 0f00 	teq	r4, #0
 80a7a38:	d10f      	bne.n	80a7a5a <__aeabi_dmul+0x1c2>
 80a7a3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a7a3e:	0040      	lsls	r0, r0, #1
 80a7a40:	eb41 0101 	adc.w	r1, r1, r1
 80a7a44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a7a48:	bf08      	it	eq
 80a7a4a:	3c01      	subeq	r4, #1
 80a7a4c:	d0f7      	beq.n	80a7a3e <__aeabi_dmul+0x1a6>
 80a7a4e:	ea41 0106 	orr.w	r1, r1, r6
 80a7a52:	f095 0f00 	teq	r5, #0
 80a7a56:	bf18      	it	ne
 80a7a58:	4770      	bxne	lr
 80a7a5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a7a5e:	0052      	lsls	r2, r2, #1
 80a7a60:	eb43 0303 	adc.w	r3, r3, r3
 80a7a64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a7a68:	bf08      	it	eq
 80a7a6a:	3d01      	subeq	r5, #1
 80a7a6c:	d0f7      	beq.n	80a7a5e <__aeabi_dmul+0x1c6>
 80a7a6e:	ea43 0306 	orr.w	r3, r3, r6
 80a7a72:	4770      	bx	lr
 80a7a74:	ea94 0f0c 	teq	r4, ip
 80a7a78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a7a7c:	bf18      	it	ne
 80a7a7e:	ea95 0f0c 	teqne	r5, ip
 80a7a82:	d00c      	beq.n	80a7a9e <__aeabi_dmul+0x206>
 80a7a84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a7a88:	bf18      	it	ne
 80a7a8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a7a8e:	d1d1      	bne.n	80a7a34 <__aeabi_dmul+0x19c>
 80a7a90:	ea81 0103 	eor.w	r1, r1, r3
 80a7a94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a7a98:	f04f 0000 	mov.w	r0, #0
 80a7a9c:	bd70      	pop	{r4, r5, r6, pc}
 80a7a9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a7aa2:	bf06      	itte	eq
 80a7aa4:	4610      	moveq	r0, r2
 80a7aa6:	4619      	moveq	r1, r3
 80a7aa8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a7aac:	d019      	beq.n	80a7ae2 <__aeabi_dmul+0x24a>
 80a7aae:	ea94 0f0c 	teq	r4, ip
 80a7ab2:	d102      	bne.n	80a7aba <__aeabi_dmul+0x222>
 80a7ab4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a7ab8:	d113      	bne.n	80a7ae2 <__aeabi_dmul+0x24a>
 80a7aba:	ea95 0f0c 	teq	r5, ip
 80a7abe:	d105      	bne.n	80a7acc <__aeabi_dmul+0x234>
 80a7ac0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a7ac4:	bf1c      	itt	ne
 80a7ac6:	4610      	movne	r0, r2
 80a7ac8:	4619      	movne	r1, r3
 80a7aca:	d10a      	bne.n	80a7ae2 <__aeabi_dmul+0x24a>
 80a7acc:	ea81 0103 	eor.w	r1, r1, r3
 80a7ad0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a7ad4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a7ad8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a7adc:	f04f 0000 	mov.w	r0, #0
 80a7ae0:	bd70      	pop	{r4, r5, r6, pc}
 80a7ae2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a7ae6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a7aea:	bd70      	pop	{r4, r5, r6, pc}

080a7aec <__aeabi_ddiv>:
 80a7aec:	b570      	push	{r4, r5, r6, lr}
 80a7aee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a7af2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a7af6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a7afa:	bf1d      	ittte	ne
 80a7afc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a7b00:	ea94 0f0c 	teqne	r4, ip
 80a7b04:	ea95 0f0c 	teqne	r5, ip
 80a7b08:	f000 f8a7 	bleq	80a7c5a <__aeabi_ddiv+0x16e>
 80a7b0c:	eba4 0405 	sub.w	r4, r4, r5
 80a7b10:	ea81 0e03 	eor.w	lr, r1, r3
 80a7b14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a7b18:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a7b1c:	f000 8088 	beq.w	80a7c30 <__aeabi_ddiv+0x144>
 80a7b20:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a7b24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a7b28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a7b2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a7b30:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a7b34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a7b38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a7b3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a7b40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a7b44:	429d      	cmp	r5, r3
 80a7b46:	bf08      	it	eq
 80a7b48:	4296      	cmpeq	r6, r2
 80a7b4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a7b4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a7b52:	d202      	bcs.n	80a7b5a <__aeabi_ddiv+0x6e>
 80a7b54:	085b      	lsrs	r3, r3, #1
 80a7b56:	ea4f 0232 	mov.w	r2, r2, rrx
 80a7b5a:	1ab6      	subs	r6, r6, r2
 80a7b5c:	eb65 0503 	sbc.w	r5, r5, r3
 80a7b60:	085b      	lsrs	r3, r3, #1
 80a7b62:	ea4f 0232 	mov.w	r2, r2, rrx
 80a7b66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a7b6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a7b6e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a7b72:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a7b76:	bf22      	ittt	cs
 80a7b78:	1ab6      	subcs	r6, r6, r2
 80a7b7a:	4675      	movcs	r5, lr
 80a7b7c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a7b80:	085b      	lsrs	r3, r3, #1
 80a7b82:	ea4f 0232 	mov.w	r2, r2, rrx
 80a7b86:	ebb6 0e02 	subs.w	lr, r6, r2
 80a7b8a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a7b8e:	bf22      	ittt	cs
 80a7b90:	1ab6      	subcs	r6, r6, r2
 80a7b92:	4675      	movcs	r5, lr
 80a7b94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a7b98:	085b      	lsrs	r3, r3, #1
 80a7b9a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a7b9e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a7ba2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a7ba6:	bf22      	ittt	cs
 80a7ba8:	1ab6      	subcs	r6, r6, r2
 80a7baa:	4675      	movcs	r5, lr
 80a7bac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a7bb0:	085b      	lsrs	r3, r3, #1
 80a7bb2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a7bb6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a7bba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a7bbe:	bf22      	ittt	cs
 80a7bc0:	1ab6      	subcs	r6, r6, r2
 80a7bc2:	4675      	movcs	r5, lr
 80a7bc4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a7bc8:	ea55 0e06 	orrs.w	lr, r5, r6
 80a7bcc:	d018      	beq.n	80a7c00 <__aeabi_ddiv+0x114>
 80a7bce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a7bd2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a7bd6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a7bda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a7bde:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a7be2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a7be6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a7bea:	d1c0      	bne.n	80a7b6e <__aeabi_ddiv+0x82>
 80a7bec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a7bf0:	d10b      	bne.n	80a7c0a <__aeabi_ddiv+0x11e>
 80a7bf2:	ea41 0100 	orr.w	r1, r1, r0
 80a7bf6:	f04f 0000 	mov.w	r0, #0
 80a7bfa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a7bfe:	e7b6      	b.n	80a7b6e <__aeabi_ddiv+0x82>
 80a7c00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a7c04:	bf04      	itt	eq
 80a7c06:	4301      	orreq	r1, r0
 80a7c08:	2000      	moveq	r0, #0
 80a7c0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a7c0e:	bf88      	it	hi
 80a7c10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a7c14:	f63f aeaf 	bhi.w	80a7976 <__aeabi_dmul+0xde>
 80a7c18:	ebb5 0c03 	subs.w	ip, r5, r3
 80a7c1c:	bf04      	itt	eq
 80a7c1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a7c22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a7c26:	f150 0000 	adcs.w	r0, r0, #0
 80a7c2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a7c2e:	bd70      	pop	{r4, r5, r6, pc}
 80a7c30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a7c34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a7c38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a7c3c:	bfc2      	ittt	gt
 80a7c3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a7c42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a7c46:	bd70      	popgt	{r4, r5, r6, pc}
 80a7c48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a7c4c:	f04f 0e00 	mov.w	lr, #0
 80a7c50:	3c01      	subs	r4, #1
 80a7c52:	e690      	b.n	80a7976 <__aeabi_dmul+0xde>
 80a7c54:	ea45 0e06 	orr.w	lr, r5, r6
 80a7c58:	e68d      	b.n	80a7976 <__aeabi_dmul+0xde>
 80a7c5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a7c5e:	ea94 0f0c 	teq	r4, ip
 80a7c62:	bf08      	it	eq
 80a7c64:	ea95 0f0c 	teqeq	r5, ip
 80a7c68:	f43f af3b 	beq.w	80a7ae2 <__aeabi_dmul+0x24a>
 80a7c6c:	ea94 0f0c 	teq	r4, ip
 80a7c70:	d10a      	bne.n	80a7c88 <__aeabi_ddiv+0x19c>
 80a7c72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a7c76:	f47f af34 	bne.w	80a7ae2 <__aeabi_dmul+0x24a>
 80a7c7a:	ea95 0f0c 	teq	r5, ip
 80a7c7e:	f47f af25 	bne.w	80a7acc <__aeabi_dmul+0x234>
 80a7c82:	4610      	mov	r0, r2
 80a7c84:	4619      	mov	r1, r3
 80a7c86:	e72c      	b.n	80a7ae2 <__aeabi_dmul+0x24a>
 80a7c88:	ea95 0f0c 	teq	r5, ip
 80a7c8c:	d106      	bne.n	80a7c9c <__aeabi_ddiv+0x1b0>
 80a7c8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a7c92:	f43f aefd 	beq.w	80a7a90 <__aeabi_dmul+0x1f8>
 80a7c96:	4610      	mov	r0, r2
 80a7c98:	4619      	mov	r1, r3
 80a7c9a:	e722      	b.n	80a7ae2 <__aeabi_dmul+0x24a>
 80a7c9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a7ca0:	bf18      	it	ne
 80a7ca2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a7ca6:	f47f aec5 	bne.w	80a7a34 <__aeabi_dmul+0x19c>
 80a7caa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a7cae:	f47f af0d 	bne.w	80a7acc <__aeabi_dmul+0x234>
 80a7cb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a7cb6:	f47f aeeb 	bne.w	80a7a90 <__aeabi_dmul+0x1f8>
 80a7cba:	e712      	b.n	80a7ae2 <__aeabi_dmul+0x24a>

080a7cbc <__gedf2>:
 80a7cbc:	f04f 3cff 	mov.w	ip, #4294967295
 80a7cc0:	e006      	b.n	80a7cd0 <__cmpdf2+0x4>
 80a7cc2:	bf00      	nop

080a7cc4 <__ledf2>:
 80a7cc4:	f04f 0c01 	mov.w	ip, #1
 80a7cc8:	e002      	b.n	80a7cd0 <__cmpdf2+0x4>
 80a7cca:	bf00      	nop

080a7ccc <__cmpdf2>:
 80a7ccc:	f04f 0c01 	mov.w	ip, #1
 80a7cd0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a7cd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a7cd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a7cdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a7ce0:	bf18      	it	ne
 80a7ce2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a7ce6:	d01b      	beq.n	80a7d20 <__cmpdf2+0x54>
 80a7ce8:	b001      	add	sp, #4
 80a7cea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a7cee:	bf0c      	ite	eq
 80a7cf0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a7cf4:	ea91 0f03 	teqne	r1, r3
 80a7cf8:	bf02      	ittt	eq
 80a7cfa:	ea90 0f02 	teqeq	r0, r2
 80a7cfe:	2000      	moveq	r0, #0
 80a7d00:	4770      	bxeq	lr
 80a7d02:	f110 0f00 	cmn.w	r0, #0
 80a7d06:	ea91 0f03 	teq	r1, r3
 80a7d0a:	bf58      	it	pl
 80a7d0c:	4299      	cmppl	r1, r3
 80a7d0e:	bf08      	it	eq
 80a7d10:	4290      	cmpeq	r0, r2
 80a7d12:	bf2c      	ite	cs
 80a7d14:	17d8      	asrcs	r0, r3, #31
 80a7d16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a7d1a:	f040 0001 	orr.w	r0, r0, #1
 80a7d1e:	4770      	bx	lr
 80a7d20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a7d24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a7d28:	d102      	bne.n	80a7d30 <__cmpdf2+0x64>
 80a7d2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a7d2e:	d107      	bne.n	80a7d40 <__cmpdf2+0x74>
 80a7d30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a7d34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a7d38:	d1d6      	bne.n	80a7ce8 <__cmpdf2+0x1c>
 80a7d3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a7d3e:	d0d3      	beq.n	80a7ce8 <__cmpdf2+0x1c>
 80a7d40:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a7d44:	4770      	bx	lr
 80a7d46:	bf00      	nop

080a7d48 <__aeabi_cdrcmple>:
 80a7d48:	4684      	mov	ip, r0
 80a7d4a:	4610      	mov	r0, r2
 80a7d4c:	4662      	mov	r2, ip
 80a7d4e:	468c      	mov	ip, r1
 80a7d50:	4619      	mov	r1, r3
 80a7d52:	4663      	mov	r3, ip
 80a7d54:	e000      	b.n	80a7d58 <__aeabi_cdcmpeq>
 80a7d56:	bf00      	nop

080a7d58 <__aeabi_cdcmpeq>:
 80a7d58:	b501      	push	{r0, lr}
 80a7d5a:	f7ff ffb7 	bl	80a7ccc <__cmpdf2>
 80a7d5e:	2800      	cmp	r0, #0
 80a7d60:	bf48      	it	mi
 80a7d62:	f110 0f00 	cmnmi.w	r0, #0
 80a7d66:	bd01      	pop	{r0, pc}

080a7d68 <__aeabi_dcmpeq>:
 80a7d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7d6c:	f7ff fff4 	bl	80a7d58 <__aeabi_cdcmpeq>
 80a7d70:	bf0c      	ite	eq
 80a7d72:	2001      	moveq	r0, #1
 80a7d74:	2000      	movne	r0, #0
 80a7d76:	f85d fb08 	ldr.w	pc, [sp], #8
 80a7d7a:	bf00      	nop

080a7d7c <__aeabi_dcmplt>:
 80a7d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7d80:	f7ff ffea 	bl	80a7d58 <__aeabi_cdcmpeq>
 80a7d84:	bf34      	ite	cc
 80a7d86:	2001      	movcc	r0, #1
 80a7d88:	2000      	movcs	r0, #0
 80a7d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a7d8e:	bf00      	nop

080a7d90 <__aeabi_dcmple>:
 80a7d90:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7d94:	f7ff ffe0 	bl	80a7d58 <__aeabi_cdcmpeq>
 80a7d98:	bf94      	ite	ls
 80a7d9a:	2001      	movls	r0, #1
 80a7d9c:	2000      	movhi	r0, #0
 80a7d9e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a7da2:	bf00      	nop

080a7da4 <__aeabi_dcmpge>:
 80a7da4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7da8:	f7ff ffce 	bl	80a7d48 <__aeabi_cdrcmple>
 80a7dac:	bf94      	ite	ls
 80a7dae:	2001      	movls	r0, #1
 80a7db0:	2000      	movhi	r0, #0
 80a7db2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a7db6:	bf00      	nop

080a7db8 <__aeabi_dcmpgt>:
 80a7db8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a7dbc:	f7ff ffc4 	bl	80a7d48 <__aeabi_cdrcmple>
 80a7dc0:	bf34      	ite	cc
 80a7dc2:	2001      	movcc	r0, #1
 80a7dc4:	2000      	movcs	r0, #0
 80a7dc6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a7dca:	bf00      	nop

080a7dcc <__aeabi_dcmpun>:
 80a7dcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a7dd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a7dd4:	d102      	bne.n	80a7ddc <__aeabi_dcmpun+0x10>
 80a7dd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a7dda:	d10a      	bne.n	80a7df2 <__aeabi_dcmpun+0x26>
 80a7ddc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a7de0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a7de4:	d102      	bne.n	80a7dec <__aeabi_dcmpun+0x20>
 80a7de6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a7dea:	d102      	bne.n	80a7df2 <__aeabi_dcmpun+0x26>
 80a7dec:	f04f 0000 	mov.w	r0, #0
 80a7df0:	4770      	bx	lr
 80a7df2:	f04f 0001 	mov.w	r0, #1
 80a7df6:	4770      	bx	lr

080a7df8 <__aeabi_d2iz>:
 80a7df8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a7dfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a7e00:	d215      	bcs.n	80a7e2e <__aeabi_d2iz+0x36>
 80a7e02:	d511      	bpl.n	80a7e28 <__aeabi_d2iz+0x30>
 80a7e04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a7e08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a7e0c:	d912      	bls.n	80a7e34 <__aeabi_d2iz+0x3c>
 80a7e0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a7e12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a7e16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a7e1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a7e1e:	fa23 f002 	lsr.w	r0, r3, r2
 80a7e22:	bf18      	it	ne
 80a7e24:	4240      	negne	r0, r0
 80a7e26:	4770      	bx	lr
 80a7e28:	f04f 0000 	mov.w	r0, #0
 80a7e2c:	4770      	bx	lr
 80a7e2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a7e32:	d105      	bne.n	80a7e40 <__aeabi_d2iz+0x48>
 80a7e34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a7e38:	bf08      	it	eq
 80a7e3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a7e3e:	4770      	bx	lr
 80a7e40:	f04f 0000 	mov.w	r0, #0
 80a7e44:	4770      	bx	lr
 80a7e46:	bf00      	nop

080a7e48 <__aeabi_d2uiz>:
 80a7e48:	004a      	lsls	r2, r1, #1
 80a7e4a:	d211      	bcs.n	80a7e70 <__aeabi_d2uiz+0x28>
 80a7e4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a7e50:	d211      	bcs.n	80a7e76 <__aeabi_d2uiz+0x2e>
 80a7e52:	d50d      	bpl.n	80a7e70 <__aeabi_d2uiz+0x28>
 80a7e54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a7e58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a7e5c:	d40e      	bmi.n	80a7e7c <__aeabi_d2uiz+0x34>
 80a7e5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a7e62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a7e66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a7e6a:	fa23 f002 	lsr.w	r0, r3, r2
 80a7e6e:	4770      	bx	lr
 80a7e70:	f04f 0000 	mov.w	r0, #0
 80a7e74:	4770      	bx	lr
 80a7e76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a7e7a:	d102      	bne.n	80a7e82 <__aeabi_d2uiz+0x3a>
 80a7e7c:	f04f 30ff 	mov.w	r0, #4294967295
 80a7e80:	4770      	bx	lr
 80a7e82:	f04f 0000 	mov.w	r0, #0
 80a7e86:	4770      	bx	lr

080a7e88 <__aeabi_d2f>:
 80a7e88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a7e8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a7e90:	bf24      	itt	cs
 80a7e92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a7e96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a7e9a:	d90d      	bls.n	80a7eb8 <__aeabi_d2f+0x30>
 80a7e9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a7ea0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a7ea4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a7ea8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a7eac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a7eb0:	bf08      	it	eq
 80a7eb2:	f020 0001 	biceq.w	r0, r0, #1
 80a7eb6:	4770      	bx	lr
 80a7eb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a7ebc:	d121      	bne.n	80a7f02 <__aeabi_d2f+0x7a>
 80a7ebe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a7ec2:	bfbc      	itt	lt
 80a7ec4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a7ec8:	4770      	bxlt	lr
 80a7eca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a7ece:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a7ed2:	f1c2 0218 	rsb	r2, r2, #24
 80a7ed6:	f1c2 0c20 	rsb	ip, r2, #32
 80a7eda:	fa10 f30c 	lsls.w	r3, r0, ip
 80a7ede:	fa20 f002 	lsr.w	r0, r0, r2
 80a7ee2:	bf18      	it	ne
 80a7ee4:	f040 0001 	orrne.w	r0, r0, #1
 80a7ee8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a7eec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a7ef0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a7ef4:	ea40 000c 	orr.w	r0, r0, ip
 80a7ef8:	fa23 f302 	lsr.w	r3, r3, r2
 80a7efc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a7f00:	e7cc      	b.n	80a7e9c <__aeabi_d2f+0x14>
 80a7f02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a7f06:	d107      	bne.n	80a7f18 <__aeabi_d2f+0x90>
 80a7f08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a7f0c:	bf1e      	ittt	ne
 80a7f0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a7f12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a7f16:	4770      	bxne	lr
 80a7f18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a7f1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a7f20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a7f24:	4770      	bx	lr
 80a7f26:	bf00      	nop

080a7f28 <__aeabi_frsub>:
 80a7f28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a7f2c:	e002      	b.n	80a7f34 <__addsf3>
 80a7f2e:	bf00      	nop

080a7f30 <__aeabi_fsub>:
 80a7f30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a7f34 <__addsf3>:
 80a7f34:	0042      	lsls	r2, r0, #1
 80a7f36:	bf1f      	itttt	ne
 80a7f38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a7f3c:	ea92 0f03 	teqne	r2, r3
 80a7f40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a7f44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a7f48:	d06a      	beq.n	80a8020 <__addsf3+0xec>
 80a7f4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a7f4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a7f52:	bfc1      	itttt	gt
 80a7f54:	18d2      	addgt	r2, r2, r3
 80a7f56:	4041      	eorgt	r1, r0
 80a7f58:	4048      	eorgt	r0, r1
 80a7f5a:	4041      	eorgt	r1, r0
 80a7f5c:	bfb8      	it	lt
 80a7f5e:	425b      	neglt	r3, r3
 80a7f60:	2b19      	cmp	r3, #25
 80a7f62:	bf88      	it	hi
 80a7f64:	4770      	bxhi	lr
 80a7f66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a7f6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a7f6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a7f72:	bf18      	it	ne
 80a7f74:	4240      	negne	r0, r0
 80a7f76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a7f7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a7f7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a7f82:	bf18      	it	ne
 80a7f84:	4249      	negne	r1, r1
 80a7f86:	ea92 0f03 	teq	r2, r3
 80a7f8a:	d03f      	beq.n	80a800c <__addsf3+0xd8>
 80a7f8c:	f1a2 0201 	sub.w	r2, r2, #1
 80a7f90:	fa41 fc03 	asr.w	ip, r1, r3
 80a7f94:	eb10 000c 	adds.w	r0, r0, ip
 80a7f98:	f1c3 0320 	rsb	r3, r3, #32
 80a7f9c:	fa01 f103 	lsl.w	r1, r1, r3
 80a7fa0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a7fa4:	d502      	bpl.n	80a7fac <__addsf3+0x78>
 80a7fa6:	4249      	negs	r1, r1
 80a7fa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a7fac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a7fb0:	d313      	bcc.n	80a7fda <__addsf3+0xa6>
 80a7fb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a7fb6:	d306      	bcc.n	80a7fc6 <__addsf3+0x92>
 80a7fb8:	0840      	lsrs	r0, r0, #1
 80a7fba:	ea4f 0131 	mov.w	r1, r1, rrx
 80a7fbe:	f102 0201 	add.w	r2, r2, #1
 80a7fc2:	2afe      	cmp	r2, #254	; 0xfe
 80a7fc4:	d251      	bcs.n	80a806a <__addsf3+0x136>
 80a7fc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a7fca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a7fce:	bf08      	it	eq
 80a7fd0:	f020 0001 	biceq.w	r0, r0, #1
 80a7fd4:	ea40 0003 	orr.w	r0, r0, r3
 80a7fd8:	4770      	bx	lr
 80a7fda:	0049      	lsls	r1, r1, #1
 80a7fdc:	eb40 0000 	adc.w	r0, r0, r0
 80a7fe0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a7fe4:	f1a2 0201 	sub.w	r2, r2, #1
 80a7fe8:	d1ed      	bne.n	80a7fc6 <__addsf3+0x92>
 80a7fea:	fab0 fc80 	clz	ip, r0
 80a7fee:	f1ac 0c08 	sub.w	ip, ip, #8
 80a7ff2:	ebb2 020c 	subs.w	r2, r2, ip
 80a7ff6:	fa00 f00c 	lsl.w	r0, r0, ip
 80a7ffa:	bfaa      	itet	ge
 80a7ffc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a8000:	4252      	neglt	r2, r2
 80a8002:	4318      	orrge	r0, r3
 80a8004:	bfbc      	itt	lt
 80a8006:	40d0      	lsrlt	r0, r2
 80a8008:	4318      	orrlt	r0, r3
 80a800a:	4770      	bx	lr
 80a800c:	f092 0f00 	teq	r2, #0
 80a8010:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a8014:	bf06      	itte	eq
 80a8016:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a801a:	3201      	addeq	r2, #1
 80a801c:	3b01      	subne	r3, #1
 80a801e:	e7b5      	b.n	80a7f8c <__addsf3+0x58>
 80a8020:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a8024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a8028:	bf18      	it	ne
 80a802a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a802e:	d021      	beq.n	80a8074 <__addsf3+0x140>
 80a8030:	ea92 0f03 	teq	r2, r3
 80a8034:	d004      	beq.n	80a8040 <__addsf3+0x10c>
 80a8036:	f092 0f00 	teq	r2, #0
 80a803a:	bf08      	it	eq
 80a803c:	4608      	moveq	r0, r1
 80a803e:	4770      	bx	lr
 80a8040:	ea90 0f01 	teq	r0, r1
 80a8044:	bf1c      	itt	ne
 80a8046:	2000      	movne	r0, #0
 80a8048:	4770      	bxne	lr
 80a804a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a804e:	d104      	bne.n	80a805a <__addsf3+0x126>
 80a8050:	0040      	lsls	r0, r0, #1
 80a8052:	bf28      	it	cs
 80a8054:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a8058:	4770      	bx	lr
 80a805a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a805e:	bf3c      	itt	cc
 80a8060:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a8064:	4770      	bxcc	lr
 80a8066:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a806a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a806e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a8072:	4770      	bx	lr
 80a8074:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a8078:	bf16      	itet	ne
 80a807a:	4608      	movne	r0, r1
 80a807c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a8080:	4601      	movne	r1, r0
 80a8082:	0242      	lsls	r2, r0, #9
 80a8084:	bf06      	itte	eq
 80a8086:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a808a:	ea90 0f01 	teqeq	r0, r1
 80a808e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a8092:	4770      	bx	lr

080a8094 <__aeabi_ui2f>:
 80a8094:	f04f 0300 	mov.w	r3, #0
 80a8098:	e004      	b.n	80a80a4 <__aeabi_i2f+0x8>
 80a809a:	bf00      	nop

080a809c <__aeabi_i2f>:
 80a809c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a80a0:	bf48      	it	mi
 80a80a2:	4240      	negmi	r0, r0
 80a80a4:	ea5f 0c00 	movs.w	ip, r0
 80a80a8:	bf08      	it	eq
 80a80aa:	4770      	bxeq	lr
 80a80ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a80b0:	4601      	mov	r1, r0
 80a80b2:	f04f 0000 	mov.w	r0, #0
 80a80b6:	e01c      	b.n	80a80f2 <__aeabi_l2f+0x2a>

080a80b8 <__aeabi_ul2f>:
 80a80b8:	ea50 0201 	orrs.w	r2, r0, r1
 80a80bc:	bf08      	it	eq
 80a80be:	4770      	bxeq	lr
 80a80c0:	f04f 0300 	mov.w	r3, #0
 80a80c4:	e00a      	b.n	80a80dc <__aeabi_l2f+0x14>
 80a80c6:	bf00      	nop

080a80c8 <__aeabi_l2f>:
 80a80c8:	ea50 0201 	orrs.w	r2, r0, r1
 80a80cc:	bf08      	it	eq
 80a80ce:	4770      	bxeq	lr
 80a80d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a80d4:	d502      	bpl.n	80a80dc <__aeabi_l2f+0x14>
 80a80d6:	4240      	negs	r0, r0
 80a80d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a80dc:	ea5f 0c01 	movs.w	ip, r1
 80a80e0:	bf02      	ittt	eq
 80a80e2:	4684      	moveq	ip, r0
 80a80e4:	4601      	moveq	r1, r0
 80a80e6:	2000      	moveq	r0, #0
 80a80e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a80ec:	bf08      	it	eq
 80a80ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a80f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a80f6:	fabc f28c 	clz	r2, ip
 80a80fa:	3a08      	subs	r2, #8
 80a80fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a8100:	db10      	blt.n	80a8124 <__aeabi_l2f+0x5c>
 80a8102:	fa01 fc02 	lsl.w	ip, r1, r2
 80a8106:	4463      	add	r3, ip
 80a8108:	fa00 fc02 	lsl.w	ip, r0, r2
 80a810c:	f1c2 0220 	rsb	r2, r2, #32
 80a8110:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a8114:	fa20 f202 	lsr.w	r2, r0, r2
 80a8118:	eb43 0002 	adc.w	r0, r3, r2
 80a811c:	bf08      	it	eq
 80a811e:	f020 0001 	biceq.w	r0, r0, #1
 80a8122:	4770      	bx	lr
 80a8124:	f102 0220 	add.w	r2, r2, #32
 80a8128:	fa01 fc02 	lsl.w	ip, r1, r2
 80a812c:	f1c2 0220 	rsb	r2, r2, #32
 80a8130:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a8134:	fa21 f202 	lsr.w	r2, r1, r2
 80a8138:	eb43 0002 	adc.w	r0, r3, r2
 80a813c:	bf08      	it	eq
 80a813e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a8142:	4770      	bx	lr

080a8144 <__aeabi_fmul>:
 80a8144:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a8148:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a814c:	bf1e      	ittt	ne
 80a814e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a8152:	ea92 0f0c 	teqne	r2, ip
 80a8156:	ea93 0f0c 	teqne	r3, ip
 80a815a:	d06f      	beq.n	80a823c <__aeabi_fmul+0xf8>
 80a815c:	441a      	add	r2, r3
 80a815e:	ea80 0c01 	eor.w	ip, r0, r1
 80a8162:	0240      	lsls	r0, r0, #9
 80a8164:	bf18      	it	ne
 80a8166:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a816a:	d01e      	beq.n	80a81aa <__aeabi_fmul+0x66>
 80a816c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a8170:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a8174:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a8178:	fba0 3101 	umull	r3, r1, r0, r1
 80a817c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a8180:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a8184:	bf3e      	ittt	cc
 80a8186:	0049      	lslcc	r1, r1, #1
 80a8188:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a818c:	005b      	lslcc	r3, r3, #1
 80a818e:	ea40 0001 	orr.w	r0, r0, r1
 80a8192:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a8196:	2afd      	cmp	r2, #253	; 0xfd
 80a8198:	d81d      	bhi.n	80a81d6 <__aeabi_fmul+0x92>
 80a819a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a819e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a81a2:	bf08      	it	eq
 80a81a4:	f020 0001 	biceq.w	r0, r0, #1
 80a81a8:	4770      	bx	lr
 80a81aa:	f090 0f00 	teq	r0, #0
 80a81ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a81b2:	bf08      	it	eq
 80a81b4:	0249      	lsleq	r1, r1, #9
 80a81b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a81ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a81be:	3a7f      	subs	r2, #127	; 0x7f
 80a81c0:	bfc2      	ittt	gt
 80a81c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a81c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a81ca:	4770      	bxgt	lr
 80a81cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a81d0:	f04f 0300 	mov.w	r3, #0
 80a81d4:	3a01      	subs	r2, #1
 80a81d6:	dc5d      	bgt.n	80a8294 <__aeabi_fmul+0x150>
 80a81d8:	f112 0f19 	cmn.w	r2, #25
 80a81dc:	bfdc      	itt	le
 80a81de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a81e2:	4770      	bxle	lr
 80a81e4:	f1c2 0200 	rsb	r2, r2, #0
 80a81e8:	0041      	lsls	r1, r0, #1
 80a81ea:	fa21 f102 	lsr.w	r1, r1, r2
 80a81ee:	f1c2 0220 	rsb	r2, r2, #32
 80a81f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80a81f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80a81fa:	f140 0000 	adc.w	r0, r0, #0
 80a81fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a8202:	bf08      	it	eq
 80a8204:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a8208:	4770      	bx	lr
 80a820a:	f092 0f00 	teq	r2, #0
 80a820e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a8212:	bf02      	ittt	eq
 80a8214:	0040      	lsleq	r0, r0, #1
 80a8216:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a821a:	3a01      	subeq	r2, #1
 80a821c:	d0f9      	beq.n	80a8212 <__aeabi_fmul+0xce>
 80a821e:	ea40 000c 	orr.w	r0, r0, ip
 80a8222:	f093 0f00 	teq	r3, #0
 80a8226:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a822a:	bf02      	ittt	eq
 80a822c:	0049      	lsleq	r1, r1, #1
 80a822e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a8232:	3b01      	subeq	r3, #1
 80a8234:	d0f9      	beq.n	80a822a <__aeabi_fmul+0xe6>
 80a8236:	ea41 010c 	orr.w	r1, r1, ip
 80a823a:	e78f      	b.n	80a815c <__aeabi_fmul+0x18>
 80a823c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a8240:	ea92 0f0c 	teq	r2, ip
 80a8244:	bf18      	it	ne
 80a8246:	ea93 0f0c 	teqne	r3, ip
 80a824a:	d00a      	beq.n	80a8262 <__aeabi_fmul+0x11e>
 80a824c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a8250:	bf18      	it	ne
 80a8252:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a8256:	d1d8      	bne.n	80a820a <__aeabi_fmul+0xc6>
 80a8258:	ea80 0001 	eor.w	r0, r0, r1
 80a825c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a8260:	4770      	bx	lr
 80a8262:	f090 0f00 	teq	r0, #0
 80a8266:	bf17      	itett	ne
 80a8268:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a826c:	4608      	moveq	r0, r1
 80a826e:	f091 0f00 	teqne	r1, #0
 80a8272:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a8276:	d014      	beq.n	80a82a2 <__aeabi_fmul+0x15e>
 80a8278:	ea92 0f0c 	teq	r2, ip
 80a827c:	d101      	bne.n	80a8282 <__aeabi_fmul+0x13e>
 80a827e:	0242      	lsls	r2, r0, #9
 80a8280:	d10f      	bne.n	80a82a2 <__aeabi_fmul+0x15e>
 80a8282:	ea93 0f0c 	teq	r3, ip
 80a8286:	d103      	bne.n	80a8290 <__aeabi_fmul+0x14c>
 80a8288:	024b      	lsls	r3, r1, #9
 80a828a:	bf18      	it	ne
 80a828c:	4608      	movne	r0, r1
 80a828e:	d108      	bne.n	80a82a2 <__aeabi_fmul+0x15e>
 80a8290:	ea80 0001 	eor.w	r0, r0, r1
 80a8294:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a8298:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a829c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a82a0:	4770      	bx	lr
 80a82a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a82a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a82aa:	4770      	bx	lr

080a82ac <__aeabi_fdiv>:
 80a82ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a82b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a82b4:	bf1e      	ittt	ne
 80a82b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a82ba:	ea92 0f0c 	teqne	r2, ip
 80a82be:	ea93 0f0c 	teqne	r3, ip
 80a82c2:	d069      	beq.n	80a8398 <__aeabi_fdiv+0xec>
 80a82c4:	eba2 0203 	sub.w	r2, r2, r3
 80a82c8:	ea80 0c01 	eor.w	ip, r0, r1
 80a82cc:	0249      	lsls	r1, r1, #9
 80a82ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a82d2:	d037      	beq.n	80a8344 <__aeabi_fdiv+0x98>
 80a82d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a82d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a82dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a82e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a82e4:	428b      	cmp	r3, r1
 80a82e6:	bf38      	it	cc
 80a82e8:	005b      	lslcc	r3, r3, #1
 80a82ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a82ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a82f2:	428b      	cmp	r3, r1
 80a82f4:	bf24      	itt	cs
 80a82f6:	1a5b      	subcs	r3, r3, r1
 80a82f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a82fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a8300:	bf24      	itt	cs
 80a8302:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a8306:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a830a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a830e:	bf24      	itt	cs
 80a8310:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a8314:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a8318:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a831c:	bf24      	itt	cs
 80a831e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a8322:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a8326:	011b      	lsls	r3, r3, #4
 80a8328:	bf18      	it	ne
 80a832a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a832e:	d1e0      	bne.n	80a82f2 <__aeabi_fdiv+0x46>
 80a8330:	2afd      	cmp	r2, #253	; 0xfd
 80a8332:	f63f af50 	bhi.w	80a81d6 <__aeabi_fmul+0x92>
 80a8336:	428b      	cmp	r3, r1
 80a8338:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a833c:	bf08      	it	eq
 80a833e:	f020 0001 	biceq.w	r0, r0, #1
 80a8342:	4770      	bx	lr
 80a8344:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a8348:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a834c:	327f      	adds	r2, #127	; 0x7f
 80a834e:	bfc2      	ittt	gt
 80a8350:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a8354:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a8358:	4770      	bxgt	lr
 80a835a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a835e:	f04f 0300 	mov.w	r3, #0
 80a8362:	3a01      	subs	r2, #1
 80a8364:	e737      	b.n	80a81d6 <__aeabi_fmul+0x92>
 80a8366:	f092 0f00 	teq	r2, #0
 80a836a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a836e:	bf02      	ittt	eq
 80a8370:	0040      	lsleq	r0, r0, #1
 80a8372:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a8376:	3a01      	subeq	r2, #1
 80a8378:	d0f9      	beq.n	80a836e <__aeabi_fdiv+0xc2>
 80a837a:	ea40 000c 	orr.w	r0, r0, ip
 80a837e:	f093 0f00 	teq	r3, #0
 80a8382:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a8386:	bf02      	ittt	eq
 80a8388:	0049      	lsleq	r1, r1, #1
 80a838a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a838e:	3b01      	subeq	r3, #1
 80a8390:	d0f9      	beq.n	80a8386 <__aeabi_fdiv+0xda>
 80a8392:	ea41 010c 	orr.w	r1, r1, ip
 80a8396:	e795      	b.n	80a82c4 <__aeabi_fdiv+0x18>
 80a8398:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a839c:	ea92 0f0c 	teq	r2, ip
 80a83a0:	d108      	bne.n	80a83b4 <__aeabi_fdiv+0x108>
 80a83a2:	0242      	lsls	r2, r0, #9
 80a83a4:	f47f af7d 	bne.w	80a82a2 <__aeabi_fmul+0x15e>
 80a83a8:	ea93 0f0c 	teq	r3, ip
 80a83ac:	f47f af70 	bne.w	80a8290 <__aeabi_fmul+0x14c>
 80a83b0:	4608      	mov	r0, r1
 80a83b2:	e776      	b.n	80a82a2 <__aeabi_fmul+0x15e>
 80a83b4:	ea93 0f0c 	teq	r3, ip
 80a83b8:	d104      	bne.n	80a83c4 <__aeabi_fdiv+0x118>
 80a83ba:	024b      	lsls	r3, r1, #9
 80a83bc:	f43f af4c 	beq.w	80a8258 <__aeabi_fmul+0x114>
 80a83c0:	4608      	mov	r0, r1
 80a83c2:	e76e      	b.n	80a82a2 <__aeabi_fmul+0x15e>
 80a83c4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a83c8:	bf18      	it	ne
 80a83ca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a83ce:	d1ca      	bne.n	80a8366 <__aeabi_fdiv+0xba>
 80a83d0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a83d4:	f47f af5c 	bne.w	80a8290 <__aeabi_fmul+0x14c>
 80a83d8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a83dc:	f47f af3c 	bne.w	80a8258 <__aeabi_fmul+0x114>
 80a83e0:	e75f      	b.n	80a82a2 <__aeabi_fmul+0x15e>
 80a83e2:	bf00      	nop

080a83e4 <__gesf2>:
 80a83e4:	f04f 3cff 	mov.w	ip, #4294967295
 80a83e8:	e006      	b.n	80a83f8 <__cmpsf2+0x4>
 80a83ea:	bf00      	nop

080a83ec <__lesf2>:
 80a83ec:	f04f 0c01 	mov.w	ip, #1
 80a83f0:	e002      	b.n	80a83f8 <__cmpsf2+0x4>
 80a83f2:	bf00      	nop

080a83f4 <__cmpsf2>:
 80a83f4:	f04f 0c01 	mov.w	ip, #1
 80a83f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a83fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a8400:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a8404:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a8408:	bf18      	it	ne
 80a840a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a840e:	d011      	beq.n	80a8434 <__cmpsf2+0x40>
 80a8410:	b001      	add	sp, #4
 80a8412:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a8416:	bf18      	it	ne
 80a8418:	ea90 0f01 	teqne	r0, r1
 80a841c:	bf58      	it	pl
 80a841e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a8422:	bf88      	it	hi
 80a8424:	17c8      	asrhi	r0, r1, #31
 80a8426:	bf38      	it	cc
 80a8428:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a842c:	bf18      	it	ne
 80a842e:	f040 0001 	orrne.w	r0, r0, #1
 80a8432:	4770      	bx	lr
 80a8434:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a8438:	d102      	bne.n	80a8440 <__cmpsf2+0x4c>
 80a843a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a843e:	d105      	bne.n	80a844c <__cmpsf2+0x58>
 80a8440:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a8444:	d1e4      	bne.n	80a8410 <__cmpsf2+0x1c>
 80a8446:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a844a:	d0e1      	beq.n	80a8410 <__cmpsf2+0x1c>
 80a844c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a8450:	4770      	bx	lr
 80a8452:	bf00      	nop

080a8454 <__aeabi_cfrcmple>:
 80a8454:	4684      	mov	ip, r0
 80a8456:	4608      	mov	r0, r1
 80a8458:	4661      	mov	r1, ip
 80a845a:	e7ff      	b.n	80a845c <__aeabi_cfcmpeq>

080a845c <__aeabi_cfcmpeq>:
 80a845c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a845e:	f7ff ffc9 	bl	80a83f4 <__cmpsf2>
 80a8462:	2800      	cmp	r0, #0
 80a8464:	bf48      	it	mi
 80a8466:	f110 0f00 	cmnmi.w	r0, #0
 80a846a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a846c <__aeabi_fcmpeq>:
 80a846c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a8470:	f7ff fff4 	bl	80a845c <__aeabi_cfcmpeq>
 80a8474:	bf0c      	ite	eq
 80a8476:	2001      	moveq	r0, #1
 80a8478:	2000      	movne	r0, #0
 80a847a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a847e:	bf00      	nop

080a8480 <__aeabi_fcmplt>:
 80a8480:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a8484:	f7ff ffea 	bl	80a845c <__aeabi_cfcmpeq>
 80a8488:	bf34      	ite	cc
 80a848a:	2001      	movcc	r0, #1
 80a848c:	2000      	movcs	r0, #0
 80a848e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a8492:	bf00      	nop

080a8494 <__aeabi_fcmple>:
 80a8494:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a8498:	f7ff ffe0 	bl	80a845c <__aeabi_cfcmpeq>
 80a849c:	bf94      	ite	ls
 80a849e:	2001      	movls	r0, #1
 80a84a0:	2000      	movhi	r0, #0
 80a84a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a84a6:	bf00      	nop

080a84a8 <__aeabi_fcmpge>:
 80a84a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a84ac:	f7ff ffd2 	bl	80a8454 <__aeabi_cfrcmple>
 80a84b0:	bf94      	ite	ls
 80a84b2:	2001      	movls	r0, #1
 80a84b4:	2000      	movhi	r0, #0
 80a84b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a84ba:	bf00      	nop

080a84bc <__aeabi_fcmpgt>:
 80a84bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a84c0:	f7ff ffc8 	bl	80a8454 <__aeabi_cfrcmple>
 80a84c4:	bf34      	ite	cc
 80a84c6:	2001      	movcc	r0, #1
 80a84c8:	2000      	movcs	r0, #0
 80a84ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a84ce:	bf00      	nop

080a84d0 <__aeabi_fcmpun>:
 80a84d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a84d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a84d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a84dc:	d102      	bne.n	80a84e4 <__aeabi_fcmpun+0x14>
 80a84de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a84e2:	d108      	bne.n	80a84f6 <__aeabi_fcmpun+0x26>
 80a84e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a84e8:	d102      	bne.n	80a84f0 <__aeabi_fcmpun+0x20>
 80a84ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a84ee:	d102      	bne.n	80a84f6 <__aeabi_fcmpun+0x26>
 80a84f0:	f04f 0000 	mov.w	r0, #0
 80a84f4:	4770      	bx	lr
 80a84f6:	f04f 0001 	mov.w	r0, #1
 80a84fa:	4770      	bx	lr

080a84fc <__aeabi_f2iz>:
 80a84fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a8500:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a8504:	d30f      	bcc.n	80a8526 <__aeabi_f2iz+0x2a>
 80a8506:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a850a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a850e:	d90d      	bls.n	80a852c <__aeabi_f2iz+0x30>
 80a8510:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a8514:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a8518:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a851c:	fa23 f002 	lsr.w	r0, r3, r2
 80a8520:	bf18      	it	ne
 80a8522:	4240      	negne	r0, r0
 80a8524:	4770      	bx	lr
 80a8526:	f04f 0000 	mov.w	r0, #0
 80a852a:	4770      	bx	lr
 80a852c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a8530:	d101      	bne.n	80a8536 <__aeabi_f2iz+0x3a>
 80a8532:	0242      	lsls	r2, r0, #9
 80a8534:	d105      	bne.n	80a8542 <__aeabi_f2iz+0x46>
 80a8536:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a853a:	bf08      	it	eq
 80a853c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a8540:	4770      	bx	lr
 80a8542:	f04f 0000 	mov.w	r0, #0
 80a8546:	4770      	bx	lr

080a8548 <__aeabi_uldivmod>:
 80a8548:	b953      	cbnz	r3, 80a8560 <__aeabi_uldivmod+0x18>
 80a854a:	b94a      	cbnz	r2, 80a8560 <__aeabi_uldivmod+0x18>
 80a854c:	2900      	cmp	r1, #0
 80a854e:	bf08      	it	eq
 80a8550:	2800      	cmpeq	r0, #0
 80a8552:	bf1c      	itt	ne
 80a8554:	f04f 31ff 	movne.w	r1, #4294967295
 80a8558:	f04f 30ff 	movne.w	r0, #4294967295
 80a855c:	f000 b982 	b.w	80a8864 <__aeabi_idiv0>
 80a8560:	f1ad 0c08 	sub.w	ip, sp, #8
 80a8564:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a8568:	f000 f806 	bl	80a8578 <__udivmoddi4>
 80a856c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a8570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a8574:	b004      	add	sp, #16
 80a8576:	4770      	bx	lr

080a8578 <__udivmoddi4>:
 80a8578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a857c:	468c      	mov	ip, r1
 80a857e:	460c      	mov	r4, r1
 80a8580:	4605      	mov	r5, r0
 80a8582:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a8584:	2b00      	cmp	r3, #0
 80a8586:	d14f      	bne.n	80a8628 <__udivmoddi4+0xb0>
 80a8588:	428a      	cmp	r2, r1
 80a858a:	4617      	mov	r7, r2
 80a858c:	d96b      	bls.n	80a8666 <__udivmoddi4+0xee>
 80a858e:	fab2 fe82 	clz	lr, r2
 80a8592:	f1be 0f00 	cmp.w	lr, #0
 80a8596:	d00b      	beq.n	80a85b0 <__udivmoddi4+0x38>
 80a8598:	f1ce 0520 	rsb	r5, lr, #32
 80a859c:	fa20 f505 	lsr.w	r5, r0, r5
 80a85a0:	fa01 f30e 	lsl.w	r3, r1, lr
 80a85a4:	ea45 0c03 	orr.w	ip, r5, r3
 80a85a8:	fa02 f70e 	lsl.w	r7, r2, lr
 80a85ac:	fa00 f50e 	lsl.w	r5, r0, lr
 80a85b0:	0c39      	lsrs	r1, r7, #16
 80a85b2:	fbbc f0f1 	udiv	r0, ip, r1
 80a85b6:	b2ba      	uxth	r2, r7
 80a85b8:	fb01 c310 	mls	r3, r1, r0, ip
 80a85bc:	fb00 f802 	mul.w	r8, r0, r2
 80a85c0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a85c4:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a85c8:	45a0      	cmp	r8, r4
 80a85ca:	d909      	bls.n	80a85e0 <__udivmoddi4+0x68>
 80a85cc:	19e4      	adds	r4, r4, r7
 80a85ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80a85d2:	f080 8128 	bcs.w	80a8826 <__udivmoddi4+0x2ae>
 80a85d6:	45a0      	cmp	r8, r4
 80a85d8:	f240 8125 	bls.w	80a8826 <__udivmoddi4+0x2ae>
 80a85dc:	3802      	subs	r0, #2
 80a85de:	443c      	add	r4, r7
 80a85e0:	ebc8 0404 	rsb	r4, r8, r4
 80a85e4:	fbb4 f3f1 	udiv	r3, r4, r1
 80a85e8:	fb01 4c13 	mls	ip, r1, r3, r4
 80a85ec:	fb03 f202 	mul.w	r2, r3, r2
 80a85f0:	b2ac      	uxth	r4, r5
 80a85f2:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a85f6:	428a      	cmp	r2, r1
 80a85f8:	d909      	bls.n	80a860e <__udivmoddi4+0x96>
 80a85fa:	19c9      	adds	r1, r1, r7
 80a85fc:	f103 34ff 	add.w	r4, r3, #4294967295
 80a8600:	f080 810f 	bcs.w	80a8822 <__udivmoddi4+0x2aa>
 80a8604:	428a      	cmp	r2, r1
 80a8606:	f240 810c 	bls.w	80a8822 <__udivmoddi4+0x2aa>
 80a860a:	3b02      	subs	r3, #2
 80a860c:	4439      	add	r1, r7
 80a860e:	1a8a      	subs	r2, r1, r2
 80a8610:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a8614:	2100      	movs	r1, #0
 80a8616:	2e00      	cmp	r6, #0
 80a8618:	d063      	beq.n	80a86e2 <__udivmoddi4+0x16a>
 80a861a:	fa22 f20e 	lsr.w	r2, r2, lr
 80a861e:	2300      	movs	r3, #0
 80a8620:	e886 000c 	stmia.w	r6, {r2, r3}
 80a8624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8628:	428b      	cmp	r3, r1
 80a862a:	d907      	bls.n	80a863c <__udivmoddi4+0xc4>
 80a862c:	2e00      	cmp	r6, #0
 80a862e:	d056      	beq.n	80a86de <__udivmoddi4+0x166>
 80a8630:	2100      	movs	r1, #0
 80a8632:	e886 0011 	stmia.w	r6, {r0, r4}
 80a8636:	4608      	mov	r0, r1
 80a8638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a863c:	fab3 f183 	clz	r1, r3
 80a8640:	2900      	cmp	r1, #0
 80a8642:	f040 8093 	bne.w	80a876c <__udivmoddi4+0x1f4>
 80a8646:	42a3      	cmp	r3, r4
 80a8648:	d302      	bcc.n	80a8650 <__udivmoddi4+0xd8>
 80a864a:	4282      	cmp	r2, r0
 80a864c:	f200 80fe 	bhi.w	80a884c <__udivmoddi4+0x2d4>
 80a8650:	1a85      	subs	r5, r0, r2
 80a8652:	eb64 0303 	sbc.w	r3, r4, r3
 80a8656:	469c      	mov	ip, r3
 80a8658:	2001      	movs	r0, #1
 80a865a:	2e00      	cmp	r6, #0
 80a865c:	d041      	beq.n	80a86e2 <__udivmoddi4+0x16a>
 80a865e:	e886 1020 	stmia.w	r6, {r5, ip}
 80a8662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8666:	b912      	cbnz	r2, 80a866e <__udivmoddi4+0xf6>
 80a8668:	2701      	movs	r7, #1
 80a866a:	fbb7 f7f2 	udiv	r7, r7, r2
 80a866e:	fab7 fe87 	clz	lr, r7
 80a8672:	f1be 0f00 	cmp.w	lr, #0
 80a8676:	d136      	bne.n	80a86e6 <__udivmoddi4+0x16e>
 80a8678:	1be4      	subs	r4, r4, r7
 80a867a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a867e:	fa1f f987 	uxth.w	r9, r7
 80a8682:	2101      	movs	r1, #1
 80a8684:	fbb4 f3f8 	udiv	r3, r4, r8
 80a8688:	fb08 4413 	mls	r4, r8, r3, r4
 80a868c:	fb09 f203 	mul.w	r2, r9, r3
 80a8690:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a8694:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a8698:	42a2      	cmp	r2, r4
 80a869a:	d907      	bls.n	80a86ac <__udivmoddi4+0x134>
 80a869c:	19e4      	adds	r4, r4, r7
 80a869e:	f103 30ff 	add.w	r0, r3, #4294967295
 80a86a2:	d202      	bcs.n	80a86aa <__udivmoddi4+0x132>
 80a86a4:	42a2      	cmp	r2, r4
 80a86a6:	f200 80d3 	bhi.w	80a8850 <__udivmoddi4+0x2d8>
 80a86aa:	4603      	mov	r3, r0
 80a86ac:	1aa4      	subs	r4, r4, r2
 80a86ae:	fbb4 f0f8 	udiv	r0, r4, r8
 80a86b2:	fb08 4810 	mls	r8, r8, r0, r4
 80a86b6:	fb09 f900 	mul.w	r9, r9, r0
 80a86ba:	b2ac      	uxth	r4, r5
 80a86bc:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a86c0:	4591      	cmp	r9, r2
 80a86c2:	d907      	bls.n	80a86d4 <__udivmoddi4+0x15c>
 80a86c4:	19d2      	adds	r2, r2, r7
 80a86c6:	f100 34ff 	add.w	r4, r0, #4294967295
 80a86ca:	d202      	bcs.n	80a86d2 <__udivmoddi4+0x15a>
 80a86cc:	4591      	cmp	r9, r2
 80a86ce:	f200 80ba 	bhi.w	80a8846 <__udivmoddi4+0x2ce>
 80a86d2:	4620      	mov	r0, r4
 80a86d4:	ebc9 0202 	rsb	r2, r9, r2
 80a86d8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a86dc:	e79b      	b.n	80a8616 <__udivmoddi4+0x9e>
 80a86de:	4631      	mov	r1, r6
 80a86e0:	4630      	mov	r0, r6
 80a86e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a86e6:	fa07 f70e 	lsl.w	r7, r7, lr
 80a86ea:	f1ce 0c20 	rsb	ip, lr, #32
 80a86ee:	fa24 f30c 	lsr.w	r3, r4, ip
 80a86f2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a86f6:	fbb3 faf8 	udiv	sl, r3, r8
 80a86fa:	fa1f f987 	uxth.w	r9, r7
 80a86fe:	fb08 351a 	mls	r5, r8, sl, r3
 80a8702:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a8706:	fa04 f40e 	lsl.w	r4, r4, lr
 80a870a:	fb0a fb09 	mul.w	fp, sl, r9
 80a870e:	ea4c 0c04 	orr.w	ip, ip, r4
 80a8712:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a8716:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a871a:	459b      	cmp	fp, r3
 80a871c:	fa00 f50e 	lsl.w	r5, r0, lr
 80a8720:	d90a      	bls.n	80a8738 <__udivmoddi4+0x1c0>
 80a8722:	19db      	adds	r3, r3, r7
 80a8724:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a8728:	f080 808b 	bcs.w	80a8842 <__udivmoddi4+0x2ca>
 80a872c:	459b      	cmp	fp, r3
 80a872e:	f240 8088 	bls.w	80a8842 <__udivmoddi4+0x2ca>
 80a8732:	f1aa 0a02 	sub.w	sl, sl, #2
 80a8736:	443b      	add	r3, r7
 80a8738:	ebcb 0303 	rsb	r3, fp, r3
 80a873c:	fbb3 f0f8 	udiv	r0, r3, r8
 80a8740:	fb08 3310 	mls	r3, r8, r0, r3
 80a8744:	fb00 f409 	mul.w	r4, r0, r9
 80a8748:	fa1f fc8c 	uxth.w	ip, ip
 80a874c:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a8750:	429c      	cmp	r4, r3
 80a8752:	d907      	bls.n	80a8764 <__udivmoddi4+0x1ec>
 80a8754:	19db      	adds	r3, r3, r7
 80a8756:	f100 32ff 	add.w	r2, r0, #4294967295
 80a875a:	d26e      	bcs.n	80a883a <__udivmoddi4+0x2c2>
 80a875c:	429c      	cmp	r4, r3
 80a875e:	d96c      	bls.n	80a883a <__udivmoddi4+0x2c2>
 80a8760:	3802      	subs	r0, #2
 80a8762:	443b      	add	r3, r7
 80a8764:	1b1c      	subs	r4, r3, r4
 80a8766:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a876a:	e78b      	b.n	80a8684 <__udivmoddi4+0x10c>
 80a876c:	f1c1 0e20 	rsb	lr, r1, #32
 80a8770:	408b      	lsls	r3, r1
 80a8772:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a8776:	ea4c 0c03 	orr.w	ip, ip, r3
 80a877a:	fa24 f70e 	lsr.w	r7, r4, lr
 80a877e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a8782:	fbb7 faf9 	udiv	sl, r7, r9
 80a8786:	fa1f f38c 	uxth.w	r3, ip
 80a878a:	fb09 771a 	mls	r7, r9, sl, r7
 80a878e:	fa20 f80e 	lsr.w	r8, r0, lr
 80a8792:	408c      	lsls	r4, r1
 80a8794:	fb0a f503 	mul.w	r5, sl, r3
 80a8798:	ea48 0404 	orr.w	r4, r8, r4
 80a879c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a87a0:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a87a4:	42bd      	cmp	r5, r7
 80a87a6:	fa02 f201 	lsl.w	r2, r2, r1
 80a87aa:	fa00 fb01 	lsl.w	fp, r0, r1
 80a87ae:	d909      	bls.n	80a87c4 <__udivmoddi4+0x24c>
 80a87b0:	eb17 070c 	adds.w	r7, r7, ip
 80a87b4:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a87b8:	d241      	bcs.n	80a883e <__udivmoddi4+0x2c6>
 80a87ba:	42bd      	cmp	r5, r7
 80a87bc:	d93f      	bls.n	80a883e <__udivmoddi4+0x2c6>
 80a87be:	f1aa 0a02 	sub.w	sl, sl, #2
 80a87c2:	4467      	add	r7, ip
 80a87c4:	1b7f      	subs	r7, r7, r5
 80a87c6:	fbb7 f5f9 	udiv	r5, r7, r9
 80a87ca:	fb09 7715 	mls	r7, r9, r5, r7
 80a87ce:	fb05 f303 	mul.w	r3, r5, r3
 80a87d2:	b2a4      	uxth	r4, r4
 80a87d4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a87d8:	42bb      	cmp	r3, r7
 80a87da:	d908      	bls.n	80a87ee <__udivmoddi4+0x276>
 80a87dc:	eb17 070c 	adds.w	r7, r7, ip
 80a87e0:	f105 30ff 	add.w	r0, r5, #4294967295
 80a87e4:	d227      	bcs.n	80a8836 <__udivmoddi4+0x2be>
 80a87e6:	42bb      	cmp	r3, r7
 80a87e8:	d925      	bls.n	80a8836 <__udivmoddi4+0x2be>
 80a87ea:	3d02      	subs	r5, #2
 80a87ec:	4467      	add	r7, ip
 80a87ee:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a87f2:	fba0 8902 	umull	r8, r9, r0, r2
 80a87f6:	1aff      	subs	r7, r7, r3
 80a87f8:	454f      	cmp	r7, r9
 80a87fa:	4645      	mov	r5, r8
 80a87fc:	464c      	mov	r4, r9
 80a87fe:	d314      	bcc.n	80a882a <__udivmoddi4+0x2b2>
 80a8800:	d029      	beq.n	80a8856 <__udivmoddi4+0x2de>
 80a8802:	b366      	cbz	r6, 80a885e <__udivmoddi4+0x2e6>
 80a8804:	ebbb 0305 	subs.w	r3, fp, r5
 80a8808:	eb67 0704 	sbc.w	r7, r7, r4
 80a880c:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a8810:	40cb      	lsrs	r3, r1
 80a8812:	40cf      	lsrs	r7, r1
 80a8814:	ea4e 0303 	orr.w	r3, lr, r3
 80a8818:	e886 0088 	stmia.w	r6, {r3, r7}
 80a881c:	2100      	movs	r1, #0
 80a881e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a8822:	4623      	mov	r3, r4
 80a8824:	e6f3      	b.n	80a860e <__udivmoddi4+0x96>
 80a8826:	4618      	mov	r0, r3
 80a8828:	e6da      	b.n	80a85e0 <__udivmoddi4+0x68>
 80a882a:	ebb8 0502 	subs.w	r5, r8, r2
 80a882e:	eb69 040c 	sbc.w	r4, r9, ip
 80a8832:	3801      	subs	r0, #1
 80a8834:	e7e5      	b.n	80a8802 <__udivmoddi4+0x28a>
 80a8836:	4605      	mov	r5, r0
 80a8838:	e7d9      	b.n	80a87ee <__udivmoddi4+0x276>
 80a883a:	4610      	mov	r0, r2
 80a883c:	e792      	b.n	80a8764 <__udivmoddi4+0x1ec>
 80a883e:	4682      	mov	sl, r0
 80a8840:	e7c0      	b.n	80a87c4 <__udivmoddi4+0x24c>
 80a8842:	4692      	mov	sl, r2
 80a8844:	e778      	b.n	80a8738 <__udivmoddi4+0x1c0>
 80a8846:	3802      	subs	r0, #2
 80a8848:	443a      	add	r2, r7
 80a884a:	e743      	b.n	80a86d4 <__udivmoddi4+0x15c>
 80a884c:	4608      	mov	r0, r1
 80a884e:	e704      	b.n	80a865a <__udivmoddi4+0xe2>
 80a8850:	3b02      	subs	r3, #2
 80a8852:	443c      	add	r4, r7
 80a8854:	e72a      	b.n	80a86ac <__udivmoddi4+0x134>
 80a8856:	45c3      	cmp	fp, r8
 80a8858:	d3e7      	bcc.n	80a882a <__udivmoddi4+0x2b2>
 80a885a:	463c      	mov	r4, r7
 80a885c:	e7d1      	b.n	80a8802 <__udivmoddi4+0x28a>
 80a885e:	4631      	mov	r1, r6
 80a8860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a8864 <__aeabi_idiv0>:
 80a8864:	4770      	bx	lr
 80a8866:	bf00      	nop

080a8868 <asctime>:
 80a8868:	4b09      	ldr	r3, [pc, #36]	; (80a8890 <asctime+0x28>)
 80a886a:	b570      	push	{r4, r5, r6, lr}
 80a886c:	681c      	ldr	r4, [r3, #0]
 80a886e:	4606      	mov	r6, r0
 80a8870:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80a8872:	b93d      	cbnz	r5, 80a8884 <asctime+0x1c>
 80a8874:	201a      	movs	r0, #26
 80a8876:	f7fb fc85 	bl	80a4184 <malloc>
 80a887a:	221a      	movs	r2, #26
 80a887c:	6420      	str	r0, [r4, #64]	; 0x40
 80a887e:	4629      	mov	r1, r5
 80a8880:	f000 f987 	bl	80a8b92 <memset>
 80a8884:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80a8886:	4630      	mov	r0, r6
 80a8888:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a888c:	f000 b802 	b.w	80a8894 <asctime_r>
 80a8890:	200000f4 	.word	0x200000f4

080a8894 <asctime_r>:
 80a8894:	b510      	push	{r4, lr}
 80a8896:	460c      	mov	r4, r1
 80a8898:	6941      	ldr	r1, [r0, #20]
 80a889a:	b086      	sub	sp, #24
 80a889c:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a88a0:	6903      	ldr	r3, [r0, #16]
 80a88a2:	6982      	ldr	r2, [r0, #24]
 80a88a4:	9104      	str	r1, [sp, #16]
 80a88a6:	6801      	ldr	r1, [r0, #0]
 80a88a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a88ac:	9103      	str	r1, [sp, #12]
 80a88ae:	6841      	ldr	r1, [r0, #4]
 80a88b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a88b4:	9102      	str	r1, [sp, #8]
 80a88b6:	6881      	ldr	r1, [r0, #8]
 80a88b8:	9101      	str	r1, [sp, #4]
 80a88ba:	68c1      	ldr	r1, [r0, #12]
 80a88bc:	4620      	mov	r0, r4
 80a88be:	9100      	str	r1, [sp, #0]
 80a88c0:	4904      	ldr	r1, [pc, #16]	; (80a88d4 <asctime_r+0x40>)
 80a88c2:	440b      	add	r3, r1
 80a88c4:	4904      	ldr	r1, [pc, #16]	; (80a88d8 <asctime_r+0x44>)
 80a88c6:	440a      	add	r2, r1
 80a88c8:	4904      	ldr	r1, [pc, #16]	; (80a88dc <asctime_r+0x48>)
 80a88ca:	f7fb fc7b 	bl	80a41c4 <siprintf>
 80a88ce:	4620      	mov	r0, r4
 80a88d0:	b006      	add	sp, #24
 80a88d2:	bd10      	pop	{r4, pc}
 80a88d4:	080ae803 	.word	0x080ae803
 80a88d8:	080ae7ee 	.word	0x080ae7ee
 80a88dc:	080ae827 	.word	0x080ae827

080a88e0 <atof>:
 80a88e0:	2100      	movs	r1, #0
 80a88e2:	f001 bd6d 	b.w	80aa3c0 <strtod>

080a88e6 <atoi>:
 80a88e6:	220a      	movs	r2, #10
 80a88e8:	2100      	movs	r1, #0
 80a88ea:	f001 bdf7 	b.w	80aa4dc <strtol>

080a88ee <atol>:
 80a88ee:	220a      	movs	r2, #10
 80a88f0:	2100      	movs	r1, #0
 80a88f2:	f001 bdf3 	b.w	80aa4dc <strtol>
	...

080a88f8 <__cxa_atexit>:
 80a88f8:	b510      	push	{r4, lr}
 80a88fa:	4c05      	ldr	r4, [pc, #20]	; (80a8910 <__cxa_atexit+0x18>)
 80a88fc:	4613      	mov	r3, r2
 80a88fe:	b12c      	cbz	r4, 80a890c <__cxa_atexit+0x14>
 80a8900:	460a      	mov	r2, r1
 80a8902:	4601      	mov	r1, r0
 80a8904:	2002      	movs	r0, #2
 80a8906:	f3af 8000 	nop.w
 80a890a:	bd10      	pop	{r4, pc}
 80a890c:	4620      	mov	r0, r4
 80a890e:	bd10      	pop	{r4, pc}
 80a8910:	00000000 	.word	0x00000000

080a8914 <localtime>:
 80a8914:	b538      	push	{r3, r4, r5, lr}
 80a8916:	4b07      	ldr	r3, [pc, #28]	; (80a8934 <localtime+0x20>)
 80a8918:	4605      	mov	r5, r0
 80a891a:	681c      	ldr	r4, [r3, #0]
 80a891c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a891e:	b91b      	cbnz	r3, 80a8928 <localtime+0x14>
 80a8920:	2024      	movs	r0, #36	; 0x24
 80a8922:	f7fb fc2f 	bl	80a4184 <malloc>
 80a8926:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a8928:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a892a:	4628      	mov	r0, r5
 80a892c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a8930:	f000 b802 	b.w	80a8938 <localtime_r>
 80a8934:	200000f4 	.word	0x200000f4

080a8938 <localtime_r>:
 80a8938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a893c:	460c      	mov	r4, r1
 80a893e:	4680      	mov	r8, r0
 80a8940:	f002 fc04 	bl	80ab14c <__gettzinfo>
 80a8944:	4621      	mov	r1, r4
 80a8946:	4607      	mov	r7, r0
 80a8948:	4640      	mov	r0, r8
 80a894a:	f002 fc03 	bl	80ab154 <gmtime_r>
 80a894e:	6946      	ldr	r6, [r0, #20]
 80a8950:	4604      	mov	r4, r0
 80a8952:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a8956:	07b3      	lsls	r3, r6, #30
 80a8958:	d105      	bne.n	80a8966 <localtime_r+0x2e>
 80a895a:	2264      	movs	r2, #100	; 0x64
 80a895c:	fb96 f3f2 	sdiv	r3, r6, r2
 80a8960:	fb02 6313 	mls	r3, r2, r3, r6
 80a8964:	b94b      	cbnz	r3, 80a897a <localtime_r+0x42>
 80a8966:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a896a:	fb96 f3f5 	sdiv	r3, r6, r5
 80a896e:	fb05 6513 	mls	r5, r5, r3, r6
 80a8972:	fab5 f385 	clz	r3, r5
 80a8976:	095b      	lsrs	r3, r3, #5
 80a8978:	e000      	b.n	80a897c <localtime_r+0x44>
 80a897a:	2301      	movs	r3, #1
 80a897c:	4a5f      	ldr	r2, [pc, #380]	; (80a8afc <localtime_r+0x1c4>)
 80a897e:	2530      	movs	r5, #48	; 0x30
 80a8980:	fb05 2503 	mla	r5, r5, r3, r2
 80a8984:	f001 fef4 	bl	80aa770 <__tz_lock>
 80a8988:	f001 fef4 	bl	80aa774 <_tzset_unlocked>
 80a898c:	4b5c      	ldr	r3, [pc, #368]	; (80a8b00 <localtime_r+0x1c8>)
 80a898e:	681b      	ldr	r3, [r3, #0]
 80a8990:	b1f3      	cbz	r3, 80a89d0 <localtime_r+0x98>
 80a8992:	687b      	ldr	r3, [r7, #4]
 80a8994:	429e      	cmp	r6, r3
 80a8996:	d105      	bne.n	80a89a4 <localtime_r+0x6c>
 80a8998:	6839      	ldr	r1, [r7, #0]
 80a899a:	f8d8 3000 	ldr.w	r3, [r8]
 80a899e:	69fa      	ldr	r2, [r7, #28]
 80a89a0:	b941      	cbnz	r1, 80a89b4 <localtime_r+0x7c>
 80a89a2:	e00a      	b.n	80a89ba <localtime_r+0x82>
 80a89a4:	4630      	mov	r0, r6
 80a89a6:	f001 fe3b 	bl	80aa620 <__tzcalc_limits>
 80a89aa:	2800      	cmp	r0, #0
 80a89ac:	d1f4      	bne.n	80a8998 <localtime_r+0x60>
 80a89ae:	f04f 33ff 	mov.w	r3, #4294967295
 80a89b2:	e00d      	b.n	80a89d0 <localtime_r+0x98>
 80a89b4:	4293      	cmp	r3, r2
 80a89b6:	db08      	blt.n	80a89ca <localtime_r+0x92>
 80a89b8:	e001      	b.n	80a89be <localtime_r+0x86>
 80a89ba:	4293      	cmp	r3, r2
 80a89bc:	da07      	bge.n	80a89ce <localtime_r+0x96>
 80a89be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a89c0:	4293      	cmp	r3, r2
 80a89c2:	bfac      	ite	ge
 80a89c4:	2300      	movge	r3, #0
 80a89c6:	2301      	movlt	r3, #1
 80a89c8:	e002      	b.n	80a89d0 <localtime_r+0x98>
 80a89ca:	2300      	movs	r3, #0
 80a89cc:	e000      	b.n	80a89d0 <localtime_r+0x98>
 80a89ce:	2301      	movs	r3, #1
 80a89d0:	6223      	str	r3, [r4, #32]
 80a89d2:	6a23      	ldr	r3, [r4, #32]
 80a89d4:	203c      	movs	r0, #60	; 0x3c
 80a89d6:	2b01      	cmp	r3, #1
 80a89d8:	bf0c      	ite	eq
 80a89da:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a89dc:	6a39      	ldrne	r1, [r7, #32]
 80a89de:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a89e2:	fb91 f6f3 	sdiv	r6, r1, r3
 80a89e6:	fb03 1316 	mls	r3, r3, r6, r1
 80a89ea:	fb93 f2f0 	sdiv	r2, r3, r0
 80a89ee:	fb00 3012 	mls	r0, r0, r2, r3
 80a89f2:	6861      	ldr	r1, [r4, #4]
 80a89f4:	6823      	ldr	r3, [r4, #0]
 80a89f6:	1a89      	subs	r1, r1, r2
 80a89f8:	68a2      	ldr	r2, [r4, #8]
 80a89fa:	1a1b      	subs	r3, r3, r0
 80a89fc:	1b92      	subs	r2, r2, r6
 80a89fe:	2b3b      	cmp	r3, #59	; 0x3b
 80a8a00:	6023      	str	r3, [r4, #0]
 80a8a02:	6061      	str	r1, [r4, #4]
 80a8a04:	60a2      	str	r2, [r4, #8]
 80a8a06:	dd03      	ble.n	80a8a10 <localtime_r+0xd8>
 80a8a08:	3101      	adds	r1, #1
 80a8a0a:	6061      	str	r1, [r4, #4]
 80a8a0c:	3b3c      	subs	r3, #60	; 0x3c
 80a8a0e:	e004      	b.n	80a8a1a <localtime_r+0xe2>
 80a8a10:	2b00      	cmp	r3, #0
 80a8a12:	da03      	bge.n	80a8a1c <localtime_r+0xe4>
 80a8a14:	3901      	subs	r1, #1
 80a8a16:	6061      	str	r1, [r4, #4]
 80a8a18:	333c      	adds	r3, #60	; 0x3c
 80a8a1a:	6023      	str	r3, [r4, #0]
 80a8a1c:	6863      	ldr	r3, [r4, #4]
 80a8a1e:	2b3b      	cmp	r3, #59	; 0x3b
 80a8a20:	dd03      	ble.n	80a8a2a <localtime_r+0xf2>
 80a8a22:	3201      	adds	r2, #1
 80a8a24:	60a2      	str	r2, [r4, #8]
 80a8a26:	3b3c      	subs	r3, #60	; 0x3c
 80a8a28:	e004      	b.n	80a8a34 <localtime_r+0xfc>
 80a8a2a:	2b00      	cmp	r3, #0
 80a8a2c:	da03      	bge.n	80a8a36 <localtime_r+0xfe>
 80a8a2e:	3a01      	subs	r2, #1
 80a8a30:	60a2      	str	r2, [r4, #8]
 80a8a32:	333c      	adds	r3, #60	; 0x3c
 80a8a34:	6063      	str	r3, [r4, #4]
 80a8a36:	68a3      	ldr	r3, [r4, #8]
 80a8a38:	2b17      	cmp	r3, #23
 80a8a3a:	dd22      	ble.n	80a8a82 <localtime_r+0x14a>
 80a8a3c:	69e2      	ldr	r2, [r4, #28]
 80a8a3e:	3b18      	subs	r3, #24
 80a8a40:	3201      	adds	r2, #1
 80a8a42:	61e2      	str	r2, [r4, #28]
 80a8a44:	69a2      	ldr	r2, [r4, #24]
 80a8a46:	60a3      	str	r3, [r4, #8]
 80a8a48:	3201      	adds	r2, #1
 80a8a4a:	2a06      	cmp	r2, #6
 80a8a4c:	bfc8      	it	gt
 80a8a4e:	2200      	movgt	r2, #0
 80a8a50:	61a2      	str	r2, [r4, #24]
 80a8a52:	68e2      	ldr	r2, [r4, #12]
 80a8a54:	6923      	ldr	r3, [r4, #16]
 80a8a56:	3201      	adds	r2, #1
 80a8a58:	60e2      	str	r2, [r4, #12]
 80a8a5a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a8a5e:	428a      	cmp	r2, r1
 80a8a60:	dd46      	ble.n	80a8af0 <localtime_r+0x1b8>
 80a8a62:	3301      	adds	r3, #1
 80a8a64:	2b0c      	cmp	r3, #12
 80a8a66:	bf08      	it	eq
 80a8a68:	6963      	ldreq	r3, [r4, #20]
 80a8a6a:	eba2 0201 	sub.w	r2, r2, r1
 80a8a6e:	60e2      	str	r2, [r4, #12]
 80a8a70:	bf05      	ittet	eq
 80a8a72:	3301      	addeq	r3, #1
 80a8a74:	2200      	moveq	r2, #0
 80a8a76:	6123      	strne	r3, [r4, #16]
 80a8a78:	6122      	streq	r2, [r4, #16]
 80a8a7a:	bf04      	itt	eq
 80a8a7c:	6163      	streq	r3, [r4, #20]
 80a8a7e:	61e2      	streq	r2, [r4, #28]
 80a8a80:	e036      	b.n	80a8af0 <localtime_r+0x1b8>
 80a8a82:	2b00      	cmp	r3, #0
 80a8a84:	da34      	bge.n	80a8af0 <localtime_r+0x1b8>
 80a8a86:	69e2      	ldr	r2, [r4, #28]
 80a8a88:	3318      	adds	r3, #24
 80a8a8a:	3a01      	subs	r2, #1
 80a8a8c:	61e2      	str	r2, [r4, #28]
 80a8a8e:	69a2      	ldr	r2, [r4, #24]
 80a8a90:	60a3      	str	r3, [r4, #8]
 80a8a92:	3a01      	subs	r2, #1
 80a8a94:	bf48      	it	mi
 80a8a96:	2206      	movmi	r2, #6
 80a8a98:	61a2      	str	r2, [r4, #24]
 80a8a9a:	68e2      	ldr	r2, [r4, #12]
 80a8a9c:	3a01      	subs	r2, #1
 80a8a9e:	60e2      	str	r2, [r4, #12]
 80a8aa0:	bb32      	cbnz	r2, 80a8af0 <localtime_r+0x1b8>
 80a8aa2:	6923      	ldr	r3, [r4, #16]
 80a8aa4:	3b01      	subs	r3, #1
 80a8aa6:	d401      	bmi.n	80a8aac <localtime_r+0x174>
 80a8aa8:	6123      	str	r3, [r4, #16]
 80a8aaa:	e01d      	b.n	80a8ae8 <localtime_r+0x1b0>
 80a8aac:	230b      	movs	r3, #11
 80a8aae:	6123      	str	r3, [r4, #16]
 80a8ab0:	6963      	ldr	r3, [r4, #20]
 80a8ab2:	1e5a      	subs	r2, r3, #1
 80a8ab4:	f012 0f03 	tst.w	r2, #3
 80a8ab8:	6162      	str	r2, [r4, #20]
 80a8aba:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a8abe:	d105      	bne.n	80a8acc <localtime_r+0x194>
 80a8ac0:	2164      	movs	r1, #100	; 0x64
 80a8ac2:	fb93 f2f1 	sdiv	r2, r3, r1
 80a8ac6:	fb01 3212 	mls	r2, r1, r2, r3
 80a8aca:	b94a      	cbnz	r2, 80a8ae0 <localtime_r+0x1a8>
 80a8acc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a8ad0:	fb93 f2f1 	sdiv	r2, r3, r1
 80a8ad4:	fb01 3312 	mls	r3, r1, r2, r3
 80a8ad8:	fab3 f383 	clz	r3, r3
 80a8adc:	095b      	lsrs	r3, r3, #5
 80a8ade:	e000      	b.n	80a8ae2 <localtime_r+0x1aa>
 80a8ae0:	2301      	movs	r3, #1
 80a8ae2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a8ae6:	61e3      	str	r3, [r4, #28]
 80a8ae8:	6923      	ldr	r3, [r4, #16]
 80a8aea:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a8aee:	60e3      	str	r3, [r4, #12]
 80a8af0:	f001 fe3f 	bl	80aa772 <__tz_unlock>
 80a8af4:	4620      	mov	r0, r4
 80a8af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a8afa:	bf00      	nop
 80a8afc:	080ae9b0 	.word	0x080ae9b0
 80a8b00:	20000944 	.word	0x20000944

080a8b04 <_localeconv_r>:
 80a8b04:	4800      	ldr	r0, [pc, #0]	; (80a8b08 <_localeconv_r+0x4>)
 80a8b06:	4770      	bx	lr
 80a8b08:	200000f8 	.word	0x200000f8

080a8b0c <memchr>:
 80a8b0c:	b510      	push	{r4, lr}
 80a8b0e:	b2c9      	uxtb	r1, r1
 80a8b10:	4402      	add	r2, r0
 80a8b12:	4290      	cmp	r0, r2
 80a8b14:	4603      	mov	r3, r0
 80a8b16:	d005      	beq.n	80a8b24 <memchr+0x18>
 80a8b18:	781c      	ldrb	r4, [r3, #0]
 80a8b1a:	3001      	adds	r0, #1
 80a8b1c:	428c      	cmp	r4, r1
 80a8b1e:	d1f8      	bne.n	80a8b12 <memchr+0x6>
 80a8b20:	4618      	mov	r0, r3
 80a8b22:	bd10      	pop	{r4, pc}
 80a8b24:	2000      	movs	r0, #0
 80a8b26:	bd10      	pop	{r4, pc}

080a8b28 <memcmp>:
 80a8b28:	b510      	push	{r4, lr}
 80a8b2a:	3901      	subs	r1, #1
 80a8b2c:	4402      	add	r2, r0
 80a8b2e:	4290      	cmp	r0, r2
 80a8b30:	d007      	beq.n	80a8b42 <memcmp+0x1a>
 80a8b32:	f810 3b01 	ldrb.w	r3, [r0], #1
 80a8b36:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a8b3a:	42a3      	cmp	r3, r4
 80a8b3c:	d0f7      	beq.n	80a8b2e <memcmp+0x6>
 80a8b3e:	1b18      	subs	r0, r3, r4
 80a8b40:	bd10      	pop	{r4, pc}
 80a8b42:	2000      	movs	r0, #0
 80a8b44:	bd10      	pop	{r4, pc}

080a8b46 <memcpy>:
 80a8b46:	b510      	push	{r4, lr}
 80a8b48:	1e43      	subs	r3, r0, #1
 80a8b4a:	440a      	add	r2, r1
 80a8b4c:	4291      	cmp	r1, r2
 80a8b4e:	d004      	beq.n	80a8b5a <memcpy+0x14>
 80a8b50:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a8b54:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a8b58:	e7f8      	b.n	80a8b4c <memcpy+0x6>
 80a8b5a:	bd10      	pop	{r4, pc}

080a8b5c <memmove>:
 80a8b5c:	4288      	cmp	r0, r1
 80a8b5e:	b510      	push	{r4, lr}
 80a8b60:	eb01 0302 	add.w	r3, r1, r2
 80a8b64:	d801      	bhi.n	80a8b6a <memmove+0xe>
 80a8b66:	1e42      	subs	r2, r0, #1
 80a8b68:	e00b      	b.n	80a8b82 <memmove+0x26>
 80a8b6a:	4298      	cmp	r0, r3
 80a8b6c:	d2fb      	bcs.n	80a8b66 <memmove+0xa>
 80a8b6e:	1881      	adds	r1, r0, r2
 80a8b70:	1ad2      	subs	r2, r2, r3
 80a8b72:	42d3      	cmn	r3, r2
 80a8b74:	d004      	beq.n	80a8b80 <memmove+0x24>
 80a8b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a8b7a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80a8b7e:	e7f8      	b.n	80a8b72 <memmove+0x16>
 80a8b80:	bd10      	pop	{r4, pc}
 80a8b82:	4299      	cmp	r1, r3
 80a8b84:	d004      	beq.n	80a8b90 <memmove+0x34>
 80a8b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a8b8a:	f802 4f01 	strb.w	r4, [r2, #1]!
 80a8b8e:	e7f8      	b.n	80a8b82 <memmove+0x26>
 80a8b90:	bd10      	pop	{r4, pc}

080a8b92 <memset>:
 80a8b92:	4603      	mov	r3, r0
 80a8b94:	4402      	add	r2, r0
 80a8b96:	4293      	cmp	r3, r2
 80a8b98:	d002      	beq.n	80a8ba0 <memset+0xe>
 80a8b9a:	f803 1b01 	strb.w	r1, [r3], #1
 80a8b9e:	e7fa      	b.n	80a8b96 <memset+0x4>
 80a8ba0:	4770      	bx	lr
	...

080a8ba4 <srand>:
 80a8ba4:	b538      	push	{r3, r4, r5, lr}
 80a8ba6:	4b12      	ldr	r3, [pc, #72]	; (80a8bf0 <srand+0x4c>)
 80a8ba8:	4605      	mov	r5, r0
 80a8baa:	681c      	ldr	r4, [r3, #0]
 80a8bac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a8bae:	b9d3      	cbnz	r3, 80a8be6 <srand+0x42>
 80a8bb0:	2018      	movs	r0, #24
 80a8bb2:	f7fb fae7 	bl	80a4184 <malloc>
 80a8bb6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a8bba:	63a0      	str	r0, [r4, #56]	; 0x38
 80a8bbc:	8003      	strh	r3, [r0, #0]
 80a8bbe:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a8bc2:	8043      	strh	r3, [r0, #2]
 80a8bc4:	f241 2334 	movw	r3, #4660	; 0x1234
 80a8bc8:	8083      	strh	r3, [r0, #4]
 80a8bca:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a8bce:	80c3      	strh	r3, [r0, #6]
 80a8bd0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a8bd4:	8103      	strh	r3, [r0, #8]
 80a8bd6:	2305      	movs	r3, #5
 80a8bd8:	8143      	strh	r3, [r0, #10]
 80a8bda:	230b      	movs	r3, #11
 80a8bdc:	8183      	strh	r3, [r0, #12]
 80a8bde:	2201      	movs	r2, #1
 80a8be0:	2300      	movs	r3, #0
 80a8be2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a8be6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a8be8:	2200      	movs	r2, #0
 80a8bea:	611d      	str	r5, [r3, #16]
 80a8bec:	615a      	str	r2, [r3, #20]
 80a8bee:	bd38      	pop	{r3, r4, r5, pc}
 80a8bf0:	200000f4 	.word	0x200000f4

080a8bf4 <rand>:
 80a8bf4:	4b19      	ldr	r3, [pc, #100]	; (80a8c5c <rand+0x68>)
 80a8bf6:	b510      	push	{r4, lr}
 80a8bf8:	681c      	ldr	r4, [r3, #0]
 80a8bfa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a8bfc:	b9d3      	cbnz	r3, 80a8c34 <rand+0x40>
 80a8bfe:	2018      	movs	r0, #24
 80a8c00:	f7fb fac0 	bl	80a4184 <malloc>
 80a8c04:	f243 330e 	movw	r3, #13070	; 0x330e
 80a8c08:	63a0      	str	r0, [r4, #56]	; 0x38
 80a8c0a:	8003      	strh	r3, [r0, #0]
 80a8c0c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a8c10:	8043      	strh	r3, [r0, #2]
 80a8c12:	f241 2334 	movw	r3, #4660	; 0x1234
 80a8c16:	8083      	strh	r3, [r0, #4]
 80a8c18:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a8c1c:	80c3      	strh	r3, [r0, #6]
 80a8c1e:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a8c22:	8103      	strh	r3, [r0, #8]
 80a8c24:	2305      	movs	r3, #5
 80a8c26:	8143      	strh	r3, [r0, #10]
 80a8c28:	230b      	movs	r3, #11
 80a8c2a:	8183      	strh	r3, [r0, #12]
 80a8c2c:	2201      	movs	r2, #1
 80a8c2e:	2300      	movs	r3, #0
 80a8c30:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a8c34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a8c36:	4c0a      	ldr	r4, [pc, #40]	; (80a8c60 <rand+0x6c>)
 80a8c38:	690b      	ldr	r3, [r1, #16]
 80a8c3a:	6948      	ldr	r0, [r1, #20]
 80a8c3c:	435c      	muls	r4, r3
 80a8c3e:	4a09      	ldr	r2, [pc, #36]	; (80a8c64 <rand+0x70>)
 80a8c40:	fb02 4000 	mla	r0, r2, r0, r4
 80a8c44:	fba3 2302 	umull	r2, r3, r3, r2
 80a8c48:	3201      	adds	r2, #1
 80a8c4a:	4403      	add	r3, r0
 80a8c4c:	f143 0300 	adc.w	r3, r3, #0
 80a8c50:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80a8c54:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80a8c58:	bd10      	pop	{r4, pc}
 80a8c5a:	bf00      	nop
 80a8c5c:	200000f4 	.word	0x200000f4
 80a8c60:	5851f42d 	.word	0x5851f42d
 80a8c64:	4c957f2d 	.word	0x4c957f2d

080a8c68 <strchr>:
 80a8c68:	b2c9      	uxtb	r1, r1
 80a8c6a:	4603      	mov	r3, r0
 80a8c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a8c70:	b11a      	cbz	r2, 80a8c7a <strchr+0x12>
 80a8c72:	4291      	cmp	r1, r2
 80a8c74:	d1f9      	bne.n	80a8c6a <strchr+0x2>
 80a8c76:	4618      	mov	r0, r3
 80a8c78:	4770      	bx	lr
 80a8c7a:	2900      	cmp	r1, #0
 80a8c7c:	bf0c      	ite	eq
 80a8c7e:	4618      	moveq	r0, r3
 80a8c80:	2000      	movne	r0, #0
 80a8c82:	4770      	bx	lr

080a8c84 <strchrnul>:
 80a8c84:	b510      	push	{r4, lr}
 80a8c86:	4604      	mov	r4, r0
 80a8c88:	f7ff ffee 	bl	80a8c68 <strchr>
 80a8c8c:	b918      	cbnz	r0, 80a8c96 <strchrnul+0x12>
 80a8c8e:	4620      	mov	r0, r4
 80a8c90:	f000 fd44 	bl	80a971c <strlen>
 80a8c94:	4420      	add	r0, r4
 80a8c96:	bd10      	pop	{r4, pc}

080a8c98 <strcmp>:
 80a8c98:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a8c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a8ca0:	2a01      	cmp	r2, #1
 80a8ca2:	bf28      	it	cs
 80a8ca4:	429a      	cmpcs	r2, r3
 80a8ca6:	d0f7      	beq.n	80a8c98 <strcmp>
 80a8ca8:	1ad0      	subs	r0, r2, r3
 80a8caa:	4770      	bx	lr

080a8cac <strcpy>:
 80a8cac:	4603      	mov	r3, r0
 80a8cae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a8cb2:	f803 2b01 	strb.w	r2, [r3], #1
 80a8cb6:	2a00      	cmp	r2, #0
 80a8cb8:	d1f9      	bne.n	80a8cae <strcpy+0x2>
 80a8cba:	4770      	bx	lr

080a8cbc <strdup>:
 80a8cbc:	4b02      	ldr	r3, [pc, #8]	; (80a8cc8 <strdup+0xc>)
 80a8cbe:	4601      	mov	r1, r0
 80a8cc0:	6818      	ldr	r0, [r3, #0]
 80a8cc2:	f000 b803 	b.w	80a8ccc <_strdup_r>
 80a8cc6:	bf00      	nop
 80a8cc8:	200000f4 	.word	0x200000f4

080a8ccc <_strdup_r>:
 80a8ccc:	b570      	push	{r4, r5, r6, lr}
 80a8cce:	4606      	mov	r6, r0
 80a8cd0:	4608      	mov	r0, r1
 80a8cd2:	460c      	mov	r4, r1
 80a8cd4:	f000 fd22 	bl	80a971c <strlen>
 80a8cd8:	1c45      	adds	r5, r0, #1
 80a8cda:	4629      	mov	r1, r5
 80a8cdc:	4630      	mov	r0, r6
 80a8cde:	f7fb faa1 	bl	80a4224 <_malloc_r>
 80a8ce2:	4606      	mov	r6, r0
 80a8ce4:	b118      	cbz	r0, 80a8cee <_strdup_r+0x22>
 80a8ce6:	462a      	mov	r2, r5
 80a8ce8:	4621      	mov	r1, r4
 80a8cea:	f7ff ff2c 	bl	80a8b46 <memcpy>
 80a8cee:	4630      	mov	r0, r6
 80a8cf0:	bd70      	pop	{r4, r5, r6, pc}

080a8cf2 <iso_year_adjust>:
 80a8cf2:	6941      	ldr	r1, [r0, #20]
 80a8cf4:	b510      	push	{r4, lr}
 80a8cf6:	078b      	lsls	r3, r1, #30
 80a8cf8:	d10c      	bne.n	80a8d14 <iso_year_adjust+0x22>
 80a8cfa:	f240 736c 	movw	r3, #1900	; 0x76c
 80a8cfe:	2900      	cmp	r1, #0
 80a8d00:	bfa8      	it	ge
 80a8d02:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a8d06:	440b      	add	r3, r1
 80a8d08:	2464      	movs	r4, #100	; 0x64
 80a8d0a:	fb93 f2f4 	sdiv	r2, r3, r4
 80a8d0e:	fb04 3312 	mls	r3, r4, r2, r3
 80a8d12:	b983      	cbnz	r3, 80a8d36 <iso_year_adjust+0x44>
 80a8d14:	f240 736c 	movw	r3, #1900	; 0x76c
 80a8d18:	2900      	cmp	r1, #0
 80a8d1a:	bfa8      	it	ge
 80a8d1c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a8d20:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a8d24:	440b      	add	r3, r1
 80a8d26:	fb93 f1f2 	sdiv	r1, r3, r2
 80a8d2a:	fb02 3311 	mls	r3, r2, r1, r3
 80a8d2e:	fab3 f283 	clz	r2, r3
 80a8d32:	0952      	lsrs	r2, r2, #5
 80a8d34:	e000      	b.n	80a8d38 <iso_year_adjust+0x46>
 80a8d36:	2201      	movs	r2, #1
 80a8d38:	6983      	ldr	r3, [r0, #24]
 80a8d3a:	69c1      	ldr	r1, [r0, #28]
 80a8d3c:	005b      	lsls	r3, r3, #1
 80a8d3e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80a8d42:	4413      	add	r3, r2
 80a8d44:	2b21      	cmp	r3, #33	; 0x21
 80a8d46:	dc0e      	bgt.n	80a8d66 <iso_year_adjust+0x74>
 80a8d48:	2b20      	cmp	r3, #32
 80a8d4a:	da2f      	bge.n	80a8dac <iso_year_adjust+0xba>
 80a8d4c:	2b0d      	cmp	r3, #13
 80a8d4e:	dc02      	bgt.n	80a8d56 <iso_year_adjust+0x64>
 80a8d50:	2b0a      	cmp	r3, #10
 80a8d52:	db05      	blt.n	80a8d60 <iso_year_adjust+0x6e>
 80a8d54:	e02a      	b.n	80a8dac <iso_year_adjust+0xba>
 80a8d56:	2b10      	cmp	r3, #16
 80a8d58:	db26      	blt.n	80a8da8 <iso_year_adjust+0xb6>
 80a8d5a:	2b11      	cmp	r3, #17
 80a8d5c:	dd26      	ble.n	80a8dac <iso_year_adjust+0xba>
 80a8d5e:	3b1c      	subs	r3, #28
 80a8d60:	2b01      	cmp	r3, #1
 80a8d62:	d923      	bls.n	80a8dac <iso_year_adjust+0xba>
 80a8d64:	e020      	b.n	80a8da8 <iso_year_adjust+0xb6>
 80a8d66:	f241 62c6 	movw	r2, #5830	; 0x16c6
 80a8d6a:	4293      	cmp	r3, r2
 80a8d6c:	dc0e      	bgt.n	80a8d8c <iso_year_adjust+0x9a>
 80a8d6e:	f241 62c2 	movw	r2, #5826	; 0x16c2
 80a8d72:	4293      	cmp	r3, r2
 80a8d74:	da16      	bge.n	80a8da4 <iso_year_adjust+0xb2>
 80a8d76:	f241 62a2 	movw	r2, #5794	; 0x16a2
 80a8d7a:	4293      	cmp	r3, r2
 80a8d7c:	d012      	beq.n	80a8da4 <iso_year_adjust+0xb2>
 80a8d7e:	db13      	blt.n	80a8da8 <iso_year_adjust+0xb6>
 80a8d80:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 80a8d84:	3b12      	subs	r3, #18
 80a8d86:	2b02      	cmp	r3, #2
 80a8d88:	d90c      	bls.n	80a8da4 <iso_year_adjust+0xb2>
 80a8d8a:	e00d      	b.n	80a8da8 <iso_year_adjust+0xb6>
 80a8d8c:	f241 62d5 	movw	r2, #5845	; 0x16d5
 80a8d90:	4293      	cmp	r3, r2
 80a8d92:	d007      	beq.n	80a8da4 <iso_year_adjust+0xb2>
 80a8d94:	f241 62d7 	movw	r2, #5847	; 0x16d7
 80a8d98:	4293      	cmp	r3, r2
 80a8d9a:	d003      	beq.n	80a8da4 <iso_year_adjust+0xb2>
 80a8d9c:	f241 62d3 	movw	r2, #5843	; 0x16d3
 80a8da0:	4293      	cmp	r3, r2
 80a8da2:	d101      	bne.n	80a8da8 <iso_year_adjust+0xb6>
 80a8da4:	2001      	movs	r0, #1
 80a8da6:	bd10      	pop	{r4, pc}
 80a8da8:	2000      	movs	r0, #0
 80a8daa:	bd10      	pop	{r4, pc}
 80a8dac:	f04f 30ff 	mov.w	r0, #4294967295
 80a8db0:	bd10      	pop	{r4, pc}
	...

080a8db4 <strftime>:
 80a8db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a8db8:	460e      	mov	r6, r1
 80a8dba:	b093      	sub	sp, #76	; 0x4c
 80a8dbc:	461d      	mov	r5, r3
 80a8dbe:	4607      	mov	r7, r0
 80a8dc0:	4691      	mov	r9, r2
 80a8dc2:	f001 fc1d 	bl	80aa600 <__get_current_time_locale>
 80a8dc6:	2300      	movs	r3, #0
 80a8dc8:	9306      	str	r3, [sp, #24]
 80a8dca:	461c      	mov	r4, r3
 80a8dcc:	1e73      	subs	r3, r6, #1
 80a8dce:	9003      	str	r0, [sp, #12]
 80a8dd0:	9302      	str	r3, [sp, #8]
 80a8dd2:	f899 3000 	ldrb.w	r3, [r9]
 80a8dd6:	2b00      	cmp	r3, #0
 80a8dd8:	f000 8492 	beq.w	80a9700 <strftime+0x94c>
 80a8ddc:	2b25      	cmp	r3, #37	; 0x25
 80a8dde:	d008      	beq.n	80a8df2 <strftime+0x3e>
 80a8de0:	9a02      	ldr	r2, [sp, #8]
 80a8de2:	4294      	cmp	r4, r2
 80a8de4:	f080 8490 	bcs.w	80a9708 <strftime+0x954>
 80a8de8:	553b      	strb	r3, [r7, r4]
 80a8dea:	f109 0901 	add.w	r9, r9, #1
 80a8dee:	3401      	adds	r4, #1
 80a8df0:	e7ef      	b.n	80a8dd2 <strftime+0x1e>
 80a8df2:	f899 a001 	ldrb.w	sl, [r9, #1]
 80a8df6:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80a8dfa:	d007      	beq.n	80a8e0c <strftime+0x58>
 80a8dfc:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a8e00:	d004      	beq.n	80a8e0c <strftime+0x58>
 80a8e02:	f109 0901 	add.w	r9, r9, #1
 80a8e06:	f04f 0a00 	mov.w	sl, #0
 80a8e0a:	e001      	b.n	80a8e10 <strftime+0x5c>
 80a8e0c:	f109 0902 	add.w	r9, r9, #2
 80a8e10:	f899 3000 	ldrb.w	r3, [r9]
 80a8e14:	3b31      	subs	r3, #49	; 0x31
 80a8e16:	2b08      	cmp	r3, #8
 80a8e18:	d808      	bhi.n	80a8e2c <strftime+0x78>
 80a8e1a:	4648      	mov	r0, r9
 80a8e1c:	220a      	movs	r2, #10
 80a8e1e:	a90a      	add	r1, sp, #40	; 0x28
 80a8e20:	f001 fbe4 	bl	80aa5ec <strtoul>
 80a8e24:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80a8e28:	4680      	mov	r8, r0
 80a8e2a:	e001      	b.n	80a8e30 <strftime+0x7c>
 80a8e2c:	f04f 0800 	mov.w	r8, #0
 80a8e30:	f899 3000 	ldrb.w	r3, [r9]
 80a8e34:	2b45      	cmp	r3, #69	; 0x45
 80a8e36:	d001      	beq.n	80a8e3c <strftime+0x88>
 80a8e38:	2b4f      	cmp	r3, #79	; 0x4f
 80a8e3a:	d101      	bne.n	80a8e40 <strftime+0x8c>
 80a8e3c:	f109 0901 	add.w	r9, r9, #1
 80a8e40:	f899 0000 	ldrb.w	r0, [r9]
 80a8e44:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80a8e48:	2b55      	cmp	r3, #85	; 0x55
 80a8e4a:	f200 845d 	bhi.w	80a9708 <strftime+0x954>
 80a8e4e:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a8e52:	044a      	.short	0x044a
 80a8e54:	045b045b 	.word	0x045b045b
 80a8e58:	045b045b 	.word	0x045b045b
 80a8e5c:	045b045b 	.word	0x045b045b
 80a8e60:	045b045b 	.word	0x045b045b
 80a8e64:	045b045b 	.word	0x045b045b
 80a8e68:	045b045b 	.word	0x045b045b
 80a8e6c:	045b045b 	.word	0x045b045b
 80a8e70:	045b045b 	.word	0x045b045b
 80a8e74:	045b045b 	.word	0x045b045b
 80a8e78:	045b045b 	.word	0x045b045b
 80a8e7c:	045b045b 	.word	0x045b045b
 80a8e80:	045b045b 	.word	0x045b045b
 80a8e84:	045b045b 	.word	0x045b045b
 80a8e88:	006f045b 	.word	0x006f045b
 80a8e8c:	00d400a1 	.word	0x00d400a1
 80a8e90:	045b011a 	.word	0x045b011a
 80a8e94:	01a0013f 	.word	0x01a0013f
 80a8e98:	022d0226 	.word	0x022d0226
 80a8e9c:	045b045b 	.word	0x045b045b
 80a8ea0:	0260045b 	.word	0x0260045b
 80a8ea4:	045b045b 	.word	0x045b045b
 80a8ea8:	045b0268 	.word	0x045b0268
 80a8eac:	031c0296 	.word	0x031c0296
 80a8eb0:	033a0324 	.word	0x033a0324
 80a8eb4:	03850342 	.word	0x03850342
 80a8eb8:	039f00c6 	.word	0x039f00c6
 80a8ebc:	045b041f 	.word	0x045b041f
 80a8ec0:	045b045b 	.word	0x045b045b
 80a8ec4:	045b045b 	.word	0x045b045b
 80a8ec8:	0056045b 	.word	0x0056045b
 80a8ecc:	00ba0089 	.word	0x00ba0089
 80a8ed0:	010c010c 	.word	0x010c010c
 80a8ed4:	0171045b 	.word	0x0171045b
 80a8ed8:	045b0089 	.word	0x045b0089
 80a8edc:	0226023d 	.word	0x0226023d
 80a8ee0:	025d022d 	.word	0x025d022d
 80a8ee4:	045b0262 	.word	0x045b0262
 80a8ee8:	045b0268 	.word	0x045b0268
 80a8eec:	029b00be 	.word	0x029b00be
 80a8ef0:	032d031e 	.word	0x032d031e
 80a8ef4:	037e045b 	.word	0x037e045b
 80a8ef8:	039100c2 	.word	0x039100c2
 80a8efc:	03e7      	.short	0x03e7
 80a8efe:	69ab      	ldr	r3, [r5, #24]
 80a8f00:	9a03      	ldr	r2, [sp, #12]
 80a8f02:	3318      	adds	r3, #24
 80a8f04:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a8f08:	4640      	mov	r0, r8
 80a8f0a:	f000 fc07 	bl	80a971c <strlen>
 80a8f0e:	f108 38ff 	add.w	r8, r8, #4294967295
 80a8f12:	193b      	adds	r3, r7, r4
 80a8f14:	4420      	add	r0, r4
 80a8f16:	4284      	cmp	r4, r0
 80a8f18:	f000 83eb 	beq.w	80a96f2 <strftime+0x93e>
 80a8f1c:	9a02      	ldr	r2, [sp, #8]
 80a8f1e:	4294      	cmp	r4, r2
 80a8f20:	f080 83f2 	bcs.w	80a9708 <strftime+0x954>
 80a8f24:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a8f28:	3401      	adds	r4, #1
 80a8f2a:	f803 2b01 	strb.w	r2, [r3], #1
 80a8f2e:	e7f2      	b.n	80a8f16 <strftime+0x162>
 80a8f30:	69ab      	ldr	r3, [r5, #24]
 80a8f32:	9a03      	ldr	r2, [sp, #12]
 80a8f34:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a8f38:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 80a8f3c:	4640      	mov	r0, r8
 80a8f3e:	f000 fbed 	bl	80a971c <strlen>
 80a8f42:	f108 38ff 	add.w	r8, r8, #4294967295
 80a8f46:	193b      	adds	r3, r7, r4
 80a8f48:	4420      	add	r0, r4
 80a8f4a:	4284      	cmp	r4, r0
 80a8f4c:	f000 83d1 	beq.w	80a96f2 <strftime+0x93e>
 80a8f50:	9a02      	ldr	r2, [sp, #8]
 80a8f52:	4294      	cmp	r4, r2
 80a8f54:	f080 83d8 	bcs.w	80a9708 <strftime+0x954>
 80a8f58:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a8f5c:	3401      	adds	r4, #1
 80a8f5e:	f803 2b01 	strb.w	r2, [r3], #1
 80a8f62:	e7f2      	b.n	80a8f4a <strftime+0x196>
 80a8f64:	692b      	ldr	r3, [r5, #16]
 80a8f66:	9a03      	ldr	r2, [sp, #12]
 80a8f68:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a8f6c:	4640      	mov	r0, r8
 80a8f6e:	f000 fbd5 	bl	80a971c <strlen>
 80a8f72:	f108 38ff 	add.w	r8, r8, #4294967295
 80a8f76:	193b      	adds	r3, r7, r4
 80a8f78:	4420      	add	r0, r4
 80a8f7a:	4284      	cmp	r4, r0
 80a8f7c:	f000 83b9 	beq.w	80a96f2 <strftime+0x93e>
 80a8f80:	9a02      	ldr	r2, [sp, #8]
 80a8f82:	4294      	cmp	r4, r2
 80a8f84:	f080 83c0 	bcs.w	80a9708 <strftime+0x954>
 80a8f88:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a8f8c:	3401      	adds	r4, #1
 80a8f8e:	f803 2b01 	strb.w	r2, [r3], #1
 80a8f92:	e7f2      	b.n	80a8f7a <strftime+0x1c6>
 80a8f94:	692b      	ldr	r3, [r5, #16]
 80a8f96:	9a03      	ldr	r2, [sp, #12]
 80a8f98:	330c      	adds	r3, #12
 80a8f9a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a8f9e:	4640      	mov	r0, r8
 80a8fa0:	f000 fbbc 	bl	80a971c <strlen>
 80a8fa4:	f108 38ff 	add.w	r8, r8, #4294967295
 80a8fa8:	193b      	adds	r3, r7, r4
 80a8faa:	4420      	add	r0, r4
 80a8fac:	4284      	cmp	r4, r0
 80a8fae:	f000 83a0 	beq.w	80a96f2 <strftime+0x93e>
 80a8fb2:	9a02      	ldr	r2, [sp, #8]
 80a8fb4:	4294      	cmp	r4, r2
 80a8fb6:	f080 83a7 	bcs.w	80a9708 <strftime+0x954>
 80a8fba:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a8fbe:	3401      	adds	r4, #1
 80a8fc0:	f803 2b01 	strb.w	r2, [r3], #1
 80a8fc4:	e7f2      	b.n	80a8fac <strftime+0x1f8>
 80a8fc6:	9b03      	ldr	r3, [sp, #12]
 80a8fc8:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80a8fcc:	e00a      	b.n	80a8fe4 <strftime+0x230>
 80a8fce:	9b03      	ldr	r3, [sp, #12]
 80a8fd0:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80a8fd4:	e006      	b.n	80a8fe4 <strftime+0x230>
 80a8fd6:	9b03      	ldr	r3, [sp, #12]
 80a8fd8:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80a8fdc:	e002      	b.n	80a8fe4 <strftime+0x230>
 80a8fde:	9b03      	ldr	r3, [sp, #12]
 80a8fe0:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80a8fe4:	4640      	mov	r0, r8
 80a8fe6:	f000 fb99 	bl	80a971c <strlen>
 80a8fea:	f898 3000 	ldrb.w	r3, [r8]
 80a8fee:	2b00      	cmp	r3, #0
 80a8ff0:	f000 837f 	beq.w	80a96f2 <strftime+0x93e>
 80a8ff4:	462b      	mov	r3, r5
 80a8ff6:	4642      	mov	r2, r8
 80a8ff8:	e093      	b.n	80a9122 <strftime+0x36e>
 80a8ffa:	49b6      	ldr	r1, [pc, #728]	; (80a92d4 <strftime+0x520>)
 80a8ffc:	f8d5 b014 	ldr.w	fp, [r5, #20]
 80a9000:	458b      	cmp	fp, r1
 80a9002:	bfac      	ite	ge
 80a9004:	2100      	movge	r1, #0
 80a9006:	2101      	movlt	r1, #1
 80a9008:	f1bb 0f00 	cmp.w	fp, #0
 80a900c:	db04      	blt.n	80a9018 <strftime+0x264>
 80a900e:	2064      	movs	r0, #100	; 0x64
 80a9010:	fb9b f0f0 	sdiv	r0, fp, r0
 80a9014:	3013      	adds	r0, #19
 80a9016:	e008      	b.n	80a902a <strftime+0x276>
 80a9018:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 80a901c:	9107      	str	r1, [sp, #28]
 80a901e:	f001 fd2f 	bl	80aaa80 <abs>
 80a9022:	2364      	movs	r3, #100	; 0x64
 80a9024:	fb90 f0f3 	sdiv	r0, r0, r3
 80a9028:	9907      	ldr	r1, [sp, #28]
 80a902a:	f1ba 0f00 	cmp.w	sl, #0
 80a902e:	d008      	beq.n	80a9042 <strftime+0x28e>
 80a9030:	2863      	cmp	r0, #99	; 0x63
 80a9032:	dd09      	ble.n	80a9048 <strftime+0x294>
 80a9034:	4ba8      	ldr	r3, [pc, #672]	; (80a92d8 <strftime+0x524>)
 80a9036:	4aa9      	ldr	r2, [pc, #676]	; (80a92dc <strftime+0x528>)
 80a9038:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a903c:	bf18      	it	ne
 80a903e:	4613      	movne	r3, r2
 80a9040:	e003      	b.n	80a904a <strftime+0x296>
 80a9042:	4ba6      	ldr	r3, [pc, #664]	; (80a92dc <strftime+0x528>)
 80a9044:	4aa6      	ldr	r2, [pc, #664]	; (80a92e0 <strftime+0x52c>)
 80a9046:	e001      	b.n	80a904c <strftime+0x298>
 80a9048:	4ba4      	ldr	r3, [pc, #656]	; (80a92dc <strftime+0x528>)
 80a904a:	4aa6      	ldr	r2, [pc, #664]	; (80a92e4 <strftime+0x530>)
 80a904c:	f1b8 0f01 	cmp.w	r8, #1
 80a9050:	bf98      	it	ls
 80a9052:	f04f 0802 	movls.w	r8, #2
 80a9056:	ebc1 0108 	rsb	r1, r1, r8
 80a905a:	9001      	str	r0, [sp, #4]
 80a905c:	9100      	str	r1, [sp, #0]
 80a905e:	489d      	ldr	r0, [pc, #628]	; (80a92d4 <strftime+0x520>)
 80a9060:	49a1      	ldr	r1, [pc, #644]	; (80a92e8 <strftime+0x534>)
 80a9062:	4583      	cmp	fp, r0
 80a9064:	bfb8      	it	lt
 80a9066:	460b      	movlt	r3, r1
 80a9068:	e21d      	b.n	80a94a6 <strftime+0x6f2>
 80a906a:	4aa0      	ldr	r2, [pc, #640]	; (80a92ec <strftime+0x538>)
 80a906c:	49a0      	ldr	r1, [pc, #640]	; (80a92f0 <strftime+0x53c>)
 80a906e:	68eb      	ldr	r3, [r5, #12]
 80a9070:	2864      	cmp	r0, #100	; 0x64
 80a9072:	bf08      	it	eq
 80a9074:	460a      	moveq	r2, r1
 80a9076:	1b31      	subs	r1, r6, r4
 80a9078:	1938      	adds	r0, r7, r4
 80a907a:	f7fb f8bb 	bl	80a41f4 <sniprintf>
 80a907e:	2800      	cmp	r0, #0
 80a9080:	f280 8302 	bge.w	80a9688 <strftime+0x8d4>
 80a9084:	e340      	b.n	80a9708 <strftime+0x954>
 80a9086:	6968      	ldr	r0, [r5, #20]
 80a9088:	692b      	ldr	r3, [r5, #16]
 80a908a:	2800      	cmp	r0, #0
 80a908c:	f103 0b01 	add.w	fp, r3, #1
 80a9090:	eb07 0804 	add.w	r8, r7, r4
 80a9094:	ebc4 0a06 	rsb	sl, r4, r6
 80a9098:	68eb      	ldr	r3, [r5, #12]
 80a909a:	db05      	blt.n	80a90a8 <strftime+0x2f4>
 80a909c:	2264      	movs	r2, #100	; 0x64
 80a909e:	fb90 f1f2 	sdiv	r1, r0, r2
 80a90a2:	fb02 0011 	mls	r0, r2, r1, r0
 80a90a6:	e00a      	b.n	80a90be <strftime+0x30a>
 80a90a8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a90ac:	9307      	str	r3, [sp, #28]
 80a90ae:	f001 fce7 	bl	80aaa80 <abs>
 80a90b2:	2264      	movs	r2, #100	; 0x64
 80a90b4:	fb90 f1f2 	sdiv	r1, r0, r2
 80a90b8:	fb01 0012 	mls	r0, r1, r2, r0
 80a90bc:	9b07      	ldr	r3, [sp, #28]
 80a90be:	9001      	str	r0, [sp, #4]
 80a90c0:	9300      	str	r3, [sp, #0]
 80a90c2:	4651      	mov	r1, sl
 80a90c4:	465b      	mov	r3, fp
 80a90c6:	4640      	mov	r0, r8
 80a90c8:	4a8a      	ldr	r2, [pc, #552]	; (80a92f4 <strftime+0x540>)
 80a90ca:	f7fb f893 	bl	80a41f4 <sniprintf>
 80a90ce:	e7d6      	b.n	80a907e <strftime+0x2ca>
 80a90d0:	2325      	movs	r3, #37	; 0x25
 80a90d2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a90d6:	f1ba 0f00 	cmp.w	sl, #0
 80a90da:	d007      	beq.n	80a90ec <strftime+0x338>
 80a90dc:	f1b8 0f05 	cmp.w	r8, #5
 80a90e0:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 80a90e4:	bf98      	it	ls
 80a90e6:	f04f 0806 	movls.w	r8, #6
 80a90ea:	e004      	b.n	80a90f6 <strftime+0x342>
 80a90ec:	232b      	movs	r3, #43	; 0x2b
 80a90ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80a90f2:	f04f 080a 	mov.w	r8, #10
 80a90f6:	f1b8 0306 	subs.w	r3, r8, #6
 80a90fa:	d102      	bne.n	80a9102 <strftime+0x34e>
 80a90fc:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80a9100:	e00a      	b.n	80a9118 <strftime+0x364>
 80a9102:	4a7d      	ldr	r2, [pc, #500]	; (80a92f8 <strftime+0x544>)
 80a9104:	211e      	movs	r1, #30
 80a9106:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80a910a:	f7fb f873 	bl	80a41f4 <sniprintf>
 80a910e:	2800      	cmp	r0, #0
 80a9110:	ddf4      	ble.n	80a90fc <strftime+0x348>
 80a9112:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 80a9116:	4418      	add	r0, r3
 80a9118:	4978      	ldr	r1, [pc, #480]	; (80a92fc <strftime+0x548>)
 80a911a:	f7ff fdc7 	bl	80a8cac <strcpy>
 80a911e:	462b      	mov	r3, r5
 80a9120:	aa0a      	add	r2, sp, #40	; 0x28
 80a9122:	1b31      	subs	r1, r6, r4
 80a9124:	1938      	adds	r0, r7, r4
 80a9126:	f7ff fe45 	bl	80a8db4 <strftime>
 80a912a:	2800      	cmp	r0, #0
 80a912c:	f340 82ec 	ble.w	80a9708 <strftime+0x954>
 80a9130:	4404      	add	r4, r0
 80a9132:	e2de      	b.n	80a96f2 <strftime+0x93e>
 80a9134:	4628      	mov	r0, r5
 80a9136:	f7ff fddc 	bl	80a8cf2 <iso_year_adjust>
 80a913a:	4680      	mov	r8, r0
 80a913c:	6968      	ldr	r0, [r5, #20]
 80a913e:	2800      	cmp	r0, #0
 80a9140:	db05      	blt.n	80a914e <strftime+0x39a>
 80a9142:	2264      	movs	r2, #100	; 0x64
 80a9144:	fb90 f1f2 	sdiv	r1, r0, r2
 80a9148:	fb02 0011 	mls	r0, r2, r1, r0
 80a914c:	e008      	b.n	80a9160 <strftime+0x3ac>
 80a914e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a9152:	f001 fc95 	bl	80aaa80 <abs>
 80a9156:	2264      	movs	r2, #100	; 0x64
 80a9158:	fb90 f3f2 	sdiv	r3, r0, r2
 80a915c:	fb03 0012 	mls	r0, r3, r2, r0
 80a9160:	f1b8 0f00 	cmp.w	r8, #0
 80a9164:	da06      	bge.n	80a9174 <strftime+0x3c0>
 80a9166:	696a      	ldr	r2, [r5, #20]
 80a9168:	4b65      	ldr	r3, [pc, #404]	; (80a9300 <strftime+0x54c>)
 80a916a:	429a      	cmp	r2, r3
 80a916c:	bfb8      	it	lt
 80a916e:	f04f 0801 	movlt.w	r8, #1
 80a9172:	e006      	b.n	80a9182 <strftime+0x3ce>
 80a9174:	d005      	beq.n	80a9182 <strftime+0x3ce>
 80a9176:	696a      	ldr	r2, [r5, #20]
 80a9178:	4b56      	ldr	r3, [pc, #344]	; (80a92d4 <strftime+0x520>)
 80a917a:	429a      	cmp	r2, r3
 80a917c:	bfb8      	it	lt
 80a917e:	f04f 38ff 	movlt.w	r8, #4294967295
 80a9182:	2364      	movs	r3, #100	; 0x64
 80a9184:	4440      	add	r0, r8
 80a9186:	fb90 f2f3 	sdiv	r2, r0, r3
 80a918a:	fb03 0012 	mls	r0, r3, r2, r0
 80a918e:	4418      	add	r0, r3
 80a9190:	e1f8      	b.n	80a9584 <strftime+0x7d0>
 80a9192:	4b50      	ldr	r3, [pc, #320]	; (80a92d4 <strftime+0x520>)
 80a9194:	6969      	ldr	r1, [r5, #20]
 80a9196:	4628      	mov	r0, r5
 80a9198:	4299      	cmp	r1, r3
 80a919a:	bfac      	ite	ge
 80a919c:	2300      	movge	r3, #0
 80a919e:	2301      	movlt	r3, #1
 80a91a0:	9108      	str	r1, [sp, #32]
 80a91a2:	9307      	str	r3, [sp, #28]
 80a91a4:	f7ff fda5 	bl	80a8cf2 <iso_year_adjust>
 80a91a8:	9908      	ldr	r1, [sp, #32]
 80a91aa:	4683      	mov	fp, r0
 80a91ac:	2900      	cmp	r1, #0
 80a91ae:	db04      	blt.n	80a91ba <strftime+0x406>
 80a91b0:	2364      	movs	r3, #100	; 0x64
 80a91b2:	fb91 f3f3 	sdiv	r3, r1, r3
 80a91b6:	3313      	adds	r3, #19
 80a91b8:	e008      	b.n	80a91cc <strftime+0x418>
 80a91ba:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80a91be:	9108      	str	r1, [sp, #32]
 80a91c0:	f001 fc5e 	bl	80aaa80 <abs>
 80a91c4:	2364      	movs	r3, #100	; 0x64
 80a91c6:	fb90 f3f3 	sdiv	r3, r0, r3
 80a91ca:	9908      	ldr	r1, [sp, #32]
 80a91cc:	6968      	ldr	r0, [r5, #20]
 80a91ce:	2800      	cmp	r0, #0
 80a91d0:	db06      	blt.n	80a91e0 <strftime+0x42c>
 80a91d2:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a91d6:	fb90 fcfe 	sdiv	ip, r0, lr
 80a91da:	fb0e 001c 	mls	r0, lr, ip, r0
 80a91de:	e00d      	b.n	80a91fc <strftime+0x448>
 80a91e0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a91e4:	9109      	str	r1, [sp, #36]	; 0x24
 80a91e6:	9308      	str	r3, [sp, #32]
 80a91e8:	f001 fc4a 	bl	80aaa80 <abs>
 80a91ec:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a91f0:	fb90 fcfe 	sdiv	ip, r0, lr
 80a91f4:	fb0c 001e 	mls	r0, ip, lr, r0
 80a91f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a91fa:	9b08      	ldr	r3, [sp, #32]
 80a91fc:	f1bb 0f00 	cmp.w	fp, #0
 80a9200:	da08      	bge.n	80a9214 <strftime+0x460>
 80a9202:	6969      	ldr	r1, [r5, #20]
 80a9204:	4a3e      	ldr	r2, [pc, #248]	; (80a9300 <strftime+0x54c>)
 80a9206:	4291      	cmp	r1, r2
 80a9208:	da0a      	bge.n	80a9220 <strftime+0x46c>
 80a920a:	f04f 0b01 	mov.w	fp, #1
 80a920e:	f8cd b01c 	str.w	fp, [sp, #28]
 80a9212:	e005      	b.n	80a9220 <strftime+0x46c>
 80a9214:	d004      	beq.n	80a9220 <strftime+0x46c>
 80a9216:	4a2f      	ldr	r2, [pc, #188]	; (80a92d4 <strftime+0x520>)
 80a9218:	4291      	cmp	r1, r2
 80a921a:	bfb8      	it	lt
 80a921c:	f04f 3bff 	movlt.w	fp, #4294967295
 80a9220:	eb0b 0200 	add.w	r2, fp, r0
 80a9224:	1c50      	adds	r0, r2, #1
 80a9226:	d102      	bne.n	80a922e <strftime+0x47a>
 80a9228:	3b01      	subs	r3, #1
 80a922a:	2263      	movs	r2, #99	; 0x63
 80a922c:	e003      	b.n	80a9236 <strftime+0x482>
 80a922e:	2a64      	cmp	r2, #100	; 0x64
 80a9230:	bf04      	itt	eq
 80a9232:	3301      	addeq	r3, #1
 80a9234:	2200      	moveq	r2, #0
 80a9236:	2064      	movs	r0, #100	; 0x64
 80a9238:	fb00 2303 	mla	r3, r0, r3, r2
 80a923c:	9a07      	ldr	r2, [sp, #28]
 80a923e:	b142      	cbz	r2, 80a9252 <strftime+0x49e>
 80a9240:	222d      	movs	r2, #45	; 0x2d
 80a9242:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 80a9246:	f1b8 0f00 	cmp.w	r8, #0
 80a924a:	d013      	beq.n	80a9274 <strftime+0x4c0>
 80a924c:	f108 38ff 	add.w	r8, r8, #4294967295
 80a9250:	e010      	b.n	80a9274 <strftime+0x4c0>
 80a9252:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a9256:	d110      	bne.n	80a927a <strftime+0x4c6>
 80a9258:	f242 720f 	movw	r2, #9999	; 0x270f
 80a925c:	4293      	cmp	r3, r2
 80a925e:	d90c      	bls.n	80a927a <strftime+0x4c6>
 80a9260:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80a9264:	f1b8 0f00 	cmp.w	r8, #0
 80a9268:	d1f0      	bne.n	80a924c <strftime+0x498>
 80a926a:	aa12      	add	r2, sp, #72	; 0x48
 80a926c:	2125      	movs	r1, #37	; 0x25
 80a926e:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 80a9272:	e00a      	b.n	80a928a <strftime+0x4d6>
 80a9274:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 80a9278:	e000      	b.n	80a927c <strftime+0x4c8>
 80a927a:	aa0a      	add	r2, sp, #40	; 0x28
 80a927c:	2125      	movs	r1, #37	; 0x25
 80a927e:	7011      	strb	r1, [r2, #0]
 80a9280:	f1ba 0f00 	cmp.w	sl, #0
 80a9284:	d101      	bne.n	80a928a <strftime+0x4d6>
 80a9286:	1c50      	adds	r0, r2, #1
 80a9288:	e002      	b.n	80a9290 <strftime+0x4dc>
 80a928a:	2130      	movs	r1, #48	; 0x30
 80a928c:	1c90      	adds	r0, r2, #2
 80a928e:	7051      	strb	r1, [r2, #1]
 80a9290:	491c      	ldr	r1, [pc, #112]	; (80a9304 <strftime+0x550>)
 80a9292:	9307      	str	r3, [sp, #28]
 80a9294:	f7ff fd0a 	bl	80a8cac <strcpy>
 80a9298:	9b07      	ldr	r3, [sp, #28]
 80a929a:	9300      	str	r3, [sp, #0]
 80a929c:	e1ac      	b.n	80a95f8 <strftime+0x844>
 80a929e:	4a14      	ldr	r2, [pc, #80]	; (80a92f0 <strftime+0x53c>)
 80a92a0:	4912      	ldr	r1, [pc, #72]	; (80a92ec <strftime+0x538>)
 80a92a2:	68ab      	ldr	r3, [r5, #8]
 80a92a4:	286b      	cmp	r0, #107	; 0x6b
 80a92a6:	bf08      	it	eq
 80a92a8:	460a      	moveq	r2, r1
 80a92aa:	e6e4      	b.n	80a9076 <strftime+0x2c2>
 80a92ac:	68a9      	ldr	r1, [r5, #8]
 80a92ae:	230c      	movs	r3, #12
 80a92b0:	b131      	cbz	r1, 80a92c0 <strftime+0x50c>
 80a92b2:	4299      	cmp	r1, r3
 80a92b4:	bf16      	itet	ne
 80a92b6:	fb91 f2f3 	sdivne	r2, r1, r3
 80a92ba:	460b      	moveq	r3, r1
 80a92bc:	fb03 1312 	mlsne	r3, r3, r2, r1
 80a92c0:	4a0a      	ldr	r2, [pc, #40]	; (80a92ec <strftime+0x538>)
 80a92c2:	490b      	ldr	r1, [pc, #44]	; (80a92f0 <strftime+0x53c>)
 80a92c4:	2849      	cmp	r0, #73	; 0x49
 80a92c6:	bf08      	it	eq
 80a92c8:	460a      	moveq	r2, r1
 80a92ca:	e6d4      	b.n	80a9076 <strftime+0x2c2>
 80a92cc:	69eb      	ldr	r3, [r5, #28]
 80a92ce:	4a0e      	ldr	r2, [pc, #56]	; (80a9308 <strftime+0x554>)
 80a92d0:	3301      	adds	r3, #1
 80a92d2:	e6d0      	b.n	80a9076 <strftime+0x2c2>
 80a92d4:	fffff894 	.word	0xfffff894
 80a92d8:	080aea1f 	.word	0x080aea1f
 80a92dc:	080ae498 	.word	0x080ae498
 80a92e0:	080aea10 	.word	0x080aea10
 80a92e4:	080aea17 	.word	0x080aea17
 80a92e8:	080abbb0 	.word	0x080abbb0
 80a92ec:	080aea21 	.word	0x080aea21
 80a92f0:	080aea2f 	.word	0x080aea2f
 80a92f4:	080aea25 	.word	0x080aea25
 80a92f8:	080aea34 	.word	0x080aea34
 80a92fc:	080aea38 	.word	0x080aea38
 80a9300:	fffff895 	.word	0xfffff895
 80a9304:	080aea40 	.word	0x080aea40
 80a9308:	080aea44 	.word	0x080aea44
 80a930c:	692b      	ldr	r3, [r5, #16]
 80a930e:	3301      	adds	r3, #1
 80a9310:	e13c      	b.n	80a958c <strftime+0x7d8>
 80a9312:	686b      	ldr	r3, [r5, #4]
 80a9314:	e13a      	b.n	80a958c <strftime+0x7d8>
 80a9316:	9b02      	ldr	r3, [sp, #8]
 80a9318:	429c      	cmp	r4, r3
 80a931a:	f080 81f5 	bcs.w	80a9708 <strftime+0x954>
 80a931e:	230a      	movs	r3, #10
 80a9320:	e1e5      	b.n	80a96ee <strftime+0x93a>
 80a9322:	68ab      	ldr	r3, [r5, #8]
 80a9324:	9a03      	ldr	r2, [sp, #12]
 80a9326:	2b0b      	cmp	r3, #11
 80a9328:	bfcc      	ite	gt
 80a932a:	23a4      	movgt	r3, #164	; 0xa4
 80a932c:	23a0      	movle	r3, #160	; 0xa0
 80a932e:	4413      	add	r3, r2
 80a9330:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80a9334:	4640      	mov	r0, r8
 80a9336:	f000 f9f1 	bl	80a971c <strlen>
 80a933a:	4642      	mov	r2, r8
 80a933c:	4bb1      	ldr	r3, [pc, #708]	; (80a9604 <strftime+0x850>)
 80a933e:	1939      	adds	r1, r7, r4
 80a9340:	f8d3 e000 	ldr.w	lr, [r3]
 80a9344:	4420      	add	r0, r4
 80a9346:	4284      	cmp	r4, r0
 80a9348:	f000 81d3 	beq.w	80a96f2 <strftime+0x93e>
 80a934c:	9b02      	ldr	r3, [sp, #8]
 80a934e:	429c      	cmp	r4, r3
 80a9350:	f080 81da 	bcs.w	80a9708 <strftime+0x954>
 80a9354:	f899 3000 	ldrb.w	r3, [r9]
 80a9358:	3401      	adds	r4, #1
 80a935a:	2b50      	cmp	r3, #80	; 0x50
 80a935c:	7813      	ldrb	r3, [r2, #0]
 80a935e:	d10a      	bne.n	80a9376 <strftime+0x5c2>
 80a9360:	eb0e 0c03 	add.w	ip, lr, r3
 80a9364:	f89c c001 	ldrb.w	ip, [ip, #1]
 80a9368:	f00c 0c03 	and.w	ip, ip, #3
 80a936c:	f1bc 0f01 	cmp.w	ip, #1
 80a9370:	bf08      	it	eq
 80a9372:	3320      	addeq	r3, #32
 80a9374:	b2db      	uxtb	r3, r3
 80a9376:	f801 3b01 	strb.w	r3, [r1], #1
 80a937a:	3201      	adds	r2, #1
 80a937c:	e7e3      	b.n	80a9346 <strftime+0x592>
 80a937e:	686b      	ldr	r3, [r5, #4]
 80a9380:	4aa1      	ldr	r2, [pc, #644]	; (80a9608 <strftime+0x854>)
 80a9382:	9300      	str	r3, [sp, #0]
 80a9384:	68ab      	ldr	r3, [r5, #8]
 80a9386:	e139      	b.n	80a95fc <strftime+0x848>
 80a9388:	6a2b      	ldr	r3, [r5, #32]
 80a938a:	2b00      	cmp	r3, #0
 80a938c:	db17      	blt.n	80a93be <strftime+0x60a>
 80a938e:	f001 f9ef 	bl	80aa770 <__tz_lock>
 80a9392:	9b06      	ldr	r3, [sp, #24]
 80a9394:	b91b      	cbnz	r3, 80a939e <strftime+0x5ea>
 80a9396:	f001 f9ed 	bl	80aa774 <_tzset_unlocked>
 80a939a:	2301      	movs	r3, #1
 80a939c:	9306      	str	r3, [sp, #24]
 80a939e:	f001 fed5 	bl	80ab14c <__gettzinfo>
 80a93a2:	6a2b      	ldr	r3, [r5, #32]
 80a93a4:	221c      	movs	r2, #28
 80a93a6:	2b00      	cmp	r3, #0
 80a93a8:	bfd4      	ite	le
 80a93aa:	2300      	movle	r3, #0
 80a93ac:	2301      	movgt	r3, #1
 80a93ae:	fb02 0003 	mla	r0, r2, r3, r0
 80a93b2:	6a03      	ldr	r3, [r0, #32]
 80a93b4:	f1c3 0800 	rsb	r8, r3, #0
 80a93b8:	f001 f9db 	bl	80aa772 <__tz_unlock>
 80a93bc:	e001      	b.n	80a93c2 <strftime+0x60e>
 80a93be:	f04f 0800 	mov.w	r8, #0
 80a93c2:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80a93c6:	ebc4 0c06 	rsb	ip, r4, r6
 80a93ca:	4670      	mov	r0, lr
 80a93cc:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 80a93d0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80a93d4:	f141 33ff 	adc.w	r3, r1, #4294967295
 80a93d8:	2a00      	cmp	r2, #0
 80a93da:	f173 0b00 	sbcs.w	fp, r3, #0
 80a93de:	eb07 0a04 	add.w	sl, r7, r4
 80a93e2:	da03      	bge.n	80a93ec <strftime+0x638>
 80a93e4:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 80a93e8:	f141 33ff 	adc.w	r3, r1, #4294967295
 80a93ec:	0891      	lsrs	r1, r2, #2
 80a93ee:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 80a93f2:	109b      	asrs	r3, r3, #2
 80a93f4:	9104      	str	r1, [sp, #16]
 80a93f6:	9305      	str	r3, [sp, #20]
 80a93f8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80a93fc:	2364      	movs	r3, #100	; 0x64
 80a93fe:	fb91 f1f3 	sdiv	r1, r1, r3
 80a9402:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a9406:	1a52      	subs	r2, r2, r1
 80a9408:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 80a940c:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 80a9410:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a9414:	fb90 f1f1 	sdiv	r1, r0, r1
 80a9418:	1852      	adds	r2, r2, r1
 80a941a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a941e:	f240 116d 	movw	r1, #365	; 0x16d
 80a9422:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 80a9426:	fb01 fe0e 	mul.w	lr, r1, lr
 80a942a:	69e9      	ldr	r1, [r5, #28]
 80a942c:	eb12 020e 	adds.w	r2, r2, lr
 80a9430:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 80a9434:	1852      	adds	r2, r2, r1
 80a9436:	f04f 0e18 	mov.w	lr, #24
 80a943a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a943e:	fba2 010e 	umull	r0, r1, r2, lr
 80a9442:	fb0e 1103 	mla	r1, lr, r3, r1
 80a9446:	68ab      	ldr	r3, [r5, #8]
 80a9448:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 80a944c:	18c0      	adds	r0, r0, r3
 80a944e:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a9452:	fba0 230e 	umull	r2, r3, r0, lr
 80a9456:	fb0e 3301 	mla	r3, lr, r1, r3
 80a945a:	6869      	ldr	r1, [r5, #4]
 80a945c:	1852      	adds	r2, r2, r1
 80a945e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a9462:	fba2 010e 	umull	r0, r1, r2, lr
 80a9466:	fb0e 1103 	mla	r1, lr, r3, r1
 80a946a:	682b      	ldr	r3, [r5, #0]
 80a946c:	4a67      	ldr	r2, [pc, #412]	; (80a960c <strftime+0x858>)
 80a946e:	18c0      	adds	r0, r0, r3
 80a9470:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a9474:	ebb0 0008 	subs.w	r0, r0, r8
 80a9478:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 80a947c:	e9cd 0100 	strd	r0, r1, [sp]
 80a9480:	4661      	mov	r1, ip
 80a9482:	4650      	mov	r0, sl
 80a9484:	f7fa feb6 	bl	80a41f4 <sniprintf>
 80a9488:	e5f9      	b.n	80a907e <strftime+0x2ca>
 80a948a:	682b      	ldr	r3, [r5, #0]
 80a948c:	e07e      	b.n	80a958c <strftime+0x7d8>
 80a948e:	9b02      	ldr	r3, [sp, #8]
 80a9490:	429c      	cmp	r4, r3
 80a9492:	f080 8139 	bcs.w	80a9708 <strftime+0x954>
 80a9496:	2309      	movs	r3, #9
 80a9498:	e129      	b.n	80a96ee <strftime+0x93a>
 80a949a:	682b      	ldr	r3, [r5, #0]
 80a949c:	4a5c      	ldr	r2, [pc, #368]	; (80a9610 <strftime+0x85c>)
 80a949e:	9301      	str	r3, [sp, #4]
 80a94a0:	686b      	ldr	r3, [r5, #4]
 80a94a2:	9300      	str	r3, [sp, #0]
 80a94a4:	68ab      	ldr	r3, [r5, #8]
 80a94a6:	1b31      	subs	r1, r6, r4
 80a94a8:	1938      	adds	r0, r7, r4
 80a94aa:	e60e      	b.n	80a90ca <strftime+0x316>
 80a94ac:	9b02      	ldr	r3, [sp, #8]
 80a94ae:	429c      	cmp	r4, r3
 80a94b0:	f080 812a 	bcs.w	80a9708 <strftime+0x954>
 80a94b4:	69ab      	ldr	r3, [r5, #24]
 80a94b6:	1c62      	adds	r2, r4, #1
 80a94b8:	b90b      	cbnz	r3, 80a94be <strftime+0x70a>
 80a94ba:	2337      	movs	r3, #55	; 0x37
 80a94bc:	e000      	b.n	80a94c0 <strftime+0x70c>
 80a94be:	3330      	adds	r3, #48	; 0x30
 80a94c0:	553b      	strb	r3, [r7, r4]
 80a94c2:	4614      	mov	r4, r2
 80a94c4:	e115      	b.n	80a96f2 <strftime+0x93e>
 80a94c6:	69eb      	ldr	r3, [r5, #28]
 80a94c8:	69aa      	ldr	r2, [r5, #24]
 80a94ca:	3307      	adds	r3, #7
 80a94cc:	1a9b      	subs	r3, r3, r2
 80a94ce:	2207      	movs	r2, #7
 80a94d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80a94d4:	e05a      	b.n	80a958c <strftime+0x7d8>
 80a94d6:	4628      	mov	r0, r5
 80a94d8:	f7ff fc0b 	bl	80a8cf2 <iso_year_adjust>
 80a94dc:	69aa      	ldr	r2, [r5, #24]
 80a94de:	b10a      	cbz	r2, 80a94e4 <strftime+0x730>
 80a94e0:	1e53      	subs	r3, r2, #1
 80a94e2:	e000      	b.n	80a94e6 <strftime+0x732>
 80a94e4:	2306      	movs	r3, #6
 80a94e6:	2800      	cmp	r0, #0
 80a94e8:	dc2f      	bgt.n	80a954a <strftime+0x796>
 80a94ea:	69ea      	ldr	r2, [r5, #28]
 80a94ec:	d101      	bne.n	80a94f2 <strftime+0x73e>
 80a94ee:	320a      	adds	r2, #10
 80a94f0:	e03b      	b.n	80a956a <strftime+0x7b6>
 80a94f2:	f240 716b 	movw	r1, #1899	; 0x76b
 80a94f6:	1a9a      	subs	r2, r3, r2
 80a94f8:	696b      	ldr	r3, [r5, #20]
 80a94fa:	2b00      	cmp	r3, #0
 80a94fc:	bfb4      	ite	lt
 80a94fe:	4608      	movlt	r0, r1
 80a9500:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 80a9504:	4418      	add	r0, r3
 80a9506:	0781      	lsls	r1, r0, #30
 80a9508:	d107      	bne.n	80a951a <strftime+0x766>
 80a950a:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a950e:	4601      	mov	r1, r0
 80a9510:	fb90 f0fe 	sdiv	r0, r0, lr
 80a9514:	fb0e 1110 	mls	r1, lr, r0, r1
 80a9518:	b981      	cbnz	r1, 80a953c <strftime+0x788>
 80a951a:	f240 716b 	movw	r1, #1899	; 0x76b
 80a951e:	2b00      	cmp	r3, #0
 80a9520:	bfa8      	it	ge
 80a9522:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 80a9526:	4419      	add	r1, r3
 80a9528:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a952c:	fb91 f0f3 	sdiv	r0, r1, r3
 80a9530:	fb03 1110 	mls	r1, r3, r0, r1
 80a9534:	fab1 f181 	clz	r1, r1
 80a9538:	0949      	lsrs	r1, r1, #5
 80a953a:	e000      	b.n	80a953e <strftime+0x78a>
 80a953c:	2101      	movs	r1, #1
 80a953e:	1a52      	subs	r2, r2, r1
 80a9540:	2a05      	cmp	r2, #5
 80a9542:	bfb4      	ite	lt
 80a9544:	2335      	movlt	r3, #53	; 0x35
 80a9546:	2334      	movge	r3, #52	; 0x34
 80a9548:	e020      	b.n	80a958c <strftime+0x7d8>
 80a954a:	2301      	movs	r3, #1
 80a954c:	e01e      	b.n	80a958c <strftime+0x7d8>
 80a954e:	9b02      	ldr	r3, [sp, #8]
 80a9550:	429c      	cmp	r4, r3
 80a9552:	f080 80d9 	bcs.w	80a9708 <strftime+0x954>
 80a9556:	69ab      	ldr	r3, [r5, #24]
 80a9558:	3330      	adds	r3, #48	; 0x30
 80a955a:	e0c8      	b.n	80a96ee <strftime+0x93a>
 80a955c:	69aa      	ldr	r2, [r5, #24]
 80a955e:	b10a      	cbz	r2, 80a9564 <strftime+0x7b0>
 80a9560:	1e53      	subs	r3, r2, #1
 80a9562:	e000      	b.n	80a9566 <strftime+0x7b2>
 80a9564:	2306      	movs	r3, #6
 80a9566:	69ea      	ldr	r2, [r5, #28]
 80a9568:	3207      	adds	r2, #7
 80a956a:	1ad2      	subs	r2, r2, r3
 80a956c:	2307      	movs	r3, #7
 80a956e:	fb92 f3f3 	sdiv	r3, r2, r3
 80a9572:	e00b      	b.n	80a958c <strftime+0x7d8>
 80a9574:	6968      	ldr	r0, [r5, #20]
 80a9576:	2800      	cmp	r0, #0
 80a9578:	da03      	bge.n	80a9582 <strftime+0x7ce>
 80a957a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a957e:	f001 fa7f 	bl	80aaa80 <abs>
 80a9582:	2364      	movs	r3, #100	; 0x64
 80a9584:	fb90 f2f3 	sdiv	r2, r0, r3
 80a9588:	fb02 0313 	mls	r3, r2, r3, r0
 80a958c:	4a21      	ldr	r2, [pc, #132]	; (80a9614 <strftime+0x860>)
 80a958e:	e572      	b.n	80a9076 <strftime+0x2c2>
 80a9590:	696b      	ldr	r3, [r5, #20]
 80a9592:	4a21      	ldr	r2, [pc, #132]	; (80a9618 <strftime+0x864>)
 80a9594:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 80a9598:	4293      	cmp	r3, r2
 80a959a:	da05      	bge.n	80a95a8 <strftime+0x7f4>
 80a959c:	232d      	movs	r3, #45	; 0x2d
 80a959e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a95a2:	f1cb 0b00 	rsb	fp, fp, #0
 80a95a6:	e008      	b.n	80a95ba <strftime+0x806>
 80a95a8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a95ac:	d10d      	bne.n	80a95ca <strftime+0x816>
 80a95ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80a95b2:	459b      	cmp	fp, r3
 80a95b4:	d911      	bls.n	80a95da <strftime+0x826>
 80a95b6:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80a95ba:	f1b8 0f00 	cmp.w	r8, #0
 80a95be:	d001      	beq.n	80a95c4 <strftime+0x810>
 80a95c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80a95c4:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 80a95c8:	e000      	b.n	80a95cc <strftime+0x818>
 80a95ca:	ab0a      	add	r3, sp, #40	; 0x28
 80a95cc:	2225      	movs	r2, #37	; 0x25
 80a95ce:	701a      	strb	r2, [r3, #0]
 80a95d0:	f1ba 0f00 	cmp.w	sl, #0
 80a95d4:	d108      	bne.n	80a95e8 <strftime+0x834>
 80a95d6:	1c58      	adds	r0, r3, #1
 80a95d8:	e009      	b.n	80a95ee <strftime+0x83a>
 80a95da:	f1b8 0f00 	cmp.w	r8, #0
 80a95de:	d1f4      	bne.n	80a95ca <strftime+0x816>
 80a95e0:	2325      	movs	r3, #37	; 0x25
 80a95e2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a95e6:	ab0a      	add	r3, sp, #40	; 0x28
 80a95e8:	2230      	movs	r2, #48	; 0x30
 80a95ea:	1c98      	adds	r0, r3, #2
 80a95ec:	705a      	strb	r2, [r3, #1]
 80a95ee:	490b      	ldr	r1, [pc, #44]	; (80a961c <strftime+0x868>)
 80a95f0:	f7ff fb5c 	bl	80a8cac <strcpy>
 80a95f4:	f8cd b000 	str.w	fp, [sp]
 80a95f8:	4643      	mov	r3, r8
 80a95fa:	aa0a      	add	r2, sp, #40	; 0x28
 80a95fc:	1b31      	subs	r1, r6, r4
 80a95fe:	1938      	adds	r0, r7, r4
 80a9600:	e03f      	b.n	80a9682 <strftime+0x8ce>
 80a9602:	bf00      	nop
 80a9604:	20000090 	.word	0x20000090
 80a9608:	080aea53 	.word	0x080aea53
 80a960c:	080aea49 	.word	0x080aea49
 80a9610:	080aea4e 	.word	0x080aea4e
 80a9614:	080aea2f 	.word	0x080aea2f
 80a9618:	fffff894 	.word	0xfffff894
 80a961c:	080aea40 	.word	0x080aea40
 80a9620:	6a2b      	ldr	r3, [r5, #32]
 80a9622:	2b00      	cmp	r3, #0
 80a9624:	db65      	blt.n	80a96f2 <strftime+0x93e>
 80a9626:	f001 f8a3 	bl	80aa770 <__tz_lock>
 80a962a:	9b06      	ldr	r3, [sp, #24]
 80a962c:	b91b      	cbnz	r3, 80a9636 <strftime+0x882>
 80a962e:	f001 f8a1 	bl	80aa774 <_tzset_unlocked>
 80a9632:	2301      	movs	r3, #1
 80a9634:	9306      	str	r3, [sp, #24]
 80a9636:	f001 fd89 	bl	80ab14c <__gettzinfo>
 80a963a:	6a2b      	ldr	r3, [r5, #32]
 80a963c:	221c      	movs	r2, #28
 80a963e:	2b00      	cmp	r3, #0
 80a9640:	bfd4      	ite	le
 80a9642:	2300      	movle	r3, #0
 80a9644:	2301      	movgt	r3, #1
 80a9646:	fb02 0003 	mla	r0, r2, r3, r0
 80a964a:	6a03      	ldr	r3, [r0, #32]
 80a964c:	eb07 0a04 	add.w	sl, r7, r4
 80a9650:	f1c3 0800 	rsb	r8, r3, #0
 80a9654:	f001 f88d 	bl	80aa772 <__tz_unlock>
 80a9658:	233c      	movs	r3, #60	; 0x3c
 80a965a:	fb98 f0f3 	sdiv	r0, r8, r3
 80a965e:	9307      	str	r3, [sp, #28]
 80a9660:	f001 fe0e 	bl	80ab280 <labs>
 80a9664:	9b07      	ldr	r3, [sp, #28]
 80a9666:	ebc4 0b06 	rsb	fp, r4, r6
 80a966a:	fb90 f2f3 	sdiv	r2, r0, r3
 80a966e:	fb02 0013 	mls	r0, r2, r3, r0
 80a9672:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a9676:	9000      	str	r0, [sp, #0]
 80a9678:	fb98 f3f3 	sdiv	r3, r8, r3
 80a967c:	4659      	mov	r1, fp
 80a967e:	4650      	mov	r0, sl
 80a9680:	4a24      	ldr	r2, [pc, #144]	; (80a9714 <strftime+0x960>)
 80a9682:	f7fa fdb7 	bl	80a41f4 <sniprintf>
 80a9686:	e4fa      	b.n	80a907e <strftime+0x2ca>
 80a9688:	4404      	add	r4, r0
 80a968a:	42a6      	cmp	r6, r4
 80a968c:	d831      	bhi.n	80a96f2 <strftime+0x93e>
 80a968e:	e03b      	b.n	80a9708 <strftime+0x954>
 80a9690:	6a2b      	ldr	r3, [r5, #32]
 80a9692:	2b00      	cmp	r3, #0
 80a9694:	db2d      	blt.n	80a96f2 <strftime+0x93e>
 80a9696:	f001 f86b 	bl	80aa770 <__tz_lock>
 80a969a:	9b06      	ldr	r3, [sp, #24]
 80a969c:	b91b      	cbnz	r3, 80a96a6 <strftime+0x8f2>
 80a969e:	f001 f869 	bl	80aa774 <_tzset_unlocked>
 80a96a2:	2301      	movs	r3, #1
 80a96a4:	9306      	str	r3, [sp, #24]
 80a96a6:	6a2b      	ldr	r3, [r5, #32]
 80a96a8:	4a1b      	ldr	r2, [pc, #108]	; (80a9718 <strftime+0x964>)
 80a96aa:	2b00      	cmp	r3, #0
 80a96ac:	bfd4      	ite	le
 80a96ae:	2300      	movle	r3, #0
 80a96b0:	2301      	movgt	r3, #1
 80a96b2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a96b6:	4640      	mov	r0, r8
 80a96b8:	f000 f830 	bl	80a971c <strlen>
 80a96bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80a96c0:	193b      	adds	r3, r7, r4
 80a96c2:	4420      	add	r0, r4
 80a96c4:	4284      	cmp	r4, r0
 80a96c6:	d00b      	beq.n	80a96e0 <strftime+0x92c>
 80a96c8:	9a02      	ldr	r2, [sp, #8]
 80a96ca:	4294      	cmp	r4, r2
 80a96cc:	d205      	bcs.n	80a96da <strftime+0x926>
 80a96ce:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a96d2:	3401      	adds	r4, #1
 80a96d4:	f803 2b01 	strb.w	r2, [r3], #1
 80a96d8:	e7f4      	b.n	80a96c4 <strftime+0x910>
 80a96da:	f001 f84a 	bl	80aa772 <__tz_unlock>
 80a96de:	e013      	b.n	80a9708 <strftime+0x954>
 80a96e0:	f001 f847 	bl	80aa772 <__tz_unlock>
 80a96e4:	e005      	b.n	80a96f2 <strftime+0x93e>
 80a96e6:	9b02      	ldr	r3, [sp, #8]
 80a96e8:	429c      	cmp	r4, r3
 80a96ea:	d20d      	bcs.n	80a9708 <strftime+0x954>
 80a96ec:	2325      	movs	r3, #37	; 0x25
 80a96ee:	553b      	strb	r3, [r7, r4]
 80a96f0:	3401      	adds	r4, #1
 80a96f2:	f899 3000 	ldrb.w	r3, [r9]
 80a96f6:	b11b      	cbz	r3, 80a9700 <strftime+0x94c>
 80a96f8:	f109 0901 	add.w	r9, r9, #1
 80a96fc:	f7ff bb69 	b.w	80a8dd2 <strftime+0x1e>
 80a9700:	b126      	cbz	r6, 80a970c <strftime+0x958>
 80a9702:	2300      	movs	r3, #0
 80a9704:	553b      	strb	r3, [r7, r4]
 80a9706:	e001      	b.n	80a970c <strftime+0x958>
 80a9708:	2000      	movs	r0, #0
 80a970a:	e000      	b.n	80a970e <strftime+0x95a>
 80a970c:	4620      	mov	r0, r4
 80a970e:	b013      	add	sp, #76	; 0x4c
 80a9710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a9714:	080aea5d 	.word	0x080aea5d
 80a9718:	20000130 	.word	0x20000130

080a971c <strlen>:
 80a971c:	4603      	mov	r3, r0
 80a971e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a9722:	2a00      	cmp	r2, #0
 80a9724:	d1fb      	bne.n	80a971e <strlen+0x2>
 80a9726:	1a18      	subs	r0, r3, r0
 80a9728:	3801      	subs	r0, #1
 80a972a:	4770      	bx	lr

080a972c <strncmp>:
 80a972c:	b530      	push	{r4, r5, lr}
 80a972e:	b182      	cbz	r2, 80a9752 <strncmp+0x26>
 80a9730:	1e45      	subs	r5, r0, #1
 80a9732:	3901      	subs	r1, #1
 80a9734:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a9738:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a973c:	42a3      	cmp	r3, r4
 80a973e:	d106      	bne.n	80a974e <strncmp+0x22>
 80a9740:	43ec      	mvns	r4, r5
 80a9742:	4414      	add	r4, r2
 80a9744:	42e0      	cmn	r0, r4
 80a9746:	d001      	beq.n	80a974c <strncmp+0x20>
 80a9748:	2b00      	cmp	r3, #0
 80a974a:	d1f3      	bne.n	80a9734 <strncmp+0x8>
 80a974c:	461c      	mov	r4, r3
 80a974e:	1b18      	subs	r0, r3, r4
 80a9750:	bd30      	pop	{r4, r5, pc}
 80a9752:	4610      	mov	r0, r2
 80a9754:	bd30      	pop	{r4, r5, pc}

080a9756 <strrchr>:
 80a9756:	b538      	push	{r3, r4, r5, lr}
 80a9758:	4603      	mov	r3, r0
 80a975a:	460d      	mov	r5, r1
 80a975c:	b141      	cbz	r1, 80a9770 <strrchr+0x1a>
 80a975e:	2400      	movs	r4, #0
 80a9760:	4629      	mov	r1, r5
 80a9762:	4618      	mov	r0, r3
 80a9764:	f7ff fa80 	bl	80a8c68 <strchr>
 80a9768:	b130      	cbz	r0, 80a9778 <strrchr+0x22>
 80a976a:	1c43      	adds	r3, r0, #1
 80a976c:	4604      	mov	r4, r0
 80a976e:	e7f7      	b.n	80a9760 <strrchr+0xa>
 80a9770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a9774:	f7ff ba78 	b.w	80a8c68 <strchr>
 80a9778:	4620      	mov	r0, r4
 80a977a:	bd38      	pop	{r3, r4, r5, pc}

080a977c <sulp>:
 80a977c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a9780:	460f      	mov	r7, r1
 80a9782:	4690      	mov	r8, r2
 80a9784:	f002 f846 	bl	80ab814 <__ulp>
 80a9788:	4604      	mov	r4, r0
 80a978a:	460d      	mov	r5, r1
 80a978c:	f1b8 0f00 	cmp.w	r8, #0
 80a9790:	d011      	beq.n	80a97b6 <sulp+0x3a>
 80a9792:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80a9796:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a979a:	2b00      	cmp	r3, #0
 80a979c:	dd0b      	ble.n	80a97b6 <sulp+0x3a>
 80a979e:	051b      	lsls	r3, r3, #20
 80a97a0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80a97a4:	2400      	movs	r4, #0
 80a97a6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80a97aa:	4622      	mov	r2, r4
 80a97ac:	462b      	mov	r3, r5
 80a97ae:	f7fe f873 	bl	80a7898 <__aeabi_dmul>
 80a97b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a97b6:	4620      	mov	r0, r4
 80a97b8:	4629      	mov	r1, r5
 80a97ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a97c0 <_strtod_r>:
 80a97c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a97c4:	4682      	mov	sl, r0
 80a97c6:	460c      	mov	r4, r1
 80a97c8:	b09d      	sub	sp, #116	; 0x74
 80a97ca:	2300      	movs	r3, #0
 80a97cc:	9213      	str	r2, [sp, #76]	; 0x4c
 80a97ce:	9318      	str	r3, [sp, #96]	; 0x60
 80a97d0:	f04f 0800 	mov.w	r8, #0
 80a97d4:	f04f 0900 	mov.w	r9, #0
 80a97d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80a97da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a97dc:	781a      	ldrb	r2, [r3, #0]
 80a97de:	2a0d      	cmp	r2, #13
 80a97e0:	d805      	bhi.n	80a97ee <_strtod_r+0x2e>
 80a97e2:	2a09      	cmp	r2, #9
 80a97e4:	d213      	bcs.n	80a980e <_strtod_r+0x4e>
 80a97e6:	2a00      	cmp	r2, #0
 80a97e8:	f000 81ad 	beq.w	80a9b46 <_strtod_r+0x386>
 80a97ec:	e012      	b.n	80a9814 <_strtod_r+0x54>
 80a97ee:	2a2b      	cmp	r2, #43	; 0x2b
 80a97f0:	d004      	beq.n	80a97fc <_strtod_r+0x3c>
 80a97f2:	2a2d      	cmp	r2, #45	; 0x2d
 80a97f4:	d004      	beq.n	80a9800 <_strtod_r+0x40>
 80a97f6:	2a20      	cmp	r2, #32
 80a97f8:	d10c      	bne.n	80a9814 <_strtod_r+0x54>
 80a97fa:	e008      	b.n	80a980e <_strtod_r+0x4e>
 80a97fc:	2200      	movs	r2, #0
 80a97fe:	e000      	b.n	80a9802 <_strtod_r+0x42>
 80a9800:	2201      	movs	r2, #1
 80a9802:	920c      	str	r2, [sp, #48]	; 0x30
 80a9804:	1c5a      	adds	r2, r3, #1
 80a9806:	9217      	str	r2, [sp, #92]	; 0x5c
 80a9808:	785b      	ldrb	r3, [r3, #1]
 80a980a:	b92b      	cbnz	r3, 80a9818 <_strtod_r+0x58>
 80a980c:	e19b      	b.n	80a9b46 <_strtod_r+0x386>
 80a980e:	3301      	adds	r3, #1
 80a9810:	9317      	str	r3, [sp, #92]	; 0x5c
 80a9812:	e7e2      	b.n	80a97da <_strtod_r+0x1a>
 80a9814:	2300      	movs	r3, #0
 80a9816:	930c      	str	r3, [sp, #48]	; 0x30
 80a9818:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a981a:	782b      	ldrb	r3, [r5, #0]
 80a981c:	2b30      	cmp	r3, #48	; 0x30
 80a981e:	d15c      	bne.n	80a98da <_strtod_r+0x11a>
 80a9820:	786b      	ldrb	r3, [r5, #1]
 80a9822:	2b58      	cmp	r3, #88	; 0x58
 80a9824:	d001      	beq.n	80a982a <_strtod_r+0x6a>
 80a9826:	2b78      	cmp	r3, #120	; 0x78
 80a9828:	d14c      	bne.n	80a98c4 <_strtod_r+0x104>
 80a982a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80a982c:	4aa8      	ldr	r2, [pc, #672]	; (80a9ad0 <_strtod_r+0x310>)
 80a982e:	9301      	str	r3, [sp, #4]
 80a9830:	ab18      	add	r3, sp, #96	; 0x60
 80a9832:	9300      	str	r3, [sp, #0]
 80a9834:	a917      	add	r1, sp, #92	; 0x5c
 80a9836:	ab19      	add	r3, sp, #100	; 0x64
 80a9838:	4650      	mov	r0, sl
 80a983a:	f001 f970 	bl	80aab1e <__gethex>
 80a983e:	f010 0607 	ands.w	r6, r0, #7
 80a9842:	4604      	mov	r4, r0
 80a9844:	f000 8585 	beq.w	80aa352 <_strtod_r+0xb92>
 80a9848:	2e06      	cmp	r6, #6
 80a984a:	d105      	bne.n	80a9858 <_strtod_r+0x98>
 80a984c:	3501      	adds	r5, #1
 80a984e:	2300      	movs	r3, #0
 80a9850:	9517      	str	r5, [sp, #92]	; 0x5c
 80a9852:	930c      	str	r3, [sp, #48]	; 0x30
 80a9854:	f000 bd7d 	b.w	80aa352 <_strtod_r+0xb92>
 80a9858:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a985a:	b13a      	cbz	r2, 80a986c <_strtod_r+0xac>
 80a985c:	2135      	movs	r1, #53	; 0x35
 80a985e:	a81a      	add	r0, sp, #104	; 0x68
 80a9860:	f002 f8bf 	bl	80ab9e2 <__copybits>
 80a9864:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a9866:	4650      	mov	r0, sl
 80a9868:	f001 fd43 	bl	80ab2f2 <_Bfree>
 80a986c:	2e06      	cmp	r6, #6
 80a986e:	d822      	bhi.n	80a98b6 <_strtod_r+0xf6>
 80a9870:	e8df f006 	tbb	[pc, r6]
 80a9874:	18080d04 	.word	0x18080d04
 80a9878:	0d1d      	.short	0x0d1d
 80a987a:	04          	.byte	0x04
 80a987b:	00          	.byte	0x00
 80a987c:	f04f 0900 	mov.w	r9, #0
 80a9880:	46c8      	mov	r8, r9
 80a9882:	e018      	b.n	80a98b6 <_strtod_r+0xf6>
 80a9884:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a9888:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 80a988c:	e013      	b.n	80a98b6 <_strtod_r+0xf6>
 80a988e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a9890:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80a9892:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80a9896:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80a989a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a989e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80a98a2:	e008      	b.n	80a98b6 <_strtod_r+0xf6>
 80a98a4:	f8df 922c 	ldr.w	r9, [pc, #556]	; 80a9ad4 <_strtod_r+0x314>
 80a98a8:	f04f 0800 	mov.w	r8, #0
 80a98ac:	e003      	b.n	80a98b6 <_strtod_r+0xf6>
 80a98ae:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80a98b2:	f04f 38ff 	mov.w	r8, #4294967295
 80a98b6:	0721      	lsls	r1, r4, #28
 80a98b8:	f140 854b 	bpl.w	80aa352 <_strtod_r+0xb92>
 80a98bc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80a98c0:	f000 bd47 	b.w	80aa352 <_strtod_r+0xb92>
 80a98c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a98c6:	1c5a      	adds	r2, r3, #1
 80a98c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80a98ca:	785b      	ldrb	r3, [r3, #1]
 80a98cc:	2b30      	cmp	r3, #48	; 0x30
 80a98ce:	d0f9      	beq.n	80a98c4 <_strtod_r+0x104>
 80a98d0:	2b00      	cmp	r3, #0
 80a98d2:	f000 853e 	beq.w	80aa352 <_strtod_r+0xb92>
 80a98d6:	2301      	movs	r3, #1
 80a98d8:	e000      	b.n	80a98dc <_strtod_r+0x11c>
 80a98da:	2300      	movs	r3, #0
 80a98dc:	9305      	str	r3, [sp, #20]
 80a98de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a98e0:	220a      	movs	r2, #10
 80a98e2:	9306      	str	r3, [sp, #24]
 80a98e4:	2300      	movs	r3, #0
 80a98e6:	469b      	mov	fp, r3
 80a98e8:	9302      	str	r3, [sp, #8]
 80a98ea:	9304      	str	r3, [sp, #16]
 80a98ec:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80a98ee:	782e      	ldrb	r6, [r5, #0]
 80a98f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80a98f4:	b2d9      	uxtb	r1, r3
 80a98f6:	2909      	cmp	r1, #9
 80a98f8:	d811      	bhi.n	80a991e <_strtod_r+0x15e>
 80a98fa:	f1bb 0f08 	cmp.w	fp, #8
 80a98fe:	bfd5      	itete	le
 80a9900:	9904      	ldrle	r1, [sp, #16]
 80a9902:	9902      	ldrgt	r1, [sp, #8]
 80a9904:	fb02 3301 	mlale	r3, r2, r1, r3
 80a9908:	fb02 3301 	mlagt	r3, r2, r1, r3
 80a990c:	f105 0501 	add.w	r5, r5, #1
 80a9910:	bfd4      	ite	le
 80a9912:	9304      	strle	r3, [sp, #16]
 80a9914:	9302      	strgt	r3, [sp, #8]
 80a9916:	f10b 0b01 	add.w	fp, fp, #1
 80a991a:	9517      	str	r5, [sp, #92]	; 0x5c
 80a991c:	e7e6      	b.n	80a98ec <_strtod_r+0x12c>
 80a991e:	4650      	mov	r0, sl
 80a9920:	f7ff f8f0 	bl	80a8b04 <_localeconv_r>
 80a9924:	6807      	ldr	r7, [r0, #0]
 80a9926:	4650      	mov	r0, sl
 80a9928:	f7ff f8ec 	bl	80a8b04 <_localeconv_r>
 80a992c:	6800      	ldr	r0, [r0, #0]
 80a992e:	f7ff fef5 	bl	80a971c <strlen>
 80a9932:	4639      	mov	r1, r7
 80a9934:	4602      	mov	r2, r0
 80a9936:	4628      	mov	r0, r5
 80a9938:	f7ff fef8 	bl	80a972c <strncmp>
 80a993c:	4607      	mov	r7, r0
 80a993e:	b128      	cbz	r0, 80a994c <_strtod_r+0x18c>
 80a9940:	2000      	movs	r0, #0
 80a9942:	4633      	mov	r3, r6
 80a9944:	465d      	mov	r5, fp
 80a9946:	4602      	mov	r2, r0
 80a9948:	4601      	mov	r1, r0
 80a994a:	e05a      	b.n	80a9a02 <_strtod_r+0x242>
 80a994c:	4650      	mov	r0, sl
 80a994e:	f7ff f8d9 	bl	80a8b04 <_localeconv_r>
 80a9952:	6800      	ldr	r0, [r0, #0]
 80a9954:	f7ff fee2 	bl	80a971c <strlen>
 80a9958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a995a:	181a      	adds	r2, r3, r0
 80a995c:	9217      	str	r2, [sp, #92]	; 0x5c
 80a995e:	5c1b      	ldrb	r3, [r3, r0]
 80a9960:	f1bb 0f00 	cmp.w	fp, #0
 80a9964:	d145      	bne.n	80a99f2 <_strtod_r+0x232>
 80a9966:	4658      	mov	r0, fp
 80a9968:	2b30      	cmp	r3, #48	; 0x30
 80a996a:	d105      	bne.n	80a9978 <_strtod_r+0x1b8>
 80a996c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a996e:	3001      	adds	r0, #1
 80a9970:	1c5a      	adds	r2, r3, #1
 80a9972:	9217      	str	r2, [sp, #92]	; 0x5c
 80a9974:	785b      	ldrb	r3, [r3, #1]
 80a9976:	e7f7      	b.n	80a9968 <_strtod_r+0x1a8>
 80a9978:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80a997c:	2a08      	cmp	r2, #8
 80a997e:	d846      	bhi.n	80a9a0e <_strtod_r+0x24e>
 80a9980:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80a9982:	9206      	str	r2, [sp, #24]
 80a9984:	4602      	mov	r2, r0
 80a9986:	2000      	movs	r0, #0
 80a9988:	4605      	mov	r5, r0
 80a998a:	3b30      	subs	r3, #48	; 0x30
 80a998c:	f100 0101 	add.w	r1, r0, #1
 80a9990:	d029      	beq.n	80a99e6 <_strtod_r+0x226>
 80a9992:	440a      	add	r2, r1
 80a9994:	4629      	mov	r1, r5
 80a9996:	eb05 0c00 	add.w	ip, r5, r0
 80a999a:	260a      	movs	r6, #10
 80a999c:	4561      	cmp	r1, ip
 80a999e:	d00f      	beq.n	80a99c0 <_strtod_r+0x200>
 80a99a0:	3101      	adds	r1, #1
 80a99a2:	f101 3eff 	add.w	lr, r1, #4294967295
 80a99a6:	f1be 0f08 	cmp.w	lr, #8
 80a99aa:	dc03      	bgt.n	80a99b4 <_strtod_r+0x1f4>
 80a99ac:	9f04      	ldr	r7, [sp, #16]
 80a99ae:	4377      	muls	r7, r6
 80a99b0:	9704      	str	r7, [sp, #16]
 80a99b2:	e7f3      	b.n	80a999c <_strtod_r+0x1dc>
 80a99b4:	2910      	cmp	r1, #16
 80a99b6:	bfde      	ittt	le
 80a99b8:	9f02      	ldrle	r7, [sp, #8]
 80a99ba:	4377      	mulle	r7, r6
 80a99bc:	9702      	strle	r7, [sp, #8]
 80a99be:	e7ed      	b.n	80a999c <_strtod_r+0x1dc>
 80a99c0:	4428      	add	r0, r5
 80a99c2:	2808      	cmp	r0, #8
 80a99c4:	f100 0501 	add.w	r5, r0, #1
 80a99c8:	dc05      	bgt.n	80a99d6 <_strtod_r+0x216>
 80a99ca:	9804      	ldr	r0, [sp, #16]
 80a99cc:	210a      	movs	r1, #10
 80a99ce:	fb01 3300 	mla	r3, r1, r0, r3
 80a99d2:	9304      	str	r3, [sp, #16]
 80a99d4:	e006      	b.n	80a99e4 <_strtod_r+0x224>
 80a99d6:	2d10      	cmp	r5, #16
 80a99d8:	bfdf      	itttt	le
 80a99da:	9802      	ldrle	r0, [sp, #8]
 80a99dc:	210a      	movle	r1, #10
 80a99de:	fb01 3300 	mlale	r3, r1, r0, r3
 80a99e2:	9302      	strle	r3, [sp, #8]
 80a99e4:	2100      	movs	r1, #0
 80a99e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a99e8:	1c58      	adds	r0, r3, #1
 80a99ea:	9017      	str	r0, [sp, #92]	; 0x5c
 80a99ec:	785b      	ldrb	r3, [r3, #1]
 80a99ee:	4608      	mov	r0, r1
 80a99f0:	e002      	b.n	80a99f8 <_strtod_r+0x238>
 80a99f2:	465d      	mov	r5, fp
 80a99f4:	4638      	mov	r0, r7
 80a99f6:	463a      	mov	r2, r7
 80a99f8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80a99fc:	2909      	cmp	r1, #9
 80a99fe:	d9c4      	bls.n	80a998a <_strtod_r+0x1ca>
 80a9a00:	2101      	movs	r1, #1
 80a9a02:	2b65      	cmp	r3, #101	; 0x65
 80a9a04:	d001      	beq.n	80a9a0a <_strtod_r+0x24a>
 80a9a06:	2b45      	cmp	r3, #69	; 0x45
 80a9a08:	d14f      	bne.n	80a9aaa <_strtod_r+0x2ea>
 80a9a0a:	b96d      	cbnz	r5, 80a9a28 <_strtod_r+0x268>
 80a9a0c:	e004      	b.n	80a9a18 <_strtod_r+0x258>
 80a9a0e:	2b65      	cmp	r3, #101	; 0x65
 80a9a10:	f040 84ad 	bne.w	80aa36e <_strtod_r+0xbae>
 80a9a14:	2200      	movs	r2, #0
 80a9a16:	2101      	movs	r1, #1
 80a9a18:	b928      	cbnz	r0, 80a9a26 <_strtod_r+0x266>
 80a9a1a:	9b05      	ldr	r3, [sp, #20]
 80a9a1c:	2b00      	cmp	r3, #0
 80a9a1e:	f000 8092 	beq.w	80a9b46 <_strtod_r+0x386>
 80a9a22:	4605      	mov	r5, r0
 80a9a24:	e000      	b.n	80a9a28 <_strtod_r+0x268>
 80a9a26:	2500      	movs	r5, #0
 80a9a28:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80a9a2a:	1c63      	adds	r3, r4, #1
 80a9a2c:	9317      	str	r3, [sp, #92]	; 0x5c
 80a9a2e:	7863      	ldrb	r3, [r4, #1]
 80a9a30:	2b2b      	cmp	r3, #43	; 0x2b
 80a9a32:	d006      	beq.n	80a9a42 <_strtod_r+0x282>
 80a9a34:	2b2d      	cmp	r3, #45	; 0x2d
 80a9a36:	d002      	beq.n	80a9a3e <_strtod_r+0x27e>
 80a9a38:	2600      	movs	r6, #0
 80a9a3a:	9603      	str	r6, [sp, #12]
 80a9a3c:	e006      	b.n	80a9a4c <_strtod_r+0x28c>
 80a9a3e:	2301      	movs	r3, #1
 80a9a40:	e000      	b.n	80a9a44 <_strtod_r+0x284>
 80a9a42:	2300      	movs	r3, #0
 80a9a44:	9303      	str	r3, [sp, #12]
 80a9a46:	1ca3      	adds	r3, r4, #2
 80a9a48:	9317      	str	r3, [sp, #92]	; 0x5c
 80a9a4a:	78a3      	ldrb	r3, [r4, #2]
 80a9a4c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80a9a50:	2e09      	cmp	r6, #9
 80a9a52:	d829      	bhi.n	80a9aa8 <_strtod_r+0x2e8>
 80a9a54:	2b30      	cmp	r3, #48	; 0x30
 80a9a56:	d104      	bne.n	80a9a62 <_strtod_r+0x2a2>
 80a9a58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a9a5a:	1c5e      	adds	r6, r3, #1
 80a9a5c:	9617      	str	r6, [sp, #92]	; 0x5c
 80a9a5e:	785b      	ldrb	r3, [r3, #1]
 80a9a60:	e7f8      	b.n	80a9a54 <_strtod_r+0x294>
 80a9a62:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80a9a66:	2e08      	cmp	r6, #8
 80a9a68:	d81f      	bhi.n	80a9aaa <_strtod_r+0x2ea>
 80a9a6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80a9a6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a9a70:	461f      	mov	r7, r3
 80a9a72:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a9a74:	1c5e      	adds	r6, r3, #1
 80a9a76:	9617      	str	r6, [sp, #92]	; 0x5c
 80a9a78:	785b      	ldrb	r3, [r3, #1]
 80a9a7a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80a9a7e:	f1bc 0f09 	cmp.w	ip, #9
 80a9a82:	d805      	bhi.n	80a9a90 <_strtod_r+0x2d0>
 80a9a84:	260a      	movs	r6, #10
 80a9a86:	fb06 3e0e 	mla	lr, r6, lr, r3
 80a9a8a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80a9a8e:	e7f0      	b.n	80a9a72 <_strtod_r+0x2b2>
 80a9a90:	1bf6      	subs	r6, r6, r7
 80a9a92:	2e08      	cmp	r6, #8
 80a9a94:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80a9a98:	dc02      	bgt.n	80a9aa0 <_strtod_r+0x2e0>
 80a9a9a:	4576      	cmp	r6, lr
 80a9a9c:	bfa8      	it	ge
 80a9a9e:	4676      	movge	r6, lr
 80a9aa0:	9f03      	ldr	r7, [sp, #12]
 80a9aa2:	b11f      	cbz	r7, 80a9aac <_strtod_r+0x2ec>
 80a9aa4:	4276      	negs	r6, r6
 80a9aa6:	e001      	b.n	80a9aac <_strtod_r+0x2ec>
 80a9aa8:	9417      	str	r4, [sp, #92]	; 0x5c
 80a9aaa:	2600      	movs	r6, #0
 80a9aac:	2d00      	cmp	r5, #0
 80a9aae:	d152      	bne.n	80a9b56 <_strtod_r+0x396>
 80a9ab0:	2800      	cmp	r0, #0
 80a9ab2:	f040 844e 	bne.w	80aa352 <_strtod_r+0xb92>
 80a9ab6:	9a05      	ldr	r2, [sp, #20]
 80a9ab8:	2a00      	cmp	r2, #0
 80a9aba:	f040 844a 	bne.w	80aa352 <_strtod_r+0xb92>
 80a9abe:	2900      	cmp	r1, #0
 80a9ac0:	d141      	bne.n	80a9b46 <_strtod_r+0x386>
 80a9ac2:	2b4e      	cmp	r3, #78	; 0x4e
 80a9ac4:	d020      	beq.n	80a9b08 <_strtod_r+0x348>
 80a9ac6:	dc07      	bgt.n	80a9ad8 <_strtod_r+0x318>
 80a9ac8:	2b49      	cmp	r3, #73	; 0x49
 80a9aca:	d00a      	beq.n	80a9ae2 <_strtod_r+0x322>
 80a9acc:	e03b      	b.n	80a9b46 <_strtod_r+0x386>
 80a9ace:	bf00      	nop
 80a9ad0:	080aea6c 	.word	0x080aea6c
 80a9ad4:	7ff00000 	.word	0x7ff00000
 80a9ad8:	2b69      	cmp	r3, #105	; 0x69
 80a9ada:	d002      	beq.n	80a9ae2 <_strtod_r+0x322>
 80a9adc:	2b6e      	cmp	r3, #110	; 0x6e
 80a9ade:	d013      	beq.n	80a9b08 <_strtod_r+0x348>
 80a9ae0:	e031      	b.n	80a9b46 <_strtod_r+0x386>
 80a9ae2:	49aa      	ldr	r1, [pc, #680]	; (80a9d8c <_strtod_r+0x5cc>)
 80a9ae4:	a817      	add	r0, sp, #92	; 0x5c
 80a9ae6:	f001 fa4b 	bl	80aaf80 <__match>
 80a9aea:	b360      	cbz	r0, 80a9b46 <_strtod_r+0x386>
 80a9aec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a9aee:	49a8      	ldr	r1, [pc, #672]	; (80a9d90 <_strtod_r+0x5d0>)
 80a9af0:	3b01      	subs	r3, #1
 80a9af2:	a817      	add	r0, sp, #92	; 0x5c
 80a9af4:	9317      	str	r3, [sp, #92]	; 0x5c
 80a9af6:	f001 fa43 	bl	80aaf80 <__match>
 80a9afa:	b910      	cbnz	r0, 80a9b02 <_strtod_r+0x342>
 80a9afc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a9afe:	3301      	adds	r3, #1
 80a9b00:	9317      	str	r3, [sp, #92]	; 0x5c
 80a9b02:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 80a9dac <_strtod_r+0x5ec>
 80a9b06:	e01a      	b.n	80a9b3e <_strtod_r+0x37e>
 80a9b08:	49a2      	ldr	r1, [pc, #648]	; (80a9d94 <_strtod_r+0x5d4>)
 80a9b0a:	a817      	add	r0, sp, #92	; 0x5c
 80a9b0c:	f001 fa38 	bl	80aaf80 <__match>
 80a9b10:	b1c8      	cbz	r0, 80a9b46 <_strtod_r+0x386>
 80a9b12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80a9b14:	781b      	ldrb	r3, [r3, #0]
 80a9b16:	2b28      	cmp	r3, #40	; 0x28
 80a9b18:	d10f      	bne.n	80a9b3a <_strtod_r+0x37a>
 80a9b1a:	aa1a      	add	r2, sp, #104	; 0x68
 80a9b1c:	499e      	ldr	r1, [pc, #632]	; (80a9d98 <_strtod_r+0x5d8>)
 80a9b1e:	a817      	add	r0, sp, #92	; 0x5c
 80a9b20:	f001 fa41 	bl	80aafa6 <__hexnan>
 80a9b24:	2805      	cmp	r0, #5
 80a9b26:	d108      	bne.n	80a9b3a <_strtod_r+0x37a>
 80a9b28:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80a9b2a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80a9b2e:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80a9b32:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80a9b36:	f000 bc0c 	b.w	80aa352 <_strtod_r+0xb92>
 80a9b3a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 80a9db0 <_strtod_r+0x5f0>
 80a9b3e:	f04f 0800 	mov.w	r8, #0
 80a9b42:	f000 bc06 	b.w	80aa352 <_strtod_r+0xb92>
 80a9b46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80a9b48:	9417      	str	r4, [sp, #92]	; 0x5c
 80a9b4a:	2b00      	cmp	r3, #0
 80a9b4c:	f000 840c 	beq.w	80aa368 <_strtod_r+0xba8>
 80a9b50:	2300      	movs	r3, #0
 80a9b52:	930c      	str	r3, [sp, #48]	; 0x30
 80a9b54:	e3ff      	b.n	80aa356 <_strtod_r+0xb96>
 80a9b56:	462c      	mov	r4, r5
 80a9b58:	f1bb 0f00 	cmp.w	fp, #0
 80a9b5c:	bf08      	it	eq
 80a9b5e:	46ab      	moveq	fp, r5
 80a9b60:	9804      	ldr	r0, [sp, #16]
 80a9b62:	2d10      	cmp	r5, #16
 80a9b64:	bfa8      	it	ge
 80a9b66:	2410      	movge	r4, #16
 80a9b68:	1ab7      	subs	r7, r6, r2
 80a9b6a:	f7fd fe1f 	bl	80a77ac <__aeabi_ui2d>
 80a9b6e:	2c09      	cmp	r4, #9
 80a9b70:	4680      	mov	r8, r0
 80a9b72:	4689      	mov	r9, r1
 80a9b74:	dd13      	ble.n	80a9b9e <_strtod_r+0x3de>
 80a9b76:	4b89      	ldr	r3, [pc, #548]	; (80a9d9c <_strtod_r+0x5dc>)
 80a9b78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80a9b7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80a9b80:	f7fd fe8a 	bl	80a7898 <__aeabi_dmul>
 80a9b84:	4680      	mov	r8, r0
 80a9b86:	9802      	ldr	r0, [sp, #8]
 80a9b88:	4689      	mov	r9, r1
 80a9b8a:	f7fd fe0f 	bl	80a77ac <__aeabi_ui2d>
 80a9b8e:	4602      	mov	r2, r0
 80a9b90:	460b      	mov	r3, r1
 80a9b92:	4640      	mov	r0, r8
 80a9b94:	4649      	mov	r1, r9
 80a9b96:	f7fd fccd 	bl	80a7534 <__adddf3>
 80a9b9a:	4680      	mov	r8, r0
 80a9b9c:	4689      	mov	r9, r1
 80a9b9e:	2d0f      	cmp	r5, #15
 80a9ba0:	dc33      	bgt.n	80a9c0a <_strtod_r+0x44a>
 80a9ba2:	2f00      	cmp	r7, #0
 80a9ba4:	f000 83d5 	beq.w	80aa352 <_strtod_r+0xb92>
 80a9ba8:	dd22      	ble.n	80a9bf0 <_strtod_r+0x430>
 80a9baa:	2f16      	cmp	r7, #22
 80a9bac:	dc07      	bgt.n	80a9bbe <_strtod_r+0x3fe>
 80a9bae:	4d7b      	ldr	r5, [pc, #492]	; (80a9d9c <_strtod_r+0x5dc>)
 80a9bb0:	4642      	mov	r2, r8
 80a9bb2:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 80a9bb6:	464b      	mov	r3, r9
 80a9bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a9bbc:	e013      	b.n	80a9be6 <_strtod_r+0x426>
 80a9bbe:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80a9bc2:	429f      	cmp	r7, r3
 80a9bc4:	dc21      	bgt.n	80a9c0a <_strtod_r+0x44a>
 80a9bc6:	4c75      	ldr	r4, [pc, #468]	; (80a9d9c <_strtod_r+0x5dc>)
 80a9bc8:	f1c5 050f 	rsb	r5, r5, #15
 80a9bcc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80a9bd0:	1b7d      	subs	r5, r7, r5
 80a9bd2:	4642      	mov	r2, r8
 80a9bd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a9bd8:	464b      	mov	r3, r9
 80a9bda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80a9bde:	f7fd fe5b 	bl	80a7898 <__aeabi_dmul>
 80a9be2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80a9be6:	f7fd fe57 	bl	80a7898 <__aeabi_dmul>
 80a9bea:	4680      	mov	r8, r0
 80a9bec:	4689      	mov	r9, r1
 80a9bee:	e3b0      	b.n	80aa352 <_strtod_r+0xb92>
 80a9bf0:	f117 0f16 	cmn.w	r7, #22
 80a9bf4:	db09      	blt.n	80a9c0a <_strtod_r+0x44a>
 80a9bf6:	4d69      	ldr	r5, [pc, #420]	; (80a9d9c <_strtod_r+0x5dc>)
 80a9bf8:	4640      	mov	r0, r8
 80a9bfa:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 80a9bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9c02:	4649      	mov	r1, r9
 80a9c04:	f7fd ff72 	bl	80a7aec <__aeabi_ddiv>
 80a9c08:	e7ef      	b.n	80a9bea <_strtod_r+0x42a>
 80a9c0a:	1b2c      	subs	r4, r5, r4
 80a9c0c:	443c      	add	r4, r7
 80a9c0e:	2c00      	cmp	r4, #0
 80a9c10:	dd5d      	ble.n	80a9cce <_strtod_r+0x50e>
 80a9c12:	f014 010f 	ands.w	r1, r4, #15
 80a9c16:	d00a      	beq.n	80a9c2e <_strtod_r+0x46e>
 80a9c18:	4b60      	ldr	r3, [pc, #384]	; (80a9d9c <_strtod_r+0x5dc>)
 80a9c1a:	4642      	mov	r2, r8
 80a9c1c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80a9c20:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a9c24:	464b      	mov	r3, r9
 80a9c26:	f7fd fe37 	bl	80a7898 <__aeabi_dmul>
 80a9c2a:	4680      	mov	r8, r0
 80a9c2c:	4689      	mov	r9, r1
 80a9c2e:	f034 040f 	bics.w	r4, r4, #15
 80a9c32:	f000 80c1 	beq.w	80a9db8 <_strtod_r+0x5f8>
 80a9c36:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80a9c3a:	dd0f      	ble.n	80a9c5c <_strtod_r+0x49c>
 80a9c3c:	f04f 0b00 	mov.w	fp, #0
 80a9c40:	f8cd b008 	str.w	fp, [sp, #8]
 80a9c44:	f8cd b014 	str.w	fp, [sp, #20]
 80a9c48:	f8cd b010 	str.w	fp, [sp, #16]
 80a9c4c:	2322      	movs	r3, #34	; 0x22
 80a9c4e:	f8ca 3000 	str.w	r3, [sl]
 80a9c52:	f8df 9158 	ldr.w	r9, [pc, #344]	; 80a9dac <_strtod_r+0x5ec>
 80a9c56:	f04f 0800 	mov.w	r8, #0
 80a9c5a:	e189      	b.n	80a9f70 <_strtod_r+0x7b0>
 80a9c5c:	4640      	mov	r0, r8
 80a9c5e:	4649      	mov	r1, r9
 80a9c60:	2300      	movs	r3, #0
 80a9c62:	4e4f      	ldr	r6, [pc, #316]	; (80a9da0 <_strtod_r+0x5e0>)
 80a9c64:	1124      	asrs	r4, r4, #4
 80a9c66:	9302      	str	r3, [sp, #8]
 80a9c68:	2c01      	cmp	r4, #1
 80a9c6a:	dd0c      	ble.n	80a9c86 <_strtod_r+0x4c6>
 80a9c6c:	07e2      	lsls	r2, r4, #31
 80a9c6e:	d504      	bpl.n	80a9c7a <_strtod_r+0x4ba>
 80a9c70:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a9c74:	f7fd fe10 	bl	80a7898 <__aeabi_dmul>
 80a9c78:	2301      	movs	r3, #1
 80a9c7a:	9a02      	ldr	r2, [sp, #8]
 80a9c7c:	1064      	asrs	r4, r4, #1
 80a9c7e:	3201      	adds	r2, #1
 80a9c80:	9202      	str	r2, [sp, #8]
 80a9c82:	3608      	adds	r6, #8
 80a9c84:	e7f0      	b.n	80a9c68 <_strtod_r+0x4a8>
 80a9c86:	b10b      	cbz	r3, 80a9c8c <_strtod_r+0x4cc>
 80a9c88:	4680      	mov	r8, r0
 80a9c8a:	4689      	mov	r9, r1
 80a9c8c:	4b44      	ldr	r3, [pc, #272]	; (80a9da0 <_strtod_r+0x5e0>)
 80a9c8e:	9a02      	ldr	r2, [sp, #8]
 80a9c90:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80a9c94:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 80a9c98:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a9c9c:	4642      	mov	r2, r8
 80a9c9e:	464b      	mov	r3, r9
 80a9ca0:	f7fd fdfa 	bl	80a7898 <__aeabi_dmul>
 80a9ca4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80a9ca8:	4689      	mov	r9, r1
 80a9caa:	460a      	mov	r2, r1
 80a9cac:	0d1b      	lsrs	r3, r3, #20
 80a9cae:	493d      	ldr	r1, [pc, #244]	; (80a9da4 <_strtod_r+0x5e4>)
 80a9cb0:	051b      	lsls	r3, r3, #20
 80a9cb2:	428b      	cmp	r3, r1
 80a9cb4:	4680      	mov	r8, r0
 80a9cb6:	d8c1      	bhi.n	80a9c3c <_strtod_r+0x47c>
 80a9cb8:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80a9cbc:	428b      	cmp	r3, r1
 80a9cbe:	bf86      	itte	hi
 80a9cc0:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 80a9db4 <_strtod_r+0x5f4>
 80a9cc4:	f04f 38ff 	movhi.w	r8, #4294967295
 80a9cc8:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80a9ccc:	e074      	b.n	80a9db8 <_strtod_r+0x5f8>
 80a9cce:	d073      	beq.n	80a9db8 <_strtod_r+0x5f8>
 80a9cd0:	4264      	negs	r4, r4
 80a9cd2:	f014 020f 	ands.w	r2, r4, #15
 80a9cd6:	d00a      	beq.n	80a9cee <_strtod_r+0x52e>
 80a9cd8:	4b30      	ldr	r3, [pc, #192]	; (80a9d9c <_strtod_r+0x5dc>)
 80a9cda:	4640      	mov	r0, r8
 80a9cdc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a9ce0:	4649      	mov	r1, r9
 80a9ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a9ce6:	f7fd ff01 	bl	80a7aec <__aeabi_ddiv>
 80a9cea:	4680      	mov	r8, r0
 80a9cec:	4689      	mov	r9, r1
 80a9cee:	1124      	asrs	r4, r4, #4
 80a9cf0:	d062      	beq.n	80a9db8 <_strtod_r+0x5f8>
 80a9cf2:	2c1f      	cmp	r4, #31
 80a9cf4:	dd08      	ble.n	80a9d08 <_strtod_r+0x548>
 80a9cf6:	f04f 0b00 	mov.w	fp, #0
 80a9cfa:	f8cd b008 	str.w	fp, [sp, #8]
 80a9cfe:	f8cd b014 	str.w	fp, [sp, #20]
 80a9d02:	f8cd b010 	str.w	fp, [sp, #16]
 80a9d06:	e12c      	b.n	80a9f62 <_strtod_r+0x7a2>
 80a9d08:	4640      	mov	r0, r8
 80a9d0a:	4649      	mov	r1, r9
 80a9d0c:	f014 0f10 	tst.w	r4, #16
 80a9d10:	bf0c      	ite	eq
 80a9d12:	2300      	moveq	r3, #0
 80a9d14:	236a      	movne	r3, #106	; 0x6a
 80a9d16:	4e24      	ldr	r6, [pc, #144]	; (80a9da8 <_strtod_r+0x5e8>)
 80a9d18:	9303      	str	r3, [sp, #12]
 80a9d1a:	2300      	movs	r3, #0
 80a9d1c:	2c00      	cmp	r4, #0
 80a9d1e:	dd09      	ble.n	80a9d34 <_strtod_r+0x574>
 80a9d20:	07e2      	lsls	r2, r4, #31
 80a9d22:	d504      	bpl.n	80a9d2e <_strtod_r+0x56e>
 80a9d24:	e9d6 2300 	ldrd	r2, r3, [r6]
 80a9d28:	f7fd fdb6 	bl	80a7898 <__aeabi_dmul>
 80a9d2c:	2301      	movs	r3, #1
 80a9d2e:	1064      	asrs	r4, r4, #1
 80a9d30:	3608      	adds	r6, #8
 80a9d32:	e7f3      	b.n	80a9d1c <_strtod_r+0x55c>
 80a9d34:	b10b      	cbz	r3, 80a9d3a <_strtod_r+0x57a>
 80a9d36:	4680      	mov	r8, r0
 80a9d38:	4689      	mov	r9, r1
 80a9d3a:	9b03      	ldr	r3, [sp, #12]
 80a9d3c:	b1eb      	cbz	r3, 80a9d7a <_strtod_r+0x5ba>
 80a9d3e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 80a9d42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80a9d46:	2b00      	cmp	r3, #0
 80a9d48:	4649      	mov	r1, r9
 80a9d4a:	dd16      	ble.n	80a9d7a <_strtod_r+0x5ba>
 80a9d4c:	2b1f      	cmp	r3, #31
 80a9d4e:	dd0e      	ble.n	80a9d6e <_strtod_r+0x5ae>
 80a9d50:	2b34      	cmp	r3, #52	; 0x34
 80a9d52:	bfde      	ittt	le
 80a9d54:	3b20      	suble	r3, #32
 80a9d56:	f04f 32ff 	movle.w	r2, #4294967295
 80a9d5a:	fa02 f303 	lslle.w	r3, r2, r3
 80a9d5e:	f04f 0800 	mov.w	r8, #0
 80a9d62:	bfcc      	ite	gt
 80a9d64:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80a9d68:	ea03 0901 	andle.w	r9, r3, r1
 80a9d6c:	e005      	b.n	80a9d7a <_strtod_r+0x5ba>
 80a9d6e:	f04f 32ff 	mov.w	r2, #4294967295
 80a9d72:	fa02 f303 	lsl.w	r3, r2, r3
 80a9d76:	ea03 0808 	and.w	r8, r3, r8
 80a9d7a:	2200      	movs	r2, #0
 80a9d7c:	2300      	movs	r3, #0
 80a9d7e:	4640      	mov	r0, r8
 80a9d80:	4649      	mov	r1, r9
 80a9d82:	f7fd fff1 	bl	80a7d68 <__aeabi_dcmpeq>
 80a9d86:	2800      	cmp	r0, #0
 80a9d88:	d1b5      	bne.n	80a9cf6 <_strtod_r+0x536>
 80a9d8a:	e017      	b.n	80a9dbc <_strtod_r+0x5fc>
 80a9d8c:	080ae507 	.word	0x080ae507
 80a9d90:	080aea80 	.word	0x080aea80
 80a9d94:	080aead1 	.word	0x080aead1
 80a9d98:	080aea88 	.word	0x080aea88
 80a9d9c:	080aed30 	.word	0x080aed30
 80a9da0:	080aedf8 	.word	0x080aedf8
 80a9da4:	7ca00000 	.word	0x7ca00000
 80a9da8:	080aeaa0 	.word	0x080aeaa0
 80a9dac:	7ff00000 	.word	0x7ff00000
 80a9db0:	fff80000 	.word	0xfff80000
 80a9db4:	7fefffff 	.word	0x7fefffff
 80a9db8:	2300      	movs	r3, #0
 80a9dba:	9303      	str	r3, [sp, #12]
 80a9dbc:	9b04      	ldr	r3, [sp, #16]
 80a9dbe:	465a      	mov	r2, fp
 80a9dc0:	9300      	str	r3, [sp, #0]
 80a9dc2:	9906      	ldr	r1, [sp, #24]
 80a9dc4:	462b      	mov	r3, r5
 80a9dc6:	4650      	mov	r0, sl
 80a9dc8:	f001 fae5 	bl	80ab396 <__s2b>
 80a9dcc:	9005      	str	r0, [sp, #20]
 80a9dce:	2800      	cmp	r0, #0
 80a9dd0:	f43f af34 	beq.w	80a9c3c <_strtod_r+0x47c>
 80a9dd4:	2f00      	cmp	r7, #0
 80a9dd6:	f1c7 0300 	rsb	r3, r7, #0
 80a9dda:	bfa8      	it	ge
 80a9ddc:	2300      	movge	r3, #0
 80a9dde:	930d      	str	r3, [sp, #52]	; 0x34
 80a9de0:	f04f 0b00 	mov.w	fp, #0
 80a9de4:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 80a9de8:	9312      	str	r3, [sp, #72]	; 0x48
 80a9dea:	f8cd b008 	str.w	fp, [sp, #8]
 80a9dee:	9b05      	ldr	r3, [sp, #20]
 80a9df0:	4650      	mov	r0, sl
 80a9df2:	6859      	ldr	r1, [r3, #4]
 80a9df4:	f001 fa48 	bl	80ab288 <_Balloc>
 80a9df8:	9004      	str	r0, [sp, #16]
 80a9dfa:	2800      	cmp	r0, #0
 80a9dfc:	f43f af26 	beq.w	80a9c4c <_strtod_r+0x48c>
 80a9e00:	9b05      	ldr	r3, [sp, #20]
 80a9e02:	300c      	adds	r0, #12
 80a9e04:	691a      	ldr	r2, [r3, #16]
 80a9e06:	f103 010c 	add.w	r1, r3, #12
 80a9e0a:	3202      	adds	r2, #2
 80a9e0c:	0092      	lsls	r2, r2, #2
 80a9e0e:	f7fe fe9a 	bl	80a8b46 <memcpy>
 80a9e12:	ab1a      	add	r3, sp, #104	; 0x68
 80a9e14:	9301      	str	r3, [sp, #4]
 80a9e16:	ab19      	add	r3, sp, #100	; 0x64
 80a9e18:	9300      	str	r3, [sp, #0]
 80a9e1a:	4642      	mov	r2, r8
 80a9e1c:	464b      	mov	r3, r9
 80a9e1e:	4650      	mov	r0, sl
 80a9e20:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80a9e24:	f001 fd67 	bl	80ab8f6 <__d2b>
 80a9e28:	9018      	str	r0, [sp, #96]	; 0x60
 80a9e2a:	2800      	cmp	r0, #0
 80a9e2c:	f43f af0e 	beq.w	80a9c4c <_strtod_r+0x48c>
 80a9e30:	2101      	movs	r1, #1
 80a9e32:	4650      	mov	r0, sl
 80a9e34:	f001 fb3a 	bl	80ab4ac <__i2b>
 80a9e38:	9002      	str	r0, [sp, #8]
 80a9e3a:	2800      	cmp	r0, #0
 80a9e3c:	f43f af06 	beq.w	80a9c4c <_strtod_r+0x48c>
 80a9e40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80a9e42:	9903      	ldr	r1, [sp, #12]
 80a9e44:	2b00      	cmp	r3, #0
 80a9e46:	bfac      	ite	ge
 80a9e48:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 80a9e4a:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80a9e4c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80a9e4e:	bfac      	ite	ge
 80a9e50:	18d6      	addge	r6, r2, r3
 80a9e52:	1ad2      	sublt	r2, r2, r3
 80a9e54:	eba3 0301 	sub.w	r3, r3, r1
 80a9e58:	4423      	add	r3, r4
 80a9e5a:	49b1      	ldr	r1, [pc, #708]	; (80aa120 <_strtod_r+0x960>)
 80a9e5c:	f103 33ff 	add.w	r3, r3, #4294967295
 80a9e60:	bfac      	ite	ge
 80a9e62:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 80a9e64:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 80a9e66:	428b      	cmp	r3, r1
 80a9e68:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 80a9e6c:	f280 8085 	bge.w	80a9f7a <_strtod_r+0x7ba>
 80a9e70:	1ac9      	subs	r1, r1, r3
 80a9e72:	291f      	cmp	r1, #31
 80a9e74:	bfc8      	it	gt
 80a9e76:	4dab      	ldrgt	r5, [pc, #684]	; (80aa124 <_strtod_r+0x964>)
 80a9e78:	f04f 0701 	mov.w	r7, #1
 80a9e7c:	bfd4      	ite	le
 80a9e7e:	fa07 f301 	lslle.w	r3, r7, r1
 80a9e82:	1aed      	subgt	r5, r5, r3
 80a9e84:	eba4 0401 	sub.w	r4, r4, r1
 80a9e88:	bfd9      	ittee	le
 80a9e8a:	9307      	strle	r3, [sp, #28]
 80a9e8c:	2500      	movle	r5, #0
 80a9e8e:	fa07 f505 	lslgt.w	r5, r7, r5
 80a9e92:	9707      	strgt	r7, [sp, #28]
 80a9e94:	1937      	adds	r7, r6, r4
 80a9e96:	9b03      	ldr	r3, [sp, #12]
 80a9e98:	42be      	cmp	r6, r7
 80a9e9a:	4414      	add	r4, r2
 80a9e9c:	441c      	add	r4, r3
 80a9e9e:	4633      	mov	r3, r6
 80a9ea0:	bfa8      	it	ge
 80a9ea2:	463b      	movge	r3, r7
 80a9ea4:	42a3      	cmp	r3, r4
 80a9ea6:	bfa8      	it	ge
 80a9ea8:	4623      	movge	r3, r4
 80a9eaa:	2b00      	cmp	r3, #0
 80a9eac:	bfc2      	ittt	gt
 80a9eae:	1aff      	subgt	r7, r7, r3
 80a9eb0:	1ae4      	subgt	r4, r4, r3
 80a9eb2:	1af6      	subgt	r6, r6, r3
 80a9eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a9eb6:	2b00      	cmp	r3, #0
 80a9eb8:	d163      	bne.n	80a9f82 <_strtod_r+0x7c2>
 80a9eba:	2f00      	cmp	r7, #0
 80a9ebc:	dc7a      	bgt.n	80a9fb4 <_strtod_r+0x7f4>
 80a9ebe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80a9ec0:	2b00      	cmp	r3, #0
 80a9ec2:	f040 8081 	bne.w	80a9fc8 <_strtod_r+0x808>
 80a9ec6:	2c00      	cmp	r4, #0
 80a9ec8:	f300 8088 	bgt.w	80a9fdc <_strtod_r+0x81c>
 80a9ecc:	2e00      	cmp	r6, #0
 80a9ece:	f300 808f 	bgt.w	80a9ff0 <_strtod_r+0x830>
 80a9ed2:	9a04      	ldr	r2, [sp, #16]
 80a9ed4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a9ed6:	4650      	mov	r0, sl
 80a9ed8:	f001 fc3d 	bl	80ab756 <__mdiff>
 80a9edc:	4683      	mov	fp, r0
 80a9ede:	2800      	cmp	r0, #0
 80a9ee0:	f43f aeb4 	beq.w	80a9c4c <_strtod_r+0x48c>
 80a9ee4:	68c3      	ldr	r3, [r0, #12]
 80a9ee6:	2400      	movs	r4, #0
 80a9ee8:	60c4      	str	r4, [r0, #12]
 80a9eea:	9902      	ldr	r1, [sp, #8]
 80a9eec:	9306      	str	r3, [sp, #24]
 80a9eee:	f001 fc16 	bl	80ab71e <__mcmp>
 80a9ef2:	42a0      	cmp	r0, r4
 80a9ef4:	f280 808b 	bge.w	80aa00e <_strtod_r+0x84e>
 80a9ef8:	9b06      	ldr	r3, [sp, #24]
 80a9efa:	2b00      	cmp	r3, #0
 80a9efc:	f040 8202 	bne.w	80aa304 <_strtod_r+0xb44>
 80a9f00:	f1b8 0f00 	cmp.w	r8, #0
 80a9f04:	f040 81fe 	bne.w	80aa304 <_strtod_r+0xb44>
 80a9f08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80a9f0c:	2b00      	cmp	r3, #0
 80a9f0e:	f040 81f9 	bne.w	80aa304 <_strtod_r+0xb44>
 80a9f12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a9f16:	0d1b      	lsrs	r3, r3, #20
 80a9f18:	051b      	lsls	r3, r3, #20
 80a9f1a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a9f1e:	f240 81f1 	bls.w	80aa304 <_strtod_r+0xb44>
 80a9f22:	f8db 3014 	ldr.w	r3, [fp, #20]
 80a9f26:	2b00      	cmp	r3, #0
 80a9f28:	d06c      	beq.n	80aa004 <_strtod_r+0x844>
 80a9f2a:	4659      	mov	r1, fp
 80a9f2c:	2201      	movs	r2, #1
 80a9f2e:	4650      	mov	r0, sl
 80a9f30:	f001 fba4 	bl	80ab67c <__lshift>
 80a9f34:	9902      	ldr	r1, [sp, #8]
 80a9f36:	4683      	mov	fp, r0
 80a9f38:	f001 fbf1 	bl	80ab71e <__mcmp>
 80a9f3c:	2800      	cmp	r0, #0
 80a9f3e:	f340 81e1 	ble.w	80aa304 <_strtod_r+0xb44>
 80a9f42:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80a9f46:	9a03      	ldr	r2, [sp, #12]
 80a9f48:	0d1b      	lsrs	r3, r3, #20
 80a9f4a:	051b      	lsls	r3, r3, #20
 80a9f4c:	2a00      	cmp	r2, #0
 80a9f4e:	f000 808d 	beq.w	80aa06c <_strtod_r+0x8ac>
 80a9f52:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80a9f56:	f300 8089 	bgt.w	80aa06c <_strtod_r+0x8ac>
 80a9f5a:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80a9f5e:	f300 81d3 	bgt.w	80aa308 <_strtod_r+0xb48>
 80a9f62:	2322      	movs	r3, #34	; 0x22
 80a9f64:	f04f 0800 	mov.w	r8, #0
 80a9f68:	f04f 0900 	mov.w	r9, #0
 80a9f6c:	f8ca 3000 	str.w	r3, [sl]
 80a9f70:	9b05      	ldr	r3, [sp, #20]
 80a9f72:	2b00      	cmp	r3, #0
 80a9f74:	f040 81d9 	bne.w	80aa32a <_strtod_r+0xb6a>
 80a9f78:	e1eb      	b.n	80aa352 <_strtod_r+0xb92>
 80a9f7a:	2301      	movs	r3, #1
 80a9f7c:	2500      	movs	r5, #0
 80a9f7e:	9307      	str	r3, [sp, #28]
 80a9f80:	e788      	b.n	80a9e94 <_strtod_r+0x6d4>
 80a9f82:	461a      	mov	r2, r3
 80a9f84:	9902      	ldr	r1, [sp, #8]
 80a9f86:	4650      	mov	r0, sl
 80a9f88:	f001 fb2a 	bl	80ab5e0 <__pow5mult>
 80a9f8c:	9002      	str	r0, [sp, #8]
 80a9f8e:	2800      	cmp	r0, #0
 80a9f90:	f43f ae5c 	beq.w	80a9c4c <_strtod_r+0x48c>
 80a9f94:	4601      	mov	r1, r0
 80a9f96:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80a9f98:	4650      	mov	r0, sl
 80a9f9a:	f001 fa90 	bl	80ab4be <__multiply>
 80a9f9e:	9006      	str	r0, [sp, #24]
 80a9fa0:	2800      	cmp	r0, #0
 80a9fa2:	f43f ae53 	beq.w	80a9c4c <_strtod_r+0x48c>
 80a9fa6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a9fa8:	4650      	mov	r0, sl
 80a9faa:	f001 f9a2 	bl	80ab2f2 <_Bfree>
 80a9fae:	9b06      	ldr	r3, [sp, #24]
 80a9fb0:	9318      	str	r3, [sp, #96]	; 0x60
 80a9fb2:	e782      	b.n	80a9eba <_strtod_r+0x6fa>
 80a9fb4:	463a      	mov	r2, r7
 80a9fb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80a9fb8:	4650      	mov	r0, sl
 80a9fba:	f001 fb5f 	bl	80ab67c <__lshift>
 80a9fbe:	9018      	str	r0, [sp, #96]	; 0x60
 80a9fc0:	2800      	cmp	r0, #0
 80a9fc2:	f47f af7c 	bne.w	80a9ebe <_strtod_r+0x6fe>
 80a9fc6:	e641      	b.n	80a9c4c <_strtod_r+0x48c>
 80a9fc8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80a9fca:	9904      	ldr	r1, [sp, #16]
 80a9fcc:	4650      	mov	r0, sl
 80a9fce:	f001 fb07 	bl	80ab5e0 <__pow5mult>
 80a9fd2:	9004      	str	r0, [sp, #16]
 80a9fd4:	2800      	cmp	r0, #0
 80a9fd6:	f47f af76 	bne.w	80a9ec6 <_strtod_r+0x706>
 80a9fda:	e637      	b.n	80a9c4c <_strtod_r+0x48c>
 80a9fdc:	4622      	mov	r2, r4
 80a9fde:	9904      	ldr	r1, [sp, #16]
 80a9fe0:	4650      	mov	r0, sl
 80a9fe2:	f001 fb4b 	bl	80ab67c <__lshift>
 80a9fe6:	9004      	str	r0, [sp, #16]
 80a9fe8:	2800      	cmp	r0, #0
 80a9fea:	f47f af6f 	bne.w	80a9ecc <_strtod_r+0x70c>
 80a9fee:	e62d      	b.n	80a9c4c <_strtod_r+0x48c>
 80a9ff0:	4632      	mov	r2, r6
 80a9ff2:	9902      	ldr	r1, [sp, #8]
 80a9ff4:	4650      	mov	r0, sl
 80a9ff6:	f001 fb41 	bl	80ab67c <__lshift>
 80a9ffa:	9002      	str	r0, [sp, #8]
 80a9ffc:	2800      	cmp	r0, #0
 80a9ffe:	f47f af68 	bne.w	80a9ed2 <_strtod_r+0x712>
 80aa002:	e623      	b.n	80a9c4c <_strtod_r+0x48c>
 80aa004:	f8db 3010 	ldr.w	r3, [fp, #16]
 80aa008:	2b01      	cmp	r3, #1
 80aa00a:	dc8e      	bgt.n	80a9f2a <_strtod_r+0x76a>
 80aa00c:	e17a      	b.n	80aa304 <_strtod_r+0xb44>
 80aa00e:	d161      	bne.n	80aa0d4 <_strtod_r+0x914>
 80aa010:	9a06      	ldr	r2, [sp, #24]
 80aa012:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80aa016:	b322      	cbz	r2, 80aa062 <_strtod_r+0x8a2>
 80aa018:	4943      	ldr	r1, [pc, #268]	; (80aa128 <_strtod_r+0x968>)
 80aa01a:	464a      	mov	r2, r9
 80aa01c:	428b      	cmp	r3, r1
 80aa01e:	d12e      	bne.n	80aa07e <_strtod_r+0x8be>
 80aa020:	9b03      	ldr	r3, [sp, #12]
 80aa022:	4641      	mov	r1, r8
 80aa024:	b163      	cbz	r3, 80aa040 <_strtod_r+0x880>
 80aa026:	4b41      	ldr	r3, [pc, #260]	; (80aa12c <_strtod_r+0x96c>)
 80aa028:	4013      	ands	r3, r2
 80aa02a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80aa02e:	d807      	bhi.n	80aa040 <_strtod_r+0x880>
 80aa030:	0d1b      	lsrs	r3, r3, #20
 80aa032:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80aa036:	f04f 30ff 	mov.w	r0, #4294967295
 80aa03a:	fa00 f303 	lsl.w	r3, r0, r3
 80aa03e:	e001      	b.n	80aa044 <_strtod_r+0x884>
 80aa040:	f04f 33ff 	mov.w	r3, #4294967295
 80aa044:	428b      	cmp	r3, r1
 80aa046:	d11a      	bne.n	80aa07e <_strtod_r+0x8be>
 80aa048:	4939      	ldr	r1, [pc, #228]	; (80aa130 <_strtod_r+0x970>)
 80aa04a:	428a      	cmp	r2, r1
 80aa04c:	d102      	bne.n	80aa054 <_strtod_r+0x894>
 80aa04e:	3301      	adds	r3, #1
 80aa050:	f43f adfc 	beq.w	80a9c4c <_strtod_r+0x48c>
 80aa054:	4b35      	ldr	r3, [pc, #212]	; (80aa12c <_strtod_r+0x96c>)
 80aa056:	f04f 0800 	mov.w	r8, #0
 80aa05a:	4013      	ands	r3, r2
 80aa05c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80aa060:	e150      	b.n	80aa304 <_strtod_r+0xb44>
 80aa062:	b963      	cbnz	r3, 80aa07e <_strtod_r+0x8be>
 80aa064:	f1b8 0f00 	cmp.w	r8, #0
 80aa068:	d109      	bne.n	80aa07e <_strtod_r+0x8be>
 80aa06a:	e76a      	b.n	80a9f42 <_strtod_r+0x782>
 80aa06c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80aa070:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80aa074:	f04f 38ff 	mov.w	r8, #4294967295
 80aa078:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80aa07c:	e142      	b.n	80aa304 <_strtod_r+0xb44>
 80aa07e:	b115      	cbz	r5, 80aa086 <_strtod_r+0x8c6>
 80aa080:	ea15 0f09 	tst.w	r5, r9
 80aa084:	e002      	b.n	80aa08c <_strtod_r+0x8cc>
 80aa086:	9b07      	ldr	r3, [sp, #28]
 80aa088:	ea13 0f08 	tst.w	r3, r8
 80aa08c:	f000 813a 	beq.w	80aa304 <_strtod_r+0xb44>
 80aa090:	9b06      	ldr	r3, [sp, #24]
 80aa092:	9a03      	ldr	r2, [sp, #12]
 80aa094:	4640      	mov	r0, r8
 80aa096:	4649      	mov	r1, r9
 80aa098:	b153      	cbz	r3, 80aa0b0 <_strtod_r+0x8f0>
 80aa09a:	f7ff fb6f 	bl	80a977c <sulp>
 80aa09e:	4602      	mov	r2, r0
 80aa0a0:	460b      	mov	r3, r1
 80aa0a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80aa0a6:	f7fd fa45 	bl	80a7534 <__adddf3>
 80aa0aa:	4680      	mov	r8, r0
 80aa0ac:	4689      	mov	r9, r1
 80aa0ae:	e129      	b.n	80aa304 <_strtod_r+0xb44>
 80aa0b0:	f7ff fb64 	bl	80a977c <sulp>
 80aa0b4:	4602      	mov	r2, r0
 80aa0b6:	460b      	mov	r3, r1
 80aa0b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80aa0bc:	f7fd fa38 	bl	80a7530 <__aeabi_dsub>
 80aa0c0:	2200      	movs	r2, #0
 80aa0c2:	2300      	movs	r3, #0
 80aa0c4:	4680      	mov	r8, r0
 80aa0c6:	4689      	mov	r9, r1
 80aa0c8:	f7fd fe4e 	bl	80a7d68 <__aeabi_dcmpeq>
 80aa0cc:	2800      	cmp	r0, #0
 80aa0ce:	f47f af48 	bne.w	80a9f62 <_strtod_r+0x7a2>
 80aa0d2:	e117      	b.n	80aa304 <_strtod_r+0xb44>
 80aa0d4:	9902      	ldr	r1, [sp, #8]
 80aa0d6:	4658      	mov	r0, fp
 80aa0d8:	f001 fc5b 	bl	80ab992 <__ratio>
 80aa0dc:	2200      	movs	r2, #0
 80aa0de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80aa0e2:	4606      	mov	r6, r0
 80aa0e4:	460f      	mov	r7, r1
 80aa0e6:	f7fd fe53 	bl	80a7d90 <__aeabi_dcmple>
 80aa0ea:	2800      	cmp	r0, #0
 80aa0ec:	d03f      	beq.n	80aa16e <_strtod_r+0x9ae>
 80aa0ee:	9b06      	ldr	r3, [sp, #24]
 80aa0f0:	b113      	cbz	r3, 80aa0f8 <_strtod_r+0x938>
 80aa0f2:	2600      	movs	r6, #0
 80aa0f4:	4f0f      	ldr	r7, [pc, #60]	; (80aa134 <_strtod_r+0x974>)
 80aa0f6:	e010      	b.n	80aa11a <_strtod_r+0x95a>
 80aa0f8:	f1b8 0f00 	cmp.w	r8, #0
 80aa0fc:	d103      	bne.n	80aa106 <_strtod_r+0x946>
 80aa0fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80aa102:	b93b      	cbnz	r3, 80aa114 <_strtod_r+0x954>
 80aa104:	e01a      	b.n	80aa13c <_strtod_r+0x97c>
 80aa106:	f1b8 0f01 	cmp.w	r8, #1
 80aa10a:	d103      	bne.n	80aa114 <_strtod_r+0x954>
 80aa10c:	f1b9 0f00 	cmp.w	r9, #0
 80aa110:	f43f af27 	beq.w	80a9f62 <_strtod_r+0x7a2>
 80aa114:	4f08      	ldr	r7, [pc, #32]	; (80aa138 <_strtod_r+0x978>)
 80aa116:	2600      	movs	r6, #0
 80aa118:	2400      	movs	r4, #0
 80aa11a:	4d06      	ldr	r5, [pc, #24]	; (80aa134 <_strtod_r+0x974>)
 80aa11c:	e03c      	b.n	80aa198 <_strtod_r+0x9d8>
 80aa11e:	bf00      	nop
 80aa120:	fffffc02 	.word	0xfffffc02
 80aa124:	fffffbe2 	.word	0xfffffbe2
 80aa128:	000fffff 	.word	0x000fffff
 80aa12c:	7ff00000 	.word	0x7ff00000
 80aa130:	7fefffff 	.word	0x7fefffff
 80aa134:	3ff00000 	.word	0x3ff00000
 80aa138:	bff00000 	.word	0xbff00000
 80aa13c:	2200      	movs	r2, #0
 80aa13e:	4b9a      	ldr	r3, [pc, #616]	; (80aa3a8 <_strtod_r+0xbe8>)
 80aa140:	4630      	mov	r0, r6
 80aa142:	4639      	mov	r1, r7
 80aa144:	f7fd fe1a 	bl	80a7d7c <__aeabi_dcmplt>
 80aa148:	b940      	cbnz	r0, 80aa15c <_strtod_r+0x99c>
 80aa14a:	2200      	movs	r2, #0
 80aa14c:	4b97      	ldr	r3, [pc, #604]	; (80aa3ac <_strtod_r+0xbec>)
 80aa14e:	4630      	mov	r0, r6
 80aa150:	4639      	mov	r1, r7
 80aa152:	f7fd fba1 	bl	80a7898 <__aeabi_dmul>
 80aa156:	4604      	mov	r4, r0
 80aa158:	460d      	mov	r5, r1
 80aa15a:	e001      	b.n	80aa160 <_strtod_r+0x9a0>
 80aa15c:	9c06      	ldr	r4, [sp, #24]
 80aa15e:	4d93      	ldr	r5, [pc, #588]	; (80aa3ac <_strtod_r+0xbec>)
 80aa160:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80aa164:	9414      	str	r4, [sp, #80]	; 0x50
 80aa166:	9315      	str	r3, [sp, #84]	; 0x54
 80aa168:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 80aa16c:	e014      	b.n	80aa198 <_strtod_r+0x9d8>
 80aa16e:	4b8f      	ldr	r3, [pc, #572]	; (80aa3ac <_strtod_r+0xbec>)
 80aa170:	2200      	movs	r2, #0
 80aa172:	4630      	mov	r0, r6
 80aa174:	4639      	mov	r1, r7
 80aa176:	f7fd fb8f 	bl	80a7898 <__aeabi_dmul>
 80aa17a:	9b06      	ldr	r3, [sp, #24]
 80aa17c:	4604      	mov	r4, r0
 80aa17e:	460d      	mov	r5, r1
 80aa180:	b923      	cbnz	r3, 80aa18c <_strtod_r+0x9cc>
 80aa182:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80aa186:	900e      	str	r0, [sp, #56]	; 0x38
 80aa188:	930f      	str	r3, [sp, #60]	; 0x3c
 80aa18a:	e003      	b.n	80aa194 <_strtod_r+0x9d4>
 80aa18c:	4602      	mov	r2, r0
 80aa18e:	460b      	mov	r3, r1
 80aa190:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80aa194:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80aa198:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80aa19c:	0d1b      	lsrs	r3, r3, #20
 80aa19e:	051b      	lsls	r3, r3, #20
 80aa1a0:	9307      	str	r3, [sp, #28]
 80aa1a2:	9a07      	ldr	r2, [sp, #28]
 80aa1a4:	4b82      	ldr	r3, [pc, #520]	; (80aa3b0 <_strtod_r+0xbf0>)
 80aa1a6:	429a      	cmp	r2, r3
 80aa1a8:	d12b      	bne.n	80aa202 <_strtod_r+0xa42>
 80aa1aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80aa1ae:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80aa1b2:	4640      	mov	r0, r8
 80aa1b4:	4649      	mov	r1, r9
 80aa1b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80aa1ba:	f001 fb2b 	bl	80ab814 <__ulp>
 80aa1be:	4602      	mov	r2, r0
 80aa1c0:	460b      	mov	r3, r1
 80aa1c2:	4630      	mov	r0, r6
 80aa1c4:	4639      	mov	r1, r7
 80aa1c6:	f7fd fb67 	bl	80a7898 <__aeabi_dmul>
 80aa1ca:	4642      	mov	r2, r8
 80aa1cc:	464b      	mov	r3, r9
 80aa1ce:	f7fd f9b1 	bl	80a7534 <__adddf3>
 80aa1d2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80aa1d6:	0d1b      	lsrs	r3, r3, #20
 80aa1d8:	4a76      	ldr	r2, [pc, #472]	; (80aa3b4 <_strtod_r+0xbf4>)
 80aa1da:	051b      	lsls	r3, r3, #20
 80aa1dc:	4293      	cmp	r3, r2
 80aa1de:	4680      	mov	r8, r0
 80aa1e0:	d90c      	bls.n	80aa1fc <_strtod_r+0xa3c>
 80aa1e2:	4b75      	ldr	r3, [pc, #468]	; (80aa3b8 <_strtod_r+0xbf8>)
 80aa1e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80aa1e6:	429a      	cmp	r2, r3
 80aa1e8:	d103      	bne.n	80aa1f2 <_strtod_r+0xa32>
 80aa1ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80aa1ec:	3301      	adds	r3, #1
 80aa1ee:	f43f ad2d 	beq.w	80a9c4c <_strtod_r+0x48c>
 80aa1f2:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80aa3b8 <_strtod_r+0xbf8>
 80aa1f6:	f04f 38ff 	mov.w	r8, #4294967295
 80aa1fa:	e072      	b.n	80aa2e2 <_strtod_r+0xb22>
 80aa1fc:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80aa200:	e039      	b.n	80aa276 <_strtod_r+0xab6>
 80aa202:	9b03      	ldr	r3, [sp, #12]
 80aa204:	b33b      	cbz	r3, 80aa256 <_strtod_r+0xa96>
 80aa206:	9b07      	ldr	r3, [sp, #28]
 80aa208:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80aa20c:	d823      	bhi.n	80aa256 <_strtod_r+0xa96>
 80aa20e:	a35e      	add	r3, pc, #376	; (adr r3, 80aa388 <_strtod_r+0xbc8>)
 80aa210:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa214:	4620      	mov	r0, r4
 80aa216:	4629      	mov	r1, r5
 80aa218:	f7fd fdba 	bl	80a7d90 <__aeabi_dcmple>
 80aa21c:	b1b8      	cbz	r0, 80aa24e <_strtod_r+0xa8e>
 80aa21e:	4629      	mov	r1, r5
 80aa220:	4620      	mov	r0, r4
 80aa222:	f7fd fe11 	bl	80a7e48 <__aeabi_d2uiz>
 80aa226:	2800      	cmp	r0, #0
 80aa228:	bf08      	it	eq
 80aa22a:	2001      	moveq	r0, #1
 80aa22c:	f7fd fabe 	bl	80a77ac <__aeabi_ui2d>
 80aa230:	9b06      	ldr	r3, [sp, #24]
 80aa232:	4604      	mov	r4, r0
 80aa234:	460d      	mov	r5, r1
 80aa236:	b923      	cbnz	r3, 80aa242 <_strtod_r+0xa82>
 80aa238:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80aa23c:	9010      	str	r0, [sp, #64]	; 0x40
 80aa23e:	9311      	str	r3, [sp, #68]	; 0x44
 80aa240:	e003      	b.n	80aa24a <_strtod_r+0xa8a>
 80aa242:	4602      	mov	r2, r0
 80aa244:	460b      	mov	r3, r1
 80aa246:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80aa24a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80aa24e:	9a07      	ldr	r2, [sp, #28]
 80aa250:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80aa254:	1a9f      	subs	r7, r3, r2
 80aa256:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80aa25a:	f001 fadb 	bl	80ab814 <__ulp>
 80aa25e:	4602      	mov	r2, r0
 80aa260:	460b      	mov	r3, r1
 80aa262:	4630      	mov	r0, r6
 80aa264:	4639      	mov	r1, r7
 80aa266:	f7fd fb17 	bl	80a7898 <__aeabi_dmul>
 80aa26a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80aa26e:	f7fd f961 	bl	80a7534 <__adddf3>
 80aa272:	4680      	mov	r8, r0
 80aa274:	4689      	mov	r9, r1
 80aa276:	9b03      	ldr	r3, [sp, #12]
 80aa278:	bb9b      	cbnz	r3, 80aa2e2 <_strtod_r+0xb22>
 80aa27a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80aa27e:	0d1b      	lsrs	r3, r3, #20
 80aa280:	9a07      	ldr	r2, [sp, #28]
 80aa282:	051b      	lsls	r3, r3, #20
 80aa284:	429a      	cmp	r2, r3
 80aa286:	464e      	mov	r6, r9
 80aa288:	d12b      	bne.n	80aa2e2 <_strtod_r+0xb22>
 80aa28a:	4629      	mov	r1, r5
 80aa28c:	4620      	mov	r0, r4
 80aa28e:	f7fd fdb3 	bl	80a7df8 <__aeabi_d2iz>
 80aa292:	f7fd fa9b 	bl	80a77cc <__aeabi_i2d>
 80aa296:	460b      	mov	r3, r1
 80aa298:	4602      	mov	r2, r0
 80aa29a:	4629      	mov	r1, r5
 80aa29c:	4620      	mov	r0, r4
 80aa29e:	f7fd f947 	bl	80a7530 <__aeabi_dsub>
 80aa2a2:	9b06      	ldr	r3, [sp, #24]
 80aa2a4:	4604      	mov	r4, r0
 80aa2a6:	460d      	mov	r5, r1
 80aa2a8:	b92b      	cbnz	r3, 80aa2b6 <_strtod_r+0xaf6>
 80aa2aa:	f1b8 0f00 	cmp.w	r8, #0
 80aa2ae:	d102      	bne.n	80aa2b6 <_strtod_r+0xaf6>
 80aa2b0:	f3c9 0613 	ubfx	r6, r9, #0, #20
 80aa2b4:	b17e      	cbz	r6, 80aa2d6 <_strtod_r+0xb16>
 80aa2b6:	a336      	add	r3, pc, #216	; (adr r3, 80aa390 <_strtod_r+0xbd0>)
 80aa2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa2bc:	4620      	mov	r0, r4
 80aa2be:	4629      	mov	r1, r5
 80aa2c0:	f7fd fd5c 	bl	80a7d7c <__aeabi_dcmplt>
 80aa2c4:	bb88      	cbnz	r0, 80aa32a <_strtod_r+0xb6a>
 80aa2c6:	a334      	add	r3, pc, #208	; (adr r3, 80aa398 <_strtod_r+0xbd8>)
 80aa2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa2cc:	4620      	mov	r0, r4
 80aa2ce:	4629      	mov	r1, r5
 80aa2d0:	f7fd fd72 	bl	80a7db8 <__aeabi_dcmpgt>
 80aa2d4:	e004      	b.n	80aa2e0 <_strtod_r+0xb20>
 80aa2d6:	a332      	add	r3, pc, #200	; (adr r3, 80aa3a0 <_strtod_r+0xbe0>)
 80aa2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80aa2dc:	f7fd fd4e 	bl	80a7d7c <__aeabi_dcmplt>
 80aa2e0:	bb18      	cbnz	r0, 80aa32a <_strtod_r+0xb6a>
 80aa2e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80aa2e4:	4650      	mov	r0, sl
 80aa2e6:	f001 f804 	bl	80ab2f2 <_Bfree>
 80aa2ea:	9904      	ldr	r1, [sp, #16]
 80aa2ec:	4650      	mov	r0, sl
 80aa2ee:	f001 f800 	bl	80ab2f2 <_Bfree>
 80aa2f2:	9902      	ldr	r1, [sp, #8]
 80aa2f4:	4650      	mov	r0, sl
 80aa2f6:	f000 fffc 	bl	80ab2f2 <_Bfree>
 80aa2fa:	4659      	mov	r1, fp
 80aa2fc:	4650      	mov	r0, sl
 80aa2fe:	f000 fff8 	bl	80ab2f2 <_Bfree>
 80aa302:	e574      	b.n	80a9dee <_strtod_r+0x62e>
 80aa304:	9b03      	ldr	r3, [sp, #12]
 80aa306:	b183      	cbz	r3, 80aa32a <_strtod_r+0xb6a>
 80aa308:	4b2c      	ldr	r3, [pc, #176]	; (80aa3bc <_strtod_r+0xbfc>)
 80aa30a:	4640      	mov	r0, r8
 80aa30c:	930b      	str	r3, [sp, #44]	; 0x2c
 80aa30e:	2300      	movs	r3, #0
 80aa310:	930a      	str	r3, [sp, #40]	; 0x28
 80aa312:	4649      	mov	r1, r9
 80aa314:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80aa318:	f7fd fabe 	bl	80a7898 <__aeabi_dmul>
 80aa31c:	4680      	mov	r8, r0
 80aa31e:	4689      	mov	r9, r1
 80aa320:	b919      	cbnz	r1, 80aa32a <_strtod_r+0xb6a>
 80aa322:	b910      	cbnz	r0, 80aa32a <_strtod_r+0xb6a>
 80aa324:	2322      	movs	r3, #34	; 0x22
 80aa326:	f8ca 3000 	str.w	r3, [sl]
 80aa32a:	9918      	ldr	r1, [sp, #96]	; 0x60
 80aa32c:	4650      	mov	r0, sl
 80aa32e:	f000 ffe0 	bl	80ab2f2 <_Bfree>
 80aa332:	9904      	ldr	r1, [sp, #16]
 80aa334:	4650      	mov	r0, sl
 80aa336:	f000 ffdc 	bl	80ab2f2 <_Bfree>
 80aa33a:	9902      	ldr	r1, [sp, #8]
 80aa33c:	4650      	mov	r0, sl
 80aa33e:	f000 ffd8 	bl	80ab2f2 <_Bfree>
 80aa342:	9905      	ldr	r1, [sp, #20]
 80aa344:	4650      	mov	r0, sl
 80aa346:	f000 ffd4 	bl	80ab2f2 <_Bfree>
 80aa34a:	4659      	mov	r1, fp
 80aa34c:	4650      	mov	r0, sl
 80aa34e:	f000 ffd0 	bl	80ab2f2 <_Bfree>
 80aa352:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80aa354:	b113      	cbz	r3, 80aa35c <_strtod_r+0xb9c>
 80aa356:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80aa358:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80aa35a:	6013      	str	r3, [r2, #0]
 80aa35c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80aa35e:	b11b      	cbz	r3, 80aa368 <_strtod_r+0xba8>
 80aa360:	4642      	mov	r2, r8
 80aa362:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80aa366:	e007      	b.n	80aa378 <_strtod_r+0xbb8>
 80aa368:	4642      	mov	r2, r8
 80aa36a:	464b      	mov	r3, r9
 80aa36c:	e004      	b.n	80aa378 <_strtod_r+0xbb8>
 80aa36e:	2500      	movs	r5, #0
 80aa370:	462a      	mov	r2, r5
 80aa372:	2101      	movs	r1, #1
 80aa374:	f7ff bb47 	b.w	80a9a06 <_strtod_r+0x246>
 80aa378:	4610      	mov	r0, r2
 80aa37a:	4619      	mov	r1, r3
 80aa37c:	b01d      	add	sp, #116	; 0x74
 80aa37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa382:	bf00      	nop
 80aa384:	f3af 8000 	nop.w
 80aa388:	ffc00000 	.word	0xffc00000
 80aa38c:	41dfffff 	.word	0x41dfffff
 80aa390:	94a03595 	.word	0x94a03595
 80aa394:	3fdfffff 	.word	0x3fdfffff
 80aa398:	35afe535 	.word	0x35afe535
 80aa39c:	3fe00000 	.word	0x3fe00000
 80aa3a0:	94a03595 	.word	0x94a03595
 80aa3a4:	3fcfffff 	.word	0x3fcfffff
 80aa3a8:	3ff00000 	.word	0x3ff00000
 80aa3ac:	3fe00000 	.word	0x3fe00000
 80aa3b0:	7fe00000 	.word	0x7fe00000
 80aa3b4:	7c9fffff 	.word	0x7c9fffff
 80aa3b8:	7fefffff 	.word	0x7fefffff
 80aa3bc:	39500000 	.word	0x39500000

080aa3c0 <strtod>:
 80aa3c0:	4b02      	ldr	r3, [pc, #8]	; (80aa3cc <strtod+0xc>)
 80aa3c2:	460a      	mov	r2, r1
 80aa3c4:	4601      	mov	r1, r0
 80aa3c6:	6818      	ldr	r0, [r3, #0]
 80aa3c8:	f7ff b9fa 	b.w	80a97c0 <_strtod_r>
 80aa3cc:	200000f4 	.word	0x200000f4

080aa3d0 <_strtol_r>:
 80aa3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80aa3d4:	460f      	mov	r7, r1
 80aa3d6:	4680      	mov	r8, r0
 80aa3d8:	483f      	ldr	r0, [pc, #252]	; (80aa4d8 <_strtol_r+0x108>)
 80aa3da:	f8d0 9000 	ldr.w	r9, [r0]
 80aa3de:	463d      	mov	r5, r7
 80aa3e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80aa3e4:	eb09 0004 	add.w	r0, r9, r4
 80aa3e8:	7840      	ldrb	r0, [r0, #1]
 80aa3ea:	f000 0008 	and.w	r0, r0, #8
 80aa3ee:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80aa3f2:	b108      	cbz	r0, 80aa3f8 <_strtol_r+0x28>
 80aa3f4:	462f      	mov	r7, r5
 80aa3f6:	e7f2      	b.n	80aa3de <_strtol_r+0xe>
 80aa3f8:	2c2d      	cmp	r4, #45	; 0x2d
 80aa3fa:	d103      	bne.n	80aa404 <_strtol_r+0x34>
 80aa3fc:	1cbd      	adds	r5, r7, #2
 80aa3fe:	787c      	ldrb	r4, [r7, #1]
 80aa400:	2601      	movs	r6, #1
 80aa402:	e003      	b.n	80aa40c <_strtol_r+0x3c>
 80aa404:	2c2b      	cmp	r4, #43	; 0x2b
 80aa406:	bf04      	itt	eq
 80aa408:	787c      	ldrbeq	r4, [r7, #1]
 80aa40a:	1cbd      	addeq	r5, r7, #2
 80aa40c:	b113      	cbz	r3, 80aa414 <_strtol_r+0x44>
 80aa40e:	2b10      	cmp	r3, #16
 80aa410:	d10a      	bne.n	80aa428 <_strtol_r+0x58>
 80aa412:	e05b      	b.n	80aa4cc <_strtol_r+0xfc>
 80aa414:	2c30      	cmp	r4, #48	; 0x30
 80aa416:	d157      	bne.n	80aa4c8 <_strtol_r+0xf8>
 80aa418:	7828      	ldrb	r0, [r5, #0]
 80aa41a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80aa41e:	2858      	cmp	r0, #88	; 0x58
 80aa420:	d14d      	bne.n	80aa4be <_strtol_r+0xee>
 80aa422:	786c      	ldrb	r4, [r5, #1]
 80aa424:	2310      	movs	r3, #16
 80aa426:	3502      	adds	r5, #2
 80aa428:	2e00      	cmp	r6, #0
 80aa42a:	bf14      	ite	ne
 80aa42c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80aa430:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80aa434:	fbbc faf3 	udiv	sl, ip, r3
 80aa438:	2700      	movs	r7, #0
 80aa43a:	4638      	mov	r0, r7
 80aa43c:	fb03 cc1a 	mls	ip, r3, sl, ip
 80aa440:	eb09 0e04 	add.w	lr, r9, r4
 80aa444:	f89e e001 	ldrb.w	lr, [lr, #1]
 80aa448:	f01e 0f04 	tst.w	lr, #4
 80aa44c:	d001      	beq.n	80aa452 <_strtol_r+0x82>
 80aa44e:	3c30      	subs	r4, #48	; 0x30
 80aa450:	e00b      	b.n	80aa46a <_strtol_r+0x9a>
 80aa452:	f01e 0e03 	ands.w	lr, lr, #3
 80aa456:	d01b      	beq.n	80aa490 <_strtol_r+0xc0>
 80aa458:	f1be 0f01 	cmp.w	lr, #1
 80aa45c:	bf0c      	ite	eq
 80aa45e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80aa462:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80aa466:	ebce 0404 	rsb	r4, lr, r4
 80aa46a:	42a3      	cmp	r3, r4
 80aa46c:	dd10      	ble.n	80aa490 <_strtol_r+0xc0>
 80aa46e:	f1b7 3fff 	cmp.w	r7, #4294967295
 80aa472:	d00a      	beq.n	80aa48a <_strtol_r+0xba>
 80aa474:	4550      	cmp	r0, sl
 80aa476:	d806      	bhi.n	80aa486 <_strtol_r+0xb6>
 80aa478:	d101      	bne.n	80aa47e <_strtol_r+0xae>
 80aa47a:	4564      	cmp	r4, ip
 80aa47c:	dc03      	bgt.n	80aa486 <_strtol_r+0xb6>
 80aa47e:	fb03 4000 	mla	r0, r3, r0, r4
 80aa482:	2701      	movs	r7, #1
 80aa484:	e001      	b.n	80aa48a <_strtol_r+0xba>
 80aa486:	f04f 37ff 	mov.w	r7, #4294967295
 80aa48a:	f815 4b01 	ldrb.w	r4, [r5], #1
 80aa48e:	e7d7      	b.n	80aa440 <_strtol_r+0x70>
 80aa490:	1c7b      	adds	r3, r7, #1
 80aa492:	d10c      	bne.n	80aa4ae <_strtol_r+0xde>
 80aa494:	2e00      	cmp	r6, #0
 80aa496:	f04f 0322 	mov.w	r3, #34	; 0x22
 80aa49a:	bf14      	ite	ne
 80aa49c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80aa4a0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80aa4a4:	f8c8 3000 	str.w	r3, [r8]
 80aa4a8:	b92a      	cbnz	r2, 80aa4b6 <_strtol_r+0xe6>
 80aa4aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80aa4ae:	b106      	cbz	r6, 80aa4b2 <_strtol_r+0xe2>
 80aa4b0:	4240      	negs	r0, r0
 80aa4b2:	b172      	cbz	r2, 80aa4d2 <_strtol_r+0x102>
 80aa4b4:	b107      	cbz	r7, 80aa4b8 <_strtol_r+0xe8>
 80aa4b6:	1e69      	subs	r1, r5, #1
 80aa4b8:	6011      	str	r1, [r2, #0]
 80aa4ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80aa4be:	2430      	movs	r4, #48	; 0x30
 80aa4c0:	2b00      	cmp	r3, #0
 80aa4c2:	d1b1      	bne.n	80aa428 <_strtol_r+0x58>
 80aa4c4:	2308      	movs	r3, #8
 80aa4c6:	e7af      	b.n	80aa428 <_strtol_r+0x58>
 80aa4c8:	230a      	movs	r3, #10
 80aa4ca:	e7ad      	b.n	80aa428 <_strtol_r+0x58>
 80aa4cc:	2c30      	cmp	r4, #48	; 0x30
 80aa4ce:	d0a3      	beq.n	80aa418 <_strtol_r+0x48>
 80aa4d0:	e7aa      	b.n	80aa428 <_strtol_r+0x58>
 80aa4d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80aa4d6:	bf00      	nop
 80aa4d8:	20000090 	.word	0x20000090

080aa4dc <strtol>:
 80aa4dc:	4613      	mov	r3, r2
 80aa4de:	460a      	mov	r2, r1
 80aa4e0:	4601      	mov	r1, r0
 80aa4e2:	4802      	ldr	r0, [pc, #8]	; (80aa4ec <strtol+0x10>)
 80aa4e4:	6800      	ldr	r0, [r0, #0]
 80aa4e6:	f7ff bf73 	b.w	80aa3d0 <_strtol_r>
 80aa4ea:	bf00      	nop
 80aa4ec:	200000f4 	.word	0x200000f4

080aa4f0 <_strtoul_r>:
 80aa4f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80aa4f4:	460e      	mov	r6, r1
 80aa4f6:	4680      	mov	r8, r0
 80aa4f8:	483b      	ldr	r0, [pc, #236]	; (80aa5e8 <_strtoul_r+0xf8>)
 80aa4fa:	f8d0 9000 	ldr.w	r9, [r0]
 80aa4fe:	4635      	mov	r5, r6
 80aa500:	f815 4b01 	ldrb.w	r4, [r5], #1
 80aa504:	eb09 0004 	add.w	r0, r9, r4
 80aa508:	7840      	ldrb	r0, [r0, #1]
 80aa50a:	f000 0008 	and.w	r0, r0, #8
 80aa50e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80aa512:	b108      	cbz	r0, 80aa518 <_strtoul_r+0x28>
 80aa514:	462e      	mov	r6, r5
 80aa516:	e7f2      	b.n	80aa4fe <_strtoul_r+0xe>
 80aa518:	2c2d      	cmp	r4, #45	; 0x2d
 80aa51a:	d103      	bne.n	80aa524 <_strtoul_r+0x34>
 80aa51c:	1cb5      	adds	r5, r6, #2
 80aa51e:	7874      	ldrb	r4, [r6, #1]
 80aa520:	2701      	movs	r7, #1
 80aa522:	e003      	b.n	80aa52c <_strtoul_r+0x3c>
 80aa524:	2c2b      	cmp	r4, #43	; 0x2b
 80aa526:	bf04      	itt	eq
 80aa528:	7874      	ldrbeq	r4, [r6, #1]
 80aa52a:	1cb5      	addeq	r5, r6, #2
 80aa52c:	b113      	cbz	r3, 80aa534 <_strtoul_r+0x44>
 80aa52e:	2b10      	cmp	r3, #16
 80aa530:	d10a      	bne.n	80aa548 <_strtoul_r+0x58>
 80aa532:	e053      	b.n	80aa5dc <_strtoul_r+0xec>
 80aa534:	2c30      	cmp	r4, #48	; 0x30
 80aa536:	d14f      	bne.n	80aa5d8 <_strtoul_r+0xe8>
 80aa538:	7828      	ldrb	r0, [r5, #0]
 80aa53a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80aa53e:	2858      	cmp	r0, #88	; 0x58
 80aa540:	d145      	bne.n	80aa5ce <_strtoul_r+0xde>
 80aa542:	786c      	ldrb	r4, [r5, #1]
 80aa544:	2310      	movs	r3, #16
 80aa546:	3502      	adds	r5, #2
 80aa548:	f04f 3cff 	mov.w	ip, #4294967295
 80aa54c:	fbbc fcf3 	udiv	ip, ip, r3
 80aa550:	fb03 fa0c 	mul.w	sl, r3, ip
 80aa554:	2600      	movs	r6, #0
 80aa556:	ea6f 0a0a 	mvn.w	sl, sl
 80aa55a:	4630      	mov	r0, r6
 80aa55c:	eb09 0e04 	add.w	lr, r9, r4
 80aa560:	f89e e001 	ldrb.w	lr, [lr, #1]
 80aa564:	f01e 0f04 	tst.w	lr, #4
 80aa568:	d001      	beq.n	80aa56e <_strtoul_r+0x7e>
 80aa56a:	3c30      	subs	r4, #48	; 0x30
 80aa56c:	e00b      	b.n	80aa586 <_strtoul_r+0x96>
 80aa56e:	f01e 0e03 	ands.w	lr, lr, #3
 80aa572:	d01a      	beq.n	80aa5aa <_strtoul_r+0xba>
 80aa574:	f1be 0f01 	cmp.w	lr, #1
 80aa578:	bf0c      	ite	eq
 80aa57a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80aa57e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80aa582:	ebce 0404 	rsb	r4, lr, r4
 80aa586:	42a3      	cmp	r3, r4
 80aa588:	dd0f      	ble.n	80aa5aa <_strtoul_r+0xba>
 80aa58a:	2e00      	cmp	r6, #0
 80aa58c:	db08      	blt.n	80aa5a0 <_strtoul_r+0xb0>
 80aa58e:	4560      	cmp	r0, ip
 80aa590:	d806      	bhi.n	80aa5a0 <_strtoul_r+0xb0>
 80aa592:	d101      	bne.n	80aa598 <_strtoul_r+0xa8>
 80aa594:	4554      	cmp	r4, sl
 80aa596:	dc03      	bgt.n	80aa5a0 <_strtoul_r+0xb0>
 80aa598:	fb03 4000 	mla	r0, r3, r0, r4
 80aa59c:	2601      	movs	r6, #1
 80aa59e:	e001      	b.n	80aa5a4 <_strtoul_r+0xb4>
 80aa5a0:	f04f 36ff 	mov.w	r6, #4294967295
 80aa5a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80aa5a8:	e7d8      	b.n	80aa55c <_strtoul_r+0x6c>
 80aa5aa:	2e00      	cmp	r6, #0
 80aa5ac:	da07      	bge.n	80aa5be <_strtoul_r+0xce>
 80aa5ae:	2322      	movs	r3, #34	; 0x22
 80aa5b0:	f8c8 3000 	str.w	r3, [r8]
 80aa5b4:	f04f 30ff 	mov.w	r0, #4294967295
 80aa5b8:	b92a      	cbnz	r2, 80aa5c6 <_strtoul_r+0xd6>
 80aa5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80aa5be:	b107      	cbz	r7, 80aa5c2 <_strtoul_r+0xd2>
 80aa5c0:	4240      	negs	r0, r0
 80aa5c2:	b172      	cbz	r2, 80aa5e2 <_strtoul_r+0xf2>
 80aa5c4:	b106      	cbz	r6, 80aa5c8 <_strtoul_r+0xd8>
 80aa5c6:	1e69      	subs	r1, r5, #1
 80aa5c8:	6011      	str	r1, [r2, #0]
 80aa5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80aa5ce:	2430      	movs	r4, #48	; 0x30
 80aa5d0:	2b00      	cmp	r3, #0
 80aa5d2:	d1b9      	bne.n	80aa548 <_strtoul_r+0x58>
 80aa5d4:	2308      	movs	r3, #8
 80aa5d6:	e7b7      	b.n	80aa548 <_strtoul_r+0x58>
 80aa5d8:	230a      	movs	r3, #10
 80aa5da:	e7b5      	b.n	80aa548 <_strtoul_r+0x58>
 80aa5dc:	2c30      	cmp	r4, #48	; 0x30
 80aa5de:	d0ab      	beq.n	80aa538 <_strtoul_r+0x48>
 80aa5e0:	e7b2      	b.n	80aa548 <_strtoul_r+0x58>
 80aa5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80aa5e6:	bf00      	nop
 80aa5e8:	20000090 	.word	0x20000090

080aa5ec <strtoul>:
 80aa5ec:	4613      	mov	r3, r2
 80aa5ee:	460a      	mov	r2, r1
 80aa5f0:	4601      	mov	r1, r0
 80aa5f2:	4802      	ldr	r0, [pc, #8]	; (80aa5fc <strtoul+0x10>)
 80aa5f4:	6800      	ldr	r0, [r0, #0]
 80aa5f6:	f7ff bf7b 	b.w	80aa4f0 <_strtoul_r>
 80aa5fa:	bf00      	nop
 80aa5fc:	200000f4 	.word	0x200000f4

080aa600 <__get_current_time_locale>:
 80aa600:	4b04      	ldr	r3, [pc, #16]	; (80aa614 <__get_current_time_locale+0x14>)
 80aa602:	4a05      	ldr	r2, [pc, #20]	; (80aa618 <__get_current_time_locale+0x18>)
 80aa604:	6818      	ldr	r0, [r3, #0]
 80aa606:	4b05      	ldr	r3, [pc, #20]	; (80aa61c <__get_current_time_locale+0x1c>)
 80aa608:	2800      	cmp	r0, #0
 80aa60a:	bf14      	ite	ne
 80aa60c:	4610      	movne	r0, r2
 80aa60e:	4618      	moveq	r0, r3
 80aa610:	4770      	bx	lr
 80aa612:	bf00      	nop
 80aa614:	20000828 	.word	0x20000828
 80aa618:	2000082c 	.word	0x2000082c
 80aa61c:	080aebf8 	.word	0x080aebf8

080aa620 <__tzcalc_limits>:
 80aa620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aa624:	4604      	mov	r4, r0
 80aa626:	f000 fd91 	bl	80ab14c <__gettzinfo>
 80aa62a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80aa62e:	429c      	cmp	r4, r3
 80aa630:	f340 8096 	ble.w	80aa760 <__tzcalc_limits+0x140>
 80aa634:	f240 156d 	movw	r5, #365	; 0x16d
 80aa638:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80aa63c:	18e3      	adds	r3, r4, r3
 80aa63e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80aa642:	109b      	asrs	r3, r3, #2
 80aa644:	fb05 3502 	mla	r5, r5, r2, r3
 80aa648:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80aa64c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80aa650:	fb92 f3f3 	sdiv	r3, r2, r3
 80aa654:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80aa658:	442b      	add	r3, r5
 80aa65a:	18a5      	adds	r5, r4, r2
 80aa65c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80aa660:	fb94 f7f2 	sdiv	r7, r4, r2
 80aa664:	fb95 f5f2 	sdiv	r5, r5, r2
 80aa668:	fb02 4717 	mls	r7, r2, r7, r4
 80aa66c:	441d      	add	r5, r3
 80aa66e:	2364      	movs	r3, #100	; 0x64
 80aa670:	fb94 f6f3 	sdiv	r6, r4, r3
 80aa674:	fab7 fe87 	clz	lr, r7
 80aa678:	4601      	mov	r1, r0
 80aa67a:	fb03 4616 	mls	r6, r3, r6, r4
 80aa67e:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80aa682:	9301      	str	r3, [sp, #4]
 80aa684:	f004 0303 	and.w	r3, r4, #3
 80aa688:	6044      	str	r4, [r0, #4]
 80aa68a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80aa68e:	9300      	str	r3, [sp, #0]
 80aa690:	f04f 0c07 	mov.w	ip, #7
 80aa694:	7a0b      	ldrb	r3, [r1, #8]
 80aa696:	2b4a      	cmp	r3, #74	; 0x4a
 80aa698:	d10e      	bne.n	80aa6b8 <__tzcalc_limits+0x98>
 80aa69a:	694b      	ldr	r3, [r1, #20]
 80aa69c:	9a00      	ldr	r2, [sp, #0]
 80aa69e:	18ec      	adds	r4, r5, r3
 80aa6a0:	b902      	cbnz	r2, 80aa6a4 <__tzcalc_limits+0x84>
 80aa6a2:	b906      	cbnz	r6, 80aa6a6 <__tzcalc_limits+0x86>
 80aa6a4:	b927      	cbnz	r7, 80aa6b0 <__tzcalc_limits+0x90>
 80aa6a6:	2b3b      	cmp	r3, #59	; 0x3b
 80aa6a8:	bfd4      	ite	le
 80aa6aa:	2300      	movle	r3, #0
 80aa6ac:	2301      	movgt	r3, #1
 80aa6ae:	e000      	b.n	80aa6b2 <__tzcalc_limits+0x92>
 80aa6b0:	2300      	movs	r3, #0
 80aa6b2:	4423      	add	r3, r4
 80aa6b4:	3b01      	subs	r3, #1
 80aa6b6:	e03f      	b.n	80aa738 <__tzcalc_limits+0x118>
 80aa6b8:	2b44      	cmp	r3, #68	; 0x44
 80aa6ba:	d102      	bne.n	80aa6c2 <__tzcalc_limits+0xa2>
 80aa6bc:	694b      	ldr	r3, [r1, #20]
 80aa6be:	442b      	add	r3, r5
 80aa6c0:	e03a      	b.n	80aa738 <__tzcalc_limits+0x118>
 80aa6c2:	9b00      	ldr	r3, [sp, #0]
 80aa6c4:	b92b      	cbnz	r3, 80aa6d2 <__tzcalc_limits+0xb2>
 80aa6c6:	2e00      	cmp	r6, #0
 80aa6c8:	bf0c      	ite	eq
 80aa6ca:	46f0      	moveq	r8, lr
 80aa6cc:	f04f 0801 	movne.w	r8, #1
 80aa6d0:	e000      	b.n	80aa6d4 <__tzcalc_limits+0xb4>
 80aa6d2:	46f0      	mov	r8, lr
 80aa6d4:	46a9      	mov	r9, r5
 80aa6d6:	4b24      	ldr	r3, [pc, #144]	; (80aa768 <__tzcalc_limits+0x148>)
 80aa6d8:	2230      	movs	r2, #48	; 0x30
 80aa6da:	fb02 3808 	mla	r8, r2, r8, r3
 80aa6de:	68cc      	ldr	r4, [r1, #12]
 80aa6e0:	f1a8 0a04 	sub.w	sl, r8, #4
 80aa6e4:	2301      	movs	r3, #1
 80aa6e6:	42a3      	cmp	r3, r4
 80aa6e8:	da04      	bge.n	80aa6f4 <__tzcalc_limits+0xd4>
 80aa6ea:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80aa6ee:	3301      	adds	r3, #1
 80aa6f0:	44d9      	add	r9, fp
 80aa6f2:	e7f8      	b.n	80aa6e6 <__tzcalc_limits+0xc6>
 80aa6f4:	f109 0304 	add.w	r3, r9, #4
 80aa6f8:	fb93 fbfc 	sdiv	fp, r3, ip
 80aa6fc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80aa700:	ebca 0a03 	rsb	sl, sl, r3
 80aa704:	694b      	ldr	r3, [r1, #20]
 80aa706:	2c01      	cmp	r4, #1
 80aa708:	bfb8      	it	lt
 80aa70a:	2401      	movlt	r4, #1
 80aa70c:	ebb3 0a0a 	subs.w	sl, r3, sl
 80aa710:	690b      	ldr	r3, [r1, #16]
 80aa712:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80aa716:	f103 33ff 	add.w	r3, r3, #4294967295
 80aa71a:	f104 34ff 	add.w	r4, r4, #4294967295
 80aa71e:	bf48      	it	mi
 80aa720:	f10a 0a07 	addmi.w	sl, sl, #7
 80aa724:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80aa728:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80aa72c:	4453      	add	r3, sl
 80aa72e:	42a3      	cmp	r3, r4
 80aa730:	db01      	blt.n	80aa736 <__tzcalc_limits+0x116>
 80aa732:	3b07      	subs	r3, #7
 80aa734:	e7fb      	b.n	80aa72e <__tzcalc_limits+0x10e>
 80aa736:	444b      	add	r3, r9
 80aa738:	698c      	ldr	r4, [r1, #24]
 80aa73a:	4a0c      	ldr	r2, [pc, #48]	; (80aa76c <__tzcalc_limits+0x14c>)
 80aa73c:	fb02 4303 	mla	r3, r2, r3, r4
 80aa740:	6a0c      	ldr	r4, [r1, #32]
 80aa742:	4423      	add	r3, r4
 80aa744:	f841 3f1c 	str.w	r3, [r1, #28]!
 80aa748:	9b01      	ldr	r3, [sp, #4]
 80aa74a:	4299      	cmp	r1, r3
 80aa74c:	d1a2      	bne.n	80aa694 <__tzcalc_limits+0x74>
 80aa74e:	69c3      	ldr	r3, [r0, #28]
 80aa750:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80aa752:	4293      	cmp	r3, r2
 80aa754:	bfac      	ite	ge
 80aa756:	2300      	movge	r3, #0
 80aa758:	2301      	movlt	r3, #1
 80aa75a:	6003      	str	r3, [r0, #0]
 80aa75c:	2001      	movs	r0, #1
 80aa75e:	e000      	b.n	80aa762 <__tzcalc_limits+0x142>
 80aa760:	2000      	movs	r0, #0
 80aa762:	b003      	add	sp, #12
 80aa764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aa768:	080ae9b0 	.word	0x080ae9b0
 80aa76c:	00015180 	.word	0x00015180

080aa770 <__tz_lock>:
 80aa770:	4770      	bx	lr

080aa772 <__tz_unlock>:
 80aa772:	4770      	bx	lr

080aa774 <_tzset_unlocked>:
 80aa774:	4b01      	ldr	r3, [pc, #4]	; (80aa77c <_tzset_unlocked+0x8>)
 80aa776:	6818      	ldr	r0, [r3, #0]
 80aa778:	f000 b802 	b.w	80aa780 <_tzset_unlocked_r>
 80aa77c:	200000f4 	.word	0x200000f4

080aa780 <_tzset_unlocked_r>:
 80aa780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aa784:	b08d      	sub	sp, #52	; 0x34
 80aa786:	4607      	mov	r7, r0
 80aa788:	f000 fce0 	bl	80ab14c <__gettzinfo>
 80aa78c:	49b0      	ldr	r1, [pc, #704]	; (80aaa50 <_tzset_unlocked_r+0x2d0>)
 80aa78e:	4604      	mov	r4, r0
 80aa790:	4638      	mov	r0, r7
 80aa792:	f000 fcd3 	bl	80ab13c <_getenv_r>
 80aa796:	4eaf      	ldr	r6, [pc, #700]	; (80aaa54 <_tzset_unlocked_r+0x2d4>)
 80aa798:	4605      	mov	r5, r0
 80aa79a:	b960      	cbnz	r0, 80aa7b6 <_tzset_unlocked_r+0x36>
 80aa79c:	4bae      	ldr	r3, [pc, #696]	; (80aaa58 <_tzset_unlocked_r+0x2d8>)
 80aa79e:	4aaf      	ldr	r2, [pc, #700]	; (80aaa5c <_tzset_unlocked_r+0x2dc>)
 80aa7a0:	6018      	str	r0, [r3, #0]
 80aa7a2:	4baf      	ldr	r3, [pc, #700]	; (80aaa60 <_tzset_unlocked_r+0x2e0>)
 80aa7a4:	6018      	str	r0, [r3, #0]
 80aa7a6:	4baf      	ldr	r3, [pc, #700]	; (80aaa64 <_tzset_unlocked_r+0x2e4>)
 80aa7a8:	6830      	ldr	r0, [r6, #0]
 80aa7aa:	601a      	str	r2, [r3, #0]
 80aa7ac:	605a      	str	r2, [r3, #4]
 80aa7ae:	f7f9 fcf1 	bl	80a4194 <free>
 80aa7b2:	6035      	str	r5, [r6, #0]
 80aa7b4:	e148      	b.n	80aaa48 <_tzset_unlocked_r+0x2c8>
 80aa7b6:	6831      	ldr	r1, [r6, #0]
 80aa7b8:	b979      	cbnz	r1, 80aa7da <_tzset_unlocked_r+0x5a>
 80aa7ba:	6830      	ldr	r0, [r6, #0]
 80aa7bc:	f7f9 fcea 	bl	80a4194 <free>
 80aa7c0:	4628      	mov	r0, r5
 80aa7c2:	f7fe ffab 	bl	80a971c <strlen>
 80aa7c6:	1c41      	adds	r1, r0, #1
 80aa7c8:	4638      	mov	r0, r7
 80aa7ca:	f7f9 fd2b 	bl	80a4224 <_malloc_r>
 80aa7ce:	6030      	str	r0, [r6, #0]
 80aa7d0:	b148      	cbz	r0, 80aa7e6 <_tzset_unlocked_r+0x66>
 80aa7d2:	4629      	mov	r1, r5
 80aa7d4:	f7fe fa6a 	bl	80a8cac <strcpy>
 80aa7d8:	e005      	b.n	80aa7e6 <_tzset_unlocked_r+0x66>
 80aa7da:	f7fe fa5d 	bl	80a8c98 <strcmp>
 80aa7de:	2800      	cmp	r0, #0
 80aa7e0:	f000 8132 	beq.w	80aaa48 <_tzset_unlocked_r+0x2c8>
 80aa7e4:	e7e9      	b.n	80aa7ba <_tzset_unlocked_r+0x3a>
 80aa7e6:	782b      	ldrb	r3, [r5, #0]
 80aa7e8:	ae0a      	add	r6, sp, #40	; 0x28
 80aa7ea:	2b3a      	cmp	r3, #58	; 0x3a
 80aa7ec:	bf08      	it	eq
 80aa7ee:	3501      	addeq	r5, #1
 80aa7f0:	4633      	mov	r3, r6
 80aa7f2:	4a9d      	ldr	r2, [pc, #628]	; (80aaa68 <_tzset_unlocked_r+0x2e8>)
 80aa7f4:	499d      	ldr	r1, [pc, #628]	; (80aaa6c <_tzset_unlocked_r+0x2ec>)
 80aa7f6:	4628      	mov	r0, r5
 80aa7f8:	f7f9 fcec 	bl	80a41d4 <siscanf>
 80aa7fc:	2800      	cmp	r0, #0
 80aa7fe:	f340 8123 	ble.w	80aaa48 <_tzset_unlocked_r+0x2c8>
 80aa802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80aa804:	18ef      	adds	r7, r5, r3
 80aa806:	5ceb      	ldrb	r3, [r5, r3]
 80aa808:	2b2d      	cmp	r3, #45	; 0x2d
 80aa80a:	d103      	bne.n	80aa814 <_tzset_unlocked_r+0x94>
 80aa80c:	3701      	adds	r7, #1
 80aa80e:	f04f 35ff 	mov.w	r5, #4294967295
 80aa812:	e003      	b.n	80aa81c <_tzset_unlocked_r+0x9c>
 80aa814:	2b2b      	cmp	r3, #43	; 0x2b
 80aa816:	bf08      	it	eq
 80aa818:	3701      	addeq	r7, #1
 80aa81a:	2501      	movs	r5, #1
 80aa81c:	f10d 0a20 	add.w	sl, sp, #32
 80aa820:	f10d 0b1e 	add.w	fp, sp, #30
 80aa824:	f04f 0800 	mov.w	r8, #0
 80aa828:	9603      	str	r6, [sp, #12]
 80aa82a:	f8cd a008 	str.w	sl, [sp, #8]
 80aa82e:	9601      	str	r6, [sp, #4]
 80aa830:	f8cd b000 	str.w	fp, [sp]
 80aa834:	4633      	mov	r3, r6
 80aa836:	aa07      	add	r2, sp, #28
 80aa838:	498d      	ldr	r1, [pc, #564]	; (80aaa70 <_tzset_unlocked_r+0x2f0>)
 80aa83a:	4638      	mov	r0, r7
 80aa83c:	f8ad 801e 	strh.w	r8, [sp, #30]
 80aa840:	f8ad 8020 	strh.w	r8, [sp, #32]
 80aa844:	f7f9 fcc6 	bl	80a41d4 <siscanf>
 80aa848:	4540      	cmp	r0, r8
 80aa84a:	f340 80fd 	ble.w	80aaa48 <_tzset_unlocked_r+0x2c8>
 80aa84e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80aa852:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80aa856:	213c      	movs	r1, #60	; 0x3c
 80aa858:	fb01 3302 	mla	r3, r1, r2, r3
 80aa85c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80aa860:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80aa864:	fb01 3302 	mla	r3, r1, r2, r3
 80aa868:	435d      	muls	r5, r3
 80aa86a:	4b7f      	ldr	r3, [pc, #508]	; (80aaa68 <_tzset_unlocked_r+0x2e8>)
 80aa86c:	6225      	str	r5, [r4, #32]
 80aa86e:	4d7d      	ldr	r5, [pc, #500]	; (80aaa64 <_tzset_unlocked_r+0x2e4>)
 80aa870:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80aaa7c <_tzset_unlocked_r+0x2fc>
 80aa874:	602b      	str	r3, [r5, #0]
 80aa876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80aa878:	464a      	mov	r2, r9
 80aa87a:	441f      	add	r7, r3
 80aa87c:	497b      	ldr	r1, [pc, #492]	; (80aaa6c <_tzset_unlocked_r+0x2ec>)
 80aa87e:	4633      	mov	r3, r6
 80aa880:	4638      	mov	r0, r7
 80aa882:	f7f9 fca7 	bl	80a41d4 <siscanf>
 80aa886:	4540      	cmp	r0, r8
 80aa888:	dc08      	bgt.n	80aa89c <_tzset_unlocked_r+0x11c>
 80aa88a:	682b      	ldr	r3, [r5, #0]
 80aa88c:	6a22      	ldr	r2, [r4, #32]
 80aa88e:	606b      	str	r3, [r5, #4]
 80aa890:	4b71      	ldr	r3, [pc, #452]	; (80aaa58 <_tzset_unlocked_r+0x2d8>)
 80aa892:	601a      	str	r2, [r3, #0]
 80aa894:	4b72      	ldr	r3, [pc, #456]	; (80aaa60 <_tzset_unlocked_r+0x2e0>)
 80aa896:	f8c3 8000 	str.w	r8, [r3]
 80aa89a:	e0d5      	b.n	80aaa48 <_tzset_unlocked_r+0x2c8>
 80aa89c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80aa89e:	f8c5 9004 	str.w	r9, [r5, #4]
 80aa8a2:	18fd      	adds	r5, r7, r3
 80aa8a4:	5cfb      	ldrb	r3, [r7, r3]
 80aa8a6:	2b2d      	cmp	r3, #45	; 0x2d
 80aa8a8:	d103      	bne.n	80aa8b2 <_tzset_unlocked_r+0x132>
 80aa8aa:	3501      	adds	r5, #1
 80aa8ac:	f04f 37ff 	mov.w	r7, #4294967295
 80aa8b0:	e003      	b.n	80aa8ba <_tzset_unlocked_r+0x13a>
 80aa8b2:	2b2b      	cmp	r3, #43	; 0x2b
 80aa8b4:	bf08      	it	eq
 80aa8b6:	3501      	addeq	r5, #1
 80aa8b8:	2701      	movs	r7, #1
 80aa8ba:	2300      	movs	r3, #0
 80aa8bc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80aa8c0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80aa8c4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80aa8c8:	930a      	str	r3, [sp, #40]	; 0x28
 80aa8ca:	9603      	str	r6, [sp, #12]
 80aa8cc:	f8cd a008 	str.w	sl, [sp, #8]
 80aa8d0:	9601      	str	r6, [sp, #4]
 80aa8d2:	f8cd b000 	str.w	fp, [sp]
 80aa8d6:	4633      	mov	r3, r6
 80aa8d8:	aa07      	add	r2, sp, #28
 80aa8da:	4965      	ldr	r1, [pc, #404]	; (80aaa70 <_tzset_unlocked_r+0x2f0>)
 80aa8dc:	4628      	mov	r0, r5
 80aa8de:	f7f9 fc79 	bl	80a41d4 <siscanf>
 80aa8e2:	2800      	cmp	r0, #0
 80aa8e4:	dc04      	bgt.n	80aa8f0 <_tzset_unlocked_r+0x170>
 80aa8e6:	6a23      	ldr	r3, [r4, #32]
 80aa8e8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80aa8ec:	63e3      	str	r3, [r4, #60]	; 0x3c
 80aa8ee:	e00e      	b.n	80aa90e <_tzset_unlocked_r+0x18e>
 80aa8f0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80aa8f4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80aa8f8:	213c      	movs	r1, #60	; 0x3c
 80aa8fa:	fb01 3302 	mla	r3, r1, r2, r3
 80aa8fe:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80aa902:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80aa906:	fb01 3302 	mla	r3, r1, r2, r3
 80aa90a:	435f      	muls	r7, r3
 80aa90c:	63e7      	str	r7, [r4, #60]	; 0x3c
 80aa90e:	4627      	mov	r7, r4
 80aa910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80aa912:	f04f 0900 	mov.w	r9, #0
 80aa916:	441d      	add	r5, r3
 80aa918:	782b      	ldrb	r3, [r5, #0]
 80aa91a:	2b2c      	cmp	r3, #44	; 0x2c
 80aa91c:	bf08      	it	eq
 80aa91e:	3501      	addeq	r5, #1
 80aa920:	f895 8000 	ldrb.w	r8, [r5]
 80aa924:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80aa928:	d126      	bne.n	80aa978 <_tzset_unlocked_r+0x1f8>
 80aa92a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80aa92e:	9302      	str	r3, [sp, #8]
 80aa930:	ab09      	add	r3, sp, #36	; 0x24
 80aa932:	9300      	str	r3, [sp, #0]
 80aa934:	9603      	str	r6, [sp, #12]
 80aa936:	9601      	str	r6, [sp, #4]
 80aa938:	4633      	mov	r3, r6
 80aa93a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80aa93e:	494d      	ldr	r1, [pc, #308]	; (80aaa74 <_tzset_unlocked_r+0x2f4>)
 80aa940:	4628      	mov	r0, r5
 80aa942:	f7f9 fc47 	bl	80a41d4 <siscanf>
 80aa946:	2803      	cmp	r0, #3
 80aa948:	d17e      	bne.n	80aaa48 <_tzset_unlocked_r+0x2c8>
 80aa94a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80aa94e:	1e4b      	subs	r3, r1, #1
 80aa950:	2b0b      	cmp	r3, #11
 80aa952:	d879      	bhi.n	80aaa48 <_tzset_unlocked_r+0x2c8>
 80aa954:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80aa958:	1e53      	subs	r3, r2, #1
 80aa95a:	2b04      	cmp	r3, #4
 80aa95c:	d874      	bhi.n	80aaa48 <_tzset_unlocked_r+0x2c8>
 80aa95e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80aa962:	2b06      	cmp	r3, #6
 80aa964:	d870      	bhi.n	80aaa48 <_tzset_unlocked_r+0x2c8>
 80aa966:	f887 8008 	strb.w	r8, [r7, #8]
 80aa96a:	60f9      	str	r1, [r7, #12]
 80aa96c:	613a      	str	r2, [r7, #16]
 80aa96e:	617b      	str	r3, [r7, #20]
 80aa970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80aa972:	eb05 0803 	add.w	r8, r5, r3
 80aa976:	e02a      	b.n	80aa9ce <_tzset_unlocked_r+0x24e>
 80aa978:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80aa97c:	bf06      	itte	eq
 80aa97e:	4643      	moveq	r3, r8
 80aa980:	3501      	addeq	r5, #1
 80aa982:	2344      	movne	r3, #68	; 0x44
 80aa984:	220a      	movs	r2, #10
 80aa986:	a90b      	add	r1, sp, #44	; 0x2c
 80aa988:	4628      	mov	r0, r5
 80aa98a:	9305      	str	r3, [sp, #20]
 80aa98c:	f7ff fe2e 	bl	80aa5ec <strtoul>
 80aa990:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80aa994:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80aa998:	4545      	cmp	r5, r8
 80aa99a:	9b05      	ldr	r3, [sp, #20]
 80aa99c:	d114      	bne.n	80aa9c8 <_tzset_unlocked_r+0x248>
 80aa99e:	234d      	movs	r3, #77	; 0x4d
 80aa9a0:	f1b9 0f00 	cmp.w	r9, #0
 80aa9a4:	d107      	bne.n	80aa9b6 <_tzset_unlocked_r+0x236>
 80aa9a6:	7223      	strb	r3, [r4, #8]
 80aa9a8:	2303      	movs	r3, #3
 80aa9aa:	60e3      	str	r3, [r4, #12]
 80aa9ac:	2302      	movs	r3, #2
 80aa9ae:	6123      	str	r3, [r4, #16]
 80aa9b0:	f8c4 9014 	str.w	r9, [r4, #20]
 80aa9b4:	e00b      	b.n	80aa9ce <_tzset_unlocked_r+0x24e>
 80aa9b6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80aa9ba:	230b      	movs	r3, #11
 80aa9bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80aa9be:	2301      	movs	r3, #1
 80aa9c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80aa9c2:	2300      	movs	r3, #0
 80aa9c4:	6323      	str	r3, [r4, #48]	; 0x30
 80aa9c6:	e002      	b.n	80aa9ce <_tzset_unlocked_r+0x24e>
 80aa9c8:	b280      	uxth	r0, r0
 80aa9ca:	723b      	strb	r3, [r7, #8]
 80aa9cc:	6178      	str	r0, [r7, #20]
 80aa9ce:	2302      	movs	r3, #2
 80aa9d0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80aa9d4:	2300      	movs	r3, #0
 80aa9d6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80aa9da:	f8ad 3020 	strh.w	r3, [sp, #32]
 80aa9de:	930a      	str	r3, [sp, #40]	; 0x28
 80aa9e0:	f898 3000 	ldrb.w	r3, [r8]
 80aa9e4:	2b2f      	cmp	r3, #47	; 0x2f
 80aa9e6:	d10b      	bne.n	80aaa00 <_tzset_unlocked_r+0x280>
 80aa9e8:	9603      	str	r6, [sp, #12]
 80aa9ea:	f8cd a008 	str.w	sl, [sp, #8]
 80aa9ee:	9601      	str	r6, [sp, #4]
 80aa9f0:	f8cd b000 	str.w	fp, [sp]
 80aa9f4:	4633      	mov	r3, r6
 80aa9f6:	aa07      	add	r2, sp, #28
 80aa9f8:	491f      	ldr	r1, [pc, #124]	; (80aaa78 <_tzset_unlocked_r+0x2f8>)
 80aa9fa:	4640      	mov	r0, r8
 80aa9fc:	f7f9 fbea 	bl	80a41d4 <siscanf>
 80aaa00:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80aaa04:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80aaa08:	213c      	movs	r1, #60	; 0x3c
 80aaa0a:	fb01 3302 	mla	r3, r1, r2, r3
 80aaa0e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80aaa12:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80aaa16:	fb01 3302 	mla	r3, r1, r2, r3
 80aaa1a:	61bb      	str	r3, [r7, #24]
 80aaa1c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80aaa1e:	f109 0901 	add.w	r9, r9, #1
 80aaa22:	f1b9 0f02 	cmp.w	r9, #2
 80aaa26:	4445      	add	r5, r8
 80aaa28:	f107 071c 	add.w	r7, r7, #28
 80aaa2c:	f47f af74 	bne.w	80aa918 <_tzset_unlocked_r+0x198>
 80aaa30:	6860      	ldr	r0, [r4, #4]
 80aaa32:	f7ff fdf5 	bl	80aa620 <__tzcalc_limits>
 80aaa36:	6a22      	ldr	r2, [r4, #32]
 80aaa38:	4b07      	ldr	r3, [pc, #28]	; (80aaa58 <_tzset_unlocked_r+0x2d8>)
 80aaa3a:	601a      	str	r2, [r3, #0]
 80aaa3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80aaa3e:	1a9b      	subs	r3, r3, r2
 80aaa40:	4a07      	ldr	r2, [pc, #28]	; (80aaa60 <_tzset_unlocked_r+0x2e0>)
 80aaa42:	bf18      	it	ne
 80aaa44:	2301      	movne	r3, #1
 80aaa46:	6013      	str	r3, [r2, #0]
 80aaa48:	b00d      	add	sp, #52	; 0x34
 80aaa4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80aaa4e:	bf00      	nop
 80aaa50:	080aecf4 	.word	0x080aecf4
 80aaa54:	20000940 	.word	0x20000940
 80aaa58:	20000948 	.word	0x20000948
 80aaa5c:	080ae7b9 	.word	0x080ae7b9
 80aaa60:	20000944 	.word	0x20000944
 80aaa64:	20000130 	.word	0x20000130
 80aaa68:	20000933 	.word	0x20000933
 80aaa6c:	080aecf7 	.word	0x080aecf7
 80aaa70:	080aed1a 	.word	0x080aed1a
 80aaa74:	080aed06 	.word	0x080aed06
 80aaa78:	080aed19 	.word	0x080aed19
 80aaa7c:	20000928 	.word	0x20000928

080aaa80 <abs>:
 80aaa80:	2800      	cmp	r0, #0
 80aaa82:	bfb8      	it	lt
 80aaa84:	4240      	neglt	r0, r0
 80aaa86:	4770      	bx	lr

080aaa88 <rshift>:
 80aaa88:	b5f0      	push	{r4, r5, r6, r7, lr}
 80aaa8a:	6906      	ldr	r6, [r0, #16]
 80aaa8c:	114b      	asrs	r3, r1, #5
 80aaa8e:	42b3      	cmp	r3, r6
 80aaa90:	f100 0514 	add.w	r5, r0, #20
 80aaa94:	da27      	bge.n	80aaae6 <rshift+0x5e>
 80aaa96:	f011 011f 	ands.w	r1, r1, #31
 80aaa9a:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80aaa9e:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80aaaa2:	d101      	bne.n	80aaaa8 <rshift+0x20>
 80aaaa4:	4629      	mov	r1, r5
 80aaaa6:	e016      	b.n	80aaad6 <rshift+0x4e>
 80aaaa8:	1d14      	adds	r4, r2, #4
 80aaaaa:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 80aaaae:	462b      	mov	r3, r5
 80aaab0:	f1c1 0e20 	rsb	lr, r1, #32
 80aaab4:	40ca      	lsrs	r2, r1
 80aaab6:	42b4      	cmp	r4, r6
 80aaab8:	d209      	bcs.n	80aaace <rshift+0x46>
 80aaaba:	6827      	ldr	r7, [r4, #0]
 80aaabc:	fa07 f70e 	lsl.w	r7, r7, lr
 80aaac0:	433a      	orrs	r2, r7
 80aaac2:	f843 2b04 	str.w	r2, [r3], #4
 80aaac6:	f854 2b04 	ldr.w	r2, [r4], #4
 80aaaca:	40ca      	lsrs	r2, r1
 80aaacc:	e7f3      	b.n	80aaab6 <rshift+0x2e>
 80aaace:	601a      	str	r2, [r3, #0]
 80aaad0:	b152      	cbz	r2, 80aaae8 <rshift+0x60>
 80aaad2:	3304      	adds	r3, #4
 80aaad4:	e008      	b.n	80aaae8 <rshift+0x60>
 80aaad6:	42b2      	cmp	r2, r6
 80aaad8:	460b      	mov	r3, r1
 80aaada:	d205      	bcs.n	80aaae8 <rshift+0x60>
 80aaadc:	f852 3b04 	ldr.w	r3, [r2], #4
 80aaae0:	f841 3b04 	str.w	r3, [r1], #4
 80aaae4:	e7f7      	b.n	80aaad6 <rshift+0x4e>
 80aaae6:	462b      	mov	r3, r5
 80aaae8:	1b5b      	subs	r3, r3, r5
 80aaaea:	109b      	asrs	r3, r3, #2
 80aaaec:	6103      	str	r3, [r0, #16]
 80aaaee:	b903      	cbnz	r3, 80aaaf2 <rshift+0x6a>
 80aaaf0:	6143      	str	r3, [r0, #20]
 80aaaf2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080aaaf4 <__hexdig_fun>:
 80aaaf4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80aaaf8:	2b09      	cmp	r3, #9
 80aaafa:	d801      	bhi.n	80aab00 <__hexdig_fun+0xc>
 80aaafc:	3820      	subs	r0, #32
 80aaafe:	e00a      	b.n	80aab16 <__hexdig_fun+0x22>
 80aab00:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80aab04:	2b05      	cmp	r3, #5
 80aab06:	d801      	bhi.n	80aab0c <__hexdig_fun+0x18>
 80aab08:	3847      	subs	r0, #71	; 0x47
 80aab0a:	e004      	b.n	80aab16 <__hexdig_fun+0x22>
 80aab0c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80aab10:	2b05      	cmp	r3, #5
 80aab12:	d802      	bhi.n	80aab1a <__hexdig_fun+0x26>
 80aab14:	3827      	subs	r0, #39	; 0x27
 80aab16:	b2c0      	uxtb	r0, r0
 80aab18:	4770      	bx	lr
 80aab1a:	2000      	movs	r0, #0
 80aab1c:	4770      	bx	lr

080aab1e <__gethex>:
 80aab1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aab22:	b08b      	sub	sp, #44	; 0x2c
 80aab24:	468a      	mov	sl, r1
 80aab26:	4690      	mov	r8, r2
 80aab28:	9306      	str	r3, [sp, #24]
 80aab2a:	9002      	str	r0, [sp, #8]
 80aab2c:	f7fd ffea 	bl	80a8b04 <_localeconv_r>
 80aab30:	6803      	ldr	r3, [r0, #0]
 80aab32:	f04f 0b00 	mov.w	fp, #0
 80aab36:	4618      	mov	r0, r3
 80aab38:	9303      	str	r3, [sp, #12]
 80aab3a:	f7fe fdef 	bl	80a971c <strlen>
 80aab3e:	9b03      	ldr	r3, [sp, #12]
 80aab40:	9001      	str	r0, [sp, #4]
 80aab42:	4403      	add	r3, r0
 80aab44:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80aab48:	9307      	str	r3, [sp, #28]
 80aab4a:	f8da 3000 	ldr.w	r3, [sl]
 80aab4e:	3302      	adds	r3, #2
 80aab50:	461f      	mov	r7, r3
 80aab52:	f813 0b01 	ldrb.w	r0, [r3], #1
 80aab56:	2830      	cmp	r0, #48	; 0x30
 80aab58:	d102      	bne.n	80aab60 <__gethex+0x42>
 80aab5a:	f10b 0b01 	add.w	fp, fp, #1
 80aab5e:	e7f7      	b.n	80aab50 <__gethex+0x32>
 80aab60:	f7ff ffc8 	bl	80aaaf4 <__hexdig_fun>
 80aab64:	4604      	mov	r4, r0
 80aab66:	b9e0      	cbnz	r0, 80aaba2 <__gethex+0x84>
 80aab68:	9a01      	ldr	r2, [sp, #4]
 80aab6a:	9903      	ldr	r1, [sp, #12]
 80aab6c:	4638      	mov	r0, r7
 80aab6e:	f7fe fddd 	bl	80a972c <strncmp>
 80aab72:	2800      	cmp	r0, #0
 80aab74:	d134      	bne.n	80aabe0 <__gethex+0xc2>
 80aab76:	9b01      	ldr	r3, [sp, #4]
 80aab78:	5cf8      	ldrb	r0, [r7, r3]
 80aab7a:	18fe      	adds	r6, r7, r3
 80aab7c:	f7ff ffba 	bl	80aaaf4 <__hexdig_fun>
 80aab80:	b380      	cbz	r0, 80aabe4 <__gethex+0xc6>
 80aab82:	4633      	mov	r3, r6
 80aab84:	7818      	ldrb	r0, [r3, #0]
 80aab86:	461f      	mov	r7, r3
 80aab88:	2830      	cmp	r0, #48	; 0x30
 80aab8a:	f103 0301 	add.w	r3, r3, #1
 80aab8e:	d0f9      	beq.n	80aab84 <__gethex+0x66>
 80aab90:	f7ff ffb0 	bl	80aaaf4 <__hexdig_fun>
 80aab94:	fab0 f580 	clz	r5, r0
 80aab98:	4634      	mov	r4, r6
 80aab9a:	096d      	lsrs	r5, r5, #5
 80aab9c:	f04f 0b01 	mov.w	fp, #1
 80aaba0:	e001      	b.n	80aaba6 <__gethex+0x88>
 80aaba2:	2500      	movs	r5, #0
 80aaba4:	462c      	mov	r4, r5
 80aaba6:	463a      	mov	r2, r7
 80aaba8:	4616      	mov	r6, r2
 80aabaa:	7830      	ldrb	r0, [r6, #0]
 80aabac:	3201      	adds	r2, #1
 80aabae:	f7ff ffa1 	bl	80aaaf4 <__hexdig_fun>
 80aabb2:	2800      	cmp	r0, #0
 80aabb4:	d1f8      	bne.n	80aaba8 <__gethex+0x8a>
 80aabb6:	9a01      	ldr	r2, [sp, #4]
 80aabb8:	9903      	ldr	r1, [sp, #12]
 80aabba:	4630      	mov	r0, r6
 80aabbc:	f7fe fdb6 	bl	80a972c <strncmp>
 80aabc0:	b950      	cbnz	r0, 80aabd8 <__gethex+0xba>
 80aabc2:	b954      	cbnz	r4, 80aabda <__gethex+0xbc>
 80aabc4:	9b01      	ldr	r3, [sp, #4]
 80aabc6:	18f4      	adds	r4, r6, r3
 80aabc8:	4622      	mov	r2, r4
 80aabca:	4616      	mov	r6, r2
 80aabcc:	7830      	ldrb	r0, [r6, #0]
 80aabce:	3201      	adds	r2, #1
 80aabd0:	f7ff ff90 	bl	80aaaf4 <__hexdig_fun>
 80aabd4:	2800      	cmp	r0, #0
 80aabd6:	d1f8      	bne.n	80aabca <__gethex+0xac>
 80aabd8:	b134      	cbz	r4, 80aabe8 <__gethex+0xca>
 80aabda:	1ba4      	subs	r4, r4, r6
 80aabdc:	00a4      	lsls	r4, r4, #2
 80aabde:	e003      	b.n	80aabe8 <__gethex+0xca>
 80aabe0:	463e      	mov	r6, r7
 80aabe2:	e000      	b.n	80aabe6 <__gethex+0xc8>
 80aabe4:	4604      	mov	r4, r0
 80aabe6:	2501      	movs	r5, #1
 80aabe8:	7833      	ldrb	r3, [r6, #0]
 80aabea:	2b50      	cmp	r3, #80	; 0x50
 80aabec:	d001      	beq.n	80aabf2 <__gethex+0xd4>
 80aabee:	2b70      	cmp	r3, #112	; 0x70
 80aabf0:	d12a      	bne.n	80aac48 <__gethex+0x12a>
 80aabf2:	7873      	ldrb	r3, [r6, #1]
 80aabf4:	2b2b      	cmp	r3, #43	; 0x2b
 80aabf6:	d008      	beq.n	80aac0a <__gethex+0xec>
 80aabf8:	2b2d      	cmp	r3, #45	; 0x2d
 80aabfa:	d003      	beq.n	80aac04 <__gethex+0xe6>
 80aabfc:	1c71      	adds	r1, r6, #1
 80aabfe:	f04f 0900 	mov.w	r9, #0
 80aac02:	e005      	b.n	80aac10 <__gethex+0xf2>
 80aac04:	f04f 0901 	mov.w	r9, #1
 80aac08:	e001      	b.n	80aac0e <__gethex+0xf0>
 80aac0a:	f04f 0900 	mov.w	r9, #0
 80aac0e:	1cb1      	adds	r1, r6, #2
 80aac10:	7808      	ldrb	r0, [r1, #0]
 80aac12:	f7ff ff6f 	bl	80aaaf4 <__hexdig_fun>
 80aac16:	1e43      	subs	r3, r0, #1
 80aac18:	b2db      	uxtb	r3, r3
 80aac1a:	2b18      	cmp	r3, #24
 80aac1c:	d814      	bhi.n	80aac48 <__gethex+0x12a>
 80aac1e:	f1a0 0210 	sub.w	r2, r0, #16
 80aac22:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80aac26:	f7ff ff65 	bl	80aaaf4 <__hexdig_fun>
 80aac2a:	1e43      	subs	r3, r0, #1
 80aac2c:	b2db      	uxtb	r3, r3
 80aac2e:	2b18      	cmp	r3, #24
 80aac30:	d804      	bhi.n	80aac3c <__gethex+0x11e>
 80aac32:	230a      	movs	r3, #10
 80aac34:	fb03 0202 	mla	r2, r3, r2, r0
 80aac38:	3a10      	subs	r2, #16
 80aac3a:	e7f2      	b.n	80aac22 <__gethex+0x104>
 80aac3c:	f1b9 0f00 	cmp.w	r9, #0
 80aac40:	d000      	beq.n	80aac44 <__gethex+0x126>
 80aac42:	4252      	negs	r2, r2
 80aac44:	4414      	add	r4, r2
 80aac46:	e000      	b.n	80aac4a <__gethex+0x12c>
 80aac48:	4631      	mov	r1, r6
 80aac4a:	f8ca 1000 	str.w	r1, [sl]
 80aac4e:	b12d      	cbz	r5, 80aac5c <__gethex+0x13e>
 80aac50:	f1bb 0f00 	cmp.w	fp, #0
 80aac54:	bf14      	ite	ne
 80aac56:	2000      	movne	r0, #0
 80aac58:	2006      	moveq	r0, #6
 80aac5a:	e17c      	b.n	80aaf56 <__gethex+0x438>
 80aac5c:	4629      	mov	r1, r5
 80aac5e:	1bf3      	subs	r3, r6, r7
 80aac60:	3b01      	subs	r3, #1
 80aac62:	2b07      	cmp	r3, #7
 80aac64:	dd02      	ble.n	80aac6c <__gethex+0x14e>
 80aac66:	3101      	adds	r1, #1
 80aac68:	105b      	asrs	r3, r3, #1
 80aac6a:	e7fa      	b.n	80aac62 <__gethex+0x144>
 80aac6c:	9802      	ldr	r0, [sp, #8]
 80aac6e:	f000 fb0b 	bl	80ab288 <_Balloc>
 80aac72:	f04f 0900 	mov.w	r9, #0
 80aac76:	4605      	mov	r5, r0
 80aac78:	46cb      	mov	fp, r9
 80aac7a:	9b01      	ldr	r3, [sp, #4]
 80aac7c:	f100 0a14 	add.w	sl, r0, #20
 80aac80:	f1c3 0301 	rsb	r3, r3, #1
 80aac84:	f8cd a010 	str.w	sl, [sp, #16]
 80aac88:	9308      	str	r3, [sp, #32]
 80aac8a:	42b7      	cmp	r7, r6
 80aac8c:	d22f      	bcs.n	80aacee <__gethex+0x1d0>
 80aac8e:	1e73      	subs	r3, r6, #1
 80aac90:	9305      	str	r3, [sp, #20]
 80aac92:	9a07      	ldr	r2, [sp, #28]
 80aac94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80aac98:	4293      	cmp	r3, r2
 80aac9a:	d00b      	beq.n	80aacb4 <__gethex+0x196>
 80aac9c:	f1bb 0f20 	cmp.w	fp, #32
 80aaca0:	d116      	bne.n	80aacd0 <__gethex+0x1b2>
 80aaca2:	9b04      	ldr	r3, [sp, #16]
 80aaca4:	f8c3 9000 	str.w	r9, [r3]
 80aaca8:	3304      	adds	r3, #4
 80aacaa:	f04f 0900 	mov.w	r9, #0
 80aacae:	9304      	str	r3, [sp, #16]
 80aacb0:	46cb      	mov	fp, r9
 80aacb2:	e00d      	b.n	80aacd0 <__gethex+0x1b2>
 80aacb4:	9b05      	ldr	r3, [sp, #20]
 80aacb6:	9a08      	ldr	r2, [sp, #32]
 80aacb8:	4413      	add	r3, r2
 80aacba:	429f      	cmp	r7, r3
 80aacbc:	d8ee      	bhi.n	80aac9c <__gethex+0x17e>
 80aacbe:	4618      	mov	r0, r3
 80aacc0:	9a01      	ldr	r2, [sp, #4]
 80aacc2:	9903      	ldr	r1, [sp, #12]
 80aacc4:	9309      	str	r3, [sp, #36]	; 0x24
 80aacc6:	f7fe fd31 	bl	80a972c <strncmp>
 80aacca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80aaccc:	b168      	cbz	r0, 80aacea <__gethex+0x1cc>
 80aacce:	e7e5      	b.n	80aac9c <__gethex+0x17e>
 80aacd0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80aacd4:	f7ff ff0e 	bl	80aaaf4 <__hexdig_fun>
 80aacd8:	f000 000f 	and.w	r0, r0, #15
 80aacdc:	fa00 f00b 	lsl.w	r0, r0, fp
 80aace0:	9b05      	ldr	r3, [sp, #20]
 80aace2:	ea49 0900 	orr.w	r9, r9, r0
 80aace6:	f10b 0b04 	add.w	fp, fp, #4
 80aacea:	461e      	mov	r6, r3
 80aacec:	e7cd      	b.n	80aac8a <__gethex+0x16c>
 80aacee:	9804      	ldr	r0, [sp, #16]
 80aacf0:	f840 9b04 	str.w	r9, [r0], #4
 80aacf4:	ebca 0000 	rsb	r0, sl, r0
 80aacf8:	1080      	asrs	r0, r0, #2
 80aacfa:	6128      	str	r0, [r5, #16]
 80aacfc:	0147      	lsls	r7, r0, #5
 80aacfe:	4648      	mov	r0, r9
 80aad00:	f000 fb87 	bl	80ab412 <__hi0bits>
 80aad04:	f8d8 6000 	ldr.w	r6, [r8]
 80aad08:	1a38      	subs	r0, r7, r0
 80aad0a:	42b0      	cmp	r0, r6
 80aad0c:	dd26      	ble.n	80aad5c <__gethex+0x23e>
 80aad0e:	1b87      	subs	r7, r0, r6
 80aad10:	4639      	mov	r1, r7
 80aad12:	4628      	mov	r0, r5
 80aad14:	f000 fe7f 	bl	80aba16 <__any_on>
 80aad18:	b1c8      	cbz	r0, 80aad4e <__gethex+0x230>
 80aad1a:	1e7b      	subs	r3, r7, #1
 80aad1c:	1159      	asrs	r1, r3, #5
 80aad1e:	f003 021f 	and.w	r2, r3, #31
 80aad22:	f04f 0901 	mov.w	r9, #1
 80aad26:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80aad2a:	fa09 f202 	lsl.w	r2, r9, r2
 80aad2e:	420a      	tst	r2, r1
 80aad30:	d00e      	beq.n	80aad50 <__gethex+0x232>
 80aad32:	454b      	cmp	r3, r9
 80aad34:	dc02      	bgt.n	80aad3c <__gethex+0x21e>
 80aad36:	f04f 0902 	mov.w	r9, #2
 80aad3a:	e009      	b.n	80aad50 <__gethex+0x232>
 80aad3c:	1eb9      	subs	r1, r7, #2
 80aad3e:	4628      	mov	r0, r5
 80aad40:	f000 fe69 	bl	80aba16 <__any_on>
 80aad44:	2800      	cmp	r0, #0
 80aad46:	d0f6      	beq.n	80aad36 <__gethex+0x218>
 80aad48:	f04f 0903 	mov.w	r9, #3
 80aad4c:	e000      	b.n	80aad50 <__gethex+0x232>
 80aad4e:	4681      	mov	r9, r0
 80aad50:	4639      	mov	r1, r7
 80aad52:	4628      	mov	r0, r5
 80aad54:	f7ff fe98 	bl	80aaa88 <rshift>
 80aad58:	443c      	add	r4, r7
 80aad5a:	e00c      	b.n	80aad76 <__gethex+0x258>
 80aad5c:	da09      	bge.n	80aad72 <__gethex+0x254>
 80aad5e:	1a37      	subs	r7, r6, r0
 80aad60:	4629      	mov	r1, r5
 80aad62:	463a      	mov	r2, r7
 80aad64:	9802      	ldr	r0, [sp, #8]
 80aad66:	f000 fc89 	bl	80ab67c <__lshift>
 80aad6a:	4605      	mov	r5, r0
 80aad6c:	1be4      	subs	r4, r4, r7
 80aad6e:	f100 0a14 	add.w	sl, r0, #20
 80aad72:	f04f 0900 	mov.w	r9, #0
 80aad76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80aad7a:	429c      	cmp	r4, r3
 80aad7c:	dd08      	ble.n	80aad90 <__gethex+0x272>
 80aad7e:	9802      	ldr	r0, [sp, #8]
 80aad80:	4629      	mov	r1, r5
 80aad82:	f000 fab6 	bl	80ab2f2 <_Bfree>
 80aad86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80aad88:	2300      	movs	r3, #0
 80aad8a:	6013      	str	r3, [r2, #0]
 80aad8c:	20a3      	movs	r0, #163	; 0xa3
 80aad8e:	e0e2      	b.n	80aaf56 <__gethex+0x438>
 80aad90:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80aad94:	4284      	cmp	r4, r0
 80aad96:	da53      	bge.n	80aae40 <__gethex+0x322>
 80aad98:	1b04      	subs	r4, r0, r4
 80aad9a:	42a6      	cmp	r6, r4
 80aad9c:	dc2e      	bgt.n	80aadfc <__gethex+0x2de>
 80aad9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80aada2:	2b02      	cmp	r3, #2
 80aada4:	d01a      	beq.n	80aaddc <__gethex+0x2be>
 80aada6:	2b03      	cmp	r3, #3
 80aada8:	d01c      	beq.n	80aade4 <__gethex+0x2c6>
 80aadaa:	2b01      	cmp	r3, #1
 80aadac:	d11d      	bne.n	80aadea <__gethex+0x2cc>
 80aadae:	42a6      	cmp	r6, r4
 80aadb0:	d11b      	bne.n	80aadea <__gethex+0x2cc>
 80aadb2:	2e01      	cmp	r6, #1
 80aadb4:	dc0b      	bgt.n	80aadce <__gethex+0x2b0>
 80aadb6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80aadba:	9a06      	ldr	r2, [sp, #24]
 80aadbc:	2062      	movs	r0, #98	; 0x62
 80aadbe:	6013      	str	r3, [r2, #0]
 80aadc0:	2301      	movs	r3, #1
 80aadc2:	612b      	str	r3, [r5, #16]
 80aadc4:	f8ca 3000 	str.w	r3, [sl]
 80aadc8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80aadca:	601d      	str	r5, [r3, #0]
 80aadcc:	e0c3      	b.n	80aaf56 <__gethex+0x438>
 80aadce:	1e71      	subs	r1, r6, #1
 80aadd0:	4628      	mov	r0, r5
 80aadd2:	f000 fe20 	bl	80aba16 <__any_on>
 80aadd6:	2800      	cmp	r0, #0
 80aadd8:	d1ed      	bne.n	80aadb6 <__gethex+0x298>
 80aadda:	e006      	b.n	80aadea <__gethex+0x2cc>
 80aaddc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80aadde:	2b00      	cmp	r3, #0
 80aade0:	d0e9      	beq.n	80aadb6 <__gethex+0x298>
 80aade2:	e002      	b.n	80aadea <__gethex+0x2cc>
 80aade4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80aade6:	2b00      	cmp	r3, #0
 80aade8:	d1e5      	bne.n	80aadb6 <__gethex+0x298>
 80aadea:	9802      	ldr	r0, [sp, #8]
 80aadec:	4629      	mov	r1, r5
 80aadee:	f000 fa80 	bl	80ab2f2 <_Bfree>
 80aadf2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80aadf4:	2300      	movs	r3, #0
 80aadf6:	6013      	str	r3, [r2, #0]
 80aadf8:	2050      	movs	r0, #80	; 0x50
 80aadfa:	e0ac      	b.n	80aaf56 <__gethex+0x438>
 80aadfc:	1e67      	subs	r7, r4, #1
 80aadfe:	f1b9 0f00 	cmp.w	r9, #0
 80aae02:	d106      	bne.n	80aae12 <__gethex+0x2f4>
 80aae04:	b13f      	cbz	r7, 80aae16 <__gethex+0x2f8>
 80aae06:	4639      	mov	r1, r7
 80aae08:	4628      	mov	r0, r5
 80aae0a:	f000 fe04 	bl	80aba16 <__any_on>
 80aae0e:	4681      	mov	r9, r0
 80aae10:	e001      	b.n	80aae16 <__gethex+0x2f8>
 80aae12:	f04f 0901 	mov.w	r9, #1
 80aae16:	117a      	asrs	r2, r7, #5
 80aae18:	2301      	movs	r3, #1
 80aae1a:	f007 071f 	and.w	r7, r7, #31
 80aae1e:	fa03 f707 	lsl.w	r7, r3, r7
 80aae22:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80aae26:	4621      	mov	r1, r4
 80aae28:	421f      	tst	r7, r3
 80aae2a:	4628      	mov	r0, r5
 80aae2c:	bf18      	it	ne
 80aae2e:	f049 0902 	orrne.w	r9, r9, #2
 80aae32:	1b36      	subs	r6, r6, r4
 80aae34:	f7ff fe28 	bl	80aaa88 <rshift>
 80aae38:	2702      	movs	r7, #2
 80aae3a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80aae3e:	e000      	b.n	80aae42 <__gethex+0x324>
 80aae40:	2701      	movs	r7, #1
 80aae42:	f1b9 0f00 	cmp.w	r9, #0
 80aae46:	f000 8081 	beq.w	80aaf4c <__gethex+0x42e>
 80aae4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80aae4e:	2b02      	cmp	r3, #2
 80aae50:	d00e      	beq.n	80aae70 <__gethex+0x352>
 80aae52:	2b03      	cmp	r3, #3
 80aae54:	d010      	beq.n	80aae78 <__gethex+0x35a>
 80aae56:	2b01      	cmp	r3, #1
 80aae58:	d176      	bne.n	80aaf48 <__gethex+0x42a>
 80aae5a:	f019 0f02 	tst.w	r9, #2
 80aae5e:	d073      	beq.n	80aaf48 <__gethex+0x42a>
 80aae60:	f8da 0000 	ldr.w	r0, [sl]
 80aae64:	ea49 0900 	orr.w	r9, r9, r0
 80aae68:	f019 0f01 	tst.w	r9, #1
 80aae6c:	d107      	bne.n	80aae7e <__gethex+0x360>
 80aae6e:	e06b      	b.n	80aaf48 <__gethex+0x42a>
 80aae70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80aae72:	f1c3 0301 	rsb	r3, r3, #1
 80aae76:	9315      	str	r3, [sp, #84]	; 0x54
 80aae78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80aae7a:	2b00      	cmp	r3, #0
 80aae7c:	d064      	beq.n	80aaf48 <__gethex+0x42a>
 80aae7e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80aae82:	f105 0314 	add.w	r3, r5, #20
 80aae86:	ea4f 098a 	mov.w	r9, sl, lsl #2
 80aae8a:	eb03 0109 	add.w	r1, r3, r9
 80aae8e:	2000      	movs	r0, #0
 80aae90:	681a      	ldr	r2, [r3, #0]
 80aae92:	f1b2 3fff 	cmp.w	r2, #4294967295
 80aae96:	d002      	beq.n	80aae9e <__gethex+0x380>
 80aae98:	3201      	adds	r2, #1
 80aae9a:	601a      	str	r2, [r3, #0]
 80aae9c:	e020      	b.n	80aaee0 <__gethex+0x3c2>
 80aae9e:	f843 0b04 	str.w	r0, [r3], #4
 80aaea2:	4299      	cmp	r1, r3
 80aaea4:	d8f4      	bhi.n	80aae90 <__gethex+0x372>
 80aaea6:	68ab      	ldr	r3, [r5, #8]
 80aaea8:	459a      	cmp	sl, r3
 80aaeaa:	db12      	blt.n	80aaed2 <__gethex+0x3b4>
 80aaeac:	6869      	ldr	r1, [r5, #4]
 80aaeae:	9802      	ldr	r0, [sp, #8]
 80aaeb0:	3101      	adds	r1, #1
 80aaeb2:	f000 f9e9 	bl	80ab288 <_Balloc>
 80aaeb6:	4683      	mov	fp, r0
 80aaeb8:	692a      	ldr	r2, [r5, #16]
 80aaeba:	f105 010c 	add.w	r1, r5, #12
 80aaebe:	3202      	adds	r2, #2
 80aaec0:	0092      	lsls	r2, r2, #2
 80aaec2:	300c      	adds	r0, #12
 80aaec4:	f7fd fe3f 	bl	80a8b46 <memcpy>
 80aaec8:	4629      	mov	r1, r5
 80aaeca:	9802      	ldr	r0, [sp, #8]
 80aaecc:	f000 fa11 	bl	80ab2f2 <_Bfree>
 80aaed0:	465d      	mov	r5, fp
 80aaed2:	692b      	ldr	r3, [r5, #16]
 80aaed4:	1c5a      	adds	r2, r3, #1
 80aaed6:	612a      	str	r2, [r5, #16]
 80aaed8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80aaedc:	2201      	movs	r2, #1
 80aaede:	615a      	str	r2, [r3, #20]
 80aaee0:	2f02      	cmp	r7, #2
 80aaee2:	f105 0214 	add.w	r2, r5, #20
 80aaee6:	d111      	bne.n	80aaf0c <__gethex+0x3ee>
 80aaee8:	f8d8 3000 	ldr.w	r3, [r8]
 80aaeec:	3b01      	subs	r3, #1
 80aaeee:	429e      	cmp	r6, r3
 80aaef0:	d127      	bne.n	80aaf42 <__gethex+0x424>
 80aaef2:	1171      	asrs	r1, r6, #5
 80aaef4:	2301      	movs	r3, #1
 80aaef6:	f006 061f 	and.w	r6, r6, #31
 80aaefa:	fa03 f606 	lsl.w	r6, r3, r6
 80aaefe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80aaf02:	421e      	tst	r6, r3
 80aaf04:	bf0c      	ite	eq
 80aaf06:	2702      	moveq	r7, #2
 80aaf08:	2701      	movne	r7, #1
 80aaf0a:	e01a      	b.n	80aaf42 <__gethex+0x424>
 80aaf0c:	692b      	ldr	r3, [r5, #16]
 80aaf0e:	459a      	cmp	sl, r3
 80aaf10:	da0a      	bge.n	80aaf28 <__gethex+0x40a>
 80aaf12:	2101      	movs	r1, #1
 80aaf14:	4628      	mov	r0, r5
 80aaf16:	f7ff fdb7 	bl	80aaa88 <rshift>
 80aaf1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80aaf1e:	3401      	adds	r4, #1
 80aaf20:	429c      	cmp	r4, r3
 80aaf22:	f73f af2c 	bgt.w	80aad7e <__gethex+0x260>
 80aaf26:	e00b      	b.n	80aaf40 <__gethex+0x422>
 80aaf28:	f016 061f 	ands.w	r6, r6, #31
 80aaf2c:	d008      	beq.n	80aaf40 <__gethex+0x422>
 80aaf2e:	4491      	add	r9, r2
 80aaf30:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80aaf34:	f000 fa6d 	bl	80ab412 <__hi0bits>
 80aaf38:	f1c6 0620 	rsb	r6, r6, #32
 80aaf3c:	42b0      	cmp	r0, r6
 80aaf3e:	dbe8      	blt.n	80aaf12 <__gethex+0x3f4>
 80aaf40:	2701      	movs	r7, #1
 80aaf42:	f047 0720 	orr.w	r7, r7, #32
 80aaf46:	e001      	b.n	80aaf4c <__gethex+0x42e>
 80aaf48:	f047 0710 	orr.w	r7, r7, #16
 80aaf4c:	4638      	mov	r0, r7
 80aaf4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80aaf50:	601d      	str	r5, [r3, #0]
 80aaf52:	9b06      	ldr	r3, [sp, #24]
 80aaf54:	601c      	str	r4, [r3, #0]
 80aaf56:	b00b      	add	sp, #44	; 0x2c
 80aaf58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080aaf5c <L_shift>:
 80aaf5c:	f1c2 0208 	rsb	r2, r2, #8
 80aaf60:	0092      	lsls	r2, r2, #2
 80aaf62:	b570      	push	{r4, r5, r6, lr}
 80aaf64:	f1c2 0620 	rsb	r6, r2, #32
 80aaf68:	6843      	ldr	r3, [r0, #4]
 80aaf6a:	6805      	ldr	r5, [r0, #0]
 80aaf6c:	fa03 f406 	lsl.w	r4, r3, r6
 80aaf70:	432c      	orrs	r4, r5
 80aaf72:	40d3      	lsrs	r3, r2
 80aaf74:	6004      	str	r4, [r0, #0]
 80aaf76:	f840 3f04 	str.w	r3, [r0, #4]!
 80aaf7a:	4288      	cmp	r0, r1
 80aaf7c:	d3f4      	bcc.n	80aaf68 <L_shift+0xc>
 80aaf7e:	bd70      	pop	{r4, r5, r6, pc}

080aaf80 <__match>:
 80aaf80:	b530      	push	{r4, r5, lr}
 80aaf82:	6803      	ldr	r3, [r0, #0]
 80aaf84:	f811 4b01 	ldrb.w	r4, [r1], #1
 80aaf88:	3301      	adds	r3, #1
 80aaf8a:	b14c      	cbz	r4, 80aafa0 <__match+0x20>
 80aaf8c:	781a      	ldrb	r2, [r3, #0]
 80aaf8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80aaf92:	2d19      	cmp	r5, #25
 80aaf94:	bf98      	it	ls
 80aaf96:	3220      	addls	r2, #32
 80aaf98:	42a2      	cmp	r2, r4
 80aaf9a:	d0f3      	beq.n	80aaf84 <__match+0x4>
 80aaf9c:	2000      	movs	r0, #0
 80aaf9e:	bd30      	pop	{r4, r5, pc}
 80aafa0:	6003      	str	r3, [r0, #0]
 80aafa2:	2001      	movs	r0, #1
 80aafa4:	bd30      	pop	{r4, r5, pc}

080aafa6 <__hexnan>:
 80aafa6:	680b      	ldr	r3, [r1, #0]
 80aafa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80aafac:	115e      	asrs	r6, r3, #5
 80aafae:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80aafb2:	f013 031f 	ands.w	r3, r3, #31
 80aafb6:	bf18      	it	ne
 80aafb8:	3604      	addne	r6, #4
 80aafba:	1f35      	subs	r5, r6, #4
 80aafbc:	4617      	mov	r7, r2
 80aafbe:	2200      	movs	r2, #0
 80aafc0:	4682      	mov	sl, r0
 80aafc2:	46a8      	mov	r8, r5
 80aafc4:	462c      	mov	r4, r5
 80aafc6:	4691      	mov	r9, r2
 80aafc8:	b085      	sub	sp, #20
 80aafca:	f8d0 b000 	ldr.w	fp, [r0]
 80aafce:	9301      	str	r3, [sp, #4]
 80aafd0:	f846 2c04 	str.w	r2, [r6, #-4]
 80aafd4:	9200      	str	r2, [sp, #0]
 80aafd6:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 80aafda:	2900      	cmp	r1, #0
 80aafdc:	d03c      	beq.n	80ab058 <__hexnan+0xb2>
 80aafde:	4608      	mov	r0, r1
 80aafe0:	9203      	str	r2, [sp, #12]
 80aafe2:	9102      	str	r1, [sp, #8]
 80aafe4:	f7ff fd86 	bl	80aaaf4 <__hexdig_fun>
 80aafe8:	9a03      	ldr	r2, [sp, #12]
 80aafea:	bb00      	cbnz	r0, 80ab02e <__hexnan+0x88>
 80aafec:	9902      	ldr	r1, [sp, #8]
 80aafee:	2920      	cmp	r1, #32
 80aaff0:	d816      	bhi.n	80ab020 <__hexnan+0x7a>
 80aaff2:	9b00      	ldr	r3, [sp, #0]
 80aaff4:	4599      	cmp	r9, r3
 80aaff6:	ddee      	ble.n	80aafd6 <__hexnan+0x30>
 80aaff8:	4544      	cmp	r4, r8
 80aaffa:	d205      	bcs.n	80ab008 <__hexnan+0x62>
 80aaffc:	2a07      	cmp	r2, #7
 80aaffe:	dc03      	bgt.n	80ab008 <__hexnan+0x62>
 80ab000:	4641      	mov	r1, r8
 80ab002:	4620      	mov	r0, r4
 80ab004:	f7ff ffaa 	bl	80aaf5c <L_shift>
 80ab008:	42bc      	cmp	r4, r7
 80ab00a:	d923      	bls.n	80ab054 <__hexnan+0xae>
 80ab00c:	2300      	movs	r3, #0
 80ab00e:	f1a4 0804 	sub.w	r8, r4, #4
 80ab012:	f844 3c04 	str.w	r3, [r4, #-4]
 80ab016:	f8cd 9000 	str.w	r9, [sp]
 80ab01a:	4644      	mov	r4, r8
 80ab01c:	461a      	mov	r2, r3
 80ab01e:	e7da      	b.n	80aafd6 <__hexnan+0x30>
 80ab020:	2929      	cmp	r1, #41	; 0x29
 80ab022:	d148      	bne.n	80ab0b6 <__hexnan+0x110>
 80ab024:	f10b 0301 	add.w	r3, fp, #1
 80ab028:	f8ca 3000 	str.w	r3, [sl]
 80ab02c:	e014      	b.n	80ab058 <__hexnan+0xb2>
 80ab02e:	3201      	adds	r2, #1
 80ab030:	2a08      	cmp	r2, #8
 80ab032:	f109 0901 	add.w	r9, r9, #1
 80ab036:	dd06      	ble.n	80ab046 <__hexnan+0xa0>
 80ab038:	42bc      	cmp	r4, r7
 80ab03a:	d9cc      	bls.n	80aafd6 <__hexnan+0x30>
 80ab03c:	2300      	movs	r3, #0
 80ab03e:	f844 3c04 	str.w	r3, [r4, #-4]
 80ab042:	2201      	movs	r2, #1
 80ab044:	3c04      	subs	r4, #4
 80ab046:	6821      	ldr	r1, [r4, #0]
 80ab048:	f000 000f 	and.w	r0, r0, #15
 80ab04c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80ab050:	6020      	str	r0, [r4, #0]
 80ab052:	e7c0      	b.n	80aafd6 <__hexnan+0x30>
 80ab054:	2208      	movs	r2, #8
 80ab056:	e7be      	b.n	80aafd6 <__hexnan+0x30>
 80ab058:	f1b9 0f00 	cmp.w	r9, #0
 80ab05c:	d02b      	beq.n	80ab0b6 <__hexnan+0x110>
 80ab05e:	4544      	cmp	r4, r8
 80ab060:	d205      	bcs.n	80ab06e <__hexnan+0xc8>
 80ab062:	2a07      	cmp	r2, #7
 80ab064:	dc03      	bgt.n	80ab06e <__hexnan+0xc8>
 80ab066:	4641      	mov	r1, r8
 80ab068:	4620      	mov	r0, r4
 80ab06a:	f7ff ff77 	bl	80aaf5c <L_shift>
 80ab06e:	42bc      	cmp	r4, r7
 80ab070:	d90c      	bls.n	80ab08c <__hexnan+0xe6>
 80ab072:	463b      	mov	r3, r7
 80ab074:	f854 2b04 	ldr.w	r2, [r4], #4
 80ab078:	42a5      	cmp	r5, r4
 80ab07a:	f843 2b04 	str.w	r2, [r3], #4
 80ab07e:	d2f9      	bcs.n	80ab074 <__hexnan+0xce>
 80ab080:	2200      	movs	r2, #0
 80ab082:	f843 2b04 	str.w	r2, [r3], #4
 80ab086:	429d      	cmp	r5, r3
 80ab088:	d2fb      	bcs.n	80ab082 <__hexnan+0xdc>
 80ab08a:	e00b      	b.n	80ab0a4 <__hexnan+0xfe>
 80ab08c:	9b01      	ldr	r3, [sp, #4]
 80ab08e:	b14b      	cbz	r3, 80ab0a4 <__hexnan+0xfe>
 80ab090:	f1c3 0220 	rsb	r2, r3, #32
 80ab094:	f04f 33ff 	mov.w	r3, #4294967295
 80ab098:	40d3      	lsrs	r3, r2
 80ab09a:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80ab09e:	4013      	ands	r3, r2
 80ab0a0:	f846 3c04 	str.w	r3, [r6, #-4]
 80ab0a4:	682b      	ldr	r3, [r5, #0]
 80ab0a6:	b943      	cbnz	r3, 80ab0ba <__hexnan+0x114>
 80ab0a8:	42bd      	cmp	r5, r7
 80ab0aa:	d102      	bne.n	80ab0b2 <__hexnan+0x10c>
 80ab0ac:	2301      	movs	r3, #1
 80ab0ae:	602b      	str	r3, [r5, #0]
 80ab0b0:	e003      	b.n	80ab0ba <__hexnan+0x114>
 80ab0b2:	3d04      	subs	r5, #4
 80ab0b4:	e7f6      	b.n	80ab0a4 <__hexnan+0xfe>
 80ab0b6:	2004      	movs	r0, #4
 80ab0b8:	e000      	b.n	80ab0bc <__hexnan+0x116>
 80ab0ba:	2005      	movs	r0, #5
 80ab0bc:	b005      	add	sp, #20
 80ab0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080ab0c4 <_findenv_r>:
 80ab0c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80ab0c8:	4607      	mov	r7, r0
 80ab0ca:	468b      	mov	fp, r1
 80ab0cc:	4690      	mov	r8, r2
 80ab0ce:	f000 fcd2 	bl	80aba76 <__env_lock>
 80ab0d2:	4b19      	ldr	r3, [pc, #100]	; (80ab138 <_findenv_r+0x74>)
 80ab0d4:	681d      	ldr	r5, [r3, #0]
 80ab0d6:	469a      	mov	sl, r3
 80ab0d8:	b13d      	cbz	r5, 80ab0ea <_findenv_r+0x26>
 80ab0da:	465c      	mov	r4, fp
 80ab0dc:	4623      	mov	r3, r4
 80ab0de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80ab0e2:	b142      	cbz	r2, 80ab0f6 <_findenv_r+0x32>
 80ab0e4:	2a3d      	cmp	r2, #61	; 0x3d
 80ab0e6:	461c      	mov	r4, r3
 80ab0e8:	d1f8      	bne.n	80ab0dc <_findenv_r+0x18>
 80ab0ea:	4638      	mov	r0, r7
 80ab0ec:	f000 fcc4 	bl	80aba78 <__env_unlock>
 80ab0f0:	2000      	movs	r0, #0
 80ab0f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ab0f6:	ebcb 0404 	rsb	r4, fp, r4
 80ab0fa:	46a9      	mov	r9, r5
 80ab0fc:	f859 0b04 	ldr.w	r0, [r9], #4
 80ab100:	2800      	cmp	r0, #0
 80ab102:	d0f2      	beq.n	80ab0ea <_findenv_r+0x26>
 80ab104:	4622      	mov	r2, r4
 80ab106:	4659      	mov	r1, fp
 80ab108:	f7fe fb10 	bl	80a972c <strncmp>
 80ab10c:	b988      	cbnz	r0, 80ab132 <_findenv_r+0x6e>
 80ab10e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80ab112:	191e      	adds	r6, r3, r4
 80ab114:	5d1b      	ldrb	r3, [r3, r4]
 80ab116:	2b3d      	cmp	r3, #61	; 0x3d
 80ab118:	d10b      	bne.n	80ab132 <_findenv_r+0x6e>
 80ab11a:	f8da 3000 	ldr.w	r3, [sl]
 80ab11e:	4638      	mov	r0, r7
 80ab120:	1aed      	subs	r5, r5, r3
 80ab122:	10ad      	asrs	r5, r5, #2
 80ab124:	f8c8 5000 	str.w	r5, [r8]
 80ab128:	f000 fca6 	bl	80aba78 <__env_unlock>
 80ab12c:	1c70      	adds	r0, r6, #1
 80ab12e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80ab132:	464d      	mov	r5, r9
 80ab134:	e7e1      	b.n	80ab0fa <_findenv_r+0x36>
 80ab136:	bf00      	nop
 80ab138:	20000178 	.word	0x20000178

080ab13c <_getenv_r>:
 80ab13c:	b507      	push	{r0, r1, r2, lr}
 80ab13e:	aa01      	add	r2, sp, #4
 80ab140:	f7ff ffc0 	bl	80ab0c4 <_findenv_r>
 80ab144:	b003      	add	sp, #12
 80ab146:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080ab14c <__gettzinfo>:
 80ab14c:	4800      	ldr	r0, [pc, #0]	; (80ab150 <__gettzinfo+0x4>)
 80ab14e:	4770      	bx	lr
 80ab150:	20000138 	.word	0x20000138

080ab154 <gmtime_r>:
 80ab154:	6802      	ldr	r2, [r0, #0]
 80ab156:	4b46      	ldr	r3, [pc, #280]	; (80ab270 <gmtime_r+0x11c>)
 80ab158:	b5f0      	push	{r4, r5, r6, r7, lr}
 80ab15a:	fb92 f4f3 	sdiv	r4, r2, r3
 80ab15e:	fb03 2214 	mls	r2, r3, r4, r2
 80ab162:	2a00      	cmp	r2, #0
 80ab164:	bfbc      	itt	lt
 80ab166:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80ab16a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80ab16e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80ab172:	fb92 f3f0 	sdiv	r3, r2, r0
 80ab176:	fb00 2213 	mls	r2, r0, r3, r2
 80ab17a:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80ab17e:	608b      	str	r3, [r1, #8]
 80ab180:	fb92 f3f0 	sdiv	r3, r2, r0
 80ab184:	fb00 2213 	mls	r2, r0, r3, r2
 80ab188:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80ab18c:	bfac      	ite	ge
 80ab18e:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80ab192:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80ab196:	604b      	str	r3, [r1, #4]
 80ab198:	600a      	str	r2, [r1, #0]
 80ab19a:	2307      	movs	r3, #7
 80ab19c:	1ce2      	adds	r2, r4, #3
 80ab19e:	fb92 f3f3 	sdiv	r3, r2, r3
 80ab1a2:	4d34      	ldr	r5, [pc, #208]	; (80ab274 <gmtime_r+0x120>)
 80ab1a4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80ab1a8:	fb94 f5f5 	sdiv	r5, r4, r5
 80ab1ac:	1ad3      	subs	r3, r2, r3
 80ab1ae:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80ab1b2:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80ab1b6:	618b      	str	r3, [r1, #24]
 80ab1b8:	4b2f      	ldr	r3, [pc, #188]	; (80ab278 <gmtime_r+0x124>)
 80ab1ba:	4830      	ldr	r0, [pc, #192]	; (80ab27c <gmtime_r+0x128>)
 80ab1bc:	fb03 4405 	mla	r4, r3, r5, r4
 80ab1c0:	fbb4 f2f2 	udiv	r2, r4, r2
 80ab1c4:	fbb4 f3f7 	udiv	r3, r4, r7
 80ab1c8:	fbb4 f0f0 	udiv	r0, r4, r0
 80ab1cc:	4422      	add	r2, r4
 80ab1ce:	1ad2      	subs	r2, r2, r3
 80ab1d0:	f648 6694 	movw	r6, #36500	; 0x8e94
 80ab1d4:	1a13      	subs	r3, r2, r0
 80ab1d6:	f240 126d 	movw	r2, #365	; 0x16d
 80ab1da:	fbb3 f6f6 	udiv	r6, r3, r6
 80ab1de:	fbb3 f0f2 	udiv	r0, r3, r2
 80ab1e2:	fbb3 f3f7 	udiv	r3, r3, r7
 80ab1e6:	4434      	add	r4, r6
 80ab1e8:	1ae3      	subs	r3, r4, r3
 80ab1ea:	fb02 3310 	mls	r3, r2, r0, r3
 80ab1ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80ab1f2:	2499      	movs	r4, #153	; 0x99
 80ab1f4:	3202      	adds	r2, #2
 80ab1f6:	fbb2 f2f4 	udiv	r2, r2, r4
 80ab1fa:	4354      	muls	r4, r2
 80ab1fc:	1ca6      	adds	r6, r4, #2
 80ab1fe:	2405      	movs	r4, #5
 80ab200:	fbb6 f4f4 	udiv	r4, r6, r4
 80ab204:	2a0a      	cmp	r2, #10
 80ab206:	bf34      	ite	cc
 80ab208:	2602      	movcc	r6, #2
 80ab20a:	f06f 0609 	mvncs.w	r6, #9
 80ab20e:	4416      	add	r6, r2
 80ab210:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80ab214:	fb02 0505 	mla	r5, r2, r5, r0
 80ab218:	1c5f      	adds	r7, r3, #1
 80ab21a:	2e01      	cmp	r6, #1
 80ab21c:	bf98      	it	ls
 80ab21e:	3501      	addls	r5, #1
 80ab220:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80ab224:	eba7 0704 	sub.w	r7, r7, r4
 80ab228:	d302      	bcc.n	80ab230 <gmtime_r+0xdc>
 80ab22a:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80ab22e:	e014      	b.n	80ab25a <gmtime_r+0x106>
 80ab230:	0782      	lsls	r2, r0, #30
 80ab232:	d105      	bne.n	80ab240 <gmtime_r+0xec>
 80ab234:	2464      	movs	r4, #100	; 0x64
 80ab236:	fbb0 f2f4 	udiv	r2, r0, r4
 80ab23a:	fb04 0212 	mls	r2, r4, r2, r0
 80ab23e:	b94a      	cbnz	r2, 80ab254 <gmtime_r+0x100>
 80ab240:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80ab244:	fbb0 f4f2 	udiv	r4, r0, r2
 80ab248:	fb02 0014 	mls	r0, r2, r4, r0
 80ab24c:	fab0 f280 	clz	r2, r0
 80ab250:	0952      	lsrs	r2, r2, #5
 80ab252:	e000      	b.n	80ab256 <gmtime_r+0x102>
 80ab254:	2201      	movs	r2, #1
 80ab256:	333b      	adds	r3, #59	; 0x3b
 80ab258:	441a      	add	r2, r3
 80ab25a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80ab25e:	2300      	movs	r3, #0
 80ab260:	61ca      	str	r2, [r1, #28]
 80ab262:	614d      	str	r5, [r1, #20]
 80ab264:	610e      	str	r6, [r1, #16]
 80ab266:	60cf      	str	r7, [r1, #12]
 80ab268:	620b      	str	r3, [r1, #32]
 80ab26a:	4608      	mov	r0, r1
 80ab26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80ab26e:	bf00      	nop
 80ab270:	00015180 	.word	0x00015180
 80ab274:	00023ab1 	.word	0x00023ab1
 80ab278:	fffdc54f 	.word	0xfffdc54f
 80ab27c:	00023ab0 	.word	0x00023ab0

080ab280 <labs>:
 80ab280:	2800      	cmp	r0, #0
 80ab282:	bfb8      	it	lt
 80ab284:	4240      	neglt	r0, r0
 80ab286:	4770      	bx	lr

080ab288 <_Balloc>:
 80ab288:	b570      	push	{r4, r5, r6, lr}
 80ab28a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80ab28c:	4604      	mov	r4, r0
 80ab28e:	460e      	mov	r6, r1
 80ab290:	b93d      	cbnz	r5, 80ab2a2 <_Balloc+0x1a>
 80ab292:	2010      	movs	r0, #16
 80ab294:	f7f8 ff76 	bl	80a4184 <malloc>
 80ab298:	6260      	str	r0, [r4, #36]	; 0x24
 80ab29a:	6045      	str	r5, [r0, #4]
 80ab29c:	6085      	str	r5, [r0, #8]
 80ab29e:	6005      	str	r5, [r0, #0]
 80ab2a0:	60c5      	str	r5, [r0, #12]
 80ab2a2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80ab2a4:	68eb      	ldr	r3, [r5, #12]
 80ab2a6:	b143      	cbz	r3, 80ab2ba <_Balloc+0x32>
 80ab2a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80ab2aa:	68db      	ldr	r3, [r3, #12]
 80ab2ac:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80ab2b0:	b178      	cbz	r0, 80ab2d2 <_Balloc+0x4a>
 80ab2b2:	6802      	ldr	r2, [r0, #0]
 80ab2b4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80ab2b8:	e017      	b.n	80ab2ea <_Balloc+0x62>
 80ab2ba:	2221      	movs	r2, #33	; 0x21
 80ab2bc:	2104      	movs	r1, #4
 80ab2be:	4620      	mov	r0, r4
 80ab2c0:	f000 fbcb 	bl	80aba5a <_calloc_r>
 80ab2c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80ab2c6:	60e8      	str	r0, [r5, #12]
 80ab2c8:	68db      	ldr	r3, [r3, #12]
 80ab2ca:	2b00      	cmp	r3, #0
 80ab2cc:	d1ec      	bne.n	80ab2a8 <_Balloc+0x20>
 80ab2ce:	2000      	movs	r0, #0
 80ab2d0:	bd70      	pop	{r4, r5, r6, pc}
 80ab2d2:	2101      	movs	r1, #1
 80ab2d4:	fa01 f506 	lsl.w	r5, r1, r6
 80ab2d8:	1d6a      	adds	r2, r5, #5
 80ab2da:	0092      	lsls	r2, r2, #2
 80ab2dc:	4620      	mov	r0, r4
 80ab2de:	f000 fbbc 	bl	80aba5a <_calloc_r>
 80ab2e2:	2800      	cmp	r0, #0
 80ab2e4:	d0f3      	beq.n	80ab2ce <_Balloc+0x46>
 80ab2e6:	6046      	str	r6, [r0, #4]
 80ab2e8:	6085      	str	r5, [r0, #8]
 80ab2ea:	2300      	movs	r3, #0
 80ab2ec:	6103      	str	r3, [r0, #16]
 80ab2ee:	60c3      	str	r3, [r0, #12]
 80ab2f0:	bd70      	pop	{r4, r5, r6, pc}

080ab2f2 <_Bfree>:
 80ab2f2:	b570      	push	{r4, r5, r6, lr}
 80ab2f4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80ab2f6:	4606      	mov	r6, r0
 80ab2f8:	460d      	mov	r5, r1
 80ab2fa:	b93c      	cbnz	r4, 80ab30c <_Bfree+0x1a>
 80ab2fc:	2010      	movs	r0, #16
 80ab2fe:	f7f8 ff41 	bl	80a4184 <malloc>
 80ab302:	6270      	str	r0, [r6, #36]	; 0x24
 80ab304:	6044      	str	r4, [r0, #4]
 80ab306:	6084      	str	r4, [r0, #8]
 80ab308:	6004      	str	r4, [r0, #0]
 80ab30a:	60c4      	str	r4, [r0, #12]
 80ab30c:	b13d      	cbz	r5, 80ab31e <_Bfree+0x2c>
 80ab30e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80ab310:	686a      	ldr	r2, [r5, #4]
 80ab312:	68db      	ldr	r3, [r3, #12]
 80ab314:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80ab318:	6029      	str	r1, [r5, #0]
 80ab31a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80ab31e:	bd70      	pop	{r4, r5, r6, pc}

080ab320 <__multadd>:
 80ab320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80ab324:	4606      	mov	r6, r0
 80ab326:	460c      	mov	r4, r1
 80ab328:	690d      	ldr	r5, [r1, #16]
 80ab32a:	461f      	mov	r7, r3
 80ab32c:	f101 0e14 	add.w	lr, r1, #20
 80ab330:	2300      	movs	r3, #0
 80ab332:	f8de 0000 	ldr.w	r0, [lr]
 80ab336:	3301      	adds	r3, #1
 80ab338:	b281      	uxth	r1, r0
 80ab33a:	fb02 7101 	mla	r1, r2, r1, r7
 80ab33e:	0c00      	lsrs	r0, r0, #16
 80ab340:	0c0f      	lsrs	r7, r1, #16
 80ab342:	fb02 7000 	mla	r0, r2, r0, r7
 80ab346:	b289      	uxth	r1, r1
 80ab348:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80ab34c:	429d      	cmp	r5, r3
 80ab34e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80ab352:	f84e 1b04 	str.w	r1, [lr], #4
 80ab356:	dcec      	bgt.n	80ab332 <__multadd+0x12>
 80ab358:	b1d7      	cbz	r7, 80ab390 <__multadd+0x70>
 80ab35a:	68a3      	ldr	r3, [r4, #8]
 80ab35c:	429d      	cmp	r5, r3
 80ab35e:	db12      	blt.n	80ab386 <__multadd+0x66>
 80ab360:	6861      	ldr	r1, [r4, #4]
 80ab362:	4630      	mov	r0, r6
 80ab364:	3101      	adds	r1, #1
 80ab366:	f7ff ff8f 	bl	80ab288 <_Balloc>
 80ab36a:	4680      	mov	r8, r0
 80ab36c:	6922      	ldr	r2, [r4, #16]
 80ab36e:	f104 010c 	add.w	r1, r4, #12
 80ab372:	3202      	adds	r2, #2
 80ab374:	0092      	lsls	r2, r2, #2
 80ab376:	300c      	adds	r0, #12
 80ab378:	f7fd fbe5 	bl	80a8b46 <memcpy>
 80ab37c:	4621      	mov	r1, r4
 80ab37e:	4630      	mov	r0, r6
 80ab380:	f7ff ffb7 	bl	80ab2f2 <_Bfree>
 80ab384:	4644      	mov	r4, r8
 80ab386:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80ab38a:	3501      	adds	r5, #1
 80ab38c:	615f      	str	r7, [r3, #20]
 80ab38e:	6125      	str	r5, [r4, #16]
 80ab390:	4620      	mov	r0, r4
 80ab392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080ab396 <__s2b>:
 80ab396:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80ab39a:	4606      	mov	r6, r0
 80ab39c:	4615      	mov	r5, r2
 80ab39e:	461f      	mov	r7, r3
 80ab3a0:	2209      	movs	r2, #9
 80ab3a2:	3308      	adds	r3, #8
 80ab3a4:	460c      	mov	r4, r1
 80ab3a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80ab3aa:	2100      	movs	r1, #0
 80ab3ac:	2201      	movs	r2, #1
 80ab3ae:	429a      	cmp	r2, r3
 80ab3b0:	da02      	bge.n	80ab3b8 <__s2b+0x22>
 80ab3b2:	0052      	lsls	r2, r2, #1
 80ab3b4:	3101      	adds	r1, #1
 80ab3b6:	e7fa      	b.n	80ab3ae <__s2b+0x18>
 80ab3b8:	4630      	mov	r0, r6
 80ab3ba:	f7ff ff65 	bl	80ab288 <_Balloc>
 80ab3be:	9b08      	ldr	r3, [sp, #32]
 80ab3c0:	2d09      	cmp	r5, #9
 80ab3c2:	6143      	str	r3, [r0, #20]
 80ab3c4:	f04f 0301 	mov.w	r3, #1
 80ab3c8:	6103      	str	r3, [r0, #16]
 80ab3ca:	dd11      	ble.n	80ab3f0 <__s2b+0x5a>
 80ab3cc:	f104 0809 	add.w	r8, r4, #9
 80ab3d0:	46c1      	mov	r9, r8
 80ab3d2:	442c      	add	r4, r5
 80ab3d4:	f819 3b01 	ldrb.w	r3, [r9], #1
 80ab3d8:	4601      	mov	r1, r0
 80ab3da:	3b30      	subs	r3, #48	; 0x30
 80ab3dc:	220a      	movs	r2, #10
 80ab3de:	4630      	mov	r0, r6
 80ab3e0:	f7ff ff9e 	bl	80ab320 <__multadd>
 80ab3e4:	45a1      	cmp	r9, r4
 80ab3e6:	d1f5      	bne.n	80ab3d4 <__s2b+0x3e>
 80ab3e8:	eb08 0405 	add.w	r4, r8, r5
 80ab3ec:	3c08      	subs	r4, #8
 80ab3ee:	e001      	b.n	80ab3f4 <__s2b+0x5e>
 80ab3f0:	340a      	adds	r4, #10
 80ab3f2:	2509      	movs	r5, #9
 80ab3f4:	1b2d      	subs	r5, r5, r4
 80ab3f6:	1963      	adds	r3, r4, r5
 80ab3f8:	429f      	cmp	r7, r3
 80ab3fa:	dd08      	ble.n	80ab40e <__s2b+0x78>
 80ab3fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80ab400:	4601      	mov	r1, r0
 80ab402:	3b30      	subs	r3, #48	; 0x30
 80ab404:	220a      	movs	r2, #10
 80ab406:	4630      	mov	r0, r6
 80ab408:	f7ff ff8a 	bl	80ab320 <__multadd>
 80ab40c:	e7f3      	b.n	80ab3f6 <__s2b+0x60>
 80ab40e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080ab412 <__hi0bits>:
 80ab412:	0c03      	lsrs	r3, r0, #16
 80ab414:	041b      	lsls	r3, r3, #16
 80ab416:	b913      	cbnz	r3, 80ab41e <__hi0bits+0xc>
 80ab418:	0400      	lsls	r0, r0, #16
 80ab41a:	2310      	movs	r3, #16
 80ab41c:	e000      	b.n	80ab420 <__hi0bits+0xe>
 80ab41e:	2300      	movs	r3, #0
 80ab420:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80ab424:	bf04      	itt	eq
 80ab426:	0200      	lsleq	r0, r0, #8
 80ab428:	3308      	addeq	r3, #8
 80ab42a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80ab42e:	bf04      	itt	eq
 80ab430:	0100      	lsleq	r0, r0, #4
 80ab432:	3304      	addeq	r3, #4
 80ab434:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80ab438:	bf04      	itt	eq
 80ab43a:	0080      	lsleq	r0, r0, #2
 80ab43c:	3302      	addeq	r3, #2
 80ab43e:	2800      	cmp	r0, #0
 80ab440:	db03      	blt.n	80ab44a <__hi0bits+0x38>
 80ab442:	0042      	lsls	r2, r0, #1
 80ab444:	d503      	bpl.n	80ab44e <__hi0bits+0x3c>
 80ab446:	1c58      	adds	r0, r3, #1
 80ab448:	4770      	bx	lr
 80ab44a:	4618      	mov	r0, r3
 80ab44c:	4770      	bx	lr
 80ab44e:	2020      	movs	r0, #32
 80ab450:	4770      	bx	lr

080ab452 <__lo0bits>:
 80ab452:	6803      	ldr	r3, [r0, #0]
 80ab454:	f013 0207 	ands.w	r2, r3, #7
 80ab458:	d00b      	beq.n	80ab472 <__lo0bits+0x20>
 80ab45a:	07d9      	lsls	r1, r3, #31
 80ab45c:	d422      	bmi.n	80ab4a4 <__lo0bits+0x52>
 80ab45e:	079a      	lsls	r2, r3, #30
 80ab460:	bf4b      	itete	mi
 80ab462:	085b      	lsrmi	r3, r3, #1
 80ab464:	089b      	lsrpl	r3, r3, #2
 80ab466:	6003      	strmi	r3, [r0, #0]
 80ab468:	6003      	strpl	r3, [r0, #0]
 80ab46a:	bf4c      	ite	mi
 80ab46c:	2001      	movmi	r0, #1
 80ab46e:	2002      	movpl	r0, #2
 80ab470:	4770      	bx	lr
 80ab472:	b299      	uxth	r1, r3
 80ab474:	b909      	cbnz	r1, 80ab47a <__lo0bits+0x28>
 80ab476:	0c1b      	lsrs	r3, r3, #16
 80ab478:	2210      	movs	r2, #16
 80ab47a:	f013 0fff 	tst.w	r3, #255	; 0xff
 80ab47e:	bf04      	itt	eq
 80ab480:	0a1b      	lsreq	r3, r3, #8
 80ab482:	3208      	addeq	r2, #8
 80ab484:	0719      	lsls	r1, r3, #28
 80ab486:	bf04      	itt	eq
 80ab488:	091b      	lsreq	r3, r3, #4
 80ab48a:	3204      	addeq	r2, #4
 80ab48c:	0799      	lsls	r1, r3, #30
 80ab48e:	bf04      	itt	eq
 80ab490:	089b      	lsreq	r3, r3, #2
 80ab492:	3202      	addeq	r2, #2
 80ab494:	07d9      	lsls	r1, r3, #31
 80ab496:	d402      	bmi.n	80ab49e <__lo0bits+0x4c>
 80ab498:	085b      	lsrs	r3, r3, #1
 80ab49a:	d005      	beq.n	80ab4a8 <__lo0bits+0x56>
 80ab49c:	3201      	adds	r2, #1
 80ab49e:	6003      	str	r3, [r0, #0]
 80ab4a0:	4610      	mov	r0, r2
 80ab4a2:	4770      	bx	lr
 80ab4a4:	2000      	movs	r0, #0
 80ab4a6:	4770      	bx	lr
 80ab4a8:	2020      	movs	r0, #32
 80ab4aa:	4770      	bx	lr

080ab4ac <__i2b>:
 80ab4ac:	b510      	push	{r4, lr}
 80ab4ae:	460c      	mov	r4, r1
 80ab4b0:	2101      	movs	r1, #1
 80ab4b2:	f7ff fee9 	bl	80ab288 <_Balloc>
 80ab4b6:	2201      	movs	r2, #1
 80ab4b8:	6144      	str	r4, [r0, #20]
 80ab4ba:	6102      	str	r2, [r0, #16]
 80ab4bc:	bd10      	pop	{r4, pc}

080ab4be <__multiply>:
 80ab4be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80ab4c2:	4614      	mov	r4, r2
 80ab4c4:	690a      	ldr	r2, [r1, #16]
 80ab4c6:	6923      	ldr	r3, [r4, #16]
 80ab4c8:	4688      	mov	r8, r1
 80ab4ca:	429a      	cmp	r2, r3
 80ab4cc:	bfbe      	ittt	lt
 80ab4ce:	460b      	movlt	r3, r1
 80ab4d0:	46a0      	movlt	r8, r4
 80ab4d2:	461c      	movlt	r4, r3
 80ab4d4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80ab4d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80ab4dc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80ab4e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80ab4e4:	eb07 0609 	add.w	r6, r7, r9
 80ab4e8:	429e      	cmp	r6, r3
 80ab4ea:	bfc8      	it	gt
 80ab4ec:	3101      	addgt	r1, #1
 80ab4ee:	f7ff fecb 	bl	80ab288 <_Balloc>
 80ab4f2:	f100 0514 	add.w	r5, r0, #20
 80ab4f6:	462b      	mov	r3, r5
 80ab4f8:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 80ab4fc:	2200      	movs	r2, #0
 80ab4fe:	4563      	cmp	r3, ip
 80ab500:	d202      	bcs.n	80ab508 <__multiply+0x4a>
 80ab502:	f843 2b04 	str.w	r2, [r3], #4
 80ab506:	e7fa      	b.n	80ab4fe <__multiply+0x40>
 80ab508:	f104 0214 	add.w	r2, r4, #20
 80ab50c:	f108 0114 	add.w	r1, r8, #20
 80ab510:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80ab514:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80ab518:	9300      	str	r3, [sp, #0]
 80ab51a:	9b00      	ldr	r3, [sp, #0]
 80ab51c:	9201      	str	r2, [sp, #4]
 80ab51e:	4293      	cmp	r3, r2
 80ab520:	d957      	bls.n	80ab5d2 <__multiply+0x114>
 80ab522:	f8b2 b000 	ldrh.w	fp, [r2]
 80ab526:	f1bb 0f00 	cmp.w	fp, #0
 80ab52a:	d023      	beq.n	80ab574 <__multiply+0xb6>
 80ab52c:	4689      	mov	r9, r1
 80ab52e:	46ae      	mov	lr, r5
 80ab530:	f04f 0800 	mov.w	r8, #0
 80ab534:	f859 4b04 	ldr.w	r4, [r9], #4
 80ab538:	f8be a000 	ldrh.w	sl, [lr]
 80ab53c:	b2a3      	uxth	r3, r4
 80ab53e:	fb0b a303 	mla	r3, fp, r3, sl
 80ab542:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80ab546:	f8de 4000 	ldr.w	r4, [lr]
 80ab54a:	4443      	add	r3, r8
 80ab54c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80ab550:	fb0b 840a 	mla	r4, fp, sl, r8
 80ab554:	46f2      	mov	sl, lr
 80ab556:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80ab55a:	b29b      	uxth	r3, r3
 80ab55c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80ab560:	454f      	cmp	r7, r9
 80ab562:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80ab566:	f84a 3b04 	str.w	r3, [sl], #4
 80ab56a:	d901      	bls.n	80ab570 <__multiply+0xb2>
 80ab56c:	46d6      	mov	lr, sl
 80ab56e:	e7e1      	b.n	80ab534 <__multiply+0x76>
 80ab570:	f8ce 8004 	str.w	r8, [lr, #4]
 80ab574:	9b01      	ldr	r3, [sp, #4]
 80ab576:	3204      	adds	r2, #4
 80ab578:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80ab57c:	f1ba 0f00 	cmp.w	sl, #0
 80ab580:	d021      	beq.n	80ab5c6 <__multiply+0x108>
 80ab582:	462c      	mov	r4, r5
 80ab584:	4689      	mov	r9, r1
 80ab586:	682b      	ldr	r3, [r5, #0]
 80ab588:	f04f 0800 	mov.w	r8, #0
 80ab58c:	f8b9 e000 	ldrh.w	lr, [r9]
 80ab590:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80ab594:	b29b      	uxth	r3, r3
 80ab596:	fb0a be0e 	mla	lr, sl, lr, fp
 80ab59a:	46a3      	mov	fp, r4
 80ab59c:	44f0      	add	r8, lr
 80ab59e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80ab5a2:	f84b 3b04 	str.w	r3, [fp], #4
 80ab5a6:	f859 3b04 	ldr.w	r3, [r9], #4
 80ab5aa:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80ab5ae:	0c1b      	lsrs	r3, r3, #16
 80ab5b0:	fb0a e303 	mla	r3, sl, r3, lr
 80ab5b4:	454f      	cmp	r7, r9
 80ab5b6:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 80ab5ba:	ea4f 4813 	mov.w	r8, r3, lsr #16
 80ab5be:	d901      	bls.n	80ab5c4 <__multiply+0x106>
 80ab5c0:	465c      	mov	r4, fp
 80ab5c2:	e7e3      	b.n	80ab58c <__multiply+0xce>
 80ab5c4:	6063      	str	r3, [r4, #4]
 80ab5c6:	3504      	adds	r5, #4
 80ab5c8:	e7a7      	b.n	80ab51a <__multiply+0x5c>
 80ab5ca:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 80ab5ce:	b913      	cbnz	r3, 80ab5d6 <__multiply+0x118>
 80ab5d0:	3e01      	subs	r6, #1
 80ab5d2:	2e00      	cmp	r6, #0
 80ab5d4:	dcf9      	bgt.n	80ab5ca <__multiply+0x10c>
 80ab5d6:	6106      	str	r6, [r0, #16]
 80ab5d8:	b003      	add	sp, #12
 80ab5da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080ab5e0 <__pow5mult>:
 80ab5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80ab5e4:	4615      	mov	r5, r2
 80ab5e6:	f012 0203 	ands.w	r2, r2, #3
 80ab5ea:	4606      	mov	r6, r0
 80ab5ec:	460f      	mov	r7, r1
 80ab5ee:	d007      	beq.n	80ab600 <__pow5mult+0x20>
 80ab5f0:	4c21      	ldr	r4, [pc, #132]	; (80ab678 <__pow5mult+0x98>)
 80ab5f2:	3a01      	subs	r2, #1
 80ab5f4:	2300      	movs	r3, #0
 80ab5f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80ab5fa:	f7ff fe91 	bl	80ab320 <__multadd>
 80ab5fe:	4607      	mov	r7, r0
 80ab600:	10ad      	asrs	r5, r5, #2
 80ab602:	d036      	beq.n	80ab672 <__pow5mult+0x92>
 80ab604:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80ab606:	b93c      	cbnz	r4, 80ab618 <__pow5mult+0x38>
 80ab608:	2010      	movs	r0, #16
 80ab60a:	f7f8 fdbb 	bl	80a4184 <malloc>
 80ab60e:	6270      	str	r0, [r6, #36]	; 0x24
 80ab610:	6044      	str	r4, [r0, #4]
 80ab612:	6084      	str	r4, [r0, #8]
 80ab614:	6004      	str	r4, [r0, #0]
 80ab616:	60c4      	str	r4, [r0, #12]
 80ab618:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80ab61c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80ab620:	b94c      	cbnz	r4, 80ab636 <__pow5mult+0x56>
 80ab622:	f240 2171 	movw	r1, #625	; 0x271
 80ab626:	4630      	mov	r0, r6
 80ab628:	f7ff ff40 	bl	80ab4ac <__i2b>
 80ab62c:	4604      	mov	r4, r0
 80ab62e:	2300      	movs	r3, #0
 80ab630:	f8c8 0008 	str.w	r0, [r8, #8]
 80ab634:	6003      	str	r3, [r0, #0]
 80ab636:	f04f 0800 	mov.w	r8, #0
 80ab63a:	07eb      	lsls	r3, r5, #31
 80ab63c:	d50a      	bpl.n	80ab654 <__pow5mult+0x74>
 80ab63e:	4639      	mov	r1, r7
 80ab640:	4622      	mov	r2, r4
 80ab642:	4630      	mov	r0, r6
 80ab644:	f7ff ff3b 	bl	80ab4be <__multiply>
 80ab648:	4681      	mov	r9, r0
 80ab64a:	4639      	mov	r1, r7
 80ab64c:	4630      	mov	r0, r6
 80ab64e:	f7ff fe50 	bl	80ab2f2 <_Bfree>
 80ab652:	464f      	mov	r7, r9
 80ab654:	106d      	asrs	r5, r5, #1
 80ab656:	d00c      	beq.n	80ab672 <__pow5mult+0x92>
 80ab658:	6820      	ldr	r0, [r4, #0]
 80ab65a:	b108      	cbz	r0, 80ab660 <__pow5mult+0x80>
 80ab65c:	4604      	mov	r4, r0
 80ab65e:	e7ec      	b.n	80ab63a <__pow5mult+0x5a>
 80ab660:	4622      	mov	r2, r4
 80ab662:	4621      	mov	r1, r4
 80ab664:	4630      	mov	r0, r6
 80ab666:	f7ff ff2a 	bl	80ab4be <__multiply>
 80ab66a:	6020      	str	r0, [r4, #0]
 80ab66c:	f8c0 8000 	str.w	r8, [r0]
 80ab670:	e7f4      	b.n	80ab65c <__pow5mult+0x7c>
 80ab672:	4638      	mov	r0, r7
 80ab674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80ab678:	080aee20 	.word	0x080aee20

080ab67c <__lshift>:
 80ab67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80ab680:	460c      	mov	r4, r1
 80ab682:	4607      	mov	r7, r0
 80ab684:	4691      	mov	r9, r2
 80ab686:	6926      	ldr	r6, [r4, #16]
 80ab688:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80ab68c:	4456      	add	r6, sl
 80ab68e:	6849      	ldr	r1, [r1, #4]
 80ab690:	68a3      	ldr	r3, [r4, #8]
 80ab692:	1c75      	adds	r5, r6, #1
 80ab694:	42ab      	cmp	r3, r5
 80ab696:	da02      	bge.n	80ab69e <__lshift+0x22>
 80ab698:	3101      	adds	r1, #1
 80ab69a:	005b      	lsls	r3, r3, #1
 80ab69c:	e7fa      	b.n	80ab694 <__lshift+0x18>
 80ab69e:	4638      	mov	r0, r7
 80ab6a0:	f7ff fdf2 	bl	80ab288 <_Balloc>
 80ab6a4:	2300      	movs	r3, #0
 80ab6a6:	4680      	mov	r8, r0
 80ab6a8:	461a      	mov	r2, r3
 80ab6aa:	f100 0114 	add.w	r1, r0, #20
 80ab6ae:	4553      	cmp	r3, sl
 80ab6b0:	da03      	bge.n	80ab6ba <__lshift+0x3e>
 80ab6b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80ab6b6:	3301      	adds	r3, #1
 80ab6b8:	e7f9      	b.n	80ab6ae <__lshift+0x32>
 80ab6ba:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 80ab6be:	6920      	ldr	r0, [r4, #16]
 80ab6c0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80ab6c4:	f019 091f 	ands.w	r9, r9, #31
 80ab6c8:	f104 0114 	add.w	r1, r4, #20
 80ab6cc:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80ab6d0:	d014      	beq.n	80ab6fc <__lshift+0x80>
 80ab6d2:	f1c9 0c20 	rsb	ip, r9, #32
 80ab6d6:	2200      	movs	r2, #0
 80ab6d8:	6808      	ldr	r0, [r1, #0]
 80ab6da:	469a      	mov	sl, r3
 80ab6dc:	fa00 f009 	lsl.w	r0, r0, r9
 80ab6e0:	4302      	orrs	r2, r0
 80ab6e2:	f843 2b04 	str.w	r2, [r3], #4
 80ab6e6:	f851 2b04 	ldr.w	r2, [r1], #4
 80ab6ea:	458e      	cmp	lr, r1
 80ab6ec:	fa22 f20c 	lsr.w	r2, r2, ip
 80ab6f0:	d8f2      	bhi.n	80ab6d8 <__lshift+0x5c>
 80ab6f2:	f8ca 2004 	str.w	r2, [sl, #4]
 80ab6f6:	b142      	cbz	r2, 80ab70a <__lshift+0x8e>
 80ab6f8:	1cb5      	adds	r5, r6, #2
 80ab6fa:	e006      	b.n	80ab70a <__lshift+0x8e>
 80ab6fc:	3b04      	subs	r3, #4
 80ab6fe:	f851 2b04 	ldr.w	r2, [r1], #4
 80ab702:	458e      	cmp	lr, r1
 80ab704:	f843 2f04 	str.w	r2, [r3, #4]!
 80ab708:	d8f9      	bhi.n	80ab6fe <__lshift+0x82>
 80ab70a:	3d01      	subs	r5, #1
 80ab70c:	4638      	mov	r0, r7
 80ab70e:	f8c8 5010 	str.w	r5, [r8, #16]
 80ab712:	4621      	mov	r1, r4
 80ab714:	f7ff fded 	bl	80ab2f2 <_Bfree>
 80ab718:	4640      	mov	r0, r8
 80ab71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080ab71e <__mcmp>:
 80ab71e:	6903      	ldr	r3, [r0, #16]
 80ab720:	690a      	ldr	r2, [r1, #16]
 80ab722:	b510      	push	{r4, lr}
 80ab724:	1a9b      	subs	r3, r3, r2
 80ab726:	d111      	bne.n	80ab74c <__mcmp+0x2e>
 80ab728:	0092      	lsls	r2, r2, #2
 80ab72a:	3014      	adds	r0, #20
 80ab72c:	3114      	adds	r1, #20
 80ab72e:	1883      	adds	r3, r0, r2
 80ab730:	440a      	add	r2, r1
 80ab732:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80ab736:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80ab73a:	428c      	cmp	r4, r1
 80ab73c:	d002      	beq.n	80ab744 <__mcmp+0x26>
 80ab73e:	d307      	bcc.n	80ab750 <__mcmp+0x32>
 80ab740:	2001      	movs	r0, #1
 80ab742:	bd10      	pop	{r4, pc}
 80ab744:	4298      	cmp	r0, r3
 80ab746:	d3f4      	bcc.n	80ab732 <__mcmp+0x14>
 80ab748:	2000      	movs	r0, #0
 80ab74a:	bd10      	pop	{r4, pc}
 80ab74c:	4618      	mov	r0, r3
 80ab74e:	bd10      	pop	{r4, pc}
 80ab750:	f04f 30ff 	mov.w	r0, #4294967295
 80ab754:	bd10      	pop	{r4, pc}

080ab756 <__mdiff>:
 80ab756:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80ab75a:	460c      	mov	r4, r1
 80ab75c:	4607      	mov	r7, r0
 80ab75e:	4611      	mov	r1, r2
 80ab760:	4620      	mov	r0, r4
 80ab762:	4615      	mov	r5, r2
 80ab764:	f7ff ffdb 	bl	80ab71e <__mcmp>
 80ab768:	1e06      	subs	r6, r0, #0
 80ab76a:	d108      	bne.n	80ab77e <__mdiff+0x28>
 80ab76c:	4631      	mov	r1, r6
 80ab76e:	4638      	mov	r0, r7
 80ab770:	f7ff fd8a 	bl	80ab288 <_Balloc>
 80ab774:	2301      	movs	r3, #1
 80ab776:	6103      	str	r3, [r0, #16]
 80ab778:	6146      	str	r6, [r0, #20]
 80ab77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80ab77e:	bfbc      	itt	lt
 80ab780:	4623      	movlt	r3, r4
 80ab782:	462c      	movlt	r4, r5
 80ab784:	4638      	mov	r0, r7
 80ab786:	6861      	ldr	r1, [r4, #4]
 80ab788:	bfba      	itte	lt
 80ab78a:	461d      	movlt	r5, r3
 80ab78c:	2601      	movlt	r6, #1
 80ab78e:	2600      	movge	r6, #0
 80ab790:	f7ff fd7a 	bl	80ab288 <_Balloc>
 80ab794:	692b      	ldr	r3, [r5, #16]
 80ab796:	60c6      	str	r6, [r0, #12]
 80ab798:	6926      	ldr	r6, [r4, #16]
 80ab79a:	f105 0914 	add.w	r9, r5, #20
 80ab79e:	f104 0114 	add.w	r1, r4, #20
 80ab7a2:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80ab7a6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80ab7aa:	f100 0514 	add.w	r5, r0, #20
 80ab7ae:	f04f 0c00 	mov.w	ip, #0
 80ab7b2:	f851 2b04 	ldr.w	r2, [r1], #4
 80ab7b6:	f859 4b04 	ldr.w	r4, [r9], #4
 80ab7ba:	b293      	uxth	r3, r2
 80ab7bc:	449c      	add	ip, r3
 80ab7be:	b2a3      	uxth	r3, r4
 80ab7c0:	0c24      	lsrs	r4, r4, #16
 80ab7c2:	ebc3 030c 	rsb	r3, r3, ip
 80ab7c6:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 80ab7ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80ab7ce:	b29b      	uxth	r3, r3
 80ab7d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80ab7d4:	45c8      	cmp	r8, r9
 80ab7d6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80ab7da:	468e      	mov	lr, r1
 80ab7dc:	f845 2b04 	str.w	r2, [r5], #4
 80ab7e0:	d8e7      	bhi.n	80ab7b2 <__mdiff+0x5c>
 80ab7e2:	45be      	cmp	lr, r7
 80ab7e4:	d20e      	bcs.n	80ab804 <__mdiff+0xae>
 80ab7e6:	f85e 1b04 	ldr.w	r1, [lr], #4
 80ab7ea:	b28a      	uxth	r2, r1
 80ab7ec:	4462      	add	r2, ip
 80ab7ee:	1413      	asrs	r3, r2, #16
 80ab7f0:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 80ab7f4:	b292      	uxth	r2, r2
 80ab7f6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80ab7fa:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80ab7fe:	f845 2b04 	str.w	r2, [r5], #4
 80ab802:	e7ee      	b.n	80ab7e2 <__mdiff+0x8c>
 80ab804:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80ab808:	b90b      	cbnz	r3, 80ab80e <__mdiff+0xb8>
 80ab80a:	3e01      	subs	r6, #1
 80ab80c:	e7fa      	b.n	80ab804 <__mdiff+0xae>
 80ab80e:	6106      	str	r6, [r0, #16]
 80ab810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080ab814 <__ulp>:
 80ab814:	4b10      	ldr	r3, [pc, #64]	; (80ab858 <__ulp+0x44>)
 80ab816:	400b      	ands	r3, r1
 80ab818:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80ab81c:	2b00      	cmp	r3, #0
 80ab81e:	dd02      	ble.n	80ab826 <__ulp+0x12>
 80ab820:	2000      	movs	r0, #0
 80ab822:	4619      	mov	r1, r3
 80ab824:	4770      	bx	lr
 80ab826:	425b      	negs	r3, r3
 80ab828:	151b      	asrs	r3, r3, #20
 80ab82a:	2b13      	cmp	r3, #19
 80ab82c:	f04f 0000 	mov.w	r0, #0
 80ab830:	f04f 0100 	mov.w	r1, #0
 80ab834:	dc04      	bgt.n	80ab840 <__ulp+0x2c>
 80ab836:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80ab83a:	fa42 f103 	asr.w	r1, r2, r3
 80ab83e:	4770      	bx	lr
 80ab840:	3b14      	subs	r3, #20
 80ab842:	2b1e      	cmp	r3, #30
 80ab844:	f04f 0201 	mov.w	r2, #1
 80ab848:	bfce      	itee	gt
 80ab84a:	4613      	movgt	r3, r2
 80ab84c:	f1c3 031f 	rsble	r3, r3, #31
 80ab850:	fa02 f303 	lslle.w	r3, r2, r3
 80ab854:	4618      	mov	r0, r3
 80ab856:	4770      	bx	lr
 80ab858:	7ff00000 	.word	0x7ff00000

080ab85c <__b2d>:
 80ab85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80ab85e:	6905      	ldr	r5, [r0, #16]
 80ab860:	f100 0614 	add.w	r6, r0, #20
 80ab864:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 80ab868:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80ab86c:	1f2f      	subs	r7, r5, #4
 80ab86e:	4620      	mov	r0, r4
 80ab870:	f7ff fdcf 	bl	80ab412 <__hi0bits>
 80ab874:	f1c0 0320 	rsb	r3, r0, #32
 80ab878:	280a      	cmp	r0, #10
 80ab87a:	600b      	str	r3, [r1, #0]
 80ab87c:	dc14      	bgt.n	80ab8a8 <__b2d+0x4c>
 80ab87e:	f1c0 0e0b 	rsb	lr, r0, #11
 80ab882:	fa24 f10e 	lsr.w	r1, r4, lr
 80ab886:	42be      	cmp	r6, r7
 80ab888:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80ab88c:	bf34      	ite	cc
 80ab88e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80ab892:	2100      	movcs	r1, #0
 80ab894:	3015      	adds	r0, #21
 80ab896:	fa04 f000 	lsl.w	r0, r4, r0
 80ab89a:	fa21 f10e 	lsr.w	r1, r1, lr
 80ab89e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80ab8a2:	ea40 0201 	orr.w	r2, r0, r1
 80ab8a6:	e023      	b.n	80ab8f0 <__b2d+0x94>
 80ab8a8:	42be      	cmp	r6, r7
 80ab8aa:	bf3a      	itte	cc
 80ab8ac:	f1a5 0708 	subcc.w	r7, r5, #8
 80ab8b0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80ab8b4:	2100      	movcs	r1, #0
 80ab8b6:	380b      	subs	r0, #11
 80ab8b8:	d015      	beq.n	80ab8e6 <__b2d+0x8a>
 80ab8ba:	4084      	lsls	r4, r0
 80ab8bc:	f1c0 0520 	rsb	r5, r0, #32
 80ab8c0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80ab8c4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80ab8c8:	42b7      	cmp	r7, r6
 80ab8ca:	fa21 fe05 	lsr.w	lr, r1, r5
 80ab8ce:	ea44 030e 	orr.w	r3, r4, lr
 80ab8d2:	bf8c      	ite	hi
 80ab8d4:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 80ab8d8:	2400      	movls	r4, #0
 80ab8da:	fa01 f000 	lsl.w	r0, r1, r0
 80ab8de:	40ec      	lsrs	r4, r5
 80ab8e0:	ea40 0204 	orr.w	r2, r0, r4
 80ab8e4:	e004      	b.n	80ab8f0 <__b2d+0x94>
 80ab8e6:	460a      	mov	r2, r1
 80ab8e8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80ab8ec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80ab8f0:	4610      	mov	r0, r2
 80ab8f2:	4619      	mov	r1, r3
 80ab8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080ab8f6 <__d2b>:
 80ab8f6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80ab8fa:	461c      	mov	r4, r3
 80ab8fc:	2101      	movs	r1, #1
 80ab8fe:	4690      	mov	r8, r2
 80ab900:	9e08      	ldr	r6, [sp, #32]
 80ab902:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80ab904:	f7ff fcc0 	bl	80ab288 <_Balloc>
 80ab908:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80ab90c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80ab910:	4607      	mov	r7, r0
 80ab912:	b10c      	cbz	r4, 80ab918 <__d2b+0x22>
 80ab914:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80ab918:	9201      	str	r2, [sp, #4]
 80ab91a:	f1b8 0f00 	cmp.w	r8, #0
 80ab91e:	d019      	beq.n	80ab954 <__d2b+0x5e>
 80ab920:	a802      	add	r0, sp, #8
 80ab922:	f840 8d08 	str.w	r8, [r0, #-8]!
 80ab926:	f7ff fd94 	bl	80ab452 <__lo0bits>
 80ab92a:	9b00      	ldr	r3, [sp, #0]
 80ab92c:	b148      	cbz	r0, 80ab942 <__d2b+0x4c>
 80ab92e:	9a01      	ldr	r2, [sp, #4]
 80ab930:	f1c0 0120 	rsb	r1, r0, #32
 80ab934:	fa02 f101 	lsl.w	r1, r2, r1
 80ab938:	430b      	orrs	r3, r1
 80ab93a:	40c2      	lsrs	r2, r0
 80ab93c:	617b      	str	r3, [r7, #20]
 80ab93e:	9201      	str	r2, [sp, #4]
 80ab940:	e000      	b.n	80ab944 <__d2b+0x4e>
 80ab942:	617b      	str	r3, [r7, #20]
 80ab944:	9b01      	ldr	r3, [sp, #4]
 80ab946:	2b00      	cmp	r3, #0
 80ab948:	bf14      	ite	ne
 80ab94a:	2102      	movne	r1, #2
 80ab94c:	2101      	moveq	r1, #1
 80ab94e:	61bb      	str	r3, [r7, #24]
 80ab950:	6139      	str	r1, [r7, #16]
 80ab952:	e007      	b.n	80ab964 <__d2b+0x6e>
 80ab954:	a801      	add	r0, sp, #4
 80ab956:	f7ff fd7c 	bl	80ab452 <__lo0bits>
 80ab95a:	9b01      	ldr	r3, [sp, #4]
 80ab95c:	2101      	movs	r1, #1
 80ab95e:	617b      	str	r3, [r7, #20]
 80ab960:	6139      	str	r1, [r7, #16]
 80ab962:	3020      	adds	r0, #32
 80ab964:	b134      	cbz	r4, 80ab974 <__d2b+0x7e>
 80ab966:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80ab96a:	4404      	add	r4, r0
 80ab96c:	6034      	str	r4, [r6, #0]
 80ab96e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80ab972:	e009      	b.n	80ab988 <__d2b+0x92>
 80ab974:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80ab978:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80ab97c:	6030      	str	r0, [r6, #0]
 80ab97e:	6918      	ldr	r0, [r3, #16]
 80ab980:	f7ff fd47 	bl	80ab412 <__hi0bits>
 80ab984:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80ab988:	6028      	str	r0, [r5, #0]
 80ab98a:	4638      	mov	r0, r7
 80ab98c:	b002      	add	sp, #8
 80ab98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080ab992 <__ratio>:
 80ab992:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80ab996:	4688      	mov	r8, r1
 80ab998:	4669      	mov	r1, sp
 80ab99a:	4681      	mov	r9, r0
 80ab99c:	f7ff ff5e 	bl	80ab85c <__b2d>
 80ab9a0:	460d      	mov	r5, r1
 80ab9a2:	4604      	mov	r4, r0
 80ab9a4:	a901      	add	r1, sp, #4
 80ab9a6:	4640      	mov	r0, r8
 80ab9a8:	f7ff ff58 	bl	80ab85c <__b2d>
 80ab9ac:	460f      	mov	r7, r1
 80ab9ae:	4606      	mov	r6, r0
 80ab9b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80ab9b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80ab9b8:	4620      	mov	r0, r4
 80ab9ba:	1a9a      	subs	r2, r3, r2
 80ab9bc:	e89d 000a 	ldmia.w	sp, {r1, r3}
 80ab9c0:	1ac9      	subs	r1, r1, r3
 80ab9c2:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 80ab9c6:	2b00      	cmp	r3, #0
 80ab9c8:	bfcc      	ite	gt
 80ab9ca:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 80ab9ce:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 80ab9d2:	4632      	mov	r2, r6
 80ab9d4:	463b      	mov	r3, r7
 80ab9d6:	4629      	mov	r1, r5
 80ab9d8:	f7fc f888 	bl	80a7aec <__aeabi_ddiv>
 80ab9dc:	b003      	add	sp, #12
 80ab9de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080ab9e2 <__copybits>:
 80ab9e2:	3901      	subs	r1, #1
 80ab9e4:	b510      	push	{r4, lr}
 80ab9e6:	1149      	asrs	r1, r1, #5
 80ab9e8:	6914      	ldr	r4, [r2, #16]
 80ab9ea:	3101      	adds	r1, #1
 80ab9ec:	f102 0314 	add.w	r3, r2, #20
 80ab9f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80ab9f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80ab9f8:	42a3      	cmp	r3, r4
 80ab9fa:	4602      	mov	r2, r0
 80ab9fc:	d204      	bcs.n	80aba08 <__copybits+0x26>
 80ab9fe:	f853 2b04 	ldr.w	r2, [r3], #4
 80aba02:	f840 2b04 	str.w	r2, [r0], #4
 80aba06:	e7f7      	b.n	80ab9f8 <__copybits+0x16>
 80aba08:	2300      	movs	r3, #0
 80aba0a:	428a      	cmp	r2, r1
 80aba0c:	d202      	bcs.n	80aba14 <__copybits+0x32>
 80aba0e:	f842 3b04 	str.w	r3, [r2], #4
 80aba12:	e7fa      	b.n	80aba0a <__copybits+0x28>
 80aba14:	bd10      	pop	{r4, pc}

080aba16 <__any_on>:
 80aba16:	f100 0214 	add.w	r2, r0, #20
 80aba1a:	6900      	ldr	r0, [r0, #16]
 80aba1c:	114b      	asrs	r3, r1, #5
 80aba1e:	4298      	cmp	r0, r3
 80aba20:	b510      	push	{r4, lr}
 80aba22:	db0c      	blt.n	80aba3e <__any_on+0x28>
 80aba24:	dd0c      	ble.n	80aba40 <__any_on+0x2a>
 80aba26:	f011 011f 	ands.w	r1, r1, #31
 80aba2a:	d009      	beq.n	80aba40 <__any_on+0x2a>
 80aba2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80aba30:	fa24 f001 	lsr.w	r0, r4, r1
 80aba34:	fa00 f101 	lsl.w	r1, r0, r1
 80aba38:	428c      	cmp	r4, r1
 80aba3a:	d10c      	bne.n	80aba56 <__any_on+0x40>
 80aba3c:	e000      	b.n	80aba40 <__any_on+0x2a>
 80aba3e:	4603      	mov	r3, r0
 80aba40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80aba44:	4293      	cmp	r3, r2
 80aba46:	d904      	bls.n	80aba52 <__any_on+0x3c>
 80aba48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80aba4c:	2900      	cmp	r1, #0
 80aba4e:	d0f9      	beq.n	80aba44 <__any_on+0x2e>
 80aba50:	e001      	b.n	80aba56 <__any_on+0x40>
 80aba52:	2000      	movs	r0, #0
 80aba54:	bd10      	pop	{r4, pc}
 80aba56:	2001      	movs	r0, #1
 80aba58:	bd10      	pop	{r4, pc}

080aba5a <_calloc_r>:
 80aba5a:	b538      	push	{r3, r4, r5, lr}
 80aba5c:	fb02 f401 	mul.w	r4, r2, r1
 80aba60:	4621      	mov	r1, r4
 80aba62:	f7f8 fbdf 	bl	80a4224 <_malloc_r>
 80aba66:	4605      	mov	r5, r0
 80aba68:	b118      	cbz	r0, 80aba72 <_calloc_r+0x18>
 80aba6a:	4622      	mov	r2, r4
 80aba6c:	2100      	movs	r1, #0
 80aba6e:	f7fd f890 	bl	80a8b92 <memset>
 80aba72:	4628      	mov	r0, r5
 80aba74:	bd38      	pop	{r3, r4, r5, pc}

080aba76 <__env_lock>:
 80aba76:	4770      	bx	lr

080aba78 <__env_unlock>:
 80aba78:	4770      	bx	lr

080aba7a <link_code_end>:
	...

080aba7c <dynalib_user>:
 80aba7c:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80aba8c:	0000 0000                                   ....

080aba90 <_ZTVN5spark10LogHandlerE>:
	...
 80abaa0:	00ad 080a 00d1 080a                         ........

080abaa8 <_ZTVN5spark16SerialLogHandlerE>:
	...
 80abab0:	0101 080a 0135 080a 635d 080a 00d3 080a     ....5...]c......

080abac0 <_ZTV17SerialDebugOutput>:
	...
 80abac8:	0149 080a 015d 080a 635d 080a 00d3 080a     I...]...]c......

080abad8 <_ZTVN8particle13__SPISettingsE>:
	...
 80abae0:	05c9 080a                                   ....

080abae4 <_ZTV6SdFile>:
	...
 80abaec:	05c5 080a 063f 080a 0627 080a 0621 080a     ....?...'...!...
 80abafc:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
 80abb0c:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
 80abb1c:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
 80abb2c:	676e 2073 7325 6c25 2075 7325 4d20 444f     ngs %s%lu %s MOD
 80abb3c:	2545 3e64 6300 6c61 6269 6172 6974 6e6f     E%d>.calibration
 80abb4c:	2d73 6966 656c 742e 7478 4300 756f 646c     s-file.txt.Could
 80abb5c:	746e 6f20 6570 206e 6966 656c 5200 6165     nt open file.Rea
 80abb6c:	6964 676e 6620 6f72 206d 6473 003a 4941     ding from sd:.AI
 80abb7c:	0052 4157 4554 0052 5548 494d 4944 5954     R.WATER.HUMIDITY
 80abb8c:	4c00 4749 5448 494c 494d 0054 2d2d 2d2d     .LIGHTLIMIT.----
 80abb9c:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80abbac:	2d2d 2d2d 002d 6553 6972 6c61 5320 4344     -----.Serial SDC
 80abbbc:	7261 2064 7369 7220 6165 7964 4500 7272     ard is ready.Err
 80abbcc:	726f 6320 646f 0065 6143 6e6e 746f 6f20     or code.Cannot o
 80abbdc:	6570 206e 6966 656c 7420 206f 7277 7469     pen file to writ
 80abbec:	0065 4941 3d52 3025 322e 0a66 4157 4554     e.AIR=%0.2f.WATE
 80abbfc:	3d52 3025 322e 0a66 5548 494d 4944 5954     R=%0.2f.HUMIDITY
 80abc0c:	253d 2e30 6632 540a 4d49 3d45 6425 4c0a     =%0.2f.TIME=%d.L
 80abc1c:	4749 5448 494c 494d 3d54 3025 322e 0a66     IGHTLIMIT=%0.2f.
 80abc2c:	6800 6965 7b00 6722 7279 6d6f 7465 7265     .hei.{"gyrometer
 80abc3c:	3a22 7b20 6122 2278 253a 2c64 2220 7961     ": {"ax":%d, "ay
 80abc4c:	3a22 6425 202c 6122 227a 253a 2c64 2220     ":%d, "az":%d, "
 80abc5c:	616d 4478 6669 5a66 7841 7369 614c 7473     maxDiffZAxisLast
 80abc6c:	3031 654d 7361 7275 6d65 6e65 7374 3a22     10Measurements":
 80abc7c:	6425 2c7d 2220 6574 706d 7265 7461 7275     %d}, "temperatur
 80abc8c:	7365 3a22 7b20 7722 7461 7265 3a22 2520     es": {"water": %
 80abc9c:	2c66 2220 6961 2272 253a 2c66 2220 7568     f, "air":%f, "hu
 80abcac:	696d 6964 7974 3a22 6625 7d20 7d20 7300     midity":%f } }.s
 80abcbc:	6e65 6f73 4472 7461 0061 6177 6574 5472     ensorData.waterT
 80abccc:	6d65 0070 6961 5472 6d65 0070 6961 4872     emp.airTemp.airH
 80abcdc:	6d75 6469 7469 0079 6177 6574 5472 6d65     umidity.waterTem
 80abcec:	4370 6c61 6269 6172 6974 6e6f 6156 756c     pCalibrationValu
 80abcfc:	0065 6961 5472 6d65 4370 6c61 6269 6172     e.airTempCalibra
 80abd0c:	6974 6e6f 6156 756c 0065 6961 4872 6d75     tionValue.airHum
 80abd1c:	6469 7469 4379 6c61 6269 6172 6974 6e6f     idityCalibration
 80abd2c:	6300 6c61 6269 6172 6574 6157 6574 5472     .calibrateWaterT
 80abd3c:	6d65 4670 6e75 7463 6f69 006e 6163 696c     empFunction.cali
 80abd4c:	7262 7461 4165 7269 6554 706d 7546 636e     brateAirTempFunc
 80abd5c:	6974 6e6f 6300 6c61 6269 6172 6574 6941     tion.calibrateAi
 80abd6c:	4872 6d75 6469 7469 4679 6e75 7463 6f69     rHumidityFunctio
 80abd7c:	006e 6573 5474 6d69 5a65 6e6f 0065 6573     n.setTimeZone.se
 80abd8c:	4c74 6769 7468 6e4f 694c 696d 0074 6e69     tLightOnLimit.in
 80abd9c:	6320 6e6f 7473 7572 7463 726f 6900 206e      constructor.in 
 80abdac:	6f63 736e 7274 6375 6f74 2072 6661 6574     constructor afte
 80abdbc:	0072 6e69 6120 676c 206f 6562 6967 006e     r.in algo begin.
 80abdcc:	4825 253a 204d 5925 6100 3a78 6100 3a79     %H:%M %Y.ax:.ay:
 80abddc:	6100 3a7a 2500 6436 5700 7661 7365 5700     .az:.%6d.Waves.W
 80abdec:	7461 7265 003a 6941 3a72 4800 6d75 6469     ater:.Air:.Humid
 80abdfc:	003a 3025 312e 0066                         :.%0.1f.

080abe04 <_ZTV12Adafruit_GFX>:
	...
 80abe14:	16fd 080a 6689 080a 00ad 080a 1551 080a     .....f......Q...
 80abe24:	1671 080a 168d 080a 1611 080a 16a7 080a     q...............
 80abe34:	16df 080a 16fb 080a 1997 080a               ............

080abe40 <_ZTV15Adafruit_ST7735>:
	...
 80abe48:	19ed 080a 19ef 080a 16fd 080a 6689 080a     .............f..
 80abe58:	1ded 080a 1551 080a 1c53 080a 1ccd 080a     ....Q...S.......
 80abe68:	1611 080a 1d45 080a 19d1 080a 1a67 080a     ....E.......g...
 80abe78:	1997 080a                                   ....

080abe7c <_ZL4Gcmd>:
 80abe7c:	0113 3280 8011 2664 0401 02b1 140b 02c0     ...2..d&........
 80abe8c:	0008 01c1 c505 4102 c730 c101 01ec 3a1b     .......A0......:
 80abe9c:	5581 2a64 0004 0000 2b7f 0004 0000 369f     .Ud*.....+.....6
 80abeac:	c801 01b7 f200 0001 8fe0 2428 3122 0e2b     ..........($"1+.
 80abebc:	a553 1642 1218 141a 3203 8fe1 1b17 0e1d     S.B......2......
 80abecc:	1114 a52c 093d 2d27 2b25 323c 8013 290a     ..,.=.'-%+<2...)
 80abedc:	ff80                                        ..

080abede <glcdfontBitmaps>:
 80abede:	ff00 0000 0000 0000 0000 f870 f8a8 88d8     ..........p.....
 80abeee:	0070 f870 f8a8 d888 0070 5000 f8f8 70f8     p.p.....p..P...p
 80abefe:	0020 2000 f870 70f8 0020 5070 a8f8 20f8      .. p..p .pP... 
 80abf0e:	0070 7020 f8f8 20f8 0070 0000 7020 2070     p. p... p... pp 
 80abf1e:	0000 f8f8 88d8 d888 f8f8 0000 5020 2050     ............ PP 
 80abf2e:	0000 f8f8 a8d8 d8a8 f8f8 3800 6818 a0a0     ...........8.h..
 80abf3e:	0040 8870 7088 f820 0020 4878 4078 4040     @.p..p . .xHx@@@
 80abf4e:	00c0 4878 4878 5848 00c0 a820 d870 70d8     ..xHxHHX.. .p..p
 80abf5e:	20a8 c080 f8f0 c0f0 0080 1808 f878 1878     . ..........x.x.
 80abf6e:	0008 7020 20a8 70a8 0020 d8d8 d8d8 00d8     .. p. .p .......
 80abf7e:	00d8 a878 68a8 2828 0028 4830 2850 4810     ..x..h(((.0HP(.H
 80abf8e:	3048 0000 0000 f800 00f8 7020 20a8 70a8     H0........ p. .p
 80abf9e:	f820 2000 a870 2020 0020 2000 2020 70a8      .. p.   ..   .p
 80abfae:	0020 2000 f810 2010 0000 2000 f840 2040      .. ... ... @.@ 
 80abfbe:	0000 8000 8080 00f8 0000 5000 f8f8 0050     ...........P..P.
 80abfce:	0000 2000 7020 f8f8 0000 f800 70f8 2020     ...  p.......p  
	...
 80abfe6:	0000 2020 2020 0020 0020 5050 0050 0000     ..     . .PPP...
 80abff6:	0000 5050 50f8 50f8 0050 7820 70a0 f028     ..PP.P.PP. x.p(.
 80ac006:	0020 c8c0 2010 9840 0018 a040 40a0 90a8      .... @...@..@..
 80ac016:	0068 3030 4020 0000 0000 2010 4040 2040     h.00 @..... @@@ 
 80ac026:	0010 2040 1010 2010 0040 a820 f870 a870     ..@ ... @. .p.p.
 80ac036:	0020 2000 f820 2020 0000 0000 0000 3030      ..  .  ......00
 80ac046:	4020 0000 f800 0000 0000 0000 0000 3000      @.............0
 80ac056:	0030 0800 2010 8040 0000 8870 a898 88c8     0.... @...p.....
 80ac066:	0070 6020 2020 2020 0070 8870 7008 8080     p. `    p.p..p..
 80ac076:	00f8 08f8 3010 8808 0070 3010 9050 10f8     .....0..p..0P...
 80ac086:	0010 80f8 08f0 8808 0070 4038 f080 8888     ........p.8@....
 80ac096:	0070 08f8 1008 4020 0080 8870 7088 8888     p..... @..p..p..
 80ac0a6:	0070 8870 7888 1008 00e0 0000 0020 0020     p.p..x...... . .
 80ac0b6:	0000 0000 0020 2020 0040 1008 4020 1020     .... .  @... @ .
 80ac0c6:	0008 0000 00f8 00f8 0000 2040 0810 2010     ..........@ ... 
 80ac0d6:	0040 8870 3008 0020 0020 8870 b8a8 80b0     @.p..0 . .p.....
 80ac0e6:	0078 5020 8888 88f8 0088 88f0 f088 8888     x. P............
 80ac0f6:	00f0 8870 8080 8880 0070 88f0 8888 8888     ..p.....p.......
 80ac106:	00f0 80f8 f080 8080 00f8 80f8 f080 8080     ................
 80ac116:	0080 8878 8080 8898 0078 8888 f888 8888     ..x.....x.......
 80ac126:	0088 2070 2020 2020 0070 1038 1010 9010     ..p     p.8.....
 80ac136:	0060 9088 c0a0 90a0 0088 8080 8080 8080     `...............
 80ac146:	00f8 d888 a8a8 88a8 0088 8888 a8c8 8898     ................
 80ac156:	0088 8870 8888 8888 0070 88f0 f088 8080     ..p.....p.......
 80ac166:	0080 8870 8888 90a8 0068 88f0 f088 90a0     ..p.....h.......
 80ac176:	0088 8870 7080 8808 0070 a8f8 2020 2020     ..p..p..p...    
 80ac186:	0020 8888 8888 8888 0070 8888 8888 5088      .......p......P
 80ac196:	0020 8888 a888 a8a8 0050 8888 2050 8850      .......P...P P.
 80ac1a6:	0088 8888 2050 2020 0020 08f8 7010 8040     ....P    ....p@.
 80ac1b6:	00f8 4078 4040 4040 0078 8000 2040 0810     ..x@@@@@x...@ ..
 80ac1c6:	0000 0878 0808 0808 0078 5020 0088 0000     ..x.....x. P....
	...
 80ac1de:	00f8 6060 1020 0000 0000 0000 1060 9070     ..`` .......`.p.
 80ac1ee:	0078 8080 c8b0 c888 00b0 0000 8870 8880     x...........p...
 80ac1fe:	0070 0808 9868 9888 0068 0000 8870 80f8     p...h...h...p...
 80ac20e:	0070 2810 7020 2020 0020 0000 9870 6898     p..( p   ...p..h
 80ac21e:	7008 8080 c8b0 8888 0088 0020 2060 2020     .p........ .`   
 80ac22e:	0070 0010 1010 9010 0060 8080 a090 a0c0     p.......`.......
 80ac23e:	0090 2060 2020 2020 0070 0000 a8d0 a8a8     ..`     p.......
 80ac24e:	00a8 0000 c8b0 8888 0088 0000 8870 8888     ............p...
 80ac25e:	0070 0000 c8b0 b0c8 8080 0000 9868 6898     p...........h..h
 80ac26e:	0808 0000 c8b0 8080 0080 0000 8078 0870     ............x.p.
 80ac27e:	00f0 2020 20f8 2820 0010 0000 8888 9888     ..  .  (........
 80ac28e:	0068 0000 8888 5088 0020 0000 8888 a8a8     h......P .......
 80ac29e:	0050 0000 5088 5020 0088 0000 8888 0878     P....P P......x.
 80ac2ae:	7088 0000 10f8 4020 00f8 2010 4020 2020     .p.... @...  @  
 80ac2be:	0010 2020 0020 2020 0020 2040 1020 2020     ..   .   .@  .  
 80ac2ce:	0040 a840 0010 0000 0000 7020 88d8 f888     @.@....... p....
 80ac2de:	0000 8870 8080 7088 6010 8800 8800 9888     ..p....p.`......
 80ac2ee:	0068 0018 8870 80f8 0078 00f8 1060 9070     h...p...x...`.p.
 80ac2fe:	0078 0088 1060 9070 0078 00c0 1060 9070     x...`.p.x...`.p.
 80ac30e:	0078 0030 1060 9070 0078 7800 c0c0 1078     x.0.`.p.x..x..x.
 80ac31e:	0030 00f8 8870 80f8 0078 0088 8870 80f8     0...p...x...p...
 80ac32e:	0078 00c0 8870 80f8 0078 0028 1030 1010     x...p...x.(.0...
 80ac33e:	0038 4830 1030 1010 0038 0060 1030 1010     8.0H0...8.`.0...
 80ac34e:	0038 0050 5020 f888 8888 0020 5020 f888     8.P. P.... . P..
 80ac35e:	8888 0030 80f0 80e0 00f0 0000 1078 9078     ..0.........x.x.
 80ac36e:	0078 5038 f890 9090 0098 8870 7000 8888     x.8P......p..p..
 80ac37e:	0070 8800 7000 8888 0070 c000 7000 8888     p....p..p....p..
 80ac38e:	0070 8870 8800 9888 0068 c000 8800 9888     p.p.....h.......
 80ac39e:	0068 0048 4848 3848 7008 0088 8870 8888     h.H.HHH8.p..p...
 80ac3ae:	0070 0088 8888 8888 0070 2020 a0f8 f8a0     p.......p.  ....
 80ac3be:	2020 5830 e048 4840 00f8 d8d8 f870 f820       0XH.@H....p. .
 80ac3ce:	2020 90e0 e090 b890 9090 2818 7020 2020       .........( p  
 80ac3de:	c0a0 0018 1060 9070 0078 0018 1030 1010     ....`.p.x...0...
 80ac3ee:	0038 1800 7000 8888 0070 1800 8800 9888     8....p..p.......
 80ac3fe:	0068 7800 7000 4848 0048 00f8 e8c8 98b8     h..x.pHHH.......
 80ac40e:	0088 9070 7890 f800 0000 8870 7088 f800     ..p..x....p..p..
 80ac41e:	0000 0020 6020 8880 0070 0000 f800 8080     .. . `..p.......
 80ac42e:	0000 0000 f800 0808 0000 8880 b890 9848     ..............H.
 80ac43e:	3820 8880 a890 b858 0808 2020 2000 2020      8....X...  .   
 80ac44e:	0020 2800 a050 2850 0000 a000 2850 a050      ..(P.P(....P(P.
 80ac45e:	0000 8820 8820 8820 8820 a850 a850 a850     .. . . . .P.P.P.
 80ac46e:	a850 1010 1010 1010 1010 1010 1010 10f0     P...............
 80ac47e:	1010 1010 10f0 10f0 1010 2828 2828 28e8     ..........((((.(
 80ac48e:	2828 0000 0000 28f8 2828 0000 10f0 10f0     ((.....(((......
 80ac49e:	1010 2828 08e8 28e8 2828 2828 2828 2828     ..((...(((((((((
 80ac4ae:	2828 0000 08f8 28e8 2828 2828 08e8 00f8     ((.....(((((....
 80ac4be:	0000 2828 2828 00f8 0000 1010 10f0 00f0     ..((((..........
 80ac4ce:	0000 0000 0000 10f0 1010 1010 1010 0018     ................
 80ac4de:	0000 1010 1010 00f8 0000 0000 0000 10f8     ................
 80ac4ee:	1010 1010 1010 1018 1010 0000 0000 00f8     ................
 80ac4fe:	0000 1010 1010 10f8 1010 1010 1018 1018     ................
 80ac50e:	1010 2828 2828 2828 2828 2828 2028 0038     ..((((((((((( 8.
 80ac51e:	0000 0000 2038 2828 2828 2828 00e8 00f8     ....8 ((((((....
 80ac52e:	0000 0000 00f8 28e8 2828 2828 2028 2828     .......(((((( ((
 80ac53e:	2828 0000 00f8 00f8 0000 2828 00e8 28e8     ((........((...(
 80ac54e:	2828 1010 00f8 00f8 0000 2828 2828 00f8     ((........((((..
 80ac55e:	0000 0000 00f8 10f8 1010 0000 0000 28f8     ...............(
 80ac56e:	2828 2828 2828 0038 0000 1010 1018 0018     ((((((8.........
 80ac57e:	0000 0000 1018 1018 1010 0000 0000 2838     ..............8(
 80ac58e:	2828 2828 2828 28f8 2828 1010 10f8 10f8     ((((((.(((......
 80ac59e:	1010 1010 1010 00f0 0000 0000 0000 1018     ................
 80ac5ae:	1010 f8f8 f8f8 f8f8 f8f8 0000 0000 f8f8     ................
 80ac5be:	f8f8 e0e0 e0e0 e0e0 e0e0 1818 1818 1818     ................
 80ac5ce:	1818 f8f8 f8f8 0000 0000 0000 9068 9090     ............h...
 80ac5de:	0068 7000 f098 f098 0080 f800 8098 8080     h..p............
 80ac5ee:	0080 f800 5050 5050 0050 88f8 2040 8840     ....PPPPP...@ @.
 80ac5fe:	00f8 0000 9078 9090 0060 5000 5050 6850     ....x...`..PPPPh
 80ac60e:	00c0 f800 20a0 2020 0020 20f8 8870 7088     .....    .. p..p
 80ac61e:	f820 5020 f888 5088 0020 5020 8888 5050      . P...P . P..PP
 80ac62e:	00d8 4030 7030 8888 0070 0000 7000 a8a8     ..0@0p..p....p..
 80ac63e:	0070 7008 a898 c8a8 8070 8070 f080 8080     p..p....p.p.....
 80ac64e:	0070 8870 8888 8888 0088 f800 f800 f800     p.p.............
 80ac65e:	0000 2020 20f8 0020 00f8 2040 2010 0040     ..  .  ...@ . @.
 80ac66e:	00f8 2010 2040 0010 00f8 2838 2020 2020     ... @ ....8(    
 80ac67e:	2020 2020 2020 a020 e0a0 3030 f800 3000            ...00...0
 80ac68e:	0030 e800 00b8 b8e8 0000 d870 70d8 0000     0.........p..p..
 80ac69e:	0000 0000 3000 0030 0000 0000 0000 0030     .....00.......0.
 80ac6ae:	0000 2038 2020 a0a0 2060 4870 4848 0048     ..8   ..` pHHHH.
 80ac6be:	0000 1870 6030 0078 0000 0000 7878 7878     ..p.0`x.....xxxx
	...

080ac6d8 <arial_8ptBitmaps>:
 80ac6d8:	7f20 0000 0000 0000 0000 0000 8080 8080      ...............
 80ac6e8:	8080 8000 0000 a0a0 00a0 0000 0000 0000     ................
 80ac6f8:	2828 50f8 f850 a0a0 0000 a870 70a0 2828     ((.PP.....p..p((
 80ac708:	70a8 0020 0062 0094 0094 0068 000b 8014     .p .b.....h.....
 80ac718:	8014 0023 0000 0000 4830 3048 8c50 7488     ..#.....0HH0P..t
 80ac728:	0000 8080 0080 0000 0000 0000 4020 8080     ............ @..
 80ac738:	8080 8080 2040 4080 2020 2020 2020 8040     ....@ .@      @.
 80ac748:	e040 a040 0000 0000 0000 0000 2020 20f8     @.@.........  . 
 80ac758:	0020 0000 0000 0000 0000 8000 8080 0000      ...............
 80ac768:	0000 e000 0000 0000 0000 0000 0000 8000     ................
 80ac778:	0000 2020 4040 4040 8080 0000 8870 8888     ..  @@@@....p...
 80ac788:	8888 7088 0000 6020 20a0 2020 2020 0000     ...p.. `.     ..
 80ac798:	8870 0808 2010 f840 0000 8870 3008 0808     p.... @...p..0..
 80ac7a8:	7088 0000 3010 5050 f890 1010 0000 4078     .p...0PP......x@
 80ac7b8:	f080 0808 7088 0000 8870 f080 8888 7088     .....p..p......p
 80ac7c8:	0000 10f8 2010 4020 4040 0000 8870 7088     .....  @@@..p..p
 80ac7d8:	8888 7088 0000 8870 8888 0878 7088 0000     ...p..p...x..p..
 80ac7e8:	0000 0080 0000 8000 0000 0000 0080 0000     ................
 80ac7f8:	8000 8080 0000 7008 7080 0008 0000 0000     .......p.p......
 80ac808:	f800 f800 0000 0000 0000 7080 7008 0080     ...........p.p..
 80ac818:	0000 8870 1008 2020 2000 0000 001f 8060     ..p...  . ....`.
 80ac828:	404d 4093 40a2 40a2 80a6 009b 4040 803f     M@.@.@.@....@@?.
 80ac838:	2810 2828 7c44 8282 0000 84f8 fc84 8484     .(((D|..........
 80ac848:	f884 0000 4438 8080 8080 3844 0000 88f0     ....8D....D8....
 80ac858:	8484 8484 f088 0000 80f8 f880 8080 f880     ................
 80ac868:	0000 80f8 f080 8080 8080 0000 4438 8082     ............8D..
 80ac878:	828e 3844 0000 8484 fc84 8484 8484 0000     ..D8............
 80ac888:	8080 8080 8080 8080 0000 1010 1010 9010     ................
 80ac898:	6090 0000 8884 b090 88d0 8488 0000 8080     .`..............
 80ac8a8:	8080 8080 f880 0000 c682 aac6 aaaa 9292     ................
 80ac8b8:	0000 c484 a4a4 9494 848c 0000 4438 8282     ............8D..
 80ac8c8:	8282 3844 0000 88f0 8888 80f0 8080 0000     ..D8............
 80ac8d8:	4438 8282 9a82 3a44 0000 84f8 f884 8890     8D....D:........
 80ac8e8:	8488 0000 8478 6080 0418 7884 0000 20f8     ....x..`...x... 
 80ac8f8:	2020 2020 2020 0000 8484 8484 8484 7884           .........x
 80ac908:	0000 8282 4444 2828 1010 0000 2084 208a     ....DD((..... . 
 80ac918:	404a 404a 4051 4051 8020 8020 0000 0000     J@J@Q@Q@ . .....
 80ac928:	4884 3048 4830 8448 0000 4482 2844 1010     .HH00HH....DD(..
 80ac938:	1010 0000 087c 1010 2020 fc40 0000 80c0     ....|...  @.....
 80ac948:	8080 8080 8080 c080 8080 4040 4040 2020     ..........@@@@  
 80ac958:	0000 40c0 4040 4040 4040 c040 5020 8850     ...@@@@@@@@. PP.
	...
 80ac974:	0000 fc00 4080 0000 0000 0000 0000 0000     .....@..........
 80ac984:	8870 8878 6898 0000 8080 c8b0 8888 b0c8     p.x..h..........
 80ac994:	0000 0000 8870 8080 7088 0000 0808 9868     ....p....p....h.
 80ac9a4:	8888 6898 0000 0000 8870 80f8 7088 0000     ...h....p....p..
 80ac9b4:	4020 40e0 4040 4040 0000 0000 9868 8888      @.@@@@@....h...
 80ac9c4:	6898 f008 8080 c8b0 8888 8888 0000 0080     .h..............
 80ac9d4:	8080 8080 8080 0000 0040 4040 4040 4040     ........@.@@@@@@
 80ac9e4:	8040 8080 a090 a0c0 90a0 0000 8080 8080     @...............
 80ac9f4:	8080 8080 0000 0000 d2bc 9292 9292 0000     ................
 80aca04:	0000 88f0 8888 8888 0000 0000 8870 8888     ............p...
 80aca14:	7088 0000 0000 c8b0 8888 b0c8 8080 0000     .p..............
 80aca24:	9868 8888 6898 0808 0000 c0a0 8080 8080     h....h..........
 80aca34:	0000 0000 8870 1060 7088 0000 4040 40e0     ....p.`..p..@@.@
 80aca44:	4040 6040 0000 0000 8888 8888 6898 0000     @@@`.........h..
 80aca54:	0000 8888 5050 2020 0000 0000 0000 8088     ....PP  ........
 80aca64:	8094 0055 0055 0022 0022 0000 0000 0000     ..U.U.".".......
 80aca74:	5088 2020 8850 0000 0000 8888 5050 2020     .P  P.......PP  
 80aca84:	4020 0000 10f8 2020 f840 0000 4020 4040      @....  @... @@@
 80aca94:	4080 4040 2040 8080 8080 8080 8080 8080     .@@@@ ..........
 80acaa4:	4080 4040 4020 4040 8040 0000 e800 00b0     .@@@ @@@@.......
 80acab4:	0000 0000                                   ....

080acab8 <arial_8ptDescriptors>:
 80acab8:	0a02 0000 0a01 000a 0a03 0014 0a05 001e     ................
 80acac8:	0a05 0028 0a09 0032 0a06 0046 0a01 0050     ..(...2...F...P.
 80acad8:	0a03 005a 0a03 0064 0a03 006e 0a05 0078     ..Z...d...n...x.
 80acae8:	0a01 0082 0a03 008c 0a01 0096 0a03 00a0     ................
 80acaf8:	0a05 00aa 0a03 00b4 0a05 00be 0a05 00c8     ................
 80acb08:	0a05 00d2 0a05 00dc 0a05 00e6 0a05 00f0     ................
 80acb18:	0a05 00fa 0a05 0104 0a01 010e 0a01 0118     ................
 80acb28:	0a05 0122 0a05 012c 0a05 0136 0a05 0140     .."...,...6...@.
 80acb38:	0a0a 014a 0a07 015e 0a06 0168 0a06 0172     ..J...^...h...r.
 80acb48:	0a06 017c 0a05 0186 0a05 0190 0a07 019a     ..|.............
 80acb58:	0a06 01a4 0a01 01ae 0a04 01b8 0a06 01c2     ................
 80acb68:	0a05 01cc 0a07 01d6 0a06 01e0 0a07 01ea     ................
 80acb78:	0a05 01f4 0a07 01fe 0a06 0208 0a06 0212     ................
 80acb88:	0a05 021c 0a06 0226 0a07 0230 0a0b 023a     ......&...0...:.
 80acb98:	0a06 024e 0a07 0258 0a06 0262 0a02 026c     ..N...X...b...l.
 80acba8:	0a03 0276 0a02 0280 0a05 028a 0a06 0294     ..v.............
 80acbb8:	0a02 029e 0a05 02a8 0a05 02b2 0a05 02bc     ................
 80acbc8:	0a05 02c6 0a05 02d0 0a03 02da 0a05 02e4     ................
 80acbd8:	0a05 02ee 0a01 02f8 0a02 0302 0a04 030c     ................
 80acbe8:	0a01 0316 0a07 0320 0a05 032a 0a05 0334     ...... ...*...4.
 80acbf8:	0a05 033e 0a05 0348 0a03 0352 0a05 035c     ..>...H...R...\.
 80acc08:	0a03 0366 0a05 0370 0a05 037a 0a09 0384     ..f...p...z.....
 80acc18:	0a05 0398 0a05 03a2 0a05 03ac 0a03 03b6     ................
 80acc28:	0a01 03c0 0a03 03ca 0a05 03d4               ............

080acc34 <centuryGothic_8ptBitmaps>:
 80acc34:	7f20 0000 0000 0000 0000 0000 0000 8080      ...............
 80acc44:	8080 8080 8000 0000 a000 00a0 0000 0000     ................
 80acc54:	0000 0000 2828 28fc fc50 5050 0000 7020     ....((.(P.PP.. p
 80acc64:	a0a8 3060 a828 2070 0020 947e 6898 1916     ..`0(.p  .~..h..
 80acc74:	4629 0000 2000 5050 5420 8c88 0072 0000     )F... PP T..r...
 80acc84:	8080 0000 0000 0000 0000 4000 8080 8080     ...........@....
 80acc94:	8080 8080 0040 4080 4040 4040 4040 8040     ....@..@@@@@@@@.
 80acca4:	4000 e0e0 0040 0000 0000 0000 2000 f820     .@..@........  .
 80accb4:	2020 0000 0000 0000 0000 0000 0000 8040       ............@.
 80accc4:	0000 0000 0000 00e0 0000 0000 0000 0000     ................
 80accd4:	0000 0000 0080 0000 2010 2020 4040 8040     .........   @@@.
 80acce4:	0080 2000 8850 8888 5088 0020 0000 40c0     ... P....P ....@
 80accf4:	4040 4040 4040 0000 7000 8888 1008 4020     @@@@@@...p.... @
 80acd04:	00f8 0000 8870 3008 8808 7088 0000 0800     ....p..0...p....
 80acd14:	1808 4828 08fc 0008 0000 2038 7040 0808     ..(H......8 @p..
 80acd24:	7088 0000 1000 4020 8870 8888 0070 0000     .p.... @p...p...
 80acd34:	10f8 2010 4020 8040 0000 7000 8888 8870     ...  @@....p..p.
 80acd44:	8888 0070 0000 8870 8888 1070 4020 0000     ..p...p...p. @..
 80acd54:	0000 8000 0000 0000 0080 0000 0000 0040     ..............@.
 80acd64:	0000 4000 0080 0000 0c00 8070 0c70 0000     ...@......p.p...
 80acd74:	0000 0000 00fc fc00 0000 0000 0000 c000     ................
 80acd84:	0438 c038 0000 0000 8870 7008 7880 2000     8.8.....p..p.x. 
 80acd94:	0000 0000 003e 0041 809a 80a4 80a4 009b     ....>.A.........
 80acda4:	0041 003e 0000 0000 1000 2828 4428 447c     A.>.......(((D|D
 80acdb4:	0082 0000 a0c0 e0a0 9090 e090 0000 3c00     ...............<
 80acdc4:	8042 8080 4280 003c 0000 88f0 8484 8484     B....B<.........
 80acdd4:	f088 0000 f800 8080 80f8 8080 00f8 0000     ................
 80acde4:	80f0 f080 8080 8080 0000 3c00 8042 8780     ...........<B...
 80acdf4:	4281 003c 0000 8484 fc84 8484 8484 0000     .B<.............
 80ace04:	8000 8080 8080 8080 0080 0000 1010 1010     ................
 80ace14:	1010 6090 0000 8800 a090 c0c0 90a0 0088     ...`............
 80ace24:	0000 8080 8080 8080 f080 0000 0000 0041     ..............A.
 80ace34:	0041 80a2 80a2 80a4 8094 8094 8088 0000     A...............
 80ace44:	0000 8400 c484 94a4 848c 0084 0000 423c     ..............<B
 80ace54:	8181 8181 3c42 0000 f000 8888 80f0 8080     ....B<..........
 80ace64:	0080 0000 423c 8181 8981 3d46 0000 f000     ....<B....F=....
 80ace74:	8888 a0f0 9090 0088 0000 9060 4080 1020     ..........`..@ .
 80ace84:	6090 0000 f800 2020 2020 2020 0020 0000     .`....       ...
 80ace94:	8484 8484 8484 7884 0000 8200 4444 2844     .......x....DDD(
 80acea4:	2828 0010 0000 8800 8880 5580 5500 5500     ((.........U.U.U
 80aceb4:	5500 2200 2200 0000 0000 0000 8888 2050     .U."."........P 
 80acec4:	5020 8888 0000 8200 2844 1028 1010 0010      P......D((.....
 80aced4:	0000 10f8 2010 4020 f840 0000 c000 8080     .....  @@.......
 80acee4:	8080 8080 8080 00c0 4080 2040 1020 0808     .........@@  ...
 80acef4:	0004 c000 4040 4040 4040 4040 00c0 2810     ....@@@@@@@@...(
 80acf04:	4428 8244 0000 0000 0000 0000 0000 0000     (DD.............
 80acf14:	0000 80fc 0040 0000 0000 0000 0000 0000     ....@...........
 80acf24:	3a00 8246 4682 003a 0000 8080 c4b8 8282     .:F..F:.........
 80acf34:	b8c4 0000 0000 3800 8044 4480 0038 0000     .......8D..D8...
 80acf44:	0202 463a 8282 3a46 0000 0000 3800 fc44     ..:F..F:.....8D.
 80acf54:	4480 0038 0000 4020 40e0 4040 4040 0000     .D8... @.@@@@@..
 80acf64:	0000 3400 844c 4c84 8834 0070 8080 c8b0     ...4L..L4.p.....
 80acf74:	8484 8484 0000 8000 8000 8080 8080 0080     ................
 80acf84:	0000 0040 4040 4040 4040 8040 8000 9080     ..@.@@@@@@@.....
 80acf94:	c0a0 a0c0 0090 0000 8080 8080 8080 8080     ................
	...
 80acfac:	00b3 80cc 8088 8088 8088 8088 0000 0000     ................
 80acfbc:	0000 b000 84c8 8484 0084 0000 0000 4830     ..............0H
 80acfcc:	8484 3048 0000 0000 b800 82c4 c482 80b8     ..H0............
 80acfdc:	0080 0000 463a 8282 3a46 0202 0000 a000     ....:F..F:......
 80acfec:	80c0 8080 0080 0000 0000 8060 2040 40a0     ..........`.@ .@
 80acffc:	0000 4000 e040 4040 4040 0040 0000 0000     ...@@.@@@@@.....
 80ad00c:	8484 8484 3048 0000 0000 8200 4444 2828     ....H0......DD((
 80ad01c:	0010 0000 0000 0000 8800 8980 5500 5500     .............U.U
 80ad02c:	2200 2200 0000 0000 0000 0000 5088 2020     .".".........P  
 80ad03c:	8850 0000 0000 8800 5048 3050 2020 0040     P.......HPP0  @.
 80ad04c:	0000 10f8 2020 f840 0000 6000 4040 8040     ....  @....`@@@.
 80ad05c:	4040 4040 0060 8080 8080 8080 8080 8080     @@@@`...........
 80ad06c:	c000 4040 2040 4040 4040 00c0 0000 6400     ..@@@ @@@@.....d
 80ad07c:	0098 0000 0000                              ......

080ad082 <comicSansMS_8ptBitmaps>:
 80ad082:	7f20 0000 0000 0000 0000 0000 0000 8080      ...............
 80ad092:	8080 8080 0080 0080 0000 a000 a0a0 0000     ................
	...
 80ad0aa:	0011 0011 807f 0022 0022 00ff 0044 0044     ......"."...D.D.
 80ad0ba:	0000 0000 0000 7820 a0a0 2870 2828 20f0     ...... x..p(((. 
 80ad0ca:	0020 0002 0066 0094 009c 0068 001b 8014      ...f.....h.....
 80ad0da:	8034 0023 0000 0000 0000 1800 3028 d474     4.#.........(0t.
 80ad0ea:	888c 0074 0000 8000 8080 0000 0000 0000     ..t.............
 80ad0fa:	0000 4020 8040 8080 8080 4080 0020 4080     .. @@......@ ..@
 80ad10a:	2040 2020 2020 4020 0080 2000 70f8 00d0     @      @... .p..
	...
 80ad122:	2000 f820 2020 0000 0000 0000 0000 0000     .  .  ..........
 80ad132:	0000 8040 0000 0000 0000 0000 00e0 0000     ..@.............
	...
 80ad14a:	0000 0080 0000 1008 1010 4020 8040 0080     .......... @@...
 80ad15a:	0000 7000 8888 8888 8888 0070 0000 4000     ...p......p....@
 80ad16a:	40c0 4040 4040 00e0 0000 7000 0888 2010     .@@@@@.....p... 
 80ad17a:	8040 00f8 0000 7000 0888 0870 8808 0070     @......p..p...p.
 80ad18a:	0000 0800 2818 4828 08fc 0008 0000 f800     .....((H........
 80ad19a:	f080 0888 8808 0070 0000 1000 4020 88f0     ......p..... @..
 80ad1aa:	8888 0070 0000 fc00 1008 2010 2020 0040     ..p........   @.
 80ad1ba:	0000 7000 8888 8870 8888 0070 0000 7000     ...p..p...p....p
 80ad1ca:	8888 7888 2010 00c0 0000 0000 8000 0000     ...x. ..........
 80ad1da:	8000 0000 0000 0000 4000 0000 0000 8040     .........@....@.
 80ad1ea:	0000 0000 2000 8040 2040 0000 0000 0000     ..... @.@ ......
 80ad1fa:	f000 0000 00f0 0000 0000 0000 8000 2040     ..............@ 
 80ad20a:	8040 0000 0000 f000 0808 2010 0040 0040     @.......... @.@.
 80ad21a:	0000 003e 0041 809c 80b6 80a6 009b 0080     ..>.A...........
 80ad22a:	0041 003e 0000 0000 0000 0800 1408 3c24     A.>...........$<
 80ad23a:	4244 0082 0000 f000 8888 f090 8888 00f0     DB..............
 80ad24a:	0000 1c00 4024 8080 8480 0078 0000 c000     ....$@....x.....
 80ad25a:	88b0 8484 8884 00f0 0000 f800 8080 80f8     ................
 80ad26a:	8080 00f8 0000 f800 8080 80f0 8080 0080     ................
 80ad27a:	0000 1c00 4022 be80 8482 0078 0000 8400     ...."@....x.....
 80ad28a:	8484 84fc 8484 0084 0000 f800 2020 2020     ............    
 80ad29a:	2020 00f8 0000 3e00 0808 0808 8888 0078       .....>......x.
 80ad2aa:	0000 8800 a090 c0c0 90a0 0088 0000 8000     ................
 80ad2ba:	8080 8080 8080 00f0 0000 0000 0022 0022     ............".".
 80ad2ca:	0022 0055 0055 0055 8088 8088 0000 0000     ".U.U.U.........
 80ad2da:	0000 8200 a2c2 92a2 868a 0082 0000 3c00     ...............<
 80ad2ea:	8242 8282 8482 0078 0000 e000 9090 9090     B.....x.........
 80ad2fa:	80e0 0080 0000 3c00 8142 8181 4a91 033e     .......<B....J>.
 80ad30a:	0001 e000 9090 e090 90a0 0088 0000 3c00     ...............<
 80ad31a:	4040 0438 8404 0078 0000 fe00 1010 1010     @@8...x.........
 80ad32a:	1010 0010 0000 8400 8484 8484 8484 0078     ..............x.
 80ad33a:	0000 8800 8888 5050 5050 0020 0000 0000     ......PPPP .....
 80ad34a:	2084 2084 404a 404a 8052 8052 8022 0021     . . J@J@R.R.".!.
 80ad35a:	0000 0000 0000 8200 2844 1010 4428 0082     ........D(..(D..
 80ad36a:	0000 8400 4848 3028 2010 0020 0000 fe00     ....HH(0.  .....
 80ad37a:	0804 2010 8040 00fe 0000 80e0 8080 8080     ... @...........
 80ad38a:	8080 8080 00e0 8000 4080 2040 2020 1010     .........@@   ..
 80ad39a:	0000 20e0 2020 2020 2020 2020 00e0 6060     ...         ..``
 80ad3aa:	0090 0000 0000 0000 0000 0000 0000 0000     ................
 80ad3ba:	0000 0000 00fe 4080 0000 0000 0000 0000     .......@........
 80ad3ca:	0000 0000 3800 8848 8888 0074 0000 8080     .....8H...t.....
 80ad3da:	f080 8888 8888 00f0 0000 0000 3000 8048     .............0H.
 80ad3ea:	8880 0070 0000 0808 7808 8888 8888 0078     ..p......x....x.
 80ad3fa:	0000 0000 7000 9088 88e0 0070 0000 2018     .....p....p.... 
 80ad40a:	f820 2020 2020 0020 0000 0000 3000 8848      .     ......0H.
 80ad41a:	8888 0878 e010 8080 b080 88c8 8888 0088     ..x.............
 80ad42a:	0000 8000 8000 8080 8080 0080 0000 1000     ................
 80ad43a:	1000 1010 1010 1010 6090 8080 8880 a090     .........`......
 80ad44a:	90e0 0088 0000 8080 8080 8080 8080 0080     ................
 80ad45a:	0000 0000 a400 92da 9292 0092 0000 0000     ................
 80ad46a:	b000 88c8 8888 0088 0000 0000 7000 8888     .............p..
 80ad47a:	8888 0070 0000 0000 f000 8888 8888 80f0     ..p.............
 80ad48a:	8080 0000 3800 8848 8888 0878 0808 0000     .....8H...x.....
 80ad49a:	e000 80a0 8080 0080 0000 0000 7000 4080     .............p.@
 80ad4aa:	1020 00e0 0000 4000 e040 4040 4040 0040      ......@@.@@@@@.
 80ad4ba:	0000 0000 8800 8888 8888 0078 0000 0000     ..........x.....
 80ad4ca:	8800 5088 2050 0020 0000 0000 9200 b492     ...PP  .........
 80ad4da:	54b4 0048 0000 0000 8400 3048 4830 0084     .TH.......H00H..
 80ad4ea:	0000 0000 8400 4888 3050 2020 4040 0000     .......HP0  @@..
 80ad4fa:	f000 2010 8040 00f0 0000 4030 4040 c040     ... @.....0@@@@.
 80ad50a:	4040 4040 0030 8080 8080 8080 8080 8080     @@@@0...........
 80ad51a:	0080 20c0 2020 3020 2020 2020 00c0 0000     ...    0    ....
 80ad52a:	6400 98e4 0000 0000 0000                    .d........

080ad534 <comicSansMS_8ptDescriptors>:
 80ad534:	0c02 0000 0c01 000c 0c03 0018 0c09 0024     ..............$.
 80ad544:	0c05 003c 0c09 0048 0c06 0060 0c01 006c     ..<...H...`...l.
 80ad554:	0c03 0078 0c03 0084 0c05 0090 0c05 009c     ..x.............
 80ad564:	0c02 00a8 0c03 00b4 0c01 00c0 0c05 00cc     ................
 80ad574:	0c05 00d8 0c03 00e4 0c05 00f0 0c05 00fc     ................
 80ad584:	0c06 0108 0c05 0114 0c05 0120 0c06 012c     .......... ...,.
 80ad594:	0c05 0138 0c05 0144 0c01 0150 0c02 015c     ..8...D...P...\.
 80ad5a4:	0c03 0168 0c04 0174 0c03 0180 0c05 018c     ..h...t.........
 80ad5b4:	0c09 0198 0c07 01b0 0c05 01bc 0c06 01c8     ................
 80ad5c4:	0c06 01d4 0c05 01e0 0c05 01ec 0c07 01f8     ................
 80ad5d4:	0c06 0204 0c05 0210 0c07 021c 0c05 0228     ..............(.
 80ad5e4:	0c04 0234 0c09 0240 0c07 0258 0c07 0264     ..4...@...X...d.
 80ad5f4:	0c04 0270 0c08 027c 0c05 0288 0c06 0294     ..p...|.........
 80ad604:	0c07 02a0 0c06 02ac 0c05 02b8 0c0b 02c4     ................
 80ad614:	0c07 02dc 0c06 02e8 0c07 02f4 0c03 0300     ................
 80ad624:	0c04 030c 0c03 0318 0c04 0324 0c07 0330     ..........$...0.
 80ad634:	0c02 033c 0c06 0348 0c05 0354 0c05 0360     ..<...H...T...`.
 80ad644:	0c05 036c 0c05 0378 0c05 0384 0c05 0390     ..l...x.........
 80ad654:	0c05 039c 0c01 03a8 0c04 03b4 0c05 03c0     ................
 80ad664:	0c01 03cc 0c07 03d8 0c05 03e4 0c05 03f0     ................
 80ad674:	0c05 03fc 0c05 0408 0c03 0414 0c04 0420     .............. .
 80ad684:	0c03 042c 0c05 0438 0c05 0444 0c07 0450     ..,...8...D...P.
 80ad694:	0c06 045c 0c06 0468 0c04 0474 0c04 0480     ..\...h...t.....
 80ad6a4:	0c01 048c 0c04 0498 0c06 04a4               ............

080ad6b0 <centuryGothic_8ptDescriptors>:
 80ad6b0:	0b02 0000 0b01 000b 0b03 0016 0b06 0021     ..............!.
 80ad6c0:	0b05 002c 0b08 0037 0b07 0042 0b01 004d     ..,...7...B...M.
 80ad6d0:	0b02 0058 0b02 0063 0b03 006e 0b05 0079     ..X...c...n...y.
 80ad6e0:	0b02 0084 0b03 008f 0b01 009a 0b04 00a5     ................
 80ad6f0:	0b05 00b0 0b02 00bb 0b05 00c6 0b05 00d1     ................
 80ad700:	0b06 00dc 0b05 00e7 0b05 00f2 0b05 00fd     ................
 80ad710:	0b05 0108 0b05 0113 0b01 011e 0b02 0129     ..............).
 80ad720:	0b06 0134 0b06 013f 0b06 014a 0b05 0155     ..4...?...J...U.
 80ad730:	0b09 0160 0b07 0176 0b04 0181 0b07 018c     ..`...v.........
 80ad740:	0b06 0197 0b05 01a2 0b04 01ad 0b08 01b8     ................
 80ad750:	0b06 01c3 0b01 01ce 0b04 01d9 0b05 01e4     ................
 80ad760:	0b04 01ef 0b09 01fa 0b06 0210 0b08 021b     ................
 80ad770:	0b05 0226 0b08 0231 0b05 023c 0b04 0247     ..&...1...<...G.
 80ad780:	0b05 0252 0b06 025d 0b07 0268 0b09 0273     ..R...]...h...s.
 80ad790:	0b05 0289 0b07 0294 0b05 029f 0b02 02aa     ................
 80ad7a0:	0b06 02b5 0b02 02c0 0b07 02cb 0b06 02d6     ................
 80ad7b0:	0b02 02e1 0b07 02ec 0b07 02f7 0b06 0302     ................
 80ad7c0:	0b07 030d 0b06 0318 0b03 0323 0b06 032e     ..........#.....
 80ad7d0:	0b06 0339 0b01 0344 0b02 034f 0b04 035a     ..9...D...O...Z.
 80ad7e0:	0b01 0365 0b09 0370 0b06 0386 0b06 0391     ..e...p.........
 80ad7f0:	0b07 039c 0b07 03a7 0b03 03b2 0b03 03bd     ................
 80ad800:	0b03 03c8 0b06 03d3 0b07 03de 0b09 03e9     ................
 80ad810:	0b05 03ff 0b05 040a 0b05 0415 0b03 0420     .............. .
 80ad820:	0b01 042b 0b03 0436 0b06 0441               ..+...6...A.

080ad82c <glcdfontDescriptors>:
 80ad82c:	0805 0000 0805 0008 0805 0010 0805 0018     ................
 80ad83c:	0805 0020 0805 0028 0805 0030 0805 0038     .. ...(...0...8.
 80ad84c:	0805 0040 0805 0048 0805 0050 0805 0058     ..@...H...P...X.
 80ad85c:	0805 0060 0805 0068 0805 0070 0805 0078     ..`...h...p...x.
 80ad86c:	0805 0080 0805 0088 0805 0090 0805 0098     ................
 80ad87c:	0805 00a0 0805 00a8 0805 00b0 0805 00b8     ................
 80ad88c:	0805 00c0 0805 00c8 0805 00d0 0805 00d8     ................
 80ad89c:	0805 00e0 0805 00e8 0805 00f0 0805 00f8     ................
 80ad8ac:	0805 0100 0805 0108 0805 0110 0805 0118     ................
 80ad8bc:	0805 0120 0805 0128 0805 0130 0805 0138     .. ...(...0...8.
 80ad8cc:	0805 0140 0805 0148 0805 0150 0805 0158     ..@...H...P...X.
 80ad8dc:	0805 0160 0805 0168 0805 0170 0805 0178     ..`...h...p...x.
 80ad8ec:	0805 0180 0805 0188 0805 0190 0805 0198     ................
 80ad8fc:	0805 01a0 0805 01a8 0805 01b0 0805 01b8     ................
 80ad90c:	0805 01c0 0805 01c8 0805 01d0 0805 01d8     ................
 80ad91c:	0805 01e0 0805 01e8 0805 01f0 0805 01f8     ................
 80ad92c:	0805 0200 0805 0208 0805 0210 0805 0218     ................
 80ad93c:	0805 0220 0805 0228 0805 0230 0805 0238     .. ...(...0...8.
 80ad94c:	0805 0240 0805 0248 0805 0250 0805 0258     ..@...H...P...X.
 80ad95c:	0805 0260 0805 0268 0805 0270 0805 0278     ..`...h...p...x.
 80ad96c:	0805 0280 0805 0288 0805 0290 0805 0298     ................
 80ad97c:	0805 02a0 0805 02a8 0805 02b0 0805 02b8     ................
 80ad98c:	0805 02c0 0805 02c8 0805 02d0 0805 02d8     ................
 80ad99c:	0805 02e0 0805 02e8 0805 02f0 0805 02f8     ................
 80ad9ac:	0805 0300 0805 0308 0805 0310 0805 0318     ................
 80ad9bc:	0805 0320 0805 0328 0805 0330 0805 0338     .. ...(...0...8.
 80ad9cc:	0805 0340 0805 0348 0805 0350 0805 0358     ..@...H...P...X.
 80ad9dc:	0805 0360 0805 0368 0805 0370 0805 0378     ..`...h...p...x.
 80ad9ec:	0805 0380 0805 0388 0805 0390 0805 0398     ................
 80ad9fc:	0805 03a0 0805 03a8 0805 03b0 0805 03b8     ................
 80ada0c:	0805 03c0 0805 03c8 0805 03d0 0805 03d8     ................
 80ada1c:	0805 03e0 0805 03e8 0805 03f0 0805 03f8     ................
 80ada2c:	0805 0400 0805 0408 0805 0410 0805 0418     ................
 80ada3c:	0805 0420 0805 0428 0805 0430 0805 0438     .. ...(...0...8.
 80ada4c:	0805 0440 0805 0448 0805 0450 0805 0458     ..@...H...P...X.
 80ada5c:	0805 0460 0805 0468 0805 0470 0805 0478     ..`...h...p...x.
 80ada6c:	0805 0480 0805 0488 0805 0490 0805 0498     ................
 80ada7c:	0805 04a0 0805 04a8 0805 04b0 0805 04b8     ................
 80ada8c:	0805 04c0 0805 04c8 0805 04d0 0805 04d8     ................
 80ada9c:	0805 04e0 0805 04e8 0805 04f0 0805 04f8     ................
 80adaac:	0805 0500 0805 0508 0805 0510 0805 0518     ................
 80adabc:	0805 0520 0805 0528 0805 0530 0805 0538     .. ...(...0...8.
 80adacc:	0805 0540 0805 0548 0805 0550 0805 0558     ..@...H...P...X.
 80adadc:	0805 0560 0805 0568 0805 0570 0805 0578     ..`...h...p...x.
 80adaec:	0805 0580 0805 0588 0805 0590 0805 0598     ................
 80adafc:	0805 05a0 0805 05a8 0805 05b0 0805 05b8     ................
 80adb0c:	0805 05c0 0805 05c8 0805 05d0 0805 05d8     ................
 80adb1c:	0805 05e0 0805 05e8 0805 05f0 0805 05f8     ................
 80adb2c:	0805 0600 0805 0608 0805 0610 0805 0618     ................
 80adb3c:	0805 0620 0805 0628 0805 0630 0805 0638     .. ...(...0...8.
 80adb4c:	0805 0640 0805 0648 0805 0650 0805 0658     ..@...H...P...X.
 80adb5c:	0805 0660 0805 0668 0805 0670 0805 0678     ..`...h...p...x.
 80adb6c:	0805 0680 0805 0688 0805 0690 0805 0698     ................
 80adb7c:	0805 06a0 0805 06a8 0805 06b0 0805 06b8     ................
 80adb8c:	0805 06c0 0805 06c8 0805 06d0 0805 06d8     ................
 80adb9c:	0805 06e0 0805 06e8 0805 06f0 0805 06f8     ................
 80adbac:	0805 0700 0805 0708 0805 0710 0805 0718     ................
 80adbbc:	0805 0720 0805 0728 0805 0730 0805 0738     .. ...(...0...8.
 80adbcc:	0805 0740 0805 0748 0805 0750 0805 0758     ..@...H...P...X.
 80adbdc:	0805 0760 0805 0768 0805 0770 0805 0778     ..`...h...p...x.
 80adbec:	0805 0780 0805 0788 0805 0790 0805 0798     ................
 80adbfc:	0805 07a0 0805 07a8 0805 07b0 0805 07b8     ................
 80adc0c:	0805 07c0 0805 07c8 0805 07d0 0805 07d8     ................
 80adc1c:	0805 07e0 0805 07e8 0805 07f0 0805 07f8     ................

080adc2c <timesNewRoman_8ptDescriptors>:
 80adc2c:	0c02 0000 0c01 000c 0c03 0018 0c06 0024     ..............$.
 80adc3c:	0c05 0030 0c09 003c 0c08 0054 0c01 0060     ..0...<...T...`.
 80adc4c:	0c03 006c 0c03 0078 0c05 0084 0c05 0090     ..l...x.........
 80adc5c:	0c02 009c 0c03 00a8 0c01 00b4 0c03 00c0     ................
 80adc6c:	0c05 00cc 0c03 00d8 0c05 00e4 0c05 00f0     ................
 80adc7c:	0c05 00fc 0c05 0108 0c05 0114 0c05 0120     .............. .
 80adc8c:	0c05 012c 0c05 0138 0c01 0144 0c02 0150     ..,...8...D...P.
 80adc9c:	0c05 015c 0c05 0168 0c05 0174 0c04 0180     ..\...h...t.....
 80adcac:	0c09 018c 0c07 01a4 0c06 01b0 0c06 01bc     ................
 80adcbc:	0c07 01c8 0c06 01d4 0c06 01e0 0c07 01ec     ................
 80adccc:	0c07 01f8 0c03 0204 0c04 0210 0c08 021c     ................
 80adcdc:	0c06 0228 0c09 0234 0c07 024c 0c07 0258     ..(...4...L...X.
 80adcec:	0c06 0264 0c07 0270 0c07 027c 0c04 0288     ..d...p...|.....
 80adcfc:	0c07 0294 0c07 02a0 0c07 02ac 0c0b 02b8     ................
 80add0c:	0c07 02d0 0c07 02dc 0c06 02e8 0c03 02f4     ................
 80add1c:	0c03 0300 0c03 030c 0c04 0318 0c06 0324     ..............$.
 80add2c:	0c02 0330 0c05 033c 0c05 0348 0c04 0354     ..0...<...H...T.
 80add3c:	0c05 0360 0c04 036c 0c05 0378 0c05 0384     ..`...l...x.....
 80add4c:	0c06 0390 0c03 039c 0c03 03a8 0c05 03b4     ................
 80add5c:	0c03 03c0 0c09 03cc 0c06 03e4 0c05 03f0     ................
 80add6c:	0c05 03fc 0c05 0408 0c04 0414 0c03 0420     .............. .
 80add7c:	0c03 042c 0c06 0438 0c06 0444 0c08 0450     ..,...8...D...P.
 80add8c:	0c05 045c 0c06 0468 0c05 0474 0c03 0480     ..\...h...t.....
 80add9c:	0c01 048c 0c03 0498 0c05 04a4               ............

080adda8 <timesNewRoman_8ptBitmaps>:
 80adda8:	7f20 0000 0000 0000 0000 0000 0000 8000      ...............
 80addb8:	8080 8080 0080 0080 0000 a000 a0a0 0000     ................
 80addc8:	0000 0000 0000 2400 4824 48fc 90fc 0090     .......$$H.H....
 80addd8:	0000 7020 a0a8 3060 a828 2070 0000 0000     .. p..`0(.p ....
 80adde8:	0041 00a2 00a4 0048 0009 8012 8022 0041     A.....H.....".A.
 80addf8:	0000 0000 0000 1c00 2824 d233 8994 0076     ........$(3...v.
 80ade08:	0000 8000 8080 0000 0000 0000 0000 2000     ............... 
 80ade18:	8040 8080 8080 4080 0020 8000 2040 2020     @......@ ...@   
 80ade28:	2020 4020 0080 2000 70a8 20a8 0000 0000        @... .p. ....
 80ade38:	0000 0000 2000 f820 2020 0000 0000 0000     .....  .  ......
 80ade48:	0000 0000 0000 40c0 0080 0000 0000 0000     .......@........
 80ade58:	00e0 0000 0000 0000 0000 0000 0000 0080     ................
 80ade68:	0000 2000 4020 4040 8040 0080 0000 7000     ...  @@@@......p
 80ade78:	8888 8888 8888 0070 0000 c000 4040 4040     ......p.....@@@@
 80ade88:	4040 00e0 0000 7000 0888 1008 4820 00f8     @@.....p.... H..
 80ade98:	0000 7000 0888 0830 0808 00f0 0000 1000     ...p..0.........
 80adea8:	5030 9050 10f8 0010 0000 3800 6040 0810     0PP........8@`..
 80adeb8:	0808 00f0 0000 1800 4060 c8b0 8888 0070     ........`@....p.
 80adec8:	0000 7800 0888 1010 2010 0020 0000 7000     ...x.....  ....p
 80aded8:	8888 5070 8888 0070 0000 7000 8888 7888     ..pP..p....p...x
 80adee8:	3010 00c0 0000 0000 0000 0080 0000 0080     .0..............
 80adef8:	0000 0000 0000 0080 0000 40c0 0080 0000     ...........@....
 80adf08:	0800 8070 0870 0000 0000 0000 0000 00f8     ..p.p...........
 80adf18:	00f8 0000 0000 0000 8000 0870 8070 0000     ..........p.p...
 80adf28:	0000 6000 1090 4020 0040 0040 0000 0000     ...`.. @@.@.....
 80adf38:	001e 0021 804e 8092 80a4 80a4 00a7 0098     ..!.N...........
 80adf48:	8040 0021 001e 1000 2810 2828 447c 00ee     @.!......(((|D..
 80adf58:	0000 f800 4444 4478 4444 00f8 0000 3c00     ....DDxDDD.....<
 80adf68:	8044 8080 4480 0038 0000 f800 4244 4242     D....D8.....DBBB
 80adf78:	4442 00f8 0000 fc00 5044 5070 4440 00fc     BD......DPpP@D..
 80adf88:	0000 fc00 5044 5070 4040 00e0 0000 3c00     ....DPpP@@.....<
 80adf98:	8044 8e80 4484 0038 0000 ee00 4444 447c     D....D8.....DD|D
 80adfa8:	4444 00ee 0000 e000 4040 4040 4040 00e0     DD......@@@@@@..
 80adfb8:	0000 7000 2020 2020 2020 00c0 0000 ee00     ...p      ......
 80adfc8:	5048 5060 4448 00ef 0000 e000 4040 4040     HP`PHD......@@@@
 80adfd8:	4440 00fc 0000 0000 80e3 0063 0063 0055     @D........c.c.U.
 80adfe8:	0055 0055 0049 80eb 0000 0000 0000 ce00     U.U.I...........
 80adff8:	6444 5454 444c 00e4 0000 3800 8244 8282     DdTTLD.....8D...
 80ae008:	4482 0038 0000 f800 4444 7844 4040 00e0     .D8.....DDDx@@..
 80ae018:	0000 3800 8244 8282 4482 0838 0006 f800     ...8D....D8.....
 80ae028:	4444 5078 4848 00e6 0000 7000 8090 2040     DDxPHH.....p..@ 
 80ae038:	9010 00e0 0000 fe00 1092 1010 1010 0038     ..............8.
 80ae048:	0000 ee00 4444 4444 4444 0038 0000 ee00     ....DDDDDD8.....
 80ae058:	4444 2828 1028 0010 0000 0000 e0ee 4044     DD(((.........D@
 80ae068:	4044 8024 802a 802a 0011 0011 0000 0000     D@$.*.*.........
 80ae078:	0000 ee00 2844 1010 4428 00ee 0000 ee00     ....D(..(D......
 80ae088:	2844 1028 1010 0038 0000 fc00 1088 2020     D((...8.......  
 80ae098:	8440 00fc 0000 e000 8080 8080 8080 8080     @...............
 80ae0a8:	00e0 8000 4080 4040 2040 0020 0000 e000     .....@@@@  .....
 80ae0b8:	2020 2020 2020 2020 00e0 6000 9060 0090             ...``...
	...
 80ae0d8:	00fc 8000 0040 0000 0000 0000 0000 0000     ....@...........
 80ae0e8:	0000 1060 9070 0078 0000 c000 4040 4870     ..`.p.x.....@@pH
 80ae0f8:	4848 0030 0000 0000 0000 9070 8080 0070     HH0.......p...p.
 80ae108:	0000 3000 1010 9070 9090 0078 0000 0000     ...0..p...x.....
 80ae118:	0000 9060 80f0 0070 0000 3800 4048 40e0     ..`...p....8H@.@
 80ae128:	4040 00e0 0000 0000 0000 9078 8060 88f0     @@........x.`...
 80ae138:	0070 c000 4040 6858 4848 00ec 0000 4000     p...@@XhHH.....@
 80ae148:	0000 40c0 4040 00e0 0000 2000 0000 2060     ...@@@..... ..` 
 80ae158:	2020 2020 00c0 c000 4040 5058 5060 00d8         ....@@XP`P..
 80ae168:	0000 c000 4040 4040 4040 00e0 0000 0000     ....@@@@@@......
 80ae178:	0000 0000 0000 00db 006d 0049 0049 80ed     ........m.I.I...
	...
 80ae190:	0000 68d8 4848 00ec 0000 0000 0000 8870     ...hHH........p.
 80ae1a0:	8888 0070 0000 0000 0000 48f0 4848 4070     ..p........HHHp@
 80ae1b0:	00e0 0000 0000 9070 9090 1070 0038 0000     ......p...p.8...
 80ae1c0:	0000 60d0 4040 00e0 0000 0000 0000 8060     ...`@@........`.
 80ae1d0:	2060 00c0 0000 0000 4040 40e0 4040 0060     ` ......@@.@@@`.
 80ae1e0:	0000 0000 0000 48d8 4848 003c 0000 0000     .......HHH<.....
 80ae1f0:	0000 48dc 2050 0020 0000 0000 0000 4adb     ...HP  ........J
 80ae200:	245a 0024 0000 0000 0000 50d8 5020 00d8     Z$$........P P..
 80ae210:	0000 0000 0000 48dc 3050 2020 00c0 0000     .......HP0  ....
 80ae220:	0000 90f8 4820 00f8 0000 2000 4040 8040     .... H..... @@@.
 80ae230:	4040 4040 0020 8000 8080 8080 8080 8080     @@@@ ...........
 80ae240:	0080 8000 4040 2040 4040 4040 0080 0000     ....@@@ @@@@....
 80ae250:	0000 e800 00b8 0000 0000 2e30 0030 6166     ..........0.0.fa
 80ae260:	736c 0065 7274 6575 2500 0075 6725 6e00     lse.true.%u.%g.n
 80ae270:	6c75 006c 2575 3430 0078 0000               ull.u%04x...

080ae27c <_ZTVN5spark12NetworkClassE>:
	...
 80ae284:	4623 080a 462d 080a 4637 080a 4641 080a     #F..-F..7F..AF..
 80ae294:	464b 080a 4657 080a 4663 080a 466f 080a     KF..WF..cF..oF..
 80ae2a4:	4677 080a 4681 080a 468d 080a               wF...F...F..

080ae2b0 <_ZTVN5spark9WiFiClassE>:
	...
 80ae2b8:	4793 080a 4789 080a 477f 080a 46f1 080a     .G...G...G...F..
 80ae2c8:	4773 080a 4767 080a 475b 080a 4753 080a     sG..gG..[G..SG..
 80ae2d8:	4749 080a 473f 080a 46fb 080a               IG..?G...F..

080ae2e4 <_ZTV8SPIClass>:
	...
 80ae2ec:	47b1 080a 47b3 080a                         .G...G..

080ae2f4 <_ZL14clock_divisors>:
 80ae2f4:	0800 1810 2820 3830                         .... (08

080ae2fc <_ZTV7TwoWire>:
	...
 80ae304:	49f9 080a 4a43 080a 4a1b 080a 49fb 080a     .I..CJ...J...I..
 80ae314:	4a23 080a 4a2b 080a 4a33 080a 4a3b 080a     #J..+J..3J..;J..

080ae324 <_ZTV9USBSerial>:
	...
 80ae32c:	4abb 080a 4b0b 080a 4b19 080a 6689 080a     .J...K...K...f..
 80ae33c:	4af7 080a 4abd 080a 4ad3 080a 4b05 080a     .J...J...J...K..
 80ae34c:	4ae9 080a 4ab7 080a                         .J...J..

080ae354 <_ZTV9IPAddress>:
	...
 80ae35c:	4c7d 080a 4c6d 080a 4c6f 080a               }L..mL..oL..

080ae368 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80ae370:	4d35 080a 4d3b 080a 4d91 080a 4d49 080a     5M..;M...M..IM..
 80ae380:	4d37 080a 2b25 3330 3a64 3025 7532 2500     7M..%+03d:%02u.%
 80ae390:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
 80ae3a0:	7a25 6100 6373 6974 656d 0000               %z.asctime..

080ae3ac <_ZTVN5spark16JSONStreamWriterE>:
	...
 80ae3b4:	570b 080a 5731 080a 56e5 080a 4263 080a     .W..1W...V..cB..

080ae3c4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80ae3cc:	5bc1 080a 5bd5 080a 6511 080a 56ed 080a     .[...[...e...V..

080ae3dc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 80ae3e4:	5707 080a 574d 080a 5ab9 080a 575b 080a     .W..MW...Z..[W..
 80ae3f4:	6162 6475 5300 7265 6169 006c 5355 5342     baud.Serial.USBS
 80ae404:	7265 6169 316c 7400 7079 0065 6170 6172     erial1.type.para
 80ae414:	006d 6d63 0064 6e68 0064 7473 6d72 6600     m.cmd.hnd.strm.f
 80ae424:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
 80ae434:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
 80ae444:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
 80ae454:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
 80ae464:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
 80ae474:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
 80ae484:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
 80ae494:	0020 0a0d 6c00 006e 6e66 6400 7465 6961      ....ln.fn.detai
 80ae4a4:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
 80ae4b4:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
 80ae4c4:	6369 6100 6c6c 0000                         ic.all..

080ae4cc <_ZTVN5spark16StreamLogHandlerE>:
	...
 80ae4d4:	5b95 080a 5bad 080a 635d 080a 00d3 080a     .[...[..]c......

080ae4e4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 80ae4ec:	5709 080a 573f 080a 6285 080a 56ef 080a     .W..?W...b...V..
 80ae4fc:	616e 006e 766f 0066 002e 6e69 0066 0000     nan.ovf...inf...

080ae50c <_ZTV11USARTSerial>:
	...
 80ae514:	698d 080a 69dd 080a 69eb 080a 6689 080a     .i...i...i...f..
 80ae524:	69a1 080a 69c3 080a 69af 080a 69d7 080a     .i...i...i...i..
 80ae534:	698f 080a 6993 080a                         .i...i..

080ae53c <_ZSt7nothrow>:
 80ae53c:	6200 7361 6369 735f 7274 6e69 3a67 5f3a     .basic_string::_
 80ae54c:	5f4d 7263 6165 6574 2500 3a73 5f20 705f     M_create.%s: __p
 80ae55c:	736f 2820 6877 6369 2068 7369 2520 757a     os (which is %zu
 80ae56c:	2029 203e 6874 7369 3e2d 6973 657a 2928     ) > this->size()
 80ae57c:	2820 6877 6369 2068 7369 2520 757a 0029      (which is %zu).
 80ae58c:	6162 6973 5f63 7473 6972 676e 3a3a 7461     basic_string::at
 80ae59c:	203a 5f5f 206e 7728 6968 6863 6920 2073     : __n (which is 
 80ae5ac:	7a25 2975 3e20 203d 6874 7369 3e2d 6973     %zu) >= this->si
 80ae5bc:	657a 2928 2820 6877 6369 2068 7369 2520     ze() (which is %
 80ae5cc:	757a 0029 6162 6973 5f63 7473 6972 676e     zu).basic_string
 80ae5dc:	3a3a 7265 7361 0065 6162 6973 5f63 7473     ::erase.basic_st
 80ae5ec:	6972 676e 3a3a 4d5f 725f 7065 616c 6563     ring::_M_replace
 80ae5fc:	615f 7875 6200 7361 6369 735f 7274 6e69     _aux.basic_strin
 80ae60c:	3a67 693a 736e 7265 0074 6162 6973 5f63     g::insert.basic_
 80ae61c:	7473 6972 676e 3a3a 6572 6c70 6361 0065     string::replace.
 80ae62c:	6162 6973 5f63 7473 6972 676e 3a3a 4d5f     basic_string::_M
 80ae63c:	725f 7065 616c 6563 6200 7361 6369 735f     _replace.basic_s
 80ae64c:	7274 6e69 3a67 613a 7373 6769 006e 6162     tring::assign.ba
 80ae65c:	6973 5f63 7473 6972 676e 3a3a 7061 6570     sic_string::appe
 80ae66c:	646e 6200 7361 6369 735f 7274 6e69 3a67     nd.basic_string:
 80ae67c:	633a 706f 0079 6162 6973 5f63 7473 6972     :copy.basic_stri
 80ae68c:	676e 3a3a 6f63 706d 7261 0065 6162 6973     ng::compare.basi
 80ae69c:	5f63 7473 6972 676e 3a3a 4d5f 635f 6e6f     c_string::_M_con
 80ae6ac:	7473 7572 7463 6e20 6c75 206c 6f6e 2074     struct null not 
 80ae6bc:	6176 696c 0064 6162 6973 5f63 7473 6972     valid.basic_stri
 80ae6cc:	676e 3a3a 6162 6973 5f63 7473 6972 676e     ng::basic_string
 80ae6dc:	6200 7361 6369 735f 7274 6e69 3a67 733a     .basic_string::s
 80ae6ec:	6275 7473 0072 7473 6972 676e 3a3a 7473     ubstr.string::st
 80ae6fc:	6972 676e 6e00 746f 6520 6f6e 6775 2068     ring.not enough 
 80ae70c:	7073 6361 2065 6f66 2072 6f66 6d72 7461     space for format
 80ae71c:	6520 7078 6e61 6973 6e6f 2820 6c50 6165      expansion (Plea
 80ae72c:	6573 7320 6275 696d 2074 7566 6c6c 6220     se submit full b
 80ae73c:	6775 7220 7065 726f 2074 7461 6820 7474     ug report at htt
 80ae74c:	3a70 2f2f 6367 2e63 6e67 2e75 726f 2f67     p://gcc.gnu.org/
 80ae75c:	7562 7367 682e 6d74 296c 0a3a 2020 2020     bugs.html):.    
 80ae76c:	2d00 782b 3058 3231 3433 3635 3837 6139     .-+xX0123456789a
 80ae77c:	6362 6564 3066 3231 3433 3635 3837 4139     bcdef0123456789A
 80ae78c:	4342 4544 0046 2b2d 5878 3130 3332 3534     BCDEF.-+xX012345
 80ae79c:	3736 3938 6261 6463 6665 4241 4443 4645     6789abcdefABCDEF
 80ae7ac:	2d00 3130 3332 3534 3736 3938 4700 544d     .-0123456789.GMT
 80ae7bc:	4800 5453 4100 534b 0054 5350 0054 534d     .HST.AKST.PST.MS
 80ae7cc:	0054 5343 0054 5345 0054 5341 0054 534e     T.CST.EST.AST.NS
 80ae7dc:	0054 4543 0054 5349 0054 4545 0054 534a     T.CET.IST.EET.JS
 80ae7ec:	0054                                        T.

080ae7ee <day_name.4723>:
 80ae7ee:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80ae7fe:	6972 6153 4a74                                   riSat

080ae803 <mon_name.4724>:
 80ae803:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80ae813:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80ae823:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80ae833:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80ae843:	6425 000a                                   %d..

080ae847 <_ctype_>:
 80ae847:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80ae857:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80ae867:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80ae877:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80ae887:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80ae897:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80ae8a7:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80ae8b7:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80ae8c7:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080ae948 <__sf_fake_stdin>:
	...

080ae968 <__sf_fake_stdout>:
	...

080ae988 <__sf_fake_stderr>:
	...
 80ae9a8:	0043 4f50 4953 0058                         C.POSIX.

080ae9b0 <__month_lengths>:
 80ae9b0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80ae9c0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80ae9d0:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80ae9e0:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80ae9f0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80aea00:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80aea10:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80aea20:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 80aea30:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 80aea40:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 80aea50:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 80aea60:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

080aea6c <fpi.5342>:
 80aea6c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 80aea7c:	0000 0000 6e69 7469 0079 0000               ....inity...

080aea88 <fpinan.5378>:
 80aea88:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

080aeaa0 <tinytens>:
 80aeaa0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80aeab0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80aeac0:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 80aead0:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 80aeae0:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 80aeaf0:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 80aeb00:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 80aeb10:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 80aeb20:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 80aeb30:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 80aeb40:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 80aeb50:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 80aeb60:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 80aeb70:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 80aeb80:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 80aeb90:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 80aeba0:	7574 6472 7961 2500 3a48 4d25 253a 0053     turday.%H:%M:%S.
 80aebb0:	6d25 252f 2f64 7925 2500 2061 6225 2520     %m/%d/%y.%a %b %
 80aebc0:	2065 4825 253a 3a4d 5325 2520 0059 4d41     e %H:%M:%S %Y.AM
 80aebd0:	5000 004d 6125 2520 2062 6525 2520 3a48     .PM.%a %b %e %H:
 80aebe0:	4d25 253a 2053 5a25 2520 0059 4925 253a     %M:%S %Z %Y.%I:%
 80aebf0:	3a4d 5325 2520 0070                         M:%S %p.

080aebf8 <_C_time_locale>:
 80aebf8:	ead0 080a ead4 080a ead8 080a eadc 080a     ................
 80aec08:	eae0 080a eae4 080a eae8 080a eaec 080a     ................
 80aec18:	eaf0 080a eaf4 080a eaf8 080a eafc 080a     ................
 80aec28:	eb00 080a eb08 080a eb11 080a eb17 080a     ................
 80aec38:	eae0 080a eb1d 080a eb22 080a eb27 080a     ........"...'...
 80aec48:	eb2e 080a eb38 080a eb40 080a eb49 080a     ....8...@...I...
 80aec58:	eb52 080a eb56 080a eb5a 080a eb5e 080a     R...V...Z...^...
 80aec68:	eb62 080a eb66 080a eb6a 080a eb6e 080a     b...f...j...n...
 80aec78:	eb75 080a eb7c 080a eb84 080a eb8e 080a     u...|...........
 80aec88:	eb97 080a eb9e 080a eba7 080a ebb0 080a     ................
 80aec98:	ebb9 080a ebce 080a ebd1 080a ebd4 080a     ................
 80aeca8:	eb00 080a eb08 080a eb11 080a eb17 080a     ................
 80aecb8:	eae0 080a eb1d 080a eb22 080a eb27 080a     ........"...'...
 80aecc8:	eb2e 080a eb38 080a eb40 080a eb49 080a     ....8...@...I...
 80aecd8:	e417 080a ebec 080a e498 080a e498 080a     ................
 80aece8:	e498 080a e498 080a e498 080a 5a54 2500     ............TZ.%
 80aecf8:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
 80aed08:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
 80aed18:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
 80aed28:	2575 006e 0000 0000                         u%n.....

080aed30 <__mprec_tens>:
 80aed30:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 80aed40:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 80aed50:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 80aed60:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 80aed70:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 80aed80:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 80aed90:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 80aeda0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80aedb0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80aedc0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80aedd0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80aede0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80aedf0:	9db4 79d9 7843 44ea                         ...yCx.D

080aedf8 <__mprec_bigtens>:
 80aedf8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 80aee08:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 80aee18:	bf3c 7f73 4fdd 7515                         <.s..O.u

080aee20 <p05.5385>:
 80aee20:	0005 0000 0019 0000 007d 0000               ........}...

080aee2c <link_const_variable_data_end>:
 80aee2c:	080a04ad 	.word	0x080a04ad
 80aee30:	080a05c1 	.word	0x080a05c1
 80aee34:	080a09f9 	.word	0x080a09f9
 80aee38:	080a0d3d 	.word	0x080a0d3d
 80aee3c:	080a0da3 	.word	0x080a0da3
 80aee40:	080a0ee5 	.word	0x080a0ee5
 80aee44:	080a0f6d 	.word	0x080a0f6d
 80aee48:	080a12b1 	.word	0x080a12b1
 80aee4c:	080a154d 	.word	0x080a154d
 80aee50:	080a19cd 	.word	0x080a19cd
 80aee54:	080a1eb5 	.word	0x080a1eb5
 80aee58:	080a1eb9 	.word	0x080a1eb9
 80aee5c:	080a209d 	.word	0x080a209d
 80aee60:	080a22d1 	.word	0x080a22d1
 80aee64:	080a2405 	.word	0x080a2405
 80aee68:	080a2409 	.word	0x080a2409
 80aee6c:	080a24ad 	.word	0x080a24ad
 80aee70:	080a24b1 	.word	0x080a24b1
 80aee74:	080a24b5 	.word	0x080a24b5
 80aee78:	080a29ef 	.word	0x080a29ef
 80aee7c:	080a29f3 	.word	0x080a29f3
 80aee80:	080a29f7 	.word	0x080a29f7
 80aee84:	080a3149 	.word	0x080a3149
 80aee88:	080a346d 	.word	0x080a346d
 80aee8c:	080a3471 	.word	0x080a3471
 80aee90:	080a3495 	.word	0x080a3495
 80aee94:	080a3b95 	.word	0x080a3b95
 80aee98:	080a3b99 	.word	0x080a3b99
 80aee9c:	080a3b9d 	.word	0x080a3b9d
 80aeea0:	080a3ba1 	.word	0x080a3ba1
 80aeea4:	080a3ba5 	.word	0x080a3ba5
 80aeea8:	080a46dd 	.word	0x080a46dd
 80aeeac:	080a479d 	.word	0x080a479d
 80aeeb0:	080a54a5 	.word	0x080a54a5
 80aeeb4:	080a56d1 	.word	0x080a56d1
 80aeeb8:	080a634d 	.word	0x080a634d
 80aeebc:	080a6aa5 	.word	0x080a6aa5
 80aeec0:	080a6c75 	.word	0x080a6c75
 80aeec4:	080a6ca5 	.word	0x080a6ca5
 80aeec8:	080a71f9 	.word	0x080a71f9
 80aeecc:	080a727d 	.word	0x080a727d
 80aeed0:	080a73e1 	.word	0x080a73e1
 80aeed4:	080a74a5 	.word	0x080a74a5

080aeed8 <link_constructors_end>:
	...

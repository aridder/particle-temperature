
/home/aridder/Particle/temperatur/target/1.4.4/photon/temperatur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009a40  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a9a60  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000104  20000000  080a9a64  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000078c  20000104  20000104  00040104  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a9b68  080a9b68  00039b68  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a9b90  080a9b90  00039b90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001195be  00000000  00000000  00039b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001862d  00000000  00000000  00153152  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00002f98  00000000  00000000  0016b77f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0003379d  00000000  00000000  0016e717  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0003b407  00000000  00000000  001a1eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000b391e  00000000  00000000  001dd2bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00020b5f  00000000  00000000  00290bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00004650  00000000  00000000  002b1738  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ece8  00000000  00000000  002b5d88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f005 fc21 	bl	80a5878 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f005 fc41 	bl	80a58c4 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a9a64 	.word	0x080a9a64
 80a0050:	20000104 	.word	0x20000104
 80a0054:	20000104 	.word	0x20000104
 80a0058:	20000890 	.word	0x20000890
 80a005c:	20000890 	.word	0x20000890

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fdc7 	bl	80a2bf4 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a99fc 	.word	0x080a99fc
 80a0088:	080a9a5c 	.word	0x080a9a5c

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b89c 	b.w	80a01c8 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 f8fb 	bl	80a028c <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 bd6d 	b.w	80a2b78 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f001 bfe5 	b.w	80a206c <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 bfeb 	b.w	80a207c <free>
	...

080a00a8 <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00aa:	4a03      	ldr	r2, [pc, #12]	; (80a00b8 <__cxa_pure_virtual+0x10>)
 80a00ac:	2100      	movs	r1, #0
 80a00ae:	200c      	movs	r0, #12
 80a00b0:	f001 ff18 	bl	80a1ee4 <panic_>
 80a00b4:	e7fe      	b.n	80a00b4 <__cxa_pure_virtual+0xc>
 80a00b6:	bf00      	nop
 80a00b8:	080a1d95 	.word	0x080a1d95

080a00bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00bc:	7800      	ldrb	r0, [r0, #0]
 80a00be:	fab0 f080 	clz	r0, r0
 80a00c2:	0940      	lsrs	r0, r0, #5
 80a00c4:	4770      	bx	lr

080a00c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00c6:	2301      	movs	r3, #1
 80a00c8:	7003      	strb	r3, [r0, #0]
 80a00ca:	4770      	bx	lr

080a00cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
 80a00cc:	4770      	bx	lr

080a00ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
 80a00ce:	6a00      	ldr	r0, [r0, #32]
 80a00d0:	6803      	ldr	r3, [r0, #0]
 80a00d2:	68db      	ldr	r3, [r3, #12]
 80a00d4:	4718      	bx	r3

080a00d6 <_ZN9GyroscopeD1Ev>:
#define GYROSCOPE_H
#include <queue>
#include "MPU6050.h"
#include "acceleration_measurements.h"

class Gyroscope
 80a00d6:	b570      	push	{r4, r5, r6, lr}

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 80a00d8:	6843      	ldr	r3, [r0, #4]
 80a00da:	4604      	mov	r4, r0
      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
 80a00dc:	6985      	ldr	r5, [r0, #24]
 80a00de:	6a86      	ldr	r6, [r0, #40]	; 0x28

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 80a00e0:	b153      	cbz	r3, 80a00f8 <_ZN9GyroscopeD1Ev+0x22>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80a00e2:	3604      	adds	r6, #4
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80a00e4:	42ae      	cmp	r6, r5
 80a00e6:	d904      	bls.n	80a00f2 <_ZN9GyroscopeD1Ev+0x1c>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a00e8:	f855 0b04 	ldr.w	r0, [r5], #4
 80a00ec:	f7ff ffd9 	bl	80a00a2 <_ZdlPv>
 80a00f0:	e7f8      	b.n	80a00e4 <_ZN9GyroscopeD1Ev+0xe>
 80a00f2:	6860      	ldr	r0, [r4, #4]
 80a00f4:	f7ff ffd5 	bl	80a00a2 <_ZdlPv>
 80a00f8:	4620      	mov	r0, r4
 80a00fa:	bd70      	pop	{r4, r5, r6, pc}

080a00fc <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a00fc:	b510      	push	{r4, lr}
 80a00fe:	4604      	mov	r4, r0
 80a0100:	4b09      	ldr	r3, [pc, #36]	; (80a0128 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
 80a0102:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
 80a0104:	f002 fff4 	bl	80a30f0 <_ZN5spark10LogManager8instanceEv>
 80a0108:	4621      	mov	r1, r4
 80a010a:	f003 f9f0 	bl	80a34ee <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
 80a010e:	f002 fc23 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a0112:	f002 fc07 	bl	80a2924 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
 80a0116:	4620      	mov	r0, r4
 80a0118:	4b04      	ldr	r3, [pc, #16]	; (80a012c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
 80a011a:	f840 3b04 	str.w	r3, [r0], #4
 80a011e:	f003 f8ed 	bl	80a32fc <_ZN5spark6detail9LogFilterD1Ev>
    }
 80a0122:	4620      	mov	r0, r4
 80a0124:	bd10      	pop	{r4, pc}
 80a0126:	bf00      	nop
 80a0128:	080a6cb4 	.word	0x080a6cb4
 80a012c:	080a6c9c 	.word	0x080a6c9c

080a0130 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
 80a0130:	b510      	push	{r4, lr}
 80a0132:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
 80a0134:	f7ff ffe2 	bl	80a00fc <_ZN5spark16SerialLogHandlerD1Ev>
 80a0138:	4620      	mov	r0, r4
 80a013a:	2124      	movs	r1, #36	; 0x24
 80a013c:	f004 f9f0 	bl	80a4520 <_ZdlPvj>
 80a0140:	4620      	mov	r0, r4
 80a0142:	bd10      	pop	{r4, pc}

080a0144 <_ZN17SerialDebugOutputD1Ev>:
#endif // Wiring_Rtt

} // namespace spark

// Compatibility API
class SerialDebugOutput: public spark::SerialLogHandler {
 80a0144:	b510      	push	{r4, lr}
 80a0146:	4604      	mov	r4, r0
 80a0148:	4b02      	ldr	r3, [pc, #8]	; (80a0154 <_ZN17SerialDebugOutputD1Ev+0x10>)
 80a014a:	6003      	str	r3, [r0, #0]
 80a014c:	f7ff ffd6 	bl	80a00fc <_ZN5spark16SerialLogHandlerD1Ev>
 80a0150:	4620      	mov	r0, r4
 80a0152:	bd10      	pop	{r4, pc}
 80a0154:	080a6ccc 	.word	0x080a6ccc

080a0158 <_ZN17SerialDebugOutputD0Ev>:
 80a0158:	b510      	push	{r4, lr}
 80a015a:	4604      	mov	r4, r0
 80a015c:	f7ff fff2 	bl	80a0144 <_ZN17SerialDebugOutputD1Ev>
 80a0160:	4620      	mov	r0, r4
 80a0162:	2124      	movs	r1, #36	; 0x24
 80a0164:	f004 f9dc 	bl	80a4520 <_ZdlPvj>
 80a0168:	4620      	mov	r0, r4
 80a016a:	bd10      	pop	{r4, pc}

080a016c <_Z11setupSerialv>:
  // tft.drawOnLandTemp(currentOnLandTemperature, ST7735_WHITE);

  light.setRedLight();
}

void setupSerial() {
 80a016c:	b508      	push	{r3, lr}
  Serial.begin(9600);
 80a016e:	f002 fbf3 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a0172:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0176:	f002 fbd1 	bl	80a291c <_ZN9USBSerial5beginEl>

  while (Serial.available() && Serial.read())
 80a017a:	f002 fbed 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a017e:	6803      	ldr	r3, [r0, #0]
 80a0180:	691b      	ldr	r3, [r3, #16]
 80a0182:	4798      	blx	r3
 80a0184:	b130      	cbz	r0, 80a0194 <_Z11setupSerialv+0x28>
 80a0186:	f002 fbe7 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a018a:	6803      	ldr	r3, [r0, #0]
 80a018c:	695b      	ldr	r3, [r3, #20]
 80a018e:	4798      	blx	r3
 80a0190:	2800      	cmp	r0, #0
 80a0192:	d1f2      	bne.n	80a017a <_Z11setupSerialv+0xe>
    ;

  while (!Serial.available()) {
 80a0194:	f002 fbe0 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a0198:	6803      	ldr	r3, [r0, #0]
 80a019a:	691b      	ldr	r3, [r3, #16]
 80a019c:	4798      	blx	r3
 80a019e:	b950      	cbnz	r0, 80a01b6 <_Z11setupSerialv+0x4a>
    delay(1500);
 80a01a0:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80a01a4:	f002 fcb2 	bl	80a2b0c <delay>
  Serial.begin(9600);

  while (Serial.available() && Serial.read())
    ;

  while (!Serial.available()) {
 80a01a8:	e7f4      	b.n	80a0194 <_Z11setupSerialv+0x28>
    delay(1500);
  }
  while (Serial.available() && Serial.read())
 80a01aa:	f002 fbd5 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a01ae:	6803      	ldr	r3, [r0, #0]
 80a01b0:	695b      	ldr	r3, [r3, #20]
 80a01b2:	4798      	blx	r3
 80a01b4:	b130      	cbz	r0, 80a01c4 <_Z11setupSerialv+0x58>
 80a01b6:	f002 fbcf 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a01ba:	6803      	ldr	r3, [r0, #0]
 80a01bc:	691b      	ldr	r3, [r3, #16]
 80a01be:	4798      	blx	r3
 80a01c0:	2800      	cmp	r0, #0
 80a01c2:	d1f2      	bne.n	80a01aa <_Z11setupSerialv+0x3e>
 80a01c4:	bd08      	pop	{r3, pc}
	...

080a01c8 <setup>:
WaterTempSensor waterTempSensor(&temperature);
AirtempAndHumiditySensor airtempAndHumiditySensor(&temperature);
Light light(&temperature);
Gyroscope gyroscope(&acceleration_measurement);

void setup() {
 80a01c8:	b510      	push	{r4, lr}
  setupSerial();
  Particle.publishVitals(20);

  tft.begin();
 80a01ca:	4c0d      	ldr	r4, [pc, #52]	; (80a0200 <setup+0x38>)
AirtempAndHumiditySensor airtempAndHumiditySensor(&temperature);
Light light(&temperature);
Gyroscope gyroscope(&acceleration_measurement);

void setup() {
  setupSerial();
 80a01cc:	f7ff ffce 	bl	80a016c <_Z11setupSerialv>
  Particle.publishVitals(20);
 80a01d0:	2114      	movs	r1, #20
 80a01d2:	480c      	ldr	r0, [pc, #48]	; (80a0204 <setup+0x3c>)
 80a01d4:	f002 fc8f 	bl	80a2af6 <_ZN10CloudClass13publishVitalsEm>

  tft.begin();
 80a01d8:	4620      	mov	r0, r4
 80a01da:	f000 fc5b 	bl	80a0a94 <_ZN3TFT5beginEv>
  light.begin();
 80a01de:	480a      	ldr	r0, [pc, #40]	; (80a0208 <setup+0x40>)
 80a01e0:	f000 f9bc 	bl	80a055c <_ZN5Light5beginEv>
  gyroscope.begin();
 80a01e4:	4809      	ldr	r0, [pc, #36]	; (80a020c <setup+0x44>)
 80a01e6:	f000 fa79 	bl	80a06dc <_ZN9Gyroscope5beginEv>
  waterTempSensor.begin();
 80a01ea:	4809      	ldr	r0, [pc, #36]	; (80a0210 <setup+0x48>)
 80a01ec:	f000 f97a 	bl	80a04e4 <_ZN15WaterTempSensor5beginEv>
  airtempAndHumiditySensor.begin();
 80a01f0:	4808      	ldr	r0, [pc, #32]	; (80a0214 <setup+0x4c>)
 80a01f2:	f000 fa0b 	bl	80a060c <_ZN24AirtempAndHumiditySensor5beginEv>

  tft.clearScreen();
 80a01f6:	4620      	mov	r0, r4
}
 80a01f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  light.begin();
  gyroscope.begin();
  waterTempSensor.begin();
  airtempAndHumiditySensor.begin();

  tft.clearScreen();
 80a01fc:	f000 bc90 	b.w	80a0b20 <_ZN3TFT11clearScreenEv>
 80a0200:	20000138 	.word	0x20000138
 80a0204:	2000069c 	.word	0x2000069c
 80a0208:	2000012c 	.word	0x2000012c
 80a020c:	20000150 	.word	0x20000150
 80a0210:	2000014c 	.word	0x2000014c
 80a0214:	20000180 	.word	0x20000180

080a0218 <_Z30readFromTempAndHumiditySensorsm>:
  }
  while (Serial.available() && Serial.read())
    ;
}

void readFromTempAndHumiditySensors(unsigned long currentMillis) {
 80a0218:	b510      	push	{r4, lr}
  if (currentMillis - update_intervals.lastUpdateTempHum >=
 80a021a:	4c09      	ldr	r4, [pc, #36]	; (80a0240 <_Z30readFromTempAndHumiditySensorsm+0x28>)
 80a021c:	68e3      	ldr	r3, [r4, #12]
 80a021e:	1ac0      	subs	r0, r0, r3
 80a0220:	6863      	ldr	r3, [r4, #4]
 80a0222:	4298      	cmp	r0, r3
 80a0224:	d30a      	bcc.n	80a023c <_Z30readFromTempAndHumiditySensorsm+0x24>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0226:	f001 fdbd 	bl	80a1da4 <HAL_Timer_Get_Milli_Seconds>
      update_intervals.UPDATE_INTERVAL_TEMP_HUM) {
    update_intervals.lastUpdateTempHum = millis();
 80a022a:	60e0      	str	r0, [r4, #12]

    waterTempSensor.readCelsiusTempFromSensor();
 80a022c:	4805      	ldr	r0, [pc, #20]	; (80a0244 <_Z30readFromTempAndHumiditySensorsm+0x2c>)
 80a022e:	f000 f97f 	bl	80a0530 <_ZN15WaterTempSensor25readCelsiusTempFromSensorEv>
    // temperature.currentWaterTemp =
    // waterTempSensor.getCelsiusTempFromSensor();
    airtempAndHumiditySensor.readHumidityFromSensor();
  }
}
 80a0232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    update_intervals.lastUpdateTempHum = millis();

    waterTempSensor.readCelsiusTempFromSensor();
    // temperature.currentWaterTemp =
    // waterTempSensor.getCelsiusTempFromSensor();
    airtempAndHumiditySensor.readHumidityFromSensor();
 80a0236:	4804      	ldr	r0, [pc, #16]	; (80a0248 <_Z30readFromTempAndHumiditySensorsm+0x30>)
 80a0238:	f000 ba14 	b.w	80a0664 <_ZN24AirtempAndHumiditySensor22readHumidityFromSensorEv>
 80a023c:	bd10      	pop	{r4, pc}
 80a023e:	bf00      	nop
 80a0240:	20000030 	.word	0x20000030
 80a0244:	2000014c 	.word	0x2000014c
 80a0248:	20000180 	.word	0x20000180

080a024c <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm>:
  }
}

void readFromGyrometerAndDrawTheAccelerationDataOnTFT(
    unsigned long currentMillis) {
 80a024c:	b510      	push	{r4, lr}
  if (currentMillis - update_intervals.lastUpdateGyroscope >=
 80a024e:	4c0c      	ldr	r4, [pc, #48]	; (80a0280 <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm+0x34>)
 80a0250:	68a3      	ldr	r3, [r4, #8]
 80a0252:	1ac0      	subs	r0, r0, r3
 80a0254:	6823      	ldr	r3, [r4, #0]
 80a0256:	4298      	cmp	r0, r3
 80a0258:	d310      	bcc.n	80a027c <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm+0x30>
 80a025a:	f001 fda3 	bl	80a1da4 <HAL_Timer_Get_Milli_Seconds>
      update_intervals.UPDATE_INTERVAL_GYROSCOPE) {
    update_intervals.lastUpdateGyroscope = millis();
 80a025e:	60a0      	str	r0, [r4, #8]

    gyroscope.readValuesFromSensor();

    acceleration_measurement.number_of_wave_measurments++;
 80a0260:	4c08      	ldr	r4, [pc, #32]	; (80a0284 <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm+0x38>)
    unsigned long currentMillis) {
  if (currentMillis - update_intervals.lastUpdateGyroscope >=
      update_intervals.UPDATE_INTERVAL_GYROSCOPE) {
    update_intervals.lastUpdateGyroscope = millis();

    gyroscope.readValuesFromSensor();
 80a0262:	4809      	ldr	r0, [pc, #36]	; (80a0288 <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm+0x3c>)
 80a0264:	f000 fb53 	bl	80a090e <_ZN9Gyroscope20readValuesFromSensorEv>

    acceleration_measurement.number_of_wave_measurments++;
 80a0268:	68e3      	ldr	r3, [r4, #12]
 80a026a:	3301      	adds	r3, #1
    if (acceleration_measurement.number_of_wave_measurments == 10) {
 80a026c:	2b0a      	cmp	r3, #10
      update_intervals.UPDATE_INTERVAL_GYROSCOPE) {
    update_intervals.lastUpdateGyroscope = millis();

    gyroscope.readValuesFromSensor();

    acceleration_measurement.number_of_wave_measurments++;
 80a026e:	60e3      	str	r3, [r4, #12]
    if (acceleration_measurement.number_of_wave_measurments == 10) {
 80a0270:	d104      	bne.n	80a027c <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm+0x30>
      gyroscope.set_wave_color_indicatior_from_z_axis_measurements();
 80a0272:	4805      	ldr	r0, [pc, #20]	; (80a0288 <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm+0x3c>)
 80a0274:	f000 fa58 	bl	80a0728 <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv>
      acceleration_measurement.number_of_wave_measurments = 0;
 80a0278:	2300      	movs	r3, #0
 80a027a:	60e3      	str	r3, [r4, #12]
 80a027c:	bd10      	pop	{r4, pc}
 80a027e:	bf00      	nop
 80a0280:	20000030 	.word	0x20000030
 80a0284:	20000000 	.word	0x20000000
 80a0288:	20000150 	.word	0x20000150

080a028c <loop>:
  airtempAndHumiditySensor.begin();

  tft.clearScreen();
}

void loop() {
 80a028c:	b510      	push	{r4, lr}
 80a028e:	f001 fd89 	bl	80a1da4 <HAL_Timer_Get_Milli_Seconds>
 80a0292:	4604      	mov	r4, r0
  unsigned long currentMillis = millis();
  readFromTempAndHumiditySensors(currentMillis);
 80a0294:	f7ff ffc0 	bl	80a0218 <_Z30readFromTempAndHumiditySensorsm>
  readFromGyrometerAndDrawTheAccelerationDataOnTFT(currentMillis);
 80a0298:	4620      	mov	r0, r4

  tft.drawTime();
 80a029a:	4c08      	ldr	r4, [pc, #32]	; (80a02bc <loop+0x30>)
}

void loop() {
  unsigned long currentMillis = millis();
  readFromTempAndHumiditySensors(currentMillis);
  readFromGyrometerAndDrawTheAccelerationDataOnTFT(currentMillis);
 80a029c:	f7ff ffd6 	bl	80a024c <_Z48readFromGyrometerAndDrawTheAccelerationDataOnTFTm>

  tft.drawTime();
 80a02a0:	4620      	mov	r0, r4
 80a02a2:	f000 fc11 	bl	80a0ac8 <_ZN3TFT8drawTimeEv>
  tft.drawWaveIndicationColor();
 80a02a6:	4620      	mov	r0, r4
 80a02a8:	f000 fc8c 	bl	80a0bc4 <_ZN3TFT23drawWaveIndicationColorEv>
  tft.drawAcc();
 80a02ac:	4620      	mov	r0, r4
 80a02ae:	f000 fc3d 	bl	80a0b2c <_ZN3TFT7drawAccEv>

  // tft.drawWaterTemp(currentWaterTemp, ST7735_WHITE);
  // tft.drawOnLandTemp(currentOnLandTemperature, ST7735_WHITE);

  light.setRedLight();
}
 80a02b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tft.drawAcc();

  // tft.drawWaterTemp(currentWaterTemp, ST7735_WHITE);
  // tft.drawOnLandTemp(currentOnLandTemperature, ST7735_WHITE);

  light.setRedLight();
 80a02b6:	4802      	ldr	r0, [pc, #8]	; (80a02c0 <loop+0x34>)
 80a02b8:	f000 b97a 	b.w	80a05b0 <_ZN5Light11setRedLightEv>
 80a02bc:	20000138 	.word	0x20000138
 80a02c0:	2000012c 	.word	0x2000012c

080a02c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a02c4:	b570      	push	{r4, r5, r6, lr}
 80a02c6:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 80a02c8:	6804      	ldr	r4, [r0, #0]
 80a02ca:	6843      	ldr	r3, [r0, #4]
 80a02cc:	2614      	movs	r6, #20
 80a02ce:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a02d2:	42a6      	cmp	r6, r4
 80a02d4:	d004      	beq.n	80a02e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
 80a02d6:	4620      	mov	r0, r4
 80a02d8:	f003 ffce 	bl	80a4278 <_ZN6StringD1Ev>
 80a02dc:	3414      	adds	r4, #20
 80a02de:	e7f8      	b.n	80a02d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a02e0:	6828      	ldr	r0, [r5, #0]
 80a02e2:	f001 fecb 	bl	80a207c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 80a02e6:	4628      	mov	r0, r5
 80a02e8:	bd70      	pop	{r4, r5, r6, pc}

080a02ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 80a02ea:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 80a02ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a02ee:	4606      	mov	r6, r0
 80a02f0:	460c      	mov	r4, r1
 80a02f2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a02f4:	d916      	bls.n	80a0324 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
 80a02f6:	4290      	cmp	r0, r2
 80a02f8:	d215      	bcs.n	80a0326 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
 80a02fa:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
 80a02fe:	1a6c      	subs	r4, r5, r1
 80a0300:	f1a1 0714 	sub.w	r7, r1, #20
 80a0304:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a0306:	42af      	cmp	r7, r5
 80a0308:	d01c      	beq.n	80a0344 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
 80a030a:	b12c      	cbz	r4, 80a0318 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
 80a030c:	4629      	mov	r1, r5
 80a030e:	4620      	mov	r0, r4
 80a0310:	f003 ffa2 	bl	80a4258 <_ZN6StringC1EOS_>
 80a0314:	7c2b      	ldrb	r3, [r5, #16]
 80a0316:	7423      	strb	r3, [r4, #16]
 80a0318:	4628      	mov	r0, r5
 80a031a:	f003 ffad 	bl	80a4278 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a031e:	3d14      	subs	r5, #20
 80a0320:	3c14      	subs	r4, #20
 80a0322:	e7f0      	b.n	80a0306 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 80a0324:	d00e      	beq.n	80a0344 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
 80a0326:	42ac      	cmp	r4, r5
 80a0328:	d00c      	beq.n	80a0344 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
 80a032a:	b12e      	cbz	r6, 80a0338 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
 80a032c:	4621      	mov	r1, r4
 80a032e:	4630      	mov	r0, r6
 80a0330:	f003 ff92 	bl	80a4258 <_ZN6StringC1EOS_>
 80a0334:	7c23      	ldrb	r3, [r4, #16]
 80a0336:	7433      	strb	r3, [r6, #16]
 80a0338:	4620      	mov	r0, r4
 80a033a:	f003 ff9d 	bl	80a4278 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a033e:	3414      	adds	r4, #20
 80a0340:	3614      	adds	r6, #20
 80a0342:	e7f0      	b.n	80a0326 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
 80a0344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0346 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a034a:	2300      	movs	r3, #0
 80a034c:	6003      	str	r3, [r0, #0]
 80a034e:	6043      	str	r3, [r0, #4]
 80a0350:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0352:	684e      	ldr	r6, [r1, #4]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0354:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a0356:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
 80a0358:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
 80a035a:	dd24      	ble.n	80a03a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 80a035c:	f04f 0814 	mov.w	r8, #20
 80a0360:	fb08 f006 	mul.w	r0, r8, r6
 80a0364:	f001 fe82 	bl	80a206c <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 80a0368:	4605      	mov	r5, r0
 80a036a:	b1e0      	cbz	r0, 80a03a6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
 80a036c:	e894 0006 	ldmia.w	r4, {r1, r2}
 80a0370:	fb08 1202 	mla	r2, r8, r2, r1
 80a0374:	f7ff ffb9 	bl	80a02ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a0378:	6820      	ldr	r0, [r4, #0]
 80a037a:	f001 fe7f 	bl	80a207c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80a037e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
 80a0380:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
 80a0382:	683e      	ldr	r6, [r7, #0]
 80a0384:	687b      	ldr	r3, [r7, #4]
 80a0386:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
 80a038a:	4546      	cmp	r6, r8
 80a038c:	d009      	beq.n	80a03a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
 80a038e:	b12d      	cbz	r5, 80a039c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
 80a0390:	4631      	mov	r1, r6
 80a0392:	4628      	mov	r0, r5
 80a0394:	f003 ffd9 	bl	80a434a <_ZN6StringC1ERKS_>
 80a0398:	7c33      	ldrb	r3, [r6, #16]
 80a039a:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
 80a039c:	3614      	adds	r6, #20
 80a039e:	3514      	adds	r5, #20
 80a03a0:	e7f3      	b.n	80a038a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
 80a03a2:	687b      	ldr	r3, [r7, #4]
 80a03a4:	6063      	str	r3, [r4, #4]
    }
}
 80a03a6:	4620      	mov	r0, r4
 80a03a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a03ac <_ZN17SerialDebugOutputC1Ei8LogLevel>:
public:
    explicit SerialDebugOutput(int baud = 9600, LogLevel level = LOG_LEVEL_ALL) :
 80a03ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a03ae:	4604      	mov	r4, r0
 80a03b0:	b08d      	sub	sp, #52	; 0x34
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a03b2:	2300      	movs	r3, #0
 80a03b4:	4617      	mov	r7, r2
 80a03b6:	9300      	str	r3, [sp, #0]
 80a03b8:	9301      	str	r3, [sp, #4]
 80a03ba:	9302      	str	r3, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
 80a03bc:	f002 facc 	bl	80a2958 <_Z16_fetch_usbserialv>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
 80a03c0:	4625      	mov	r5, r4
 80a03c2:	4606      	mov	r6, r0
 80a03c4:	4669      	mov	r1, sp
 80a03c6:	a803      	add	r0, sp, #12
 80a03c8:	f7ff ffbd 	bl	80a0346 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a03cc:	a903      	add	r1, sp, #12
 80a03ce:	a806      	add	r0, sp, #24
 80a03d0:	f7ff ffb9 	bl	80a0346 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
 80a03d4:	4b16      	ldr	r3, [pc, #88]	; (80a0430 <_ZN17SerialDebugOutputC1Ei8LogLevel+0x84>)
 80a03d6:	a906      	add	r1, sp, #24
 80a03d8:	f845 3b04 	str.w	r3, [r5], #4
 80a03dc:	a809      	add	r0, sp, #36	; 0x24
 80a03de:	f7ff ffb2 	bl	80a0346 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a03e2:	aa09      	add	r2, sp, #36	; 0x24
 80a03e4:	4639      	mov	r1, r7
 80a03e6:	4628      	mov	r0, r5
 80a03e8:	f003 f9e3 	bl	80a37b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a03ec:	a809      	add	r0, sp, #36	; 0x24
 80a03ee:	f7ff ff69 	bl	80a02c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a03f2:	a806      	add	r0, sp, #24
 80a03f4:	f7ff ff66 	bl	80a02c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a03f8:	4b0e      	ldr	r3, [pc, #56]	; (80a0434 <_ZN17SerialDebugOutputC1Ei8LogLevel+0x88>)
 80a03fa:	6226      	str	r6, [r4, #32]
 80a03fc:	6023      	str	r3, [r4, #0]
 80a03fe:	a803      	add	r0, sp, #12
 80a0400:	f7ff ff60 	bl	80a02c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a0404:	4b0c      	ldr	r3, [pc, #48]	; (80a0438 <_ZN17SerialDebugOutputC1Ei8LogLevel+0x8c>)
 80a0406:	6023      	str	r3, [r4, #0]
        Serial.begin();
 80a0408:	f002 faa6 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a040c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0410:	f002 fa84 	bl	80a291c <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
 80a0414:	f002 fe6c 	bl	80a30f0 <_ZN5spark10LogManager8instanceEv>
 80a0418:	4621      	mov	r1, r4
 80a041a:	f003 f95e 	bl	80a36da <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

// Compatibility API
class SerialDebugOutput: public spark::SerialLogHandler {
public:
    explicit SerialDebugOutput(int baud = 9600, LogLevel level = LOG_LEVEL_ALL) :
        SerialLogHandler(level) {
 80a041e:	4668      	mov	r0, sp
 80a0420:	f7ff ff50 	bl	80a02c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    }
 80a0424:	4620      	mov	r0, r4

// Compatibility API
class SerialDebugOutput: public spark::SerialLogHandler {
public:
    explicit SerialDebugOutput(int baud = 9600, LogLevel level = LOG_LEVEL_ALL) :
        SerialLogHandler(level) {
 80a0426:	4b05      	ldr	r3, [pc, #20]	; (80a043c <_ZN17SerialDebugOutputC1Ei8LogLevel+0x90>)
 80a0428:	6023      	str	r3, [r4, #0]
    }
 80a042a:	b00d      	add	sp, #52	; 0x34
 80a042c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a042e:	bf00      	nop
 80a0430:	080a6c9c 	.word	0x080a6c9c
 80a0434:	080a94b0 	.word	0x080a94b0
 80a0438:	080a6cb4 	.word	0x080a6cb4
 80a043c:	080a6ccc 	.word	0x080a6ccc

080a0440 <_GLOBAL__sub_I_debugOutput>:
    if (acceleration_measurement.number_of_wave_measurments == 10) {
      gyroscope.set_wave_color_indicatior_from_z_axis_measurements();
      acceleration_measurement.number_of_wave_measurments = 0;
    }
  }
 80a0440:	b570      	push	{r4, r5, r6, lr}
#include "gyroscope.h"
#include "light.h"
#include "tft.h"
#include "watertemp_sensor.h"

SerialDebugOutput debugOutput;
 80a0442:	4c17      	ldr	r4, [pc, #92]	; (80a04a0 <_GLOBAL__sub_I_debugOutput+0x60>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0444:	f001 fd06 	bl	80a1e54 <HAL_Pin_Map>
 80a0448:	4d16      	ldr	r5, [pc, #88]	; (80a04a4 <_GLOBAL__sub_I_debugOutput+0x64>)
 80a044a:	2201      	movs	r2, #1
 80a044c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0450:	4620      	mov	r0, r4
 80a0452:	f7ff ffab 	bl	80a03ac <_ZN17SerialDebugOutputC1Ei8LogLevel>
                                   .number_of_wave_measurments = 0};

struct acceleration_measurements acceleration_measurement = {
    .ax = -1, .ay = -1, .az = -1, .number_of_wave_measurments = 0};

TFT tft(&temperature, &acceleration_measurement);
 80a0456:	4e14      	ldr	r6, [pc, #80]	; (80a04a8 <_GLOBAL__sub_I_debugOutput+0x68>)
#include "gyroscope.h"
#include "light.h"
#include "tft.h"
#include "watertemp_sensor.h"

SerialDebugOutput debugOutput;
 80a0458:	4620      	mov	r0, r4
                                   .number_of_wave_measurments = 0};

struct acceleration_measurements acceleration_measurement = {
    .ax = -1, .ay = -1, .az = -1, .number_of_wave_measurments = 0};

TFT tft(&temperature, &acceleration_measurement);
 80a045a:	4c14      	ldr	r4, [pc, #80]	; (80a04ac <_GLOBAL__sub_I_debugOutput+0x6c>)
#include "gyroscope.h"
#include "light.h"
#include "tft.h"
#include "watertemp_sensor.h"

SerialDebugOutput debugOutput;
 80a045c:	462a      	mov	r2, r5
 80a045e:	4914      	ldr	r1, [pc, #80]	; (80a04b0 <_GLOBAL__sub_I_debugOutput+0x70>)
 80a0460:	f004 f850 	bl	80a4504 <__aeabi_atexit>
                                   .number_of_wave_measurments = 0};

struct acceleration_measurements acceleration_measurement = {
    .ax = -1, .ay = -1, .az = -1, .number_of_wave_measurments = 0};

TFT tft(&temperature, &acceleration_measurement);
 80a0464:	4632      	mov	r2, r6
 80a0466:	4621      	mov	r1, r4
 80a0468:	4812      	ldr	r0, [pc, #72]	; (80a04b4 <_GLOBAL__sub_I_debugOutput+0x74>)
 80a046a:	f000 fafd 	bl	80a0a68 <_ZN3TFTC1EP12temperaturesP25acceleration_measurements>
WaterTempSensor waterTempSensor(&temperature);
 80a046e:	4621      	mov	r1, r4
 80a0470:	4811      	ldr	r0, [pc, #68]	; (80a04b8 <_GLOBAL__sub_I_debugOutput+0x78>)
 80a0472:	f000 f82f 	bl	80a04d4 <_ZN15WaterTempSensorC1EP12temperatures>
AirtempAndHumiditySensor airtempAndHumiditySensor(&temperature);
 80a0476:	4621      	mov	r1, r4
 80a0478:	4810      	ldr	r0, [pc, #64]	; (80a04bc <_GLOBAL__sub_I_debugOutput+0x7c>)
 80a047a:	f000 f8b5 	bl	80a05e8 <_ZN24AirtempAndHumiditySensorC1EP12temperatures>
Light light(&temperature);
 80a047e:	4621      	mov	r1, r4
Gyroscope gyroscope(&acceleration_measurement);
 80a0480:	4c0f      	ldr	r4, [pc, #60]	; (80a04c0 <_GLOBAL__sub_I_debugOutput+0x80>)
    .ax = -1, .ay = -1, .az = -1, .number_of_wave_measurments = 0};

TFT tft(&temperature, &acceleration_measurement);
WaterTempSensor waterTempSensor(&temperature);
AirtempAndHumiditySensor airtempAndHumiditySensor(&temperature);
Light light(&temperature);
 80a0482:	4810      	ldr	r0, [pc, #64]	; (80a04c4 <_GLOBAL__sub_I_debugOutput+0x84>)
 80a0484:	f000 f88d 	bl	80a05a2 <_ZN5LightC1EP12temperatures>
Gyroscope gyroscope(&acceleration_measurement);
 80a0488:	4631      	mov	r1, r6
 80a048a:	4620      	mov	r0, r4
 80a048c:	f000 fa69 	bl	80a0962 <_ZN9GyroscopeC1EP25acceleration_measurements>
 80a0490:	462a      	mov	r2, r5
 80a0492:	4620      	mov	r0, r4
    if (acceleration_measurement.number_of_wave_measurments == 10) {
      gyroscope.set_wave_color_indicatior_from_z_axis_measurements();
      acceleration_measurement.number_of_wave_measurments = 0;
    }
  }
 80a0494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

TFT tft(&temperature, &acceleration_measurement);
WaterTempSensor waterTempSensor(&temperature);
AirtempAndHumiditySensor airtempAndHumiditySensor(&temperature);
Light light(&temperature);
Gyroscope gyroscope(&acceleration_measurement);
 80a0498:	490b      	ldr	r1, [pc, #44]	; (80a04c8 <_GLOBAL__sub_I_debugOutput+0x88>)
 80a049a:	f004 b833 	b.w	80a4504 <__aeabi_atexit>
 80a049e:	bf00      	nop
 80a04a0:	20000108 	.word	0x20000108
 80a04a4:	20000104 	.word	0x20000104
 80a04a8:	20000000 	.word	0x20000000
 80a04ac:	20000018 	.word	0x20000018
 80a04b0:	080a0145 	.word	0x080a0145
 80a04b4:	20000138 	.word	0x20000138
 80a04b8:	2000014c 	.word	0x2000014c
 80a04bc:	20000180 	.word	0x20000180
 80a04c0:	20000150 	.word	0x20000150
 80a04c4:	2000012c 	.word	0x2000012c
 80a04c8:	080a00d7 	.word	0x080a00d7

080a04cc <_ZN15WaterTempSensor5setupEv>:
WaterTempSensor::WaterTempSensor(struct temperatures *ptr_temperatures) {
  m_ptr_temperatures = ptr_temperatures;
  setup();
}

void WaterTempSensor::setup() { pinMode(TEMP_SENSOR_INPUT, INPUT); }
 80a04cc:	2100      	movs	r1, #0
 80a04ce:	200e      	movs	r0, #14
 80a04d0:	f003 bfc4 	b.w	80a445c <pinMode>

080a04d4 <_ZN15WaterTempSensorC1EP12temperatures>:
#include "watertemp_sensor.h"
#include "application.h"

#define TEMP_SENSOR_INPUT A4

WaterTempSensor::WaterTempSensor(struct temperatures *ptr_temperatures) {
 80a04d4:	b510      	push	{r4, lr}
 80a04d6:	4604      	mov	r4, r0
  m_ptr_temperatures = ptr_temperatures;
 80a04d8:	6001      	str	r1, [r0, #0]
  setup();
 80a04da:	f7ff fff7 	bl	80a04cc <_ZN15WaterTempSensor5setupEv>
}
 80a04de:	4620      	mov	r0, r4
 80a04e0:	bd10      	pop	{r4, pc}
	...

080a04e4 <_ZN15WaterTempSensor5beginEv>:

void WaterTempSensor::setup() { pinMode(TEMP_SENSOR_INPUT, INPUT); }

void WaterTempSensor::begin() {
 80a04e4:	b538      	push	{r3, r4, r5, lr}
  delay(50);
  Serial.println("-------------------------");
 80a04e6:	4c10      	ldr	r4, [pc, #64]	; (80a0528 <_ZN15WaterTempSensor5beginEv+0x44>)
}

void WaterTempSensor::setup() { pinMode(TEMP_SENSOR_INPUT, INPUT); }

void WaterTempSensor::begin() {
  delay(50);
 80a04e8:	2032      	movs	r0, #50	; 0x32
 80a04ea:	f002 fb0f 	bl	80a2b0c <delay>
  Serial.println("-------------------------");
 80a04ee:	f002 fa33 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a04f2:	4621      	mov	r1, r4
 80a04f4:	f003 fcbf 	bl	80a3e76 <_ZN5Print7printlnEPKc>
  Serial.println("Temp sensor water is ready. Temp is:");
 80a04f8:	f002 fa2e 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a04fc:	490b      	ldr	r1, [pc, #44]	; (80a052c <_ZN15WaterTempSensor5beginEv+0x48>)
 80a04fe:	f003 fcba 	bl	80a3e76 <_ZN5Print7printlnEPKc>
  Serial.println(analogRead(TEMP_SENSOR_INPUT));
 80a0502:	f002 fa29 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a0506:	4605      	mov	r5, r0
 80a0508:	200e      	movs	r0, #14
 80a050a:	f003 ffe4 	bl	80a44d6 <analogRead>
 80a050e:	220a      	movs	r2, #10
 80a0510:	4601      	mov	r1, r0
 80a0512:	4628      	mov	r0, r5
 80a0514:	f003 fd07 	bl	80a3f26 <_ZN5Print7printlnEli>
  Serial.println("-------------------------");
 80a0518:	f002 fa1e 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a051c:	4621      	mov	r1, r4
}
 80a051e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void WaterTempSensor::begin() {
  delay(50);
  Serial.println("-------------------------");
  Serial.println("Temp sensor water is ready. Temp is:");
  Serial.println(analogRead(TEMP_SENSOR_INPUT));
  Serial.println("-------------------------");
 80a0522:	f003 bca8 	b.w	80a3e76 <_ZN5Print7printlnEPKc>
 80a0526:	bf00      	nop
 80a0528:	080a6cdc 	.word	0x080a6cdc
 80a052c:	080a6cf6 	.word	0x080a6cf6

080a0530 <_ZN15WaterTempSensor25readCelsiusTempFromSensorEv>:
}

void WaterTempSensor::readCelsiusTempFromSensor() {
 80a0530:	b510      	push	{r4, lr}
  m_ptr_temperatures->currentWaterTemp = analogRead(TEMP_SENSOR_INPUT) * 0.08;
 80a0532:	6804      	ldr	r4, [r0, #0]
 80a0534:	200e      	movs	r0, #14
 80a0536:	f003 ffce 	bl	80a44d6 <analogRead>
 80a053a:	f004 fa9f 	bl	80a4a7c <__aeabi_i2d>
 80a053e:	a304      	add	r3, pc, #16	; (adr r3, 80a0550 <_ZN15WaterTempSensor25readCelsiusTempFromSensorEv+0x20>)
 80a0540:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0544:	f004 fb00 	bl	80a4b48 <__aeabi_dmul>
 80a0548:	e9c4 0100 	strd	r0, r1, [r4]
 80a054c:	bd10      	pop	{r4, pc}
 80a054e:	bf00      	nop
 80a0550:	47ae147b 	.word	0x47ae147b
 80a0554:	3fb47ae1 	.word	0x3fb47ae1

080a0558 <_GLOBAL__sub_I__ZN15WaterTempSensorC2EP12temperatures>:
 80a0558:	f001 bc7c 	b.w	80a1e54 <HAL_Pin_Map>

080a055c <_ZN5Light5beginEv>:
Light::Light(struct temperatures *ptr_temperatures) {
  m_ptr_temperatures = ptr_temperatures;
  setup();
}

void Light::begin() {
 80a055c:	b510      	push	{r4, lr}
  delay(50);
  Serial.println("-------------------------");
 80a055e:	4c0a      	ldr	r4, [pc, #40]	; (80a0588 <_ZN5Light5beginEv+0x2c>)
  m_ptr_temperatures = ptr_temperatures;
  setup();
}

void Light::begin() {
  delay(50);
 80a0560:	2032      	movs	r0, #50	; 0x32
 80a0562:	f002 fad3 	bl	80a2b0c <delay>
  Serial.println("-------------------------");
 80a0566:	f002 f9f7 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a056a:	4621      	mov	r1, r4
 80a056c:	f003 fc83 	bl	80a3e76 <_ZN5Print7printlnEPKc>
  Serial.println("Light is ready");
 80a0570:	f002 f9f2 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a0574:	4905      	ldr	r1, [pc, #20]	; (80a058c <_ZN5Light5beginEv+0x30>)
 80a0576:	f003 fc7e 	bl	80a3e76 <_ZN5Print7printlnEPKc>
  Serial.println("-------------------------");
 80a057a:	f002 f9ed 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a057e:	4621      	mov	r1, r4
}
 80a0580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void Light::begin() {
  delay(50);
  Serial.println("-------------------------");
  Serial.println("Light is ready");
  Serial.println("-------------------------");
 80a0584:	f003 bc77 	b.w	80a3e76 <_ZN5Print7printlnEPKc>
 80a0588:	080a6cdc 	.word	0x080a6cdc
 80a058c:	080a6d1b 	.word	0x080a6d1b

080a0590 <_ZN5Light5setupEv>:
}

void Light::setup() {
 80a0590:	b510      	push	{r4, lr}
 80a0592:	4604      	mov	r4, r0
  pinMode(RED_LIGHT_OUTPUT, OUTPUT);
 80a0594:	2101      	movs	r1, #1
 80a0596:	2006      	movs	r0, #6
 80a0598:	f003 ff60 	bl	80a445c <pinMode>
  redLightStatus = LOW;
 80a059c:	2300      	movs	r3, #0
 80a059e:	6023      	str	r3, [r4, #0]
 80a05a0:	bd10      	pop	{r4, pc}

080a05a2 <_ZN5LightC1EP12temperatures>:
#include "light.h"
#include "application.h"

#define RED_LIGHT_OUTPUT D6

Light::Light(struct temperatures *ptr_temperatures) {
 80a05a2:	b510      	push	{r4, lr}
 80a05a4:	4604      	mov	r4, r0
  m_ptr_temperatures = ptr_temperatures;
 80a05a6:	6081      	str	r1, [r0, #8]
  setup();
 80a05a8:	f7ff fff2 	bl	80a0590 <_ZN5Light5setupEv>
}
 80a05ac:	4620      	mov	r0, r4
 80a05ae:	bd10      	pop	{r4, pc}

080a05b0 <_ZN5Light11setRedLightEv>:
void Light::setup() {
  pinMode(RED_LIGHT_OUTPUT, OUTPUT);
  redLightStatus = LOW;
}

void Light::setRedLight() {
 80a05b0:	b510      	push	{r4, lr}
  if (m_ptr_temperatures->currentWaterTemp > 24.00) {
 80a05b2:	6881      	ldr	r1, [r0, #8]
void Light::setup() {
  pinMode(RED_LIGHT_OUTPUT, OUTPUT);
  redLightStatus = LOW;
}

void Light::setRedLight() {
 80a05b4:	4604      	mov	r4, r0
  if (m_ptr_temperatures->currentWaterTemp > 24.00) {
 80a05b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80a05ba:	2200      	movs	r2, #0
 80a05bc:	4b08      	ldr	r3, [pc, #32]	; (80a05e0 <_ZN5Light11setRedLightEv+0x30>)
 80a05be:	f004 fd53 	bl	80a5068 <__aeabi_dcmpgt>
 80a05c2:	b110      	cbz	r0, 80a05ca <_ZN5Light11setRedLightEv+0x1a>
    newSetLightBool = true;
 80a05c4:	2301      	movs	r3, #1
 80a05c6:	7123      	strb	r3, [r4, #4]
 80a05c8:	e000      	b.n	80a05cc <_ZN5Light11setRedLightEv+0x1c>
  } else {
    newSetLightBool = false;
 80a05ca:	7120      	strb	r0, [r4, #4]
  }

  if (newSetLightBool != lastSetLightBool) {
 80a05cc:	7921      	ldrb	r1, [r4, #4]
 80a05ce:	7963      	ldrb	r3, [r4, #5]
 80a05d0:	428b      	cmp	r3, r1
 80a05d2:	d002      	beq.n	80a05da <_ZN5Light11setRedLightEv+0x2a>
    digitalWrite(RED_LIGHT_OUTPUT, newSetLightBool);
 80a05d4:	2006      	movs	r0, #6
 80a05d6:	f003 ff52 	bl	80a447e <digitalWrite>
  }

  lastSetLightBool = newSetLightBool;
 80a05da:	7923      	ldrb	r3, [r4, #4]
 80a05dc:	7163      	strb	r3, [r4, #5]
 80a05de:	bd10      	pop	{r4, pc}
 80a05e0:	40380000 	.word	0x40380000

080a05e4 <_GLOBAL__sub_I__ZN5LightC2EP12temperatures>:
 80a05e4:	f001 bc36 	b.w	80a1e54 <HAL_Pin_Map>

080a05e8 <_ZN24AirtempAndHumiditySensorC1EP12temperatures>:

#define DHTPIN D2
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

AirtempAndHumiditySensor::AirtempAndHumiditySensor(struct temperatures *ptr_temperatures) {
 80a05e8:	b538      	push	{r3, r4, r5, lr}
 80a05ea:	4604      	mov	r4, r0
 80a05ec:	460d      	mov	r5, r1
  Serial.println("In setup temp and humidity");
 80a05ee:	f002 f9b3 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a05f2:	4904      	ldr	r1, [pc, #16]	; (80a0604 <_ZN24AirtempAndHumiditySensorC1EP12temperatures+0x1c>)
 80a05f4:	f003 fc3f 	bl	80a3e76 <_ZN5Print7printlnEPKc>
  m_ptr_temperatures = ptr_temperatures;
 80a05f8:	6025      	str	r5, [r4, #0]
  setup();
}

void AirtempAndHumiditySensor::setup() { dht.begin(); }
 80a05fa:	4803      	ldr	r0, [pc, #12]	; (80a0608 <_ZN24AirtempAndHumiditySensorC1EP12temperatures+0x20>)
 80a05fc:	f000 ffdb 	bl	80a15b6 <_ZN3DHT5beginEv>

AirtempAndHumiditySensor::AirtempAndHumiditySensor(struct temperatures *ptr_temperatures) {
  Serial.println("In setup temp and humidity");
  m_ptr_temperatures = ptr_temperatures;
  setup();
}
 80a0600:	4620      	mov	r0, r4
 80a0602:	bd38      	pop	{r3, r4, r5, pc}
 80a0604:	080a6d2a 	.word	0x080a6d2a
 80a0608:	20000184 	.word	0x20000184

080a060c <_ZN24AirtempAndHumiditySensor5beginEv>:

void AirtempAndHumiditySensor::setup() { dht.begin(); }

void AirtempAndHumiditySensor::begin() {
 80a060c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  delay(50);
  Serial.println("-------------------------");
 80a060e:	4c12      	ldr	r4, [pc, #72]	; (80a0658 <_ZN24AirtempAndHumiditySensor5beginEv+0x4c>)
}

void AirtempAndHumiditySensor::setup() { dht.begin(); }

void AirtempAndHumiditySensor::begin() {
  delay(50);
 80a0610:	2032      	movs	r0, #50	; 0x32
 80a0612:	f002 fa7b 	bl	80a2b0c <delay>
  Serial.println("-------------------------");
 80a0616:	f002 f99f 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a061a:	4621      	mov	r1, r4
 80a061c:	f003 fc2b 	bl	80a3e76 <_ZN5Print7printlnEPKc>
  Serial.println("Temp and humidity sensor ready. Temp is:");
 80a0620:	f002 f99a 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a0624:	490d      	ldr	r1, [pc, #52]	; (80a065c <_ZN24AirtempAndHumiditySensor5beginEv+0x50>)
 80a0626:	f003 fc26 	bl	80a3e76 <_ZN5Print7printlnEPKc>
  Serial.println(dht.getTempCelcius());
 80a062a:	f002 f995 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a062e:	4605      	mov	r5, r0
 80a0630:	480b      	ldr	r0, [pc, #44]	; (80a0660 <_ZN24AirtempAndHumiditySensor5beginEv+0x54>)
 80a0632:	f001 f87d 	bl	80a1730 <_ZN3DHT14getTempCelciusEv>
 80a0636:	f004 fa33 	bl	80a4aa0 <__aeabi_f2d>
 80a063a:	2302      	movs	r3, #2
 80a063c:	4602      	mov	r2, r0
 80a063e:	9300      	str	r3, [sp, #0]
 80a0640:	4628      	mov	r0, r5
 80a0642:	460b      	mov	r3, r1
 80a0644:	f003 fd28 	bl	80a4098 <_ZN5Print7printlnEdi>
  Serial.println("-------------------------");
 80a0648:	f002 f986 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a064c:	4621      	mov	r1, r4
}
 80a064e:	b003      	add	sp, #12
 80a0650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
void AirtempAndHumiditySensor::begin() {
  delay(50);
  Serial.println("-------------------------");
  Serial.println("Temp and humidity sensor ready. Temp is:");
  Serial.println(dht.getTempCelcius());
  Serial.println("-------------------------");
 80a0654:	f003 bc0f 	b.w	80a3e76 <_ZN5Print7printlnEPKc>
 80a0658:	080a6cdc 	.word	0x080a6cdc
 80a065c:	080a6d45 	.word	0x080a6d45
 80a0660:	20000184 	.word	0x20000184

080a0664 <_ZN24AirtempAndHumiditySensor22readHumidityFromSensorEv>:
void AirtempAndHumiditySensor::readCelsiusFromSensor() {
  m_ptr_temperatures->currentOnLandTemperature = dht.getTempCelcius();
}


void AirtempAndHumiditySensor::readHumidityFromSensor() {
 80a0664:	b510      	push	{r4, lr}
  m_ptr_temperatures->currentOnLandHumidity = dht.getHumidity();
 80a0666:	6804      	ldr	r4, [r0, #0]
 80a0668:	4802      	ldr	r0, [pc, #8]	; (80a0674 <_ZN24AirtempAndHumiditySensor22readHumidityFromSensorEv+0x10>)
 80a066a:	f001 f88b 	bl	80a1784 <_ZN3DHT11getHumidityEv>
 80a066e:	60a0      	str	r0, [r4, #8]
 80a0670:	bd10      	pop	{r4, pc}
 80a0672:	bf00      	nop
 80a0674:	20000184 	.word	0x20000184

080a0678 <_GLOBAL__sub_I_dht>:
}
 80a0678:	b510      	push	{r4, lr}
 80a067a:	f001 fbeb 	bl	80a1e54 <HAL_Pin_Map>
 80a067e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "airtemp_and_humidity_sensor.h"
#include "application.h"

#define DHTPIN D2
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
 80a0682:	2306      	movs	r3, #6
 80a0684:	220b      	movs	r2, #11
 80a0686:	2102      	movs	r1, #2
 80a0688:	4801      	ldr	r0, [pc, #4]	; (80a0690 <_GLOBAL__sub_I_dht+0x18>)
 80a068a:	f000 bf8d 	b.w	80a15a8 <_ZN3DHTC1Ehhh>
 80a068e:	bf00      	nop
 80a0690:	20000184 	.word	0x20000184

080a0694 <_ZN9Gyroscope5setupEv>:
  m_ptr_acceleration_measurements = acceleration_measurements;
  gyrometer = new MPU6050();
  setup();
}

void Gyroscope::setup() {
 80a0694:	b510      	push	{r4, lr}
 80a0696:	4604      	mov	r4, r0
  Wire.begin();
 80a0698:	f003 fe62 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a069c:	f002 f8c6 	bl	80a282c <_ZN7TwoWire5beginEv>
  gyrometer->initialize();
 80a06a0:	6820      	ldr	r0, [r4, #0]
 80a06a2:	f001 fa0e 	bl	80a1ac2 <_ZN7MPU605010initializeEv>
  gyrometer->setXAccelOffset(0);
 80a06a6:	6820      	ldr	r0, [r4, #0]
 80a06a8:	2100      	movs	r1, #0
 80a06aa:	f001 fa39 	bl	80a1b20 <_ZN7MPU605015setXAccelOffsetEs>
  gyrometer->setYAccelOffset(0);
 80a06ae:	6820      	ldr	r0, [r4, #0]
 80a06b0:	2100      	movs	r1, #0
 80a06b2:	f001 fa3a 	bl	80a1b2a <_ZN7MPU605015setYAccelOffsetEs>
  gyrometer->setZAccelOffset(0);
 80a06b6:	6820      	ldr	r0, [r4, #0]
 80a06b8:	2100      	movs	r1, #0
 80a06ba:	f001 fa3b 	bl	80a1b34 <_ZN7MPU605015setZAccelOffsetEs>
  gyrometer->setXGyroOffset(0);
 80a06be:	6820      	ldr	r0, [r4, #0]
 80a06c0:	2100      	movs	r1, #0
 80a06c2:	f001 fa3c 	bl	80a1b3e <_ZN7MPU605014setXGyroOffsetEs>
  gyrometer->setYGyroOffset(0);
 80a06c6:	6820      	ldr	r0, [r4, #0]
 80a06c8:	2100      	movs	r1, #0
 80a06ca:	f001 fa3d 	bl	80a1b48 <_ZN7MPU605014setYGyroOffsetEs>
  gyrometer->setZGyroOffset(0);
 80a06ce:	6820      	ldr	r0, [r4, #0]
 80a06d0:	2100      	movs	r1, #0
}
 80a06d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  gyrometer->setXAccelOffset(0);
  gyrometer->setYAccelOffset(0);
  gyrometer->setZAccelOffset(0);
  gyrometer->setXGyroOffset(0);
  gyrometer->setYGyroOffset(0);
  gyrometer->setZGyroOffset(0);
 80a06d6:	f001 ba3c 	b.w	80a1b52 <_ZN7MPU605014setZGyroOffsetEs>
	...

080a06dc <_ZN9Gyroscope5beginEv>:
}

void Gyroscope::begin() {
 80a06dc:	b538      	push	{r3, r4, r5, lr}
 80a06de:	4605      	mov	r5, r0
  delay(50);
 80a06e0:	2032      	movs	r0, #50	; 0x32
 80a06e2:	f002 fa13 	bl	80a2b0c <delay>
  Serial.println("-------------------------");
 80a06e6:	f002 f937 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a06ea:	490c      	ldr	r1, [pc, #48]	; (80a071c <_ZN9Gyroscope5beginEv+0x40>)
 80a06ec:	f003 fbc3 	bl	80a3e76 <_ZN5Print7printlnEPKc>
  Serial.println(gyrometer->testConnection() ? "MPU6050 connection successful"
 80a06f0:	f002 f932 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a06f4:	4604      	mov	r4, r0
 80a06f6:	6828      	ldr	r0, [r5, #0]
 80a06f8:	f001 fa0a 	bl	80a1b10 <_ZN7MPU605014testConnectionEv>
                                             : "MPU6050 connection failed");
 80a06fc:	4b08      	ldr	r3, [pc, #32]	; (80a0720 <_ZN9Gyroscope5beginEv+0x44>)
 80a06fe:	4909      	ldr	r1, [pc, #36]	; (80a0724 <_ZN9Gyroscope5beginEv+0x48>)
 80a0700:	2800      	cmp	r0, #0
 80a0702:	bf08      	it	eq
 80a0704:	4619      	moveq	r1, r3
 80a0706:	4620      	mov	r0, r4
 80a0708:	f003 fbb5 	bl	80a3e76 <_ZN5Print7printlnEPKc>
  Serial.println("-------------------------");
 80a070c:	f002 f924 	bl	80a2958 <_Z16_fetch_usbserialv>
}
 80a0710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Gyroscope::begin() {
  delay(50);
  Serial.println("-------------------------");
  Serial.println(gyrometer->testConnection() ? "MPU6050 connection successful"
                                             : "MPU6050 connection failed");
  Serial.println("-------------------------");
 80a0714:	4901      	ldr	r1, [pc, #4]	; (80a071c <_ZN9Gyroscope5beginEv+0x40>)
 80a0716:	f003 bbae 	b.w	80a3e76 <_ZN5Print7printlnEPKc>
 80a071a:	bf00      	nop
 80a071c:	080a6cdc 	.word	0x080a6cdc
 80a0720:	080a6d8c 	.word	0x080a6d8c
 80a0724:	080a6d6e 	.word	0x080a6d6e

080a0728 <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv>:
  m_ptr_acceleration_measurements->az = gyrometer->getAccelerationZ();
  push_z_axis_value_to_queue(m_ptr_acceleration_measurements->az);
}


void Gyroscope::set_wave_color_indicatior_from_z_axis_measurements() {
 80a0728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool is_first = true;
  int current = 0;
  int min = -1;
  int max = -1;
 80a072a:	f04f 33ff 	mov.w	r3, #4294967295
  m_ptr_acceleration_measurements->az = gyrometer->getAccelerationZ();
  push_z_axis_value_to_queue(m_ptr_acceleration_measurements->az);
}


void Gyroscope::set_wave_color_indicatior_from_z_axis_measurements() {
 80a072e:	4604      	mov	r4, r0
  bool is_first = true;
  int current = 0;
  int min = -1;
 80a0730:	461e      	mov	r6, r3
  push_z_axis_value_to_queue(m_ptr_acceleration_measurements->az);
}


void Gyroscope::set_wave_color_indicatior_from_z_axis_measurements() {
  bool is_first = true;
 80a0732:	2701      	movs	r7, #1
 80a0734:	68e2      	ldr	r2, [r4, #12]
  int current = 0;
  int min = -1;
  int max = -1;

  while (!last_ten_z_axis_measurements_queue.empty()) {
 80a0736:	69e1      	ldr	r1, [r4, #28]
 80a0738:	4291      	cmp	r1, r2
 80a073a:	d020      	beq.n	80a077e <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv+0x56>
      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
 80a073c:	6920      	ldr	r0, [r4, #16]
 80a073e:	6961      	ldr	r1, [r4, #20]
    current = last_ten_z_axis_measurements_queue.front();
 80a0740:	6815      	ldr	r5, [r2, #0]
    if (is_first) {
 80a0742:	b917      	cbnz	r7, 80a074a <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv+0x22>
      min = current;
      max = current;
      is_first = false;
    }

    if (current > max) {
 80a0744:	42ab      	cmp	r3, r5
 80a0746:	db06      	blt.n	80a0756 <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv+0x2e>
 80a0748:	e001      	b.n	80a074e <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv+0x26>
  int current = 0;
  int min = -1;
  int max = -1;

  while (!last_ten_z_axis_measurements_queue.empty()) {
    current = last_ten_z_axis_measurements_queue.front();
 80a074a:	462b      	mov	r3, r5
 80a074c:	462e      	mov	r6, r5
 80a074e:	42ae      	cmp	r6, r5
 80a0750:	bfa8      	it	ge
 80a0752:	462e      	movge	r6, r5
 80a0754:	461d      	mov	r5, r3
       *  needed, it should be retrieved before pop_front() is called.
       */
      void
      pop_front() _GLIBCXX_NOEXCEPT
      {
	if (this->_M_impl._M_start._M_cur
 80a0756:	1f0b      	subs	r3, r1, #4
 80a0758:	429a      	cmp	r2, r3
 80a075a:	d004      	beq.n	80a0766 <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv+0x3e>
	    != this->_M_impl._M_start._M_last - 1)
	  {
	    _Alloc_traits::destroy(this->_M_impl,
	                           this->_M_impl._M_start._M_cur);
	    ++this->_M_impl._M_start._M_cur;
 80a075c:	3204      	adds	r2, #4
 80a075e:	60e2      	str	r2, [r4, #12]
 80a0760:	2700      	movs	r7, #0
  m_ptr_acceleration_measurements->az = gyrometer->getAccelerationZ();
  push_z_axis_value_to_queue(m_ptr_acceleration_measurements->az);
}


void Gyroscope::set_wave_color_indicatior_from_z_axis_measurements() {
 80a0762:	462b      	mov	r3, r5
 80a0764:	e7e6      	b.n	80a0734 <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv+0xc>
 80a0766:	f7ff fc9c 	bl	80a00a2 <_ZdlPv>
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 80a076a:	69a3      	ldr	r3, [r4, #24]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80a076c:	1d1a      	adds	r2, r3, #4
 80a076e:	61a2      	str	r2, [r4, #24]
	_M_first = *__new_node;
 80a0770:	685b      	ldr	r3, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a0772:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 80a0776:	6123      	str	r3, [r4, #16]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a0778:	6162      	str	r2, [r4, #20]
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 80a077a:	60e3      	str	r3, [r4, #12]
 80a077c:	e7f0      	b.n	80a0760 <_ZN9Gyroscope50set_wave_color_indicatior_from_z_axis_measurementsEv+0x38>
    } else if (current < min) {
      min = current;
    }
    last_ten_z_axis_measurements_queue.pop();
  }
  m_ptr_acceleration_measurements->diff_in_z_axis_last_ten_measurements =  max - min;
 80a077e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80a0780:	1b9b      	subs	r3, r3, r6
 80a0782:	6113      	str	r3, [r2, #16]
 80a0784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0786 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>:
   *
   *  The initial underlying memory layout is a bit complicated...
  */
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 80a0786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a078a:	4604      	mov	r4, r0
    _M_initialize_map(size_t __num_elements)
    {
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);
 80a078c:	09c8      	lsrs	r0, r1, #7
 80a078e:	1c45      	adds	r5, r0, #1
 80a0790:	3003      	adds	r0, #3
 80a0792:	2808      	cmp	r0, #8
 80a0794:	bf38      	it	cc
 80a0796:	2008      	movcc	r0, #8

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 80a0798:	6060      	str	r0, [r4, #4]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a079a:	0080      	lsls	r0, r0, #2
   *
   *  The initial underlying memory layout is a bit complicated...
  */
  template<typename _Tp, typename _Alloc>
    void
    _Deque_base<_Tp, _Alloc>::
 80a079c:	460f      	mov	r7, r1
 80a079e:	f7ff fc7e 	bl	80a009e <_Znwj>
      // starts in the middle elements and grows outwards.  So nstart may be
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 80a07a2:	6866      	ldr	r6, [r4, #4]
 80a07a4:	4680      	mov	r8, r0
 80a07a6:	1b76      	subs	r6, r6, r5
 80a07a8:	0876      	lsrs	r6, r6, #1
 80a07aa:	eb00 0986 	add.w	r9, r0, r6, lsl #2
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80a07ae:	46ca      	mov	sl, r9
      const size_t __num_nodes = (__num_elements/ __deque_buf_size(sizeof(_Tp))
				  + 1);

      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
					   size_t(__num_nodes + 2));
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 80a07b0:	6020      	str	r0, [r4, #0]
      // the beginning of _M_map, but for small maps it may be as far in as
      // _M_map+3.

      _Map_pointer __nstart = (this->_M_impl._M_map
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
      _Map_pointer __nfinish = __nstart + __num_nodes;
 80a07b2:	eb09 0585 	add.w	r5, r9, r5, lsl #2
    _M_create_nodes(_Map_pointer __nstart, _Map_pointer __nfinish)
    {
      _Map_pointer __cur;
      __try
	{
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 80a07b6:	4555      	cmp	r5, sl
 80a07b8:	d906      	bls.n	80a07c8 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj+0x42>
 80a07ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80a07be:	f7ff fc6e 	bl	80a009e <_Znwj>
	    *__cur = this->_M_allocate_node();
 80a07c2:	f84a 0b04 	str.w	r0, [sl], #4
 80a07c6:	e7f6      	b.n	80a07b6 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj+0x30>
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 80a07c8:	f858 2026 	ldr.w	r2, [r8, r6, lsl #2]
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80a07cc:	f007 077f 	and.w	r7, r7, #127	; 0x7f
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a07d0:	f502 7300 	add.w	r3, r2, #512	; 0x200
 80a07d4:	6123      	str	r3, [r4, #16]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80a07d6:	1f2b      	subs	r3, r5, #4
 80a07d8:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
 80a07da:	f855 3c04 	ldr.w	r3, [r5, #-4]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80a07de:	f8c4 9014 	str.w	r9, [r4, #20]
	_M_first = *__new_node;
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a07e2:	f503 7100 	add.w	r1, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 80a07e6:	61e3      	str	r3, [r4, #28]
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80a07e8:	eb03 0387 	add.w	r3, r3, r7, lsl #2
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 80a07ec:	60e2      	str	r2, [r4, #12]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a07ee:	6221      	str	r1, [r4, #32]
	  __throw_exception_again;
	}

      this->_M_impl._M_start._M_set_node(__nstart);
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 80a07f0:	60a2      	str	r2, [r4, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 80a07f2:	61a3      	str	r3, [r4, #24]
 80a07f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a07f8 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 80a07f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80a07fc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80a07fe:	6805      	ldr	r5, [r0, #0]
 80a0800:	6843      	ldr	r3, [r0, #4]
 80a0802:	460f      	mov	r7, r1
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80a0804:	1b51      	subs	r1, r2, r5
 80a0806:	eba3 01a1 	sub.w	r1, r3, r1, asr #2
 80a080a:	2901      	cmp	r1, #1
 80a080c:	4604      	mov	r4, r0
 80a080e:	d858      	bhi.n	80a08c2 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0xca>
    void
    deque<_Tp, _Alloc>::
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 80a0810:	6941      	ldr	r1, [r0, #20]
 80a0812:	1a56      	subs	r6, r2, r1
 80a0814:	10b6      	asrs	r6, r6, #2
 80a0816:	3601      	adds	r6, #1
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 80a0818:	f106 0801 	add.w	r8, r6, #1

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 80a081c:	ebb3 0f48 	cmp.w	r3, r8, lsl #1
 80a0820:	d917      	bls.n	80a0852 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0x5a>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80a0822:	ebc8 0303 	rsb	r3, r8, r3
 80a0826:	085b      	lsrs	r3, r3, #1
 80a0828:	eb05 0583 	add.w	r5, r5, r3, lsl #2
					 - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80a082c:	42a9      	cmp	r1, r5
 80a082e:	f102 0204 	add.w	r2, r2, #4
 80a0832:	d904      	bls.n	80a083e <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0x46>
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 80a0834:	1a52      	subs	r2, r2, r1
	  if (_Num)
 80a0836:	0893      	lsrs	r3, r2, #2
 80a0838:	d031      	beq.n	80a089e <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0xa6>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80a083a:	4628      	mov	r0, r5
 80a083c:	e006      	b.n	80a084c <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0x54>
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 80a083e:	1a52      	subs	r2, r2, r1
	  if (_Num)
 80a0840:	0893      	lsrs	r3, r2, #2
	    std::copy(this->_M_impl._M_start._M_node,
		      this->_M_impl._M_finish._M_node + 1,
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80a0842:	ea4f 0086 	mov.w	r0, r6, lsl #2
 80a0846:	d02a      	beq.n	80a089e <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0xa6>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80a0848:	1a80      	subs	r0, r0, r2
 80a084a:	4428      	add	r0, r5
 80a084c:	f005 f81f 	bl	80a588e <memmove>
 80a0850:	e025      	b.n	80a089e <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0xa6>
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
 80a0852:	2b00      	cmp	r3, #0
 80a0854:	bf14      	ite	ne
 80a0856:	4699      	movne	r9, r3
 80a0858:	f04f 0901 	moveq.w	r9, #1
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;
 80a085c:	3302      	adds	r3, #2
 80a085e:	4499      	add	r9, r3
      // NB: __n is permitted to be 0.  The C++ standard says nothing
      // about what the return value is when __n == 0.
      pointer
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
 80a0860:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80a0864:	d301      	bcc.n	80a086a <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0x72>
	  std::__throw_bad_alloc();
 80a0866:	f003 fe6c 	bl	80a4542 <_ZSt17__throw_bad_allocv>

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a086a:	ea4f 0089 	mov.w	r0, r9, lsl #2
 80a086e:	f7ff fc16 	bl	80a009e <_Znwj>
#if __cplusplus >= 201103L
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
 80a0872:	6a62      	ldr	r2, [r4, #36]	; 0x24

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
	                 + (__add_at_front ? __nodes_to_add : 0);
	  std::copy(this->_M_impl._M_start._M_node,
 80a0874:	6961      	ldr	r1, [r4, #20]
 80a0876:	3204      	adds	r2, #4
	  size_type __new_map_size = this->_M_impl._M_map_size
	                             + std::max(this->_M_impl._M_map_size,
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 80a0878:	ebc8 0509 	rsb	r5, r8, r9
 80a087c:	1a52      	subs	r2, r2, r1
 80a087e:	086d      	lsrs	r5, r5, #1
	  if (_Num)
 80a0880:	0893      	lsrs	r3, r2, #2
 80a0882:	4682      	mov	sl, r0
 80a0884:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80a0888:	d002      	beq.n	80a0890 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0x98>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80a088a:	4628      	mov	r0, r5
 80a088c:	f004 ffff 	bl	80a588e <memmove>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a0890:	6820      	ldr	r0, [r4, #0]
 80a0892:	f7ff fc06 	bl	80a00a2 <_ZdlPv>
	  std::copy(this->_M_impl._M_start._M_node,
		    this->_M_impl._M_finish._M_node + 1,
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);

	  this->_M_impl._M_map = __new_map;
 80a0896:	f8c4 a000 	str.w	sl, [r4]
	  this->_M_impl._M_map_size = __new_map_size;
 80a089a:	f8c4 9004 	str.w	r9, [r4, #4]
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80a089e:	6165      	str	r5, [r4, #20]
	_M_first = *__new_node;
 80a08a0:	682b      	ldr	r3, [r5, #0]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 80a08a2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80a08a6:	60e3      	str	r3, [r4, #12]
 80a08a8:	3e01      	subs	r6, #1
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a08aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80a08ae:	6123      	str	r3, [r4, #16]
 80a08b0:	eb05 0386 	add.w	r3, r5, r6, lsl #2
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80a08b4:	6263      	str	r3, [r4, #36]	; 0x24
	_M_first = *__new_node;
 80a08b6:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
 80a08ba:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a08bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80a08c0:	6223      	str	r3, [r4, #32]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a08c2:	f44f 7000 	mov.w	r0, #512	; 0x200
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	_M_reserve_map_at_back();
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 80a08c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80a08c8:	f7ff fbe9 	bl	80a009e <_Znwj>
 80a08cc:	6068      	str	r0, [r5, #4]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 80a08ce:	69a3      	ldr	r3, [r4, #24]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a08d0:	683a      	ldr	r2, [r7, #0]
 80a08d2:	b103      	cbz	r3, 80a08d6 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_+0xde>
 80a08d4:	601a      	str	r2, [r3, #0]
			             std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
						+ 1);
 80a08d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
       *  immediately afterwards, based on _M_first and _M_last.
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
 80a08d8:	1d1a      	adds	r2, r3, #4
 80a08da:	6262      	str	r2, [r4, #36]	; 0x24
	_M_first = *__new_node;
 80a08dc:	685b      	ldr	r3, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a08de:	f503 7200 	add.w	r2, r3, #512	; 0x200
       */
      void
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
      {
	_M_node = __new_node;
	_M_first = *__new_node;
 80a08e2:	61e3      	str	r3, [r4, #28]
	_M_last = _M_first + difference_type(_S_buffer_size());
 80a08e4:	6222      	str	r2, [r4, #32]
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 80a08e6:	61a3      	str	r3, [r4, #24]
 80a08e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a08ec <_ZNSt5dequeIiSaIiEE9push_backERKi>:
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 80a08ec:	b538      	push	{r3, r4, r5, lr}
      {
	if (this->_M_impl._M_finish._M_cur
 80a08ee:	6a04      	ldr	r4, [r0, #32]
	    != this->_M_impl._M_finish._M_last - 1)
 80a08f0:	6982      	ldr	r2, [r0, #24]
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
      {
	if (this->_M_impl._M_finish._M_cur
 80a08f2:	3c04      	subs	r4, #4
 80a08f4:	42a2      	cmp	r2, r4
       *  element at the end of the %deque and assigns the given data
       *  to it.  Due to the nature of a %deque this operation can be
       *  done in constant time.
       */
      void
      push_back(const value_type& __x)
 80a08f6:	4603      	mov	r3, r0
      {
	if (this->_M_impl._M_finish._M_cur
 80a08f8:	d006      	beq.n	80a0908 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x1c>
 80a08fa:	6809      	ldr	r1, [r1, #0]
 80a08fc:	b102      	cbz	r2, 80a0900 <_ZNSt5dequeIiSaIiEE9push_backERKi+0x14>
 80a08fe:	6011      	str	r1, [r2, #0]
	    != this->_M_impl._M_finish._M_last - 1)
	  {
	    _Alloc_traits::construct(this->_M_impl,
	                             this->_M_impl._M_finish._M_cur, __x);
	    ++this->_M_impl._M_finish._M_cur;
 80a0900:	699a      	ldr	r2, [r3, #24]
 80a0902:	3204      	adds	r2, #4
 80a0904:	619a      	str	r2, [r3, #24]
 80a0906:	bd38      	pop	{r3, r4, r5, pc}
	  }
	else
	  _M_push_back_aux(__x);
 80a0908:	f7ff ff76 	bl	80a07f8 <_ZNSt5dequeIiSaIiEE16_M_push_back_auxIIRKiEEEvDpOT_>
 80a090c:	bd38      	pop	{r3, r4, r5, pc}

080a090e <_ZN9Gyroscope20readValuesFromSensorEv>:

void Gyroscope::push_z_axis_value_to_queue(int az) {
  last_ten_z_axis_measurements_queue.push(az);
}

void Gyroscope::readValuesFromSensor() {
 80a090e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0910:	4604      	mov	r4, r0
  m_ptr_acceleration_measurements->ax = gyrometer->getAccelerationX();
 80a0912:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80a0914:	6800      	ldr	r0, [r0, #0]
 80a0916:	f001 f887 	bl	80a1a28 <_ZN7MPU605016getAccelerationXEv>
 80a091a:	6028      	str	r0, [r5, #0]
  m_ptr_acceleration_measurements->ay = gyrometer->getAccelerationY();
 80a091c:	6820      	ldr	r0, [r4, #0]
 80a091e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80a0920:	f001 f896 	bl	80a1a50 <_ZN7MPU605016getAccelerationYEv>
 80a0924:	6068      	str	r0, [r5, #4]
  m_ptr_acceleration_measurements->az = gyrometer->getAccelerationZ();
 80a0926:	6820      	ldr	r0, [r4, #0]
 80a0928:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80a092a:	f001 f8a5 	bl	80a1a78 <_ZN7MPU605016getAccelerationZEv>
 80a092e:	60a8      	str	r0, [r5, #8]
  push_z_axis_value_to_queue(m_ptr_acceleration_measurements->az);
 80a0930:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80a0932:	a902      	add	r1, sp, #8
 80a0934:	689b      	ldr	r3, [r3, #8]
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
      { c.push_back(__x); }
 80a0936:	1d20      	adds	r0, r4, #4
 80a0938:	f841 3d04 	str.w	r3, [r1, #-4]!
 80a093c:	f7ff ffd6 	bl	80a08ec <_ZNSt5dequeIiSaIiEE9push_backERKi>
}
 80a0940:	b003      	add	sp, #12
 80a0942:	bd30      	pop	{r4, r5, pc}

080a0944 <_ZSt4swapISt15_Deque_iteratorIiRiPiEEvRT_S5_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0944:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0946:	4605      	mov	r5, r0
      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
 80a0948:	e890 5000 	ldmia.w	r0, {ip, lr}
 80a094c:	460c      	mov	r4, r1
 80a094e:	6887      	ldr	r7, [r0, #8]
 80a0950:	68c6      	ldr	r6, [r0, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0952:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 80a0954:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0958:	e884 5000 	stmia.w	r4, {ip, lr}
 80a095c:	60a7      	str	r7, [r4, #8]
 80a095e:	60e6      	str	r6, [r4, #12]
 80a0960:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0962 <_ZN9GyroscopeC1EP25acceleration_measurements>:
#include "gyroscope.h"
#include "MPU6050.h"
#include "application.h"

Gyroscope::Gyroscope(struct acceleration_measurements *acceleration_measurements) {
 80a0962:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0964:	4605      	mov	r5, r0
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 80a0966:	2400      	movs	r4, #0
 80a0968:	b08b      	sub	sp, #44	; 0x2c
      typedef _Deque_iterator<_Tp, _Tp&, _Ptr>          iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;

      _Deque_base()
      : _M_impl()
      { _M_initialize_map(0); }
 80a096a:	4668      	mov	r0, sp
 80a096c:	460f      	mov	r7, r1
 80a096e:	4621      	mov	r1, r4
	iterator _M_start;
	iterator _M_finish;

	_Deque_impl()
	: _Tp_alloc_type(), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 80a0970:	9400      	str	r4, [sp, #0]
 80a0972:	9401      	str	r4, [sp, #4]
      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80a0974:	9402      	str	r4, [sp, #8]
 80a0976:	9403      	str	r4, [sp, #12]
 80a0978:	9404      	str	r4, [sp, #16]
 80a097a:	9405      	str	r4, [sp, #20]
 80a097c:	9406      	str	r4, [sp, #24]
 80a097e:	9407      	str	r4, [sp, #28]
 80a0980:	9408      	str	r4, [sp, #32]
 80a0982:	9409      	str	r4, [sp, #36]	; 0x24
      typedef _Deque_iterator<_Tp, _Tp&, _Ptr>          iterator;
      typedef _Deque_iterator<_Tp, const _Tp&, _Ptr_const>   const_iterator;

      _Deque_base()
      : _M_impl()
      { _M_initialize_map(0); }
 80a0984:	f7ff feff 	bl	80a0786 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>
#if __cplusplus >= 201103L
	_Deque_impl(_Deque_impl&&) = default;

	_Deque_impl(_Tp_alloc_type&& __a) noexcept
	: _Tp_alloc_type(std::move(__a)), _M_map(), _M_map_size(0),
	  _M_start(), _M_finish()
 80a0988:	606c      	str	r4, [r5, #4]
 80a098a:	60ac      	str	r4, [r5, #8]
      _Deque_iterator(_Elt_pointer __x, _Map_pointer __y) _GLIBCXX_NOEXCEPT
      : _M_cur(__x), _M_first(*__y),
        _M_last(*__y + _S_buffer_size()), _M_node(__y) { }

      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 80a098c:	60ec      	str	r4, [r5, #12]
 80a098e:	612c      	str	r4, [r5, #16]
 80a0990:	616c      	str	r4, [r5, #20]
 80a0992:	61ac      	str	r4, [r5, #24]
 80a0994:	61ec      	str	r4, [r5, #28]
 80a0996:	622c      	str	r4, [r5, #32]
 80a0998:	626c      	str	r4, [r5, #36]	; 0x24
 80a099a:	62ac      	str	r4, [r5, #40]	; 0x28
      { }

      _Deque_base(_Deque_base&& __x, true_type)
      : _M_impl(std::move(__x._M_get_Tp_allocator()))
      {
	_M_initialize_map(0);
 80a099c:	4621      	mov	r1, r4
 80a099e:	1d28      	adds	r0, r5, #4
 80a09a0:	f7ff fef1 	bl	80a0786 <_ZNSt11_Deque_baseIiSaIiEE17_M_initialize_mapEj>
	if (__x._M_impl._M_map)
 80a09a4:	9b00      	ldr	r3, [sp, #0]
 80a09a6:	b18b      	cbz	r3, 80a09cc <_ZN9GyroscopeC1EP25acceleration_measurements+0x6a>
#endif

	void _M_swap_data(_Deque_impl& __x) _GLIBCXX_NOEXCEPT
	{
	  using std::swap;
	  swap(this->_M_start, __x._M_start);
 80a09a8:	a902      	add	r1, sp, #8
 80a09aa:	f105 000c 	add.w	r0, r5, #12
 80a09ae:	f7ff ffc9 	bl	80a0944 <_ZSt4swapISt15_Deque_iteratorIiRiPiEEvRT_S5_>
	  swap(this->_M_finish, __x._M_finish);
 80a09b2:	a906      	add	r1, sp, #24
 80a09b4:	f105 001c 	add.w	r0, r5, #28
 80a09b8:	f7ff ffc4 	bl	80a0944 <_ZSt4swapISt15_Deque_iteratorIiRiPiEEvRT_S5_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a09bc:	686b      	ldr	r3, [r5, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a09be:	9a00      	ldr	r2, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a09c0:	9300      	str	r3, [sp, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a09c2:	606a      	str	r2, [r5, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a09c4:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a09c6:	9a01      	ldr	r2, [sp, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a09c8:	9301      	str	r3, [sp, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a09ca:	60aa      	str	r2, [r5, #8]

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 80a09cc:	9b00      	ldr	r3, [sp, #0]
      _Deque_iterator() _GLIBCXX_NOEXCEPT
      : _M_cur(), _M_first(), _M_last(), _M_node() { }

      _Deque_iterator(const iterator& __x) _GLIBCXX_NOEXCEPT
      : _M_cur(__x._M_cur), _M_first(__x._M_first),
        _M_last(__x._M_last), _M_node(__x._M_node) { }
 80a09ce:	9c05      	ldr	r4, [sp, #20]
 80a09d0:	9e09      	ldr	r6, [sp, #36]	; 0x24

  template<typename _Tp, typename _Alloc>
    _Deque_base<_Tp, _Alloc>::
    ~_Deque_base() _GLIBCXX_NOEXCEPT
    {
      if (this->_M_impl._M_map)
 80a09d2:	b153      	cbz	r3, 80a09ea <_ZN9GyroscopeC1EP25acceleration_measurements+0x88>
	{
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80a09d4:	3604      	adds	r6, #4
    void
    _Deque_base<_Tp, _Alloc>::
    _M_destroy_nodes(_Map_pointer __nstart,
		     _Map_pointer __nfinish) _GLIBCXX_NOEXCEPT
    {
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 80a09d6:	42a6      	cmp	r6, r4
 80a09d8:	d904      	bls.n	80a09e4 <_ZN9GyroscopeC1EP25acceleration_measurements+0x82>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a09da:	f854 0b04 	ldr.w	r0, [r4], #4
 80a09de:	f7ff fb60 	bl	80a00a2 <_ZdlPv>
 80a09e2:	e7f8      	b.n	80a09d6 <_ZN9GyroscopeC1EP25acceleration_measurements+0x74>
 80a09e4:	9800      	ldr	r0, [sp, #0]
 80a09e6:	f7ff fb5c 	bl	80a00a2 <_ZdlPv>
  m_ptr_acceleration_measurements = acceleration_measurements;
 80a09ea:	62ef      	str	r7, [r5, #44]	; 0x2c
  gyrometer = new MPU6050();
 80a09ec:	200f      	movs	r0, #15
 80a09ee:	f7ff fb56 	bl	80a009e <_Znwj>
 80a09f2:	4604      	mov	r4, r0
 80a09f4:	b108      	cbz	r0, 80a09fa <_ZN9GyroscopeC1EP25acceleration_measurements+0x98>
 80a09f6:	f000 fffd 	bl	80a19f4 <_ZN7MPU6050C1Ev>
  setup();
 80a09fa:	4628      	mov	r0, r5
#include "MPU6050.h"
#include "application.h"

Gyroscope::Gyroscope(struct acceleration_measurements *acceleration_measurements) {
  m_ptr_acceleration_measurements = acceleration_measurements;
  gyrometer = new MPU6050();
 80a09fc:	602c      	str	r4, [r5, #0]
  setup();
 80a09fe:	f7ff fe49 	bl	80a0694 <_ZN9Gyroscope5setupEv>
}
 80a0a02:	4628      	mov	r0, r5
 80a0a04:	b00b      	add	sp, #44	; 0x2c
 80a0a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0a08 <_GLOBAL__sub_I__ZN9GyroscopeC2EP25acceleration_measurements>:
 80a0a08:	f001 ba24 	b.w	80a1e54 <HAL_Pin_Map>

080a0a0c <_ZN3TFT5setupEv>:
  m_ptr_temperatures = ptr_temperaure;
  m_ptr_acceleration_measurements = ptr_acceleration_measurements;
  setup();
}

void TFT::setup() {
 80a0a0c:	b510      	push	{r4, lr}
 80a0a0e:	4604      	mov	r4, r0
  adafruit->initG();
 80a0a10:	6800      	ldr	r0, [r0, #0]
 80a0a12:	f000 fc4d 	bl	80a12b0 <_ZN15Adafruit_ST77355initGEv>
  adafruit->setRotation(3);
 80a0a16:	6820      	ldr	r0, [r4, #0]
 80a0a18:	2103      	movs	r1, #3
 80a0a1a:	f000 fd8f 	bl	80a153c <_ZN15Adafruit_ST773511setRotationEh>
  adafruit->invertDisplay(1);
 80a0a1e:	6820      	ldr	r0, [r4, #0]
 80a0a20:	2101      	movs	r1, #1
 80a0a22:	6803      	ldr	r3, [r0, #0]
 80a0a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0a26:	4798      	blx	r3
  adafruit->fillScreen(ST7735_BLUE);
 80a0a28:	6820      	ldr	r0, [r4, #0]
 80a0a2a:	211f      	movs	r1, #31
 80a0a2c:	6803      	ldr	r3, [r0, #0]
 80a0a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0a30:	4798      	blx	r3
  adafruit->setTextSize(2);
 80a0a32:	6820      	ldr	r0, [r4, #0]
 80a0a34:	2102      	movs	r1, #2
 80a0a36:	f000 fb30 	bl	80a109a <_ZN12Adafruit_GFX11setTextSizeEh>
  adafruit->setCursor(35, 35);
 80a0a3a:	2223      	movs	r2, #35	; 0x23
 80a0a3c:	4611      	mov	r1, r2
 80a0a3e:	6820      	ldr	r0, [r4, #0]
 80a0a40:	f000 fb28 	bl	80a1094 <_ZN12Adafruit_GFX9setCursorEss>
  adafruit->setTextColor(ST7735_YELLOW);
 80a0a44:	6820      	ldr	r0, [r4, #0]
 80a0a46:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80a0a4a:	f000 fb2b 	bl	80a10a4 <_ZN12Adafruit_GFX12setTextColorEt>
  adafruit->setTextWrap(true);
 80a0a4e:	6820      	ldr	r0, [r4, #0]
 80a0a50:	2101      	movs	r1, #1
 80a0a52:	f000 fb2d 	bl	80a10b0 <_ZN12Adafruit_GFX11setTextWrapEb>
  adafruit->print("STARTING");
 80a0a56:	6820      	ldr	r0, [r4, #0]
 80a0a58:	4902      	ldr	r1, [pc, #8]	; (80a0a64 <_ZN3TFT5setupEv+0x58>)
}
 80a0a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  adafruit->fillScreen(ST7735_BLUE);
  adafruit->setTextSize(2);
  adafruit->setCursor(35, 35);
  adafruit->setTextColor(ST7735_YELLOW);
  adafruit->setTextWrap(true);
  adafruit->print("STARTING");
 80a0a5e:	f003 b9f7 	b.w	80a3e50 <_ZN5Print5printEPKc>
 80a0a62:	bf00      	nop
 80a0a64:	080a6da6 	.word	0x080a6da6

080a0a68 <_ZN3TFTC1EP12temperaturesP25acceleration_measurements>:

#define Y_OFFSET 48
#define LINE_HEIGHT_TEXT_SIZE_1 10
#define LINE_HEIGHT_TEXT_SIZE_2 20

TFT::TFT(struct temperatures *ptr_temperaure, struct acceleration_measurements *ptr_acceleration_measurements) {
 80a0a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0a6a:	4604      	mov	r4, r0
  adafruit = new Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);
 80a0a6c:	2030      	movs	r0, #48	; 0x30

#define Y_OFFSET 48
#define LINE_HEIGHT_TEXT_SIZE_1 10
#define LINE_HEIGHT_TEXT_SIZE_2 20

TFT::TFT(struct temperatures *ptr_temperaure, struct acceleration_measurements *ptr_acceleration_measurements) {
 80a0a6e:	460e      	mov	r6, r1
 80a0a70:	4615      	mov	r5, r2
  adafruit = new Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);
 80a0a72:	f7ff fb14 	bl	80a009e <_Znwj>
 80a0a76:	4607      	mov	r7, r0
 80a0a78:	b120      	cbz	r0, 80a0a84 <_ZN3TFTC1EP12temperaturesP25acceleration_measurements+0x1c>
 80a0a7a:	230a      	movs	r3, #10
 80a0a7c:	220b      	movs	r2, #11
 80a0a7e:	210c      	movs	r1, #12
 80a0a80:	f000 fb38 	bl	80a10f4 <_ZN15Adafruit_ST7735C1Ehhh>
  m_ptr_temperatures = ptr_temperaure;
  m_ptr_acceleration_measurements = ptr_acceleration_measurements;
  setup();
 80a0a84:	4620      	mov	r0, r4
#define Y_OFFSET 48
#define LINE_HEIGHT_TEXT_SIZE_1 10
#define LINE_HEIGHT_TEXT_SIZE_2 20

TFT::TFT(struct temperatures *ptr_temperaure, struct acceleration_measurements *ptr_acceleration_measurements) {
  adafruit = new Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);
 80a0a86:	6027      	str	r7, [r4, #0]
  m_ptr_temperatures = ptr_temperaure;
 80a0a88:	6066      	str	r6, [r4, #4]
  m_ptr_acceleration_measurements = ptr_acceleration_measurements;
 80a0a8a:	60a5      	str	r5, [r4, #8]
  setup();
 80a0a8c:	f7ff ffbe 	bl	80a0a0c <_ZN3TFT5setupEv>
}
 80a0a90:	4620      	mov	r0, r4
 80a0a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0a94 <_ZN3TFT5beginEv>:
  adafruit->setTextColor(ST7735_YELLOW);
  adafruit->setTextWrap(true);
  adafruit->print("STARTING");
}

void TFT::begin() {
 80a0a94:	b510      	push	{r4, lr}
  delay(50);
  Serial.println("-------------------------");
 80a0a96:	4c0a      	ldr	r4, [pc, #40]	; (80a0ac0 <_ZN3TFT5beginEv+0x2c>)
  adafruit->setTextWrap(true);
  adafruit->print("STARTING");
}

void TFT::begin() {
  delay(50);
 80a0a98:	2032      	movs	r0, #50	; 0x32
 80a0a9a:	f002 f837 	bl	80a2b0c <delay>
  Serial.println("-------------------------");
 80a0a9e:	f001 ff5b 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a0aa2:	4621      	mov	r1, r4
 80a0aa4:	f003 f9e7 	bl	80a3e76 <_ZN5Print7printlnEPKc>
  Serial.println("Serial tft is ready");
 80a0aa8:	f001 ff56 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a0aac:	4905      	ldr	r1, [pc, #20]	; (80a0ac4 <_ZN3TFT5beginEv+0x30>)
 80a0aae:	f003 f9e2 	bl	80a3e76 <_ZN5Print7printlnEPKc>
  Serial.println("-------------------------");
 80a0ab2:	f001 ff51 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a0ab6:	4621      	mov	r1, r4
}
 80a0ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void TFT::begin() {
  delay(50);
  Serial.println("-------------------------");
  Serial.println("Serial tft is ready");
  Serial.println("-------------------------");
 80a0abc:	f003 b9db 	b.w	80a3e76 <_ZN5Print7printlnEPKc>
 80a0ac0:	080a6cdc 	.word	0x080a6cdc
 80a0ac4:	080a6daf 	.word	0x080a6daf

080a0ac8 <_ZN3TFT8drawTimeEv>:
}

void TFT::drawTime() {
 80a0ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a0aca:	4604      	mov	r4, r0
  adafruit->setTextSize(TIME_TEXT_SIZE);
 80a0acc:	2101      	movs	r1, #1
 80a0ace:	6800      	ldr	r0, [r0, #0]
 80a0ad0:	f000 fae3 	bl	80a109a <_ZN12Adafruit_GFX11setTextSizeEh>
  adafruit->setCursor(40, 30);
 80a0ad4:	6820      	ldr	r0, [r4, #0]
 80a0ad6:	221e      	movs	r2, #30
 80a0ad8:	2128      	movs	r1, #40	; 0x28
 80a0ada:	f000 fadb 	bl	80a1094 <_ZN12Adafruit_GFX9setCursorEss>
  adafruit->setTextColor(ST7735_WHITE, ST7735_BLACK);
 80a0ade:	2200      	movs	r2, #0
 80a0ae0:	6820      	ldr	r0, [r4, #0]
 80a0ae2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a0ae6:	f000 fae0 	bl	80a10aa <_ZN12Adafruit_GFX12setTextColorEtt>
  adafruit->setTextWrap(true);
 80a0aea:	2101      	movs	r1, #1
 80a0aec:	6820      	ldr	r0, [r4, #0]
 80a0aee:	f000 fadf 	bl	80a10b0 <_ZN12Adafruit_GFX11setTextWrapEb>
  adafruit->print(Time.format(Time.now(),"%H:%M %Y"));
 80a0af2:	6824      	ldr	r4, [r4, #0]
 80a0af4:	f002 f9a3 	bl	80a2e3e <_ZN9TimeClass3nowEv>
 80a0af8:	4b07      	ldr	r3, [pc, #28]	; (80a0b18 <_ZN3TFT8drawTimeEv+0x50>)
 80a0afa:	4602      	mov	r2, r0
 80a0afc:	4907      	ldr	r1, [pc, #28]	; (80a0b1c <_ZN3TFT8drawTimeEv+0x54>)
 80a0afe:	4668      	mov	r0, sp
 80a0b00:	f002 f94a 	bl	80a2d98 <_ZN9TimeClass6formatElPKc>
 80a0b04:	9900      	ldr	r1, [sp, #0]
 80a0b06:	4620      	mov	r0, r4
 80a0b08:	f003 f9a2 	bl	80a3e50 <_ZN5Print5printEPKc>
 80a0b0c:	4668      	mov	r0, sp
 80a0b0e:	f003 fbb3 	bl	80a4278 <_ZN6StringD1Ev>
}
 80a0b12:	b004      	add	sp, #16
 80a0b14:	bd10      	pop	{r4, pc}
 80a0b16:	bf00      	nop
 80a0b18:	080a6dc3 	.word	0x080a6dc3
 80a0b1c:	200004fc 	.word	0x200004fc

080a0b20 <_ZN3TFT11clearScreenEv>:

void TFT::clearScreen() { adafruit->fillScreen(ST7735_BLACK); }
 80a0b20:	6800      	ldr	r0, [r0, #0]
 80a0b22:	2100      	movs	r1, #0
 80a0b24:	6803      	ldr	r3, [r0, #0]
 80a0b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0b28:	4718      	bx	r3
	...

080a0b2c <_ZN3TFT7drawAccEv>:

void TFT::drawAcc() {
 80a0b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0b30:	4604      	mov	r4, r0
  adafruit->setTextSize(ACC_TEXT_SIZE);
 80a0b32:	2101      	movs	r1, #1
 80a0b34:	6800      	ldr	r0, [r0, #0]
 80a0b36:	f000 fab0 	bl	80a109a <_ZN12Adafruit_GFX11setTextSizeEh>
  adafruit->setTextColor(ST7735_WHITE, ST7735_BLACK);
 80a0b3a:	2200      	movs	r2, #0
 80a0b3c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a0b40:	6820      	ldr	r0, [r4, #0]
 80a0b42:	f000 fab2 	bl	80a10aa <_ZN12Adafruit_GFX12setTextColorEtt>
  adafruit->setTextWrap(true);
 80a0b46:	2101      	movs	r1, #1
 80a0b48:	6820      	ldr	r0, [r4, #0]
 80a0b4a:	f000 fab1 	bl	80a10b0 <_ZN12Adafruit_GFX11setTextWrapEb>
 80a0b4e:	263a      	movs	r6, #58	; 0x3a

  const char *key;
  int current;

  for (int i = 0; i < 3; i++) {
 80a0b50:	2500      	movs	r5, #0
    switch (i) {
 80a0b52:	2d01      	cmp	r5, #1
 80a0b54:	68a3      	ldr	r3, [r4, #8]
 80a0b56:	d005      	beq.n	80a0b64 <_ZN3TFT7drawAccEv+0x38>
 80a0b58:	2d02      	cmp	r5, #2
 80a0b5a:	d007      	beq.n	80a0b6c <_ZN3TFT7drawAccEv+0x40>
      case 0:
        key = "ax:";
        current = m_ptr_acceleration_measurements->ax;
 80a0b5c:	681a      	ldr	r2, [r3, #0]
  int current;

  for (int i = 0; i < 3; i++) {
    switch (i) {
      case 0:
        key = "ax:";
 80a0b5e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80a0bb8 <_ZN3TFT7drawAccEv+0x8c>
        current = m_ptr_acceleration_measurements->ax;
        break;
 80a0b62:	e006      	b.n	80a0b72 <_ZN3TFT7drawAccEv+0x46>
      case 1:
        key = "ay:";
        current = m_ptr_acceleration_measurements->ay;
 80a0b64:	685a      	ldr	r2, [r3, #4]
      case 0:
        key = "ax:";
        current = m_ptr_acceleration_measurements->ax;
        break;
      case 1:
        key = "ay:";
 80a0b66:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80a0bbc <_ZN3TFT7drawAccEv+0x90>
        current = m_ptr_acceleration_measurements->ay;
        break;
 80a0b6a:	e002      	b.n	80a0b72 <_ZN3TFT7drawAccEv+0x46>
      case 2:
        key = "az:";
        current = m_ptr_acceleration_measurements->az;
 80a0b6c:	689a      	ldr	r2, [r3, #8]
      case 1:
        key = "ay:";
        current = m_ptr_acceleration_measurements->ay;
        break;
      case 2:
        key = "az:";
 80a0b6e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 80a0bc0 <_ZN3TFT7drawAccEv+0x94>
        break;
      default:
        key = "error";
        break;
    }
    sprintf(accToPrint, "%6d", current);
 80a0b72:	f104 070c 	add.w	r7, r4, #12

    adafruit->setCursor(8, Y_OFFSET + (i + 1) * LINE_HEIGHT_TEXT_SIZE_1);
 80a0b76:	fa0f f986 	sxth.w	r9, r6
        break;
      default:
        key = "error";
        break;
    }
    sprintf(accToPrint, "%6d", current);
 80a0b7a:	490e      	ldr	r1, [pc, #56]	; (80a0bb4 <_ZN3TFT7drawAccEv+0x88>)
 80a0b7c:	4638      	mov	r0, r7
 80a0b7e:	f001 fa8d 	bl	80a209c <sprintf>

    adafruit->setCursor(8, Y_OFFSET + (i + 1) * LINE_HEIGHT_TEXT_SIZE_1);
 80a0b82:	464a      	mov	r2, r9
 80a0b84:	2108      	movs	r1, #8
 80a0b86:	6820      	ldr	r0, [r4, #0]
 80a0b88:	f000 fa84 	bl	80a1094 <_ZN12Adafruit_GFX9setCursorEss>
    adafruit->print(key);
 80a0b8c:	4641      	mov	r1, r8
 80a0b8e:	6820      	ldr	r0, [r4, #0]
 80a0b90:	f003 f95e 	bl	80a3e50 <_ZN5Print5printEPKc>

    adafruit->setCursor(32, Y_OFFSET + (i + 1) * LINE_HEIGHT_TEXT_SIZE_1);
 80a0b94:	464a      	mov	r2, r9
 80a0b96:	2120      	movs	r1, #32
 80a0b98:	6820      	ldr	r0, [r4, #0]
 80a0b9a:	f000 fa7b 	bl	80a1094 <_ZN12Adafruit_GFX9setCursorEss>
        key = "error";
        break;
    }
    sprintf(accToPrint, "%6d", current);

    adafruit->setCursor(8, Y_OFFSET + (i + 1) * LINE_HEIGHT_TEXT_SIZE_1);
 80a0b9e:	3501      	adds	r5, #1
    adafruit->print(key);

    adafruit->setCursor(32, Y_OFFSET + (i + 1) * LINE_HEIGHT_TEXT_SIZE_1);
    adafruit->print(accToPrint);
 80a0ba0:	4639      	mov	r1, r7
 80a0ba2:	6820      	ldr	r0, [r4, #0]
 80a0ba4:	f003 f954 	bl	80a3e50 <_ZN5Print5printEPKc>
 80a0ba8:	360a      	adds	r6, #10
  adafruit->setTextWrap(true);

  const char *key;
  int current;

  for (int i = 0; i < 3; i++) {
 80a0baa:	2d03      	cmp	r5, #3
 80a0bac:	b2b6      	uxth	r6, r6
 80a0bae:	d1d0      	bne.n	80a0b52 <_ZN3TFT7drawAccEv+0x26>
    adafruit->print(key);

    adafruit->setCursor(32, Y_OFFSET + (i + 1) * LINE_HEIGHT_TEXT_SIZE_1);
    adafruit->print(accToPrint);
  }
}
 80a0bb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a0bb4:	080a6dd8 	.word	0x080a6dd8
 80a0bb8:	080a6dcc 	.word	0x080a6dcc
 80a0bbc:	080a6dd0 	.word	0x080a6dd0
 80a0bc0:	080a6dd4 	.word	0x080a6dd4

080a0bc4 <_ZN3TFT23drawWaveIndicationColorEv>:

void TFT::drawWaveIndicationColor() {
 80a0bc4:	b513      	push	{r0, r1, r4, lr}
 80a0bc6:	4604      	mov	r4, r0
  uint16_t colorBasedOnDiffInAcc;

  adafruit->setTextSize(1);
 80a0bc8:	2101      	movs	r1, #1
 80a0bca:	6800      	ldr	r0, [r0, #0]
 80a0bcc:	f000 fa65 	bl	80a109a <_ZN12Adafruit_GFX11setTextSizeEh>
  adafruit->setTextColor(ST7735_WHITE, ST7735_BLACK);
 80a0bd0:	2200      	movs	r2, #0
 80a0bd2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a0bd6:	6820      	ldr	r0, [r4, #0]
 80a0bd8:	f000 fa67 	bl	80a10aa <_ZN12Adafruit_GFX12setTextColorEtt>
  adafruit->setCursor(95, 45);
 80a0bdc:	222d      	movs	r2, #45	; 0x2d
 80a0bde:	215f      	movs	r1, #95	; 0x5f
 80a0be0:	6820      	ldr	r0, [r4, #0]
 80a0be2:	f000 fa57 	bl	80a1094 <_ZN12Adafruit_GFX9setCursorEss>
  adafruit->print("Waves");
 80a0be6:	4911      	ldr	r1, [pc, #68]	; (80a0c2c <_ZN3TFT23drawWaveIndicationColorEv+0x68>)
 80a0be8:	6820      	ldr	r0, [r4, #0]
 80a0bea:	f003 f931 	bl	80a3e50 <_ZN5Print5printEPKc>
  Calm water: green indication
  Middle calm water: yellow indication
  Messy water: red indication
  */

  if (m_ptr_acceleration_measurements->diff_in_z_axis_last_ten_measurements > 5000) {
 80a0bee:	f241 3288 	movw	r2, #5000	; 0x1388
 80a0bf2:	68a3      	ldr	r3, [r4, #8]
 80a0bf4:	691b      	ldr	r3, [r3, #16]
 80a0bf6:	4293      	cmp	r3, r2
 80a0bf8:	dc09      	bgt.n	80a0c0e <_ZN3TFT23drawWaveIndicationColorEv+0x4a>
    colorBasedOnDiffInAcc = ST7735_RED;
  } else if (m_ptr_acceleration_measurements->diff_in_z_axis_last_ten_measurements > 1500) {
    colorBasedOnDiffInAcc = ST7735_YELLOW;
  } else {
    colorBasedOnDiffInAcc = ST7735_GREEN;
 80a0bfa:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80a0bfe:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80a0c02:	428b      	cmp	r3, r1
 80a0c04:	bfcc      	ite	gt
 80a0c06:	4613      	movgt	r3, r2
 80a0c08:	f44f 63fc 	movle.w	r3, #2016	; 0x7e0
 80a0c0c:	e001      	b.n	80a0c12 <_ZN3TFT23drawWaveIndicationColorEv+0x4e>
  Middle calm water: yellow indication
  Messy water: red indication
  */

  if (m_ptr_acceleration_measurements->diff_in_z_axis_last_ten_measurements > 5000) {
    colorBasedOnDiffInAcc = ST7735_RED;
 80a0c0e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
  } else if (m_ptr_acceleration_measurements->diff_in_z_axis_last_ten_measurements > 1500) {
    colorBasedOnDiffInAcc = ST7735_YELLOW;
  } else {
    colorBasedOnDiffInAcc = ST7735_GREEN;
  }
  adafruit->fillRect(78, 60, 70, 40, colorBasedOnDiffInAcc);
 80a0c12:	6820      	ldr	r0, [r4, #0]
 80a0c14:	214e      	movs	r1, #78	; 0x4e
 80a0c16:	6802      	ldr	r2, [r0, #0]
 80a0c18:	9301      	str	r3, [sp, #4]
 80a0c1a:	2328      	movs	r3, #40	; 0x28
 80a0c1c:	9300      	str	r3, [sp, #0]
 80a0c1e:	6a54      	ldr	r4, [r2, #36]	; 0x24
 80a0c20:	2346      	movs	r3, #70	; 0x46
 80a0c22:	223c      	movs	r2, #60	; 0x3c
 80a0c24:	47a0      	blx	r4
}
 80a0c26:	b002      	add	sp, #8
 80a0c28:	bd10      	pop	{r4, pc}
 80a0c2a:	bf00      	nop
 80a0c2c:	080a6ddc 	.word	0x080a6ddc

080a0c30 <_GLOBAL__sub_I__ZN3TFTC2EP12temperaturesP25acceleration_measurements>:
 80a0c30:	f001 b910 	b.w	80a1e54 <HAL_Pin_Map>

080a0c34 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0c38:	461e      	mov	r6, r3
 80a0c3a:	b085      	sub	sp, #20
 80a0c3c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80a0c40:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a0c42:	1a9a      	subs	r2, r3, r2
 80a0c44:	2a00      	cmp	r2, #0
 80a0c46:	bfb8      	it	lt
 80a0c48:	4252      	neglt	r2, r2
 80a0c4a:	9200      	str	r2, [sp, #0]
 80a0c4c:	1a72      	subs	r2, r6, r1
 80a0c4e:	2a00      	cmp	r2, #0
 80a0c50:	bfb8      	it	lt
 80a0c52:	4252      	neglt	r2, r2
 80a0c54:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0c56:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0c58:	9a00      	ldr	r2, [sp, #0]
 80a0c5a:	9901      	ldr	r1, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0c5c:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0c5e:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0c60:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0c64:	dd05      	ble.n	80a0c72 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
 80a0c66:	4632      	mov	r2, r6
    swap_ada(x0, y0);
    swap_ada(x1, y1);
 80a0c68:	461e      	mov	r6, r3
 80a0c6a:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0c6c:	4622      	mov	r2, r4
    swap_ada(x0, y0);
 80a0c6e:	462c      	mov	r4, r5
 80a0c70:	4615      	mov	r5, r2
    swap_ada(x1, y1);
  }

  if (x0 > x1) {
 80a0c72:	42b4      	cmp	r4, r6
 80a0c74:	dd05      	ble.n	80a0c82 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
 80a0c76:	462a      	mov	r2, r5
    swap_ada(x0, x1);
    swap_ada(y0, y1);
 80a0c78:	461d      	mov	r5, r3
 80a0c7a:	4613      	mov	r3, r2
  if (steep) {
    swap_ada(x0, y0);
    swap_ada(x1, y1);
  }

  if (x0 > x1) {
 80a0c7c:	4622      	mov	r2, r4
 80a0c7e:	4634      	mov	r4, r6
 80a0c80:	4616      	mov	r6, r2
    swap_ada(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
 80a0c82:	1b5a      	subs	r2, r3, r5
 80a0c84:	2a00      	cmp	r2, #0
    swap_ada(x0, x1);
    swap_ada(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a0c86:	ebc4 0806 	rsb	r8, r4, r6
  dy = abs(y1 - y0);
 80a0c8a:	bfb8      	it	lt
 80a0c8c:	4252      	neglt	r2, r2
    swap_ada(x0, x1);
    swap_ada(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a0c8e:	fa1f f888 	uxth.w	r8, r8
  dy = abs(y1 - y0);
 80a0c92:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
 80a0c94:	fa0f f788 	sxth.w	r7, r8
 80a0c98:	2202      	movs	r2, #2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a0c9a:	429d      	cmp	r5, r3
 80a0c9c:	bfb4      	ite	lt
 80a0c9e:	2301      	movlt	r3, #1
 80a0ca0:	f04f 33ff 	movge.w	r3, #4294967295

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);

  int16_t err = dx / 2;
 80a0ca4:	fb97 f7f2 	sdiv	r7, r7, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a0ca8:	9302      	str	r3, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 80a0caa:	42b4      	cmp	r4, r6
 80a0cac:	dc1f      	bgt.n	80a0cee <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
 80a0cae:	9a01      	ldr	r2, [sp, #4]
 80a0cb0:	9b00      	ldr	r3, [sp, #0]
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
 80a0cb2:	4648      	mov	r0, r9
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
 80a0cb4:	4293      	cmp	r3, r2
 80a0cb6:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
 80a0cba:	bfc8      	it	gt
 80a0cbc:	4622      	movgt	r2, r4
 80a0cbe:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0cc2:	bfc8      	it	gt
 80a0cc4:	4629      	movgt	r1, r5
 80a0cc6:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
 80a0cc8:	bfdc      	itt	le
 80a0cca:	462a      	movle	r2, r5
 80a0ccc:	4621      	movle	r1, r4
 80a0cce:	47d8      	blx	fp
    }
    err -= dy;
 80a0cd0:	9b03      	ldr	r3, [sp, #12]
 80a0cd2:	1aff      	subs	r7, r7, r3
 80a0cd4:	b2bb      	uxth	r3, r7
 80a0cd6:	b21f      	sxth	r7, r3
    if (err < 0) {
 80a0cd8:	2f00      	cmp	r7, #0
 80a0cda:	da05      	bge.n	80a0ce8 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
 80a0cdc:	9a02      	ldr	r2, [sp, #8]
      err += dx;
 80a0cde:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
 80a0ce2:	4415      	add	r5, r2
 80a0ce4:	b22d      	sxth	r5, r5
      err += dx;
 80a0ce6:	b23f      	sxth	r7, r7
 80a0ce8:	3401      	adds	r4, #1
 80a0cea:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
 80a0cec:	e7dd      	b.n	80a0caa <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
 80a0cee:	b005      	add	sp, #20
 80a0cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0cf4 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a0cf4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0cf8:	4604      	mov	r4, r0
 80a0cfa:	4691      	mov	r9, r2
 80a0cfc:	460d      	mov	r5, r1
 80a0cfe:	4698      	mov	r8, r3
 80a0d00:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 80a0d04:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a0d06:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 80a0d0a:	9600      	str	r6, [sp, #0]
 80a0d0c:	69ff      	ldr	r7, [r7, #28]
 80a0d0e:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 80a0d10:	6823      	ldr	r3, [r4, #0]
 80a0d12:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a0d16:	9600      	str	r6, [sp, #0]
 80a0d18:	444a      	add	r2, r9
 80a0d1a:	69df      	ldr	r7, [r3, #28]
 80a0d1c:	4629      	mov	r1, r5
 80a0d1e:	4643      	mov	r3, r8
 80a0d20:	4620      	mov	r0, r4
 80a0d22:	b212      	sxth	r2, r2
 80a0d24:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 80a0d26:	6823      	ldr	r3, [r4, #0]
 80a0d28:	9600      	str	r6, [sp, #0]
 80a0d2a:	699f      	ldr	r7, [r3, #24]
 80a0d2c:	464a      	mov	r2, r9
 80a0d2e:	4653      	mov	r3, sl
 80a0d30:	4629      	mov	r1, r5
 80a0d32:	4620      	mov	r0, r4
 80a0d34:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 80a0d36:	6823      	ldr	r3, [r4, #0]
 80a0d38:	f108 31ff 	add.w	r1, r8, #4294967295
 80a0d3c:	960a      	str	r6, [sp, #40]	; 0x28
 80a0d3e:	4429      	add	r1, r5
 80a0d40:	699d      	ldr	r5, [r3, #24]
 80a0d42:	464a      	mov	r2, r9
 80a0d44:	4653      	mov	r3, sl
 80a0d46:	4620      	mov	r0, r4
 80a0d48:	46ac      	mov	ip, r5
 80a0d4a:	b209      	sxth	r1, r1
}
 80a0d4c:	b002      	add	sp, #8
 80a0d4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
 80a0d52:	4760      	bx	ip

080a0d54 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 80a0d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 80a0d56:	3b01      	subs	r3, #1
 80a0d58:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a0d5c:	4413      	add	r3, r2
 80a0d5e:	6804      	ldr	r4, [r0, #0]
 80a0d60:	b21b      	sxth	r3, r3
 80a0d62:	9300      	str	r3, [sp, #0]
 80a0d64:	9501      	str	r5, [sp, #4]
 80a0d66:	6964      	ldr	r4, [r4, #20]
 80a0d68:	460b      	mov	r3, r1
 80a0d6a:	47a0      	blx	r4
}
 80a0d6c:	b003      	add	sp, #12
 80a0d6e:	bd30      	pop	{r4, r5, pc}

080a0d70 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 80a0d70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 80a0d72:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a0d76:	6804      	ldr	r4, [r0, #0]
 80a0d78:	e88d 0024 	stmia.w	sp, {r2, r5}
 80a0d7c:	3b01      	subs	r3, #1
 80a0d7e:	440b      	add	r3, r1
 80a0d80:	6964      	ldr	r4, [r4, #20]
 80a0d82:	b21b      	sxth	r3, r3
 80a0d84:	47a0      	blx	r4
}
 80a0d86:	b003      	add	sp, #12
 80a0d88:	bd30      	pop	{r4, r5, pc}

080a0d8a <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a0d8a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0d8e:	4605      	mov	r5, r0
 80a0d90:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0d92:	460c      	mov	r4, r1
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a0d94:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a0d98:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0d9c:	eb01 0a03 	add.w	sl, r1, r3
 80a0da0:	4554      	cmp	r4, sl
 80a0da2:	da0b      	bge.n	80a0dbc <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
 80a0da4:	682b      	ldr	r3, [r5, #0]
 80a0da6:	f8cd 9000 	str.w	r9, [sp]
 80a0daa:	699e      	ldr	r6, [r3, #24]
 80a0dac:	4621      	mov	r1, r4
 80a0dae:	4643      	mov	r3, r8
 80a0db0:	463a      	mov	r2, r7
 80a0db2:	4628      	mov	r0, r5
 80a0db4:	3401      	adds	r4, #1
 80a0db6:	47b0      	blx	r6
 80a0db8:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0dba:	e7f1      	b.n	80a0da0 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
 80a0dbc:	b002      	add	sp, #8
 80a0dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0dc2 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 80a0dc2:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 80a0dc4:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a0dc8:	6804      	ldr	r4, [r0, #0]
 80a0dca:	9101      	str	r1, [sp, #4]
 80a0dcc:	9200      	str	r2, [sp, #0]
 80a0dce:	2200      	movs	r2, #0
 80a0dd0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a0dd4:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80a0dd6:	4611      	mov	r1, r2
 80a0dd8:	47a0      	blx	r4
}
 80a0dda:	b002      	add	sp, #8
 80a0ddc:	bd10      	pop	{r4, pc}

080a0dde <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
 80a0dde:	4770      	bx	lr

080a0de0 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0de0:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  if (c == '\n') {
 80a0de2:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0de4:	b085      	sub	sp, #20
 80a0de6:	4604      	mov	r4, r0
 80a0de8:	460d      	mov	r5, r1
  
  if (c == '\n') {
 80a0dea:	d107      	bne.n	80a0dfc <_ZN12Adafruit_GFX5writeEh+0x1c>
    cursor_y += textsize*fontDesc[0].height;	//all chars are same height so use height of space char
 80a0dec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80a0dee:	7e02      	ldrb	r2, [r0, #24]
 80a0df0:	7859      	ldrb	r1, [r3, #1]
 80a0df2:	8a43      	ldrh	r3, [r0, #18]
 80a0df4:	fb01 3302 	mla	r3, r1, r2, r3
 80a0df8:	8243      	strh	r3, [r0, #18]
 80a0dfa:	e049      	b.n	80a0e90 <_ZN12Adafruit_GFX5writeEh+0xb0>
    cursor_x  = 0;
  } else if (c == '\r') {
 80a0dfc:	290d      	cmp	r1, #13
 80a0dfe:	d049      	beq.n	80a0e94 <_ZN12Adafruit_GFX5writeEh+0xb4>
    // skip em
  } else {
    drawFastChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80a0e00:	7e06      	ldrb	r6, [r0, #24]
 80a0e02:	6803      	ldr	r3, [r0, #0]
 80a0e04:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 80a0e08:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80a0e0c:	9602      	str	r6, [sp, #8]
 80a0e0e:	8ac6      	ldrh	r6, [r0, #22]
 80a0e10:	9601      	str	r6, [sp, #4]
 80a0e12:	8a86      	ldrh	r6, [r0, #20]
 80a0e14:	9600      	str	r6, [sp, #0]
 80a0e16:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80a0e18:	462b      	mov	r3, r5
 80a0e1a:	47b0      	blx	r6
	uint16_t w = fontDesc[c-fontStart].width;
 80a0e1c:	7ee3      	ldrb	r3, [r4, #27]
	uint16_t h = fontDesc[c-fontStart].height;
    if (fontKern > 0 && textcolor != textbgcolor) {
 80a0e1e:	f994 e01d 	ldrsb.w	lr, [r4, #29]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawFastChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
	uint16_t w = fontDesc[c-fontStart].width;
 80a0e22:	1aed      	subs	r5, r5, r3
 80a0e24:	6a63      	ldr	r3, [r4, #36]	; 0x24
	uint16_t h = fontDesc[c-fontStart].height;
    if (fontKern > 0 && textcolor != textbgcolor) {
 80a0e26:	f1be 0f00 	cmp.w	lr, #0
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawFastChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
	uint16_t w = fontDesc[c-fontStart].width;
 80a0e2a:	eb03 0285 	add.w	r2, r3, r5, lsl #2
 80a0e2e:	f813 6025 	ldrb.w	r6, [r3, r5, lsl #2]
	uint16_t h = fontDesc[c-fontStart].height;
 80a0e32:	7855      	ldrb	r5, [r2, #1]
    if (fontKern > 0 && textcolor != textbgcolor) {
 80a0e34:	dd15      	ble.n	80a0e62 <_ZN12Adafruit_GFX5writeEh+0x82>
 80a0e36:	8ae0      	ldrh	r0, [r4, #22]
 80a0e38:	8aa3      	ldrh	r3, [r4, #20]
 80a0e3a:	4283      	cmp	r3, r0
 80a0e3c:	d011      	beq.n	80a0e62 <_ZN12Adafruit_GFX5writeEh+0x82>
      fillRect(cursor_x+w*textsize,cursor_y,fontKern*textsize,h*textsize,textbgcolor);
 80a0e3e:	7e23      	ldrb	r3, [r4, #24]
 80a0e40:	9001      	str	r0, [sp, #4]
 80a0e42:	8a21      	ldrh	r1, [r4, #16]
 80a0e44:	fb03 f005 	mul.w	r0, r3, r5
 80a0e48:	fb06 1103 	mla	r1, r6, r3, r1
 80a0e4c:	b200      	sxth	r0, r0
 80a0e4e:	6827      	ldr	r7, [r4, #0]
 80a0e50:	9000      	str	r0, [sp, #0]
 80a0e52:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a0e56:	6a7f      	ldr	r7, [r7, #36]	; 0x24
 80a0e58:	fb0e f303 	mul.w	r3, lr, r3
 80a0e5c:	b209      	sxth	r1, r1
 80a0e5e:	4620      	mov	r0, r4
 80a0e60:	47b8      	blx	r7
    }
    cursor_x += textsize*(w+fontKern);
 80a0e62:	7e22      	ldrb	r2, [r4, #24]
 80a0e64:	f994 301d 	ldrsb.w	r3, [r4, #29]
 80a0e68:	8a20      	ldrh	r0, [r4, #16]
 80a0e6a:	b291      	uxth	r1, r2
 80a0e6c:	4433      	add	r3, r6
 80a0e6e:	fb03 0301 	mla	r3, r3, r1, r0
    if (wrap && (cursor_x > (_width - textsize*w))) {
 80a0e72:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
	uint16_t w = fontDesc[c-fontStart].width;
	uint16_t h = fontDesc[c-fontStart].height;
    if (fontKern > 0 && textcolor != textbgcolor) {
      fillRect(cursor_x+w*textsize,cursor_y,fontKern*textsize,h*textsize,textbgcolor);
    }
    cursor_x += textsize*(w+fontKern);
 80a0e76:	b21b      	sxth	r3, r3
 80a0e78:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*w))) {
 80a0e7a:	b158      	cbz	r0, 80a0e94 <_ZN12Adafruit_GFX5writeEh+0xb4>
 80a0e7c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80a0e80:	fb06 0212 	mls	r2, r6, r2, r0
 80a0e84:	4293      	cmp	r3, r2
 80a0e86:	dd05      	ble.n	80a0e94 <_ZN12Adafruit_GFX5writeEh+0xb4>
      cursor_y += textsize*h;
 80a0e88:	8a63      	ldrh	r3, [r4, #18]
 80a0e8a:	fb01 3505 	mla	r5, r1, r5, r3
 80a0e8e:	8265      	strh	r5, [r4, #18]
      cursor_x = 0;
 80a0e90:	2300      	movs	r3, #0
 80a0e92:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
 80a0e94:	2001      	movs	r0, #1
 80a0e96:	b005      	add	sp, #20
 80a0e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a0e9c <_ZN12Adafruit_GFX7setFontEh>:
  // Default to GLCDFONT to be compatible with existing code
  setFont(GLCDFONT);		// May also be set to TIMESNR_8, CENTURY_8, COMICS_8 or TEST (for testing candidate fonts)
 }

void Adafruit_GFX::setFont(uint8_t f) {
  font = f;
 80a0e9c:	7681      	strb	r1, [r0, #26]
  switch(font) {
 80a0e9e:	2903      	cmp	r1, #3
 80a0ea0:	d813      	bhi.n	80a0eca <_ZN12Adafruit_GFX7setFontEh+0x2e>
 80a0ea2:	e8df f001 	tbb	[pc, r1]
 80a0ea6:	0602      	.short	0x0602
 80a0ea8:	0e0a      	.short	0x0e0a
#ifdef TIMESNEWROMAN8
    case TIMESNR_8:
      fontData = timesNewRoman_8ptBitmaps;
 80a0eaa:	4b0f      	ldr	r3, [pc, #60]	; (80a0ee8 <_ZN12Adafruit_GFX7setFontEh+0x4c>)
 80a0eac:	6203      	str	r3, [r0, #32]
	  fontDesc = timesNewRoman_8ptDescriptors;
 80a0eae:	4b0f      	ldr	r3, [pc, #60]	; (80a0eec <_ZN12Adafruit_GFX7setFontEh+0x50>)
 80a0eb0:	e010      	b.n	80a0ed4 <_ZN12Adafruit_GFX7setFontEh+0x38>
      fontKern = 1;
      break;
#endif
#ifdef CENTURYGOTHIC8
    case CENTURY_8:
      fontData = centuryGothic_8ptBitmaps;
 80a0eb2:	4b0f      	ldr	r3, [pc, #60]	; (80a0ef0 <_ZN12Adafruit_GFX7setFontEh+0x54>)
 80a0eb4:	6203      	str	r3, [r0, #32]
	  fontDesc = centuryGothic_8ptDescriptors;
 80a0eb6:	4b0f      	ldr	r3, [pc, #60]	; (80a0ef4 <_ZN12Adafruit_GFX7setFontEh+0x58>)
 80a0eb8:	e00c      	b.n	80a0ed4 <_ZN12Adafruit_GFX7setFontEh+0x38>
      fontKern = 1;
      break;
#endif
#ifdef ARIAL8
    case ARIAL_8:
      fontData = arial_8ptBitmaps;
 80a0eba:	4b0f      	ldr	r3, [pc, #60]	; (80a0ef8 <_ZN12Adafruit_GFX7setFontEh+0x5c>)
 80a0ebc:	6203      	str	r3, [r0, #32]
	  fontDesc = arial_8ptDescriptors;
 80a0ebe:	4b0f      	ldr	r3, [pc, #60]	; (80a0efc <_ZN12Adafruit_GFX7setFontEh+0x60>)
 80a0ec0:	e008      	b.n	80a0ed4 <_ZN12Adafruit_GFX7setFontEh+0x38>
      fontKern = 1;
      break;
#endif
#ifdef COMICSANSMS8
    case COMICS_8:
      fontData = comicSansMS_8ptBitmaps;
 80a0ec2:	4b0f      	ldr	r3, [pc, #60]	; (80a0f00 <_ZN12Adafruit_GFX7setFontEh+0x64>)
 80a0ec4:	6203      	str	r3, [r0, #32]
	  fontDesc = comicSansMS_8ptDescriptors;
 80a0ec6:	4b0f      	ldr	r3, [pc, #60]	; (80a0f04 <_ZN12Adafruit_GFX7setFontEh+0x68>)
 80a0ec8:	e004      	b.n	80a0ed4 <_ZN12Adafruit_GFX7setFontEh+0x38>
	  fontDesc = testDescriptors;
      fontKern = 1;
      break;
#endif
	default:
      font = GLCDFONT;
 80a0eca:	2304      	movs	r3, #4
 80a0ecc:	7683      	strb	r3, [r0, #26]
      fontData = glcdfontBitmaps;
 80a0ece:	4b0e      	ldr	r3, [pc, #56]	; (80a0f08 <_ZN12Adafruit_GFX7setFontEh+0x6c>)
 80a0ed0:	6203      	str	r3, [r0, #32]
	  fontDesc = glcdfontDescriptors;
 80a0ed2:	4b0e      	ldr	r3, [pc, #56]	; (80a0f0c <_ZN12Adafruit_GFX7setFontEh+0x70>)
 80a0ed4:	6243      	str	r3, [r0, #36]	; 0x24
      fontKern = 1;
 80a0ed6:	2301      	movs	r3, #1
 80a0ed8:	7743      	strb	r3, [r0, #29]
      break;
  }

  fontStart = pgm_read_byte(fontData+FONT_START);
 80a0eda:	6a03      	ldr	r3, [r0, #32]
 80a0edc:	781a      	ldrb	r2, [r3, #0]
 80a0ede:	76c2      	strb	r2, [r0, #27]
  fontEnd = pgm_read_byte(fontData+FONT_END);
 80a0ee0:	785b      	ldrb	r3, [r3, #1]
 80a0ee2:	7703      	strb	r3, [r0, #28]
 80a0ee4:	4770      	bx	lr
 80a0ee6:	bf00      	nop
 80a0ee8:	080a8d98 	.word	0x080a8d98
 80a0eec:	080a8c1c 	.word	0x080a8c1c
 80a0ef0:	080a7c24 	.word	0x080a7c24
 80a0ef4:	080a86a0 	.word	0x080a86a0
 80a0ef8:	080a76c8 	.word	0x080a76c8
 80a0efc:	080a7aa8 	.word	0x080a7aa8
 80a0f00:	080a8072 	.word	0x080a8072
 80a0f04:	080a8524 	.word	0x080a8524
 80a0f08:	080a6ece 	.word	0x080a6ece
 80a0f0c:	080a881c 	.word	0x080a881c

080a0f10 <_ZN12Adafruit_GFXC1Ess>:

#define pgm_read_byte(addr) (*(const uint8_t *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a0f10:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
  _height   = HEIGHT;
 80a0f12:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
 80a0f14:	f64f 72ff 	movw	r2, #65535	; 0xffff


#define pgm_read_byte(addr) (*(const uint8_t *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a0f18:	b538      	push	{r3, r4, r5, lr}
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0f1a:	2300      	movs	r3, #0
  WIDTH(w), HEIGHT(h)
 80a0f1c:	4d08      	ldr	r5, [pc, #32]	; (80a0f40 <_ZN12Adafruit_GFXC1Ess+0x30>)
 80a0f1e:	6043      	str	r3, [r0, #4]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
 80a0f20:	7643      	strb	r3, [r0, #25]
  cursor_y  = cursor_x    = 0;
 80a0f22:	8203      	strh	r3, [r0, #16]
 80a0f24:	8243      	strh	r3, [r0, #18]
  textsize  = 1;
 80a0f26:	2301      	movs	r3, #1

#define pgm_read_byte(addr) (*(const uint8_t *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a0f28:	8101      	strh	r1, [r0, #8]
{
  _width    = WIDTH;
 80a0f2a:	8181      	strh	r1, [r0, #12]

#define pgm_read_byte(addr) (*(const uint8_t *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a0f2c:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
 80a0f2e:	7603      	strb	r3, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 80a0f30:	82c2      	strh	r2, [r0, #22]
 80a0f32:	8282      	strh	r2, [r0, #20]
  wrap      = true;
 80a0f34:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  // Default to GLCDFONT to be compatible with existing code
  setFont(GLCDFONT);		// May also be set to TIMESNR_8, CENTURY_8, COMICS_8 or TEST (for testing candidate fonts)
 80a0f38:	2104      	movs	r1, #4
 80a0f3a:	f7ff ffaf 	bl	80a0e9c <_ZN12Adafruit_GFX7setFontEh>
 }
 80a0f3e:	bd38      	pop	{r3, r4, r5, pc}
 80a0f40:	080a6dfc 	.word	0x080a6dfc

080a0f44 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  drawChar(x,y,c,color,bg,size);
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 80a0f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0f48:	b08b      	sub	sp, #44	; 0x2c
 80a0f4a:	4692      	mov	sl, r2
 80a0f4c:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 80a0f50:	4604      	mov	r4, r0
 80a0f52:	9204      	str	r2, [sp, #16]
 80a0f54:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80a0f58:	460d      	mov	r5, r1
 80a0f5a:	9205      	str	r2, [sp, #20]

  if (c < fontStart || c > fontEnd) {
 80a0f5c:	7ec2      	ldrb	r2, [r0, #27]
  drawChar(x,y,c,color,bg,size);
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 80a0f5e:	f89d 6058 	ldrb.w	r6, [sp, #88]	; 0x58

  if (c < fontStart || c > fontEnd) {
 80a0f62:	429a      	cmp	r2, r3
 80a0f64:	d805      	bhi.n	80a0f72 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2e>
 80a0f66:	7f01      	ldrb	r1, [r0, #28]
 80a0f68:	4299      	cmp	r1, r3
 80a0f6a:	d302      	bcc.n	80a0f72 <_ZN12Adafruit_GFX8drawCharEsshtth+0x2e>
    c = 0;
  }
  else {
    c -= fontStart;
 80a0f6c:	1a9b      	subs	r3, r3, r2
 80a0f6e:	b2db      	uxtb	r3, r3
 80a0f70:	e000      	b.n	80a0f74 <_ZN12Adafruit_GFX8drawCharEsshtth+0x30>
// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {

  if (c < fontStart || c > fontEnd) {
    c = 0;
 80a0f72:	2300      	movs	r3, #0
  }
  else {
    c -= fontStart;
  }
 
  if((x >= _width)            || // Clip right
 80a0f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80a0f78:	42aa      	cmp	r2, r5
 80a0f7a:	dd7b      	ble.n	80a1074 <_ZN12Adafruit_GFX8drawCharEsshtth+0x130>
 80a0f7c:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
 80a0f80:	4552      	cmp	r2, sl
 80a0f82:	dd77      	ble.n	80a1074 <_ZN12Adafruit_GFX8drawCharEsshtth+0x130>
     (y >= _height)           || // Clip bottom
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 80a0f84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a0f86:	009a      	lsls	r2, r3, #2
  else {
    c -= fontStart;
  }
 
  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
 80a0f88:	f811 3023 	ldrb.w	r3, [r1, r3, lsl #2]
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 80a0f8c:	9207      	str	r2, [sp, #28]
  else {
    c -= fontStart;
  }
 
  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
 80a0f8e:	fb06 5303 	mla	r3, r6, r3, r5
 80a0f92:	2b00      	cmp	r3, #0
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 80a0f94:	440a      	add	r2, r1
  else {
    c -= fontStart;
  }
 
  if((x >= _width)            || // Clip right
     (y >= _height)           || // Clip bottom
 80a0f96:	dd6d      	ble.n	80a1074 <_ZN12Adafruit_GFX8drawCharEsshtth+0x130>
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
 80a0f98:	7853      	ldrb	r3, [r2, #1]
 80a0f9a:	fb06 a303 	mla	r3, r6, r3, sl
 80a0f9e:	2b00      	cmp	r3, #0
 80a0fa0:	dd68      	ble.n	80a1074 <_ZN12Adafruit_GFX8drawCharEsshtth+0x130>
     ((y + (fontDesc[c].height * size) - 1) < 0))   // Clip top
    return;

	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
 80a0fa2:	8853      	ldrh	r3, [r2, #2]
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+j, y+i, bg);
        else {  // big size
          fillRect(x+j*size, y+i*size, size, size, bg);
 80a0fa4:	fa0f f886 	sxth.w	r8, r6
     ((x + (fontDesc[c].width * size) - 1) < 0) || // Clip left
     ((y + (fontDesc[c].height * size) - 1) < 0))   // Clip top
    return;

	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
 80a0fa8:	3302      	adds	r3, #2
 80a0faa:	b29b      	uxth	r3, r3
 80a0fac:	9302      	str	r3, [sp, #8]
 80a0fae:	2300      	movs	r3, #0
 80a0fb0:	9303      	str	r3, [sp, #12]
      if (line & 0x80) {
        if (size == 1) {// default sizeFast
          drawPixel(x+j, y+i, color);
          }
        else {  // big size
          fillRect(x+(j*size), y+(i*size), size, size, color);
 80a0fb2:	b2b3      	uxth	r3, r6
 80a0fb4:	9306      	str	r3, [sp, #24]
    return;

	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
  
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
 80a0fb6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a0fb8:	9907      	ldr	r1, [sp, #28]
 80a0fba:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 80a0fbe:	440a      	add	r2, r1
 80a0fc0:	7852      	ldrb	r2, [r2, #1]
 80a0fc2:	4293      	cmp	r3, r2
 80a0fc4:	da56      	bge.n	80a1074 <_ZN12Adafruit_GFX8drawCharEsshtth+0x130>
      if (line & 0x80) {
        if (size == 1) {// default sizeFast
          drawPixel(x+j, y+i, color);
          }
        else {  // big size
          fillRect(x+(j*size), y+(i*size), size, size, color);
 80a0fc6:	9906      	ldr	r1, [sp, #24]
 80a0fc8:	b29b      	uxth	r3, r3
 80a0fca:	fa1f f28a 	uxth.w	r2, sl
 80a0fce:	fb03 2101 	mla	r1, r3, r1, r2
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+j, y+i, bg);
 80a0fd2:	4413      	add	r3, r2
      if (line & 0x80) {
        if (size == 1) {// default sizeFast
          drawPixel(x+j, y+i, color);
          }
        else {  // big size
          fillRect(x+(j*size), y+(i*size), size, size, color);
 80a0fd4:	b209      	sxth	r1, r1
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+j, y+i, bg);
 80a0fd6:	b21b      	sxth	r3, r3
      if (line & 0x80) {
        if (size == 1) {// default sizeFast
          drawPixel(x+j, y+i, color);
          }
        else {  // big size
          fillRect(x+(j*size), y+(i*size), size, size, color);
 80a0fd8:	9108      	str	r1, [sp, #32]
 80a0fda:	f04f 0900 	mov.w	r9, #0
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+j, y+i, bg);
 80a0fde:	9309      	str	r3, [sp, #36]	; 0x24
	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
  
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
    uint8_t line;
    for (int8_t j = 0; j<fontDesc[c].width; j++) {			//j<fontWidth
 80a0fe0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a0fe2:	9807      	ldr	r0, [sp, #28]
 80a0fe4:	fa4f f189 	sxtb.w	r1, r9
 80a0fe8:	5c12      	ldrb	r2, [r2, r0]
 80a0fea:	fa5f f389 	uxtb.w	r3, r9
 80a0fee:	4291      	cmp	r1, r2
 80a0ff0:	da3c      	bge.n	80a106c <_ZN12Adafruit_GFX8drawCharEsshtth+0x128>
      if (bitCount++%8 == 0) {
 80a0ff2:	075a      	lsls	r2, r3, #29
 80a0ff4:	d106      	bne.n	80a1004 <_ZN12Adafruit_GFX8drawCharEsshtth+0xc0>
        line = pgm_read_byte(fontData+fontIndex++);
 80a0ff6:	9b02      	ldr	r3, [sp, #8]
 80a0ff8:	9802      	ldr	r0, [sp, #8]
 80a0ffa:	6a22      	ldr	r2, [r4, #32]
 80a0ffc:	3301      	adds	r3, #1
 80a0ffe:	b29b      	uxth	r3, r3
 80a1000:	5c17      	ldrb	r7, [r2, r0]
 80a1002:	9302      	str	r3, [sp, #8]
      }
      if (line & 0x80) {
 80a1004:	063b      	lsls	r3, r7, #24
 80a1006:	d50d      	bpl.n	80a1024 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe0>
        if (size == 1) {// default sizeFast
 80a1008:	2e01      	cmp	r6, #1
 80a100a:	d105      	bne.n	80a1018 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd4>
          drawPixel(x+j, y+i, color);
 80a100c:	6823      	ldr	r3, [r4, #0]
 80a100e:	4429      	add	r1, r5
 80a1010:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a1014:	9b04      	ldr	r3, [sp, #16]
 80a1016:	e010      	b.n	80a103a <_ZN12Adafruit_GFX8drawCharEsshtth+0xf6>
          }
        else {  // big size
          fillRect(x+(j*size), y+(i*size), size, size, color);
 80a1018:	9b06      	ldr	r3, [sp, #24]
 80a101a:	9a04      	ldr	r2, [sp, #16]
 80a101c:	fb01 5103 	mla	r1, r1, r3, r5
 80a1020:	6823      	ldr	r3, [r4, #0]
 80a1022:	e014      	b.n	80a104e <_ZN12Adafruit_GFX8drawCharEsshtth+0x10a>
        } 
      } else if (bg != color) {
 80a1024:	9b04      	ldr	r3, [sp, #16]
 80a1026:	9a05      	ldr	r2, [sp, #20]
 80a1028:	4293      	cmp	r3, r2
 80a102a:	d01a      	beq.n	80a1062 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
        if (size == 1) // default size
 80a102c:	2e01      	cmp	r6, #1
 80a102e:	d109      	bne.n	80a1044 <_ZN12Adafruit_GFX8drawCharEsshtth+0x100>
          drawPixel(x+j, y+i, bg);
 80a1030:	6823      	ldr	r3, [r4, #0]
 80a1032:	4429      	add	r1, r5
 80a1034:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a1038:	4613      	mov	r3, r2
 80a103a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a103c:	b209      	sxth	r1, r1
 80a103e:	4620      	mov	r0, r4
 80a1040:	47d8      	blx	fp
 80a1042:	e00e      	b.n	80a1062 <_ZN12Adafruit_GFX8drawCharEsshtth+0x11e>
        else {  // big size
          fillRect(x+j*size, y+i*size, size, size, bg);
 80a1044:	9b06      	ldr	r3, [sp, #24]
 80a1046:	9a05      	ldr	r2, [sp, #20]
 80a1048:	fb01 5103 	mla	r1, r1, r3, r5
 80a104c:	6823      	ldr	r3, [r4, #0]
 80a104e:	9201      	str	r2, [sp, #4]
 80a1050:	f8cd 8000 	str.w	r8, [sp]
 80a1054:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a1058:	9a08      	ldr	r2, [sp, #32]
 80a105a:	4643      	mov	r3, r8
 80a105c:	b209      	sxth	r1, r1
 80a105e:	4620      	mov	r0, r4
 80a1060:	47d8      	blx	fp
        }
      }
      line <<= 1;
 80a1062:	007f      	lsls	r7, r7, #1
 80a1064:	b2ff      	uxtb	r7, r7
 80a1066:	f109 0901 	add.w	r9, r9, #1
	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
  
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
    uint8_t line;
    for (int8_t j = 0; j<fontDesc[c].width; j++) {			//j<fontWidth
 80a106a:	e7b9      	b.n	80a0fe0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x9c>
 80a106c:	9b03      	ldr	r3, [sp, #12]
 80a106e:	3301      	adds	r3, #1
 80a1070:	9303      	str	r3, [sp, #12]
    return;

	uint8_t bitCount=0;
  	uint16_t fontIndex = fontDesc[c].offset + 2; //((fontDesc + c)->offset) + 2;
  
  for (int8_t i=0; i<fontDesc[c].height; i++ ) {	// i<fontHeight
 80a1072:	e7a0      	b.n	80a0fb6 <_ZN12Adafruit_GFX8drawCharEsshtth+0x72>
      }
      line <<= 1;
    }
    bitCount = 0;
  }
}
 80a1074:	b00b      	add	sp, #44	; 0x2c
 80a1076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a107a <_ZN12Adafruit_GFX12drawFastCharEsshtth>:
  }
  return 1;
}

void Adafruit_GFX::drawFastChar(int16_t x, int16_t y, unsigned char c,
                                    uint16_t color, uint16_t bg, uint8_t size) {
 80a107a:	b470      	push	{r4, r5, r6}
 80a107c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 80a1080:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 80a1084:	f89d 6014 	ldrb.w	r6, [sp, #20]
  // Update in subclasses if desired!
  drawChar(x,y,c,color,bg,size);
 80a1088:	9504      	str	r5, [sp, #16]
 80a108a:	9605      	str	r6, [sp, #20]
 80a108c:	9403      	str	r4, [sp, #12]
}
 80a108e:	bc70      	pop	{r4, r5, r6}
}

void Adafruit_GFX::drawFastChar(int16_t x, int16_t y, unsigned char c,
                                    uint16_t color, uint16_t bg, uint8_t size) {
  // Update in subclasses if desired!
  drawChar(x,y,c,color,bg,size);
 80a1090:	f7ff bf58 	b.w	80a0f44 <_ZN12Adafruit_GFX8drawCharEsshtth>

080a1094 <_ZN12Adafruit_GFX9setCursorEss>:
    bitCount = 0;
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
 80a1094:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
 80a1096:	8242      	strh	r2, [r0, #18]
 80a1098:	4770      	bx	lr

080a109a <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
 80a109a:	2900      	cmp	r1, #0
 80a109c:	bf08      	it	eq
 80a109e:	2101      	moveq	r1, #1
 80a10a0:	7601      	strb	r1, [r0, #24]
 80a10a2:	4770      	bx	lr

080a10a4 <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
 80a10a4:	82c1      	strh	r1, [r0, #22]
 80a10a6:	8281      	strh	r1, [r0, #20]
 80a10a8:	4770      	bx	lr

080a10aa <_ZN12Adafruit_GFX12setTextColorEtt>:
}

void Adafruit_GFX::setTextColor(uint16_t c, uint16_t b) {
  textcolor   = c;
 80a10aa:	8281      	strh	r1, [r0, #20]
  textbgcolor = b; 
 80a10ac:	82c2      	strh	r2, [r0, #22]
 80a10ae:	4770      	bx	lr

080a10b0 <_ZN12Adafruit_GFX11setTextWrapEb>:
}

void Adafruit_GFX::setTextWrap(boolean w) {
  wrap = w;
 80a10b0:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
 80a10b4:	4770      	bx	lr

080a10b6 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a10b6:	f000 becd 	b.w	80a1e54 <HAL_Pin_Map>

080a10ba <_ZN15Adafruit_ST773510fillScreenEt>:
#endif
}



void Adafruit_ST7735::fillScreen(uint16_t color) {
 80a10ba:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0,  _width, _height, color);
 80a10bc:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a10c0:	6804      	ldr	r4, [r0, #0]
 80a10c2:	9101      	str	r1, [sp, #4]
 80a10c4:	9200      	str	r2, [sp, #0]
 80a10c6:	2200      	movs	r2, #0
 80a10c8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a10cc:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80a10ce:	4611      	mov	r1, r2
 80a10d0:	47a0      	blx	r4
}
 80a10d2:	b002      	add	sp, #8
 80a10d4:	bd10      	pop	{r4, pc}

080a10d6 <_ZN15Adafruit_ST7735D1Ev>:
#define ST7735_MAGENTA 0xF81F
#define ST7735_YELLOW  0xFFE0  
#define ST7735_WHITE   0xFFFF


class Adafruit_ST7735 : public Adafruit_GFX {
 80a10d6:	4770      	bx	lr

080a10d8 <_ZN15Adafruit_ST7735D0Ev>:
 80a10d8:	b510      	push	{r4, lr}
 80a10da:	4604      	mov	r4, r0
 80a10dc:	2130      	movs	r1, #48	; 0x30
 80a10de:	f003 fa1f 	bl	80a4520 <_ZdlPvj>
 80a10e2:	4620      	mov	r0, r4
 80a10e4:	bd10      	pop	{r4, pc}
	...

080a10e8 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>:
#define __AVR__
#endif

#if defined(SPARK)
inline void Adafruit_ST7735::spiwrite(uint8_t c) {
  SPI.transfer(c);
 80a10e8:	4601      	mov	r1, r0
 80a10ea:	4801      	ldr	r0, [pc, #4]	; (80a10f0 <_ZN15Adafruit_ST77358spiwriteEh.isra.0+0x8>)
 80a10ec:	f001 bb56 	b.w	80a279c <_ZN8SPIClass8transferEh>
 80a10f0:	200006a4 	.word	0x200006a4

080a10f4 <_ZN15Adafruit_ST7735C1Ehhh>:
}
#endif

// Constructor when using hardware SPI.  Faster, but must use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
Adafruit_ST7735::Adafruit_ST7735(uint8_t cs, uint8_t rs, uint8_t rst) :
 80a10f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a10f6:	4604      	mov	r4, r0
 80a10f8:	461d      	mov	r5, r3
 80a10fa:	460f      	mov	r7, r1
 80a10fc:	4616      	mov	r6, r2
    Adafruit_GFX(ST7735_TFTWIDTH, ST7735_TFTHEIGHT) {
 80a10fe:	2180      	movs	r1, #128	; 0x80
 80a1100:	22a0      	movs	r2, #160	; 0xa0
 80a1102:	f7ff ff05 	bl	80a0f10 <_ZN12Adafruit_GFXC1Ess>
 80a1106:	4b06      	ldr	r3, [pc, #24]	; (80a1120 <_ZN15Adafruit_ST7735C1Ehhh+0x2c>)
  _cs   = cs;
 80a1108:	f884 702b 	strb.w	r7, [r4, #43]	; 0x2b
#endif

// Constructor when using hardware SPI.  Faster, but must use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
Adafruit_ST7735::Adafruit_ST7735(uint8_t cs, uint8_t rs, uint8_t rst) :
    Adafruit_GFX(ST7735_TFTWIDTH, ST7735_TFTHEIGHT) {
 80a110c:	6023      	str	r3, [r4, #0]
  _cs   = cs;
  _rs   = rs;
  _rst  = rst;
  hwSPI = true;
 80a110e:	2301      	movs	r3, #1
// Constructor when using hardware SPI.  Faster, but must use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
Adafruit_ST7735::Adafruit_ST7735(uint8_t cs, uint8_t rs, uint8_t rst) :
    Adafruit_GFX(ST7735_TFTWIDTH, ST7735_TFTHEIGHT) {
  _cs   = cs;
  _rs   = rs;
 80a1110:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
  _rst  = rst;
 80a1114:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
  hwSPI = true;
 80a1118:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
#if !defined(SPARK)
  _sid  = _sclk = 0;
#endif
}
 80a111c:	4620      	mov	r0, r4
 80a111e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1120:	080a6e38 	.word	0x080a6e38

080a1124 <_ZN15Adafruit_ST773512writecommandEh>:
#if defined(SPARK)
inline void Adafruit_ST7735::spiwrite(uint8_t c) {
  SPI.transfer(c);
}

void Adafruit_ST7735::writecommand(uint8_t c) {
 80a1124:	b538      	push	{r3, r4, r5, lr}
 80a1126:	4604      	mov	r4, r0
 80a1128:	460d      	mov	r5, r1
  digitalWrite(_rs, LOW);
 80a112a:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80a112e:	2100      	movs	r1, #0
 80a1130:	f003 f9a5 	bl	80a447e <digitalWrite>
  digitalWrite(_cs, LOW);
 80a1134:	2100      	movs	r1, #0
 80a1136:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a113a:	f003 f9a0 	bl	80a447e <digitalWrite>
  spiwrite(c);
 80a113e:	4628      	mov	r0, r5
 80a1140:	f7ff ffd2 	bl	80a10e8 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
  digitalWrite(_cs, HIGH);
 80a1144:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a1148:	2101      	movs	r1, #1
}
 80a114a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_ST7735::writecommand(uint8_t c) {
  digitalWrite(_rs, LOW);
  digitalWrite(_cs, LOW);
  spiwrite(c);
  digitalWrite(_cs, HIGH);
 80a114e:	f003 b996 	b.w	80a447e <digitalWrite>

080a1152 <_ZN15Adafruit_ST773513invertDisplayEb>:
  }
}


void Adafruit_ST7735::invertDisplay(boolean i) {
  writecommand(i ? ST7735_INVON : ST7735_INVOFF);
 80a1152:	2900      	cmp	r1, #0
 80a1154:	bf14      	ite	ne
 80a1156:	2121      	movne	r1, #33	; 0x21
 80a1158:	2120      	moveq	r1, #32
 80a115a:	f7ff bfe3 	b.w	80a1124 <_ZN15Adafruit_ST773512writecommandEh>

080a115e <_ZN15Adafruit_ST77359writedataEh>:
  digitalWrite(_cs, LOW);
  spiwrite(c);
  digitalWrite(_cs, HIGH);
}

void Adafruit_ST7735::writedata(uint8_t c) {
 80a115e:	b538      	push	{r3, r4, r5, lr}
 80a1160:	4604      	mov	r4, r0
 80a1162:	460d      	mov	r5, r1
  digitalWrite(_rs, HIGH);
 80a1164:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80a1168:	2101      	movs	r1, #1
 80a116a:	f003 f988 	bl	80a447e <digitalWrite>
  digitalWrite(_cs, LOW); 
 80a116e:	2100      	movs	r1, #0
 80a1170:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a1174:	f003 f983 	bl	80a447e <digitalWrite>
  spiwrite(c);
 80a1178:	4628      	mov	r0, r5
 80a117a:	f7ff ffb5 	bl	80a10e8 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
  digitalWrite(_cs, HIGH);
 80a117e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a1182:	2101      	movs	r1, #1
} 
 80a1184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void Adafruit_ST7735::writedata(uint8_t c) {
  digitalWrite(_rs, HIGH);
  digitalWrite(_cs, LOW); 
  spiwrite(c);
  digitalWrite(_cs, HIGH);
 80a1188:	f003 b979 	b.w	80a447e <digitalWrite>

080a118c <_ZN15Adafruit_ST773511commandListEPKh>:



// Companion code to the above tables.  Reads and issues
// a series of LCD commands stored in PROGMEM byte array.
void Adafruit_ST7735::commandList(const uint8_t *addr) {
 80a118c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1190:	4680      	mov	r8, r0

  uint8_t  numCommands, numArgs;
  uint16_t ms;

  numCommands = pgm_read_byte(addr++);   // Number of commands to follow
 80a1192:	780f      	ldrb	r7, [r1, #0]
 80a1194:	1c4c      	adds	r4, r1, #1
  while(numCommands--) {                 // For each command...
 80a1196:	b347      	cbz	r7, 80a11ea <_ZN15Adafruit_ST773511commandListEPKh+0x5e>
    writecommand(pgm_read_byte(addr++)); //   Read, issue command
 80a1198:	4626      	mov	r6, r4
 80a119a:	4640      	mov	r0, r8
 80a119c:	f816 1b02 	ldrb.w	r1, [r6], #2
 80a11a0:	f7ff ffc0 	bl	80a1124 <_ZN15Adafruit_ST773512writecommandEh>
    numArgs  = pgm_read_byte(addr++);    //   Number of args to follow
 80a11a4:	7865      	ldrb	r5, [r4, #1]
 80a11a6:	46b2      	mov	sl, r6
 80a11a8:	f025 097f 	bic.w	r9, r5, #127	; 0x7f
    ms       = numArgs & DELAY;          //   If hibit set, delay follows args
    numArgs &= ~DELAY;                   //   Mask out delay bit
 80a11ac:	f005 057f 	and.w	r5, r5, #127	; 0x7f
 80a11b0:	462c      	mov	r4, r5
 80a11b2:	fa5f f989 	uxtb.w	r9, r9
    while(numArgs--) {                   //   For each argument...
 80a11b6:	3c01      	subs	r4, #1
 80a11b8:	b2e4      	uxtb	r4, r4
 80a11ba:	2cff      	cmp	r4, #255	; 0xff
 80a11bc:	d005      	beq.n	80a11ca <_ZN15Adafruit_ST773511commandListEPKh+0x3e>
      writedata(pgm_read_byte(addr++));  //     Read, issue argument
 80a11be:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80a11c2:	4640      	mov	r0, r8
 80a11c4:	f7ff ffcb 	bl	80a115e <_ZN15Adafruit_ST77359writedataEh>
  while(numCommands--) {                 // For each command...
    writecommand(pgm_read_byte(addr++)); //   Read, issue command
    numArgs  = pgm_read_byte(addr++);    //   Number of args to follow
    ms       = numArgs & DELAY;          //   If hibit set, delay follows args
    numArgs &= ~DELAY;                   //   Mask out delay bit
    while(numArgs--) {                   //   For each argument...
 80a11c8:	e7f5      	b.n	80a11b6 <_ZN15Adafruit_ST773511commandListEPKh+0x2a>
 80a11ca:	1974      	adds	r4, r6, r5
      writedata(pgm_read_byte(addr++));  //     Read, issue argument
    }

    if(ms) {
 80a11cc:	f1b9 0f00 	cmp.w	r9, #0
 80a11d0:	d102      	bne.n	80a11d8 <_ZN15Adafruit_ST773511commandListEPKh+0x4c>
 80a11d2:	3f01      	subs	r7, #1
 80a11d4:	b2ff      	uxtb	r7, r7
 80a11d6:	e7de      	b.n	80a1196 <_ZN15Adafruit_ST773511commandListEPKh+0xa>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 80a11d8:	5d70      	ldrb	r0, [r6, r5]
 80a11da:	3401      	adds	r4, #1
      if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 80a11dc:	28ff      	cmp	r0, #255	; 0xff
      delay(ms);
 80a11de:	bf08      	it	eq
 80a11e0:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 80a11e4:	f001 fc92 	bl	80a2b0c <delay>
 80a11e8:	e7f3      	b.n	80a11d2 <_ZN15Adafruit_ST773511commandListEPKh+0x46>
 80a11ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080a11f0 <_ZN15Adafruit_ST773510commonInitEPKh>:

}


// Initialization code common to both 'B' and 'R' type displays
void Adafruit_ST7735::commonInit(const uint8_t *cmdList) {
 80a11f0:	b570      	push	{r4, r5, r6, lr}
 80a11f2:	4604      	mov	r4, r0
  colstart  = rowstart = 0; // May be overridden in init func
 80a11f4:	2500      	movs	r5, #0
 80a11f6:	f880 502f 	strb.w	r5, [r0, #47]	; 0x2f
 80a11fa:	f880 502e 	strb.w	r5, [r0, #46]	; 0x2e

}


// Initialization code common to both 'B' and 'R' type displays
void Adafruit_ST7735::commonInit(const uint8_t *cmdList) {
 80a11fe:	460e      	mov	r6, r1
  colstart  = rowstart = 0; // May be overridden in init func

  pinMode(_rs, OUTPUT);
 80a1200:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80a1204:	2101      	movs	r1, #1
 80a1206:	f003 f929 	bl	80a445c <pinMode>
  pinMode(_cs, OUTPUT);
 80a120a:	2101      	movs	r1, #1
 80a120c:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a1210:	f003 f924 	bl	80a445c <pinMode>
#if defined(SPARK)
  SPI.begin();
 80a1214:	4825      	ldr	r0, [pc, #148]	; (80a12ac <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a1216:	f001 fa5b 	bl	80a26d0 <_ZN8SPIClass5beginEv>
  SPI.setClockDivider(SPI_CLOCK_DIV4); // 4 MHz (half speed)
 80a121a:	2108      	movs	r1, #8
 80a121c:	4823      	ldr	r0, [pc, #140]	; (80a12ac <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a121e:	f001 faa9 	bl	80a2774 <_ZN8SPIClass15setClockDividerEh>
  //Due defaults to 4mHz (clock divider setting of 21)
  SPI.setBitOrder(MSBFIRST);
 80a1222:	2101      	movs	r1, #1
 80a1224:	4821      	ldr	r0, [pc, #132]	; (80a12ac <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a1226:	f001 fa58 	bl	80a26da <_ZN8SPIClass11setBitOrderEh>
  SPI.setDataMode(SPI_MODE0);
 80a122a:	4629      	mov	r1, r5
 80a122c:	481f      	ldr	r0, [pc, #124]	; (80a12ac <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a122e:	f001 fa57 	bl	80a26e0 <_ZN8SPIClass11setDataModeEh>

#if !defined(SPARK)
  cspinmask = digitalPinToBitMask(_cs);
  rspinmask = digitalPinToBitMask(_rs);
#endif
  if(hwSPI) { // Using hardware SPI
 80a1232:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80a1236:	b153      	cbz	r3, 80a124e <_ZN15Adafruit_ST773510commonInitEPKh+0x5e>
    SPI.begin();
 80a1238:	481c      	ldr	r0, [pc, #112]	; (80a12ac <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a123a:	f001 fa49 	bl	80a26d0 <_ZN8SPIClass5beginEv>
#endif
#if defined(__SAM3X8E__)
    SPI.setClockDivider(21); // 4 MHz
    //Due defaults to 4mHz (clock divider setting of 21), but we'll set it anyway 
#endif
    SPI.setBitOrder(MSBFIRST);
 80a123e:	2101      	movs	r1, #1
 80a1240:	481a      	ldr	r0, [pc, #104]	; (80a12ac <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a1242:	f001 fa4a 	bl	80a26da <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 80a1246:	4629      	mov	r1, r5
 80a1248:	4818      	ldr	r0, [pc, #96]	; (80a12ac <_ZN15Adafruit_ST773510commonInitEPKh+0xbc>)
 80a124a:	f001 fa49 	bl	80a26e0 <_ZN8SPIClass11setDataModeEh>
#endif
  }

  // toggle RST low to reset; CS low so it'll listen to us
#if defined(SPARK)
	digitalWrite(_cs, LOW); // *csport &= ~cspinmask;
 80a124e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a1252:	2100      	movs	r1, #0
 80a1254:	f003 f913 	bl	80a447e <digitalWrite>
  *csport &= ~cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport ->PIO_CODR  |=  cspinmask; // Set control bits to LOW (idle)
#endif
  if (_rst) {
 80a1258:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80a125c:	b1e8      	cbz	r0, 80a129a <_ZN15Adafruit_ST773510commonInitEPKh+0xaa>
    pinMode(_rst, OUTPUT);
 80a125e:	2101      	movs	r1, #1
 80a1260:	f003 f8fc 	bl	80a445c <pinMode>
    digitalWrite(_rst, HIGH);
 80a1264:	2101      	movs	r1, #1
 80a1266:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80a126a:	f003 f908 	bl	80a447e <digitalWrite>
    delay(500);
 80a126e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1272:	f001 fc4b 	bl	80a2b0c <delay>
    digitalWrite(_rst, LOW);
 80a1276:	2100      	movs	r1, #0
 80a1278:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80a127c:	f003 f8ff 	bl	80a447e <digitalWrite>
    delay(500);
 80a1280:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1284:	f001 fc42 	bl	80a2b0c <delay>
    digitalWrite(_rst, HIGH);
 80a1288:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80a128c:	2101      	movs	r1, #1
 80a128e:	f003 f8f6 	bl	80a447e <digitalWrite>
    delay(500);
 80a1292:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80a1296:	f001 fc39 	bl	80a2b0c <delay>
  }

  if(cmdList) commandList(cmdList);
 80a129a:	b12e      	cbz	r6, 80a12a8 <_ZN15Adafruit_ST773510commonInitEPKh+0xb8>
 80a129c:	4631      	mov	r1, r6
 80a129e:	4620      	mov	r0, r4
}
 80a12a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(500);
    digitalWrite(_rst, HIGH);
    delay(500);
  }

  if(cmdList) commandList(cmdList);
 80a12a4:	f7ff bf72 	b.w	80a118c <_ZN15Adafruit_ST773511commandListEPKh>
 80a12a8:	bd70      	pop	{r4, r5, r6, pc}
 80a12aa:	bf00      	nop
 80a12ac:	200006a4 	.word	0x200006a4

080a12b0 <_ZN15Adafruit_ST77355initGEv>:
}


// Initialization for ST7735B screens
void Adafruit_ST7735::initG(void) {
  commonInit(Gcmd);
 80a12b0:	4901      	ldr	r1, [pc, #4]	; (80a12b8 <_ZN15Adafruit_ST77355initGEv+0x8>)
 80a12b2:	f7ff bf9d 	b.w	80a11f0 <_ZN15Adafruit_ST773510commonInitEPKh>
 80a12b6:	bf00      	nop
 80a12b8:	080a6e6c 	.word	0x080a6e6c

080a12bc <_ZN15Adafruit_ST773513setAddrWindowEhhhh>:
  tabcolor = options;
}


void Adafruit_ST7735::setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1,
 uint8_t y1) {
 80a12bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a12c0:	4604      	mov	r4, r0
 80a12c2:	4688      	mov	r8, r1
 80a12c4:	461f      	mov	r7, r3
 80a12c6:	4616      	mov	r6, r2

  writecommand(ST7735_CASET); // Column addr set
 80a12c8:	212a      	movs	r1, #42	; 0x2a
  tabcolor = options;
}


void Adafruit_ST7735::setAddrWindow(uint8_t x0, uint8_t y0, uint8_t x1,
 uint8_t y1) {
 80a12ca:	f89d 5018 	ldrb.w	r5, [sp, #24]

  writecommand(ST7735_CASET); // Column addr set
 80a12ce:	f7ff ff29 	bl	80a1124 <_ZN15Adafruit_ST773512writecommandEh>
  writedata(0x00);
 80a12d2:	4620      	mov	r0, r4
 80a12d4:	2100      	movs	r1, #0
 80a12d6:	f7ff ff42 	bl	80a115e <_ZN15Adafruit_ST77359writedataEh>
  writedata(x0+colstart);     // XSTART 
 80a12da:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 80a12de:	4620      	mov	r0, r4
 80a12e0:	4441      	add	r1, r8
 80a12e2:	b2c9      	uxtb	r1, r1
 80a12e4:	f7ff ff3b 	bl	80a115e <_ZN15Adafruit_ST77359writedataEh>
  writedata(0x00);
 80a12e8:	4620      	mov	r0, r4
 80a12ea:	2100      	movs	r1, #0
 80a12ec:	f7ff ff37 	bl	80a115e <_ZN15Adafruit_ST77359writedataEh>
  writedata(x1+colstart);     // XEND
 80a12f0:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 80a12f4:	4620      	mov	r0, r4
 80a12f6:	4439      	add	r1, r7
 80a12f8:	b2c9      	uxtb	r1, r1
 80a12fa:	f7ff ff30 	bl	80a115e <_ZN15Adafruit_ST77359writedataEh>

  writecommand(ST7735_RASET); // Row addr set
 80a12fe:	4620      	mov	r0, r4
 80a1300:	212b      	movs	r1, #43	; 0x2b
 80a1302:	f7ff ff0f 	bl	80a1124 <_ZN15Adafruit_ST773512writecommandEh>
  writedata(0x00);
 80a1306:	4620      	mov	r0, r4
 80a1308:	2100      	movs	r1, #0
 80a130a:	f7ff ff28 	bl	80a115e <_ZN15Adafruit_ST77359writedataEh>
  writedata(y0+rowstart);     // YSTART
 80a130e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80a1312:	4620      	mov	r0, r4
 80a1314:	4431      	add	r1, r6
 80a1316:	b2c9      	uxtb	r1, r1
 80a1318:	f7ff ff21 	bl	80a115e <_ZN15Adafruit_ST77359writedataEh>
  writedata(0x00);
 80a131c:	4620      	mov	r0, r4
 80a131e:	2100      	movs	r1, #0
 80a1320:	f7ff ff1d 	bl	80a115e <_ZN15Adafruit_ST77359writedataEh>
  writedata(y1+rowstart);     // YEND
 80a1324:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
 80a1328:	4620      	mov	r0, r4
 80a132a:	4429      	add	r1, r5
 80a132c:	b2c9      	uxtb	r1, r1
 80a132e:	f7ff ff16 	bl	80a115e <_ZN15Adafruit_ST77359writedataEh>

  writecommand(ST7735_RAMWR); // write to RAM
 80a1332:	4620      	mov	r0, r4
}
 80a1334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  writedata(0x00);
  writedata(y0+rowstart);     // YSTART
  writedata(0x00);
  writedata(y1+rowstart);     // YEND

  writecommand(ST7735_RAMWR); // write to RAM
 80a1338:	212c      	movs	r1, #44	; 0x2c
 80a133a:	f7ff bef3 	b.w	80a1124 <_ZN15Adafruit_ST773512writecommandEh>

080a133e <_ZN15Adafruit_ST773513drawFastVLineEssst>:
#endif
}


void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {
 80a133e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1340:	461c      	mov	r4, r3

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a1342:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
#endif
}


void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {
 80a1346:	4605      	mov	r5, r0

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a1348:	428b      	cmp	r3, r1
#endif
}


void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {
 80a134a:	f8bd 7020 	ldrh.w	r7, [sp, #32]

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a134e:	dd31      	ble.n	80a13b4 <_ZN15Adafruit_ST773513drawFastVLineEssst+0x76>
 80a1350:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a1354:	4290      	cmp	r0, r2
 80a1356:	dd2d      	ble.n	80a13b4 <_ZN15Adafruit_ST773513drawFastVLineEssst+0x76>
  if((y+h-1) >= _height) h = _height-y;
 80a1358:	1913      	adds	r3, r2, r4
 80a135a:	4283      	cmp	r3, r0
 80a135c:	bfc8      	it	gt
 80a135e:	1a84      	subgt	r4, r0, r2
  setAddrWindow(x, y, x, y+h-1);
 80a1360:	b2d2      	uxtb	r2, r2
void Adafruit_ST7735::drawFastVLine(int16_t x, int16_t y, int16_t h,
 uint16_t color) {

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
  if((y+h-1) >= _height) h = _height-y;
 80a1362:	bfc8      	it	gt
 80a1364:	b224      	sxthgt	r4, r4
  setAddrWindow(x, y, x, y+h-1);
 80a1366:	1e56      	subs	r6, r2, #1
 80a1368:	4426      	add	r6, r4
 80a136a:	b2cb      	uxtb	r3, r1
 80a136c:	b2f6      	uxtb	r6, r6
 80a136e:	4619      	mov	r1, r3
 80a1370:	9600      	str	r6, [sp, #0]
 80a1372:	4628      	mov	r0, r5
 80a1374:	f7ff ffa2 	bl	80a12bc <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;

#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
 80a1378:	2101      	movs	r1, #1
 80a137a:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
 80a137e:	f003 f87e 	bl	80a447e <digitalWrite>
  digitalWrite(_cs, LOW); 
 80a1382:	2100      	movs	r1, #0
 80a1384:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
  if((y+h-1) >= _height) h = _height-y;
  setAddrWindow(x, y, x, y+h-1);

  uint8_t hi = color >> 8, lo = color;
 80a1388:	0a3e      	lsrs	r6, r7, #8
 80a138a:	b2ff      	uxtb	r7, r7

#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
  digitalWrite(_cs, LOW); 
 80a138c:	f003 f877 	bl	80a447e <digitalWrite>
 80a1390:	b2a4      	uxth	r4, r4
#endif
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif
  while (h--) {
 80a1392:	b13c      	cbz	r4, 80a13a4 <_ZN15Adafruit_ST773513drawFastVLineEssst+0x66>
    spiwrite(hi);
 80a1394:	4630      	mov	r0, r6
 80a1396:	f7ff fea7 	bl	80a10e8 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
    spiwrite(lo);
 80a139a:	4638      	mov	r0, r7
 80a139c:	f7ff fea4 	bl	80a10e8 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
 80a13a0:	3c01      	subs	r4, #1
 80a13a2:	e7f5      	b.n	80a1390 <_ZN15Adafruit_ST773513drawFastVLineEssst+0x52>
  while (w--) {
    spiwrite(hi);
    spiwrite(lo);
  }
#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a13a4:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
 80a13a8:	2101      	movs	r1, #1
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a13aa:	b003      	add	sp, #12
 80a13ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  while (w--) {
    spiwrite(hi);
    spiwrite(lo);
  }
#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a13b0:	f003 b865 	b.w	80a447e <digitalWrite>
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a13b4:	b003      	add	sp, #12
 80a13b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a13b8 <_ZN15Adafruit_ST773513drawFastHLineEssst>:


void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {
 80a13b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a13ba:	461c      	mov	r4, r3

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a13bc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
#endif
}


void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {
 80a13c0:	4605      	mov	r5, r0

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a13c2:	428b      	cmp	r3, r1
#endif
}


void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {
 80a13c4:	f8bd 6020 	ldrh.w	r6, [sp, #32]

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
 80a13c8:	dd30      	ble.n	80a142c <_ZN15Adafruit_ST773513drawFastHLineEssst+0x74>
 80a13ca:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a13ce:	4290      	cmp	r0, r2
 80a13d0:	dd2c      	ble.n	80a142c <_ZN15Adafruit_ST773513drawFastHLineEssst+0x74>
  if((x+w-1) >= _width)  w = _width-x;
 80a13d2:	1908      	adds	r0, r1, r4
 80a13d4:	4298      	cmp	r0, r3
 80a13d6:	bfc8      	it	gt
 80a13d8:	1a5c      	subgt	r4, r3, r1
  setAddrWindow(x, y, x+w-1, y);
 80a13da:	b2c9      	uxtb	r1, r1
void Adafruit_ST7735::drawFastHLine(int16_t x, int16_t y, int16_t w,
  uint16_t color) {

  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
  if((x+w-1) >= _width)  w = _width-x;
 80a13dc:	bfc8      	it	gt
 80a13de:	b224      	sxthgt	r4, r4
  setAddrWindow(x, y, x+w-1, y);
 80a13e0:	1e4b      	subs	r3, r1, #1
 80a13e2:	b2d2      	uxtb	r2, r2
 80a13e4:	4423      	add	r3, r4
 80a13e6:	9200      	str	r2, [sp, #0]
 80a13e8:	b2db      	uxtb	r3, r3
 80a13ea:	4628      	mov	r0, r5
 80a13ec:	f7ff ff66 	bl	80a12bc <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;
#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
 80a13f0:	2101      	movs	r1, #1
 80a13f2:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
 80a13f6:	f003 f842 	bl	80a447e <digitalWrite>
  digitalWrite(_cs, LOW); 
 80a13fa:	2100      	movs	r1, #0
 80a13fc:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
  // Rudimentary clipping
  if((x >= _width) || (y >= _height)) return;
  if((x+w-1) >= _width)  w = _width-x;
  setAddrWindow(x, y, x+w-1, y);

  uint8_t hi = color >> 8, lo = color;
 80a1400:	0a37      	lsrs	r7, r6, #8
 80a1402:	b2f6      	uxtb	r6, r6
#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
  digitalWrite(_cs, LOW); 
 80a1404:	f003 f83b 	bl	80a447e <digitalWrite>
 80a1408:	b2a4      	uxth	r4, r4
#endif
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif
  while (w--) {
 80a140a:	b13c      	cbz	r4, 80a141c <_ZN15Adafruit_ST773513drawFastHLineEssst+0x64>
    spiwrite(hi);
 80a140c:	4638      	mov	r0, r7
 80a140e:	f7ff fe6b 	bl	80a10e8 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
    spiwrite(lo);
 80a1412:	4630      	mov	r0, r6
 80a1414:	f7ff fe68 	bl	80a10e8 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
 80a1418:	3c01      	subs	r4, #1
 80a141a:	e7f5      	b.n	80a1408 <_ZN15Adafruit_ST773513drawFastHLineEssst+0x50>
  }
#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a141c:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
 80a1420:	2101      	movs	r1, #1
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a1422:	b003      	add	sp, #12
 80a1424:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  while (w--) {
    spiwrite(hi);
    spiwrite(lo);
  }
#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a1428:	f003 b829 	b.w	80a447e <digitalWrite>
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a142c:	b003      	add	sp, #12
 80a142e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1430 <_ZN15Adafruit_ST77358fillRectEsssst>:



// fill a rectangle
void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {
 80a1430:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80a1434:	4605      	mov	r5, r0

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
 80a1436:	f9b0 000c 	ldrsh.w	r0, [r0, #12]



// fill a rectangle
void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {
 80a143a:	461e      	mov	r6, r3

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
 80a143c:	4288      	cmp	r0, r1



// fill a rectangle
void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {
 80a143e:	f9bd 4028 	ldrsh.w	r4, [sp, #40]	; 0x28
 80a1442:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
 80a1446:	dd44      	ble.n	80a14d2 <_ZN15Adafruit_ST77358fillRectEsssst+0xa2>
 80a1448:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80a144c:	4293      	cmp	r3, r2
 80a144e:	dd40      	ble.n	80a14d2 <_ZN15Adafruit_ST77358fillRectEsssst+0xa2>
  if((x + w - 1) >= _width)  w = _width  - x;
 80a1450:	eb01 0e06 	add.w	lr, r1, r6
 80a1454:	4586      	cmp	lr, r0
 80a1456:	bfc8      	it	gt
 80a1458:	1a46      	subgt	r6, r0, r1
  if((y + h - 1) >= _height) h = _height - y;
 80a145a:	eb02 0004 	add.w	r0, r2, r4
void Adafruit_ST7735::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
  uint16_t color) {

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
  if((x + w - 1) >= _width)  w = _width  - x;
 80a145e:	bfc8      	it	gt
 80a1460:	b236      	sxthgt	r6, r6
  if((y + h - 1) >= _height) h = _height - y;
 80a1462:	4298      	cmp	r0, r3
 80a1464:	bfc8      	it	gt
 80a1466:	1a9c      	subgt	r4, r3, r2

  setAddrWindow(x, y, x+w-1, y+h-1);
 80a1468:	b2d2      	uxtb	r2, r2
  uint16_t color) {

  // rudimentary clipping (drawChar w/big text requires this)
  if((x >= _width) || (y >= _height)) return;
  if((x + w - 1) >= _width)  w = _width  - x;
  if((y + h - 1) >= _height) h = _height - y;
 80a146a:	bfc8      	it	gt
 80a146c:	b224      	sxthgt	r4, r4

  setAddrWindow(x, y, x+w-1, y+h-1);
 80a146e:	b2c9      	uxtb	r1, r1
 80a1470:	1e50      	subs	r0, r2, #1
 80a1472:	1e4b      	subs	r3, r1, #1
 80a1474:	4420      	add	r0, r4
 80a1476:	b2c0      	uxtb	r0, r0
 80a1478:	4433      	add	r3, r6
 80a147a:	9000      	str	r0, [sp, #0]
 80a147c:	b2db      	uxtb	r3, r3
 80a147e:	4628      	mov	r0, r5
 80a1480:	f7ff ff1c 	bl	80a12bc <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

  uint8_t hi = color >> 8, lo = color;
#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
 80a1484:	2101      	movs	r1, #1
 80a1486:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
 80a148a:	f002 fff8 	bl	80a447e <digitalWrite>
  digitalWrite(_cs, LOW); 
 80a148e:	2100      	movs	r1, #0
 80a1490:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
  if((x + w - 1) >= _width)  w = _width  - x;
  if((y + h - 1) >= _height) h = _height - y;

  setAddrWindow(x, y, x+w-1, y+h-1);

  uint8_t hi = color >> 8, lo = color;
 80a1494:	ea4f 2817 	mov.w	r8, r7, lsr #8
 80a1498:	fa5f f987 	uxtb.w	r9, r7
#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
  digitalWrite(_cs, LOW); 
 80a149c:	f002 ffef 	bl	80a447e <digitalWrite>
#endif
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif
  for(y=h; y>0; y--) {
 80a14a0:	2c00      	cmp	r4, #0
 80a14a2:	dd0e      	ble.n	80a14c2 <_ZN15Adafruit_ST77358fillRectEsssst+0x92>
 80a14a4:	4637      	mov	r7, r6
    for(x=w; x>0; x--) {
 80a14a6:	2f00      	cmp	r7, #0
 80a14a8:	dd08      	ble.n	80a14bc <_ZN15Adafruit_ST77358fillRectEsssst+0x8c>
      spiwrite(hi);
 80a14aa:	4640      	mov	r0, r8
 80a14ac:	f7ff fe1c 	bl	80a10e8 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
 80a14b0:	3f01      	subs	r7, #1
      spiwrite(lo);
 80a14b2:	4648      	mov	r0, r9
 80a14b4:	f7ff fe18 	bl	80a10e8 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
 80a14b8:	b23f      	sxth	r7, r7
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif
  for(y=h; y>0; y--) {
    for(x=w; x>0; x--) {
 80a14ba:	e7f4      	b.n	80a14a6 <_ZN15Adafruit_ST77358fillRectEsssst+0x76>
 80a14bc:	3c01      	subs	r4, #1
 80a14be:	b224      	sxth	r4, r4
#endif
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif
  for(y=h; y>0; y--) {
 80a14c0:	e7ee      	b.n	80a14a0 <_ZN15Adafruit_ST77358fillRectEsssst+0x70>
      spiwrite(lo);
    }
  }

#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a14c2:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
 80a14c6:	2101      	movs	r1, #1
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a14c8:	b003      	add	sp, #12
 80a14ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
      spiwrite(lo);
    }
  }

#if defined(SPARK)
  digitalWrite(_cs, HIGH); 
 80a14ce:	f002 bfd6 	b.w	80a447e <digitalWrite>
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a14d2:	b003      	add	sp, #12
 80a14d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a14d8 <_ZN15Adafruit_ST77359drawPixelEsst>:
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}

void Adafruit_ST7735::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a14d8:	b573      	push	{r0, r1, r4, r5, r6, lr}

  if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
 80a14da:	2900      	cmp	r1, #0
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}

void Adafruit_ST7735::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a14dc:	4604      	mov	r4, r0
 80a14de:	461e      	mov	r6, r3

  if((x < 0) ||(x >= _width) || (y < 0) || (y >= _height)) return;
 80a14e0:	db2a      	blt.n	80a1538 <_ZN15Adafruit_ST77359drawPixelEsst+0x60>
 80a14e2:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a14e6:	428b      	cmp	r3, r1
 80a14e8:	dd26      	ble.n	80a1538 <_ZN15Adafruit_ST77359drawPixelEsst+0x60>
 80a14ea:	2a00      	cmp	r2, #0
 80a14ec:	db24      	blt.n	80a1538 <_ZN15Adafruit_ST77359drawPixelEsst+0x60>
 80a14ee:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 80a14f2:	4293      	cmp	r3, r2
 80a14f4:	dd20      	ble.n	80a1538 <_ZN15Adafruit_ST77359drawPixelEsst+0x60>

  setAddrWindow(x,y,x+1,y+1);
 80a14f6:	b2d2      	uxtb	r2, r2
 80a14f8:	1c55      	adds	r5, r2, #1
 80a14fa:	b2c9      	uxtb	r1, r1
 80a14fc:	1c4b      	adds	r3, r1, #1
 80a14fe:	b2ed      	uxtb	r5, r5
 80a1500:	b2db      	uxtb	r3, r3
 80a1502:	9500      	str	r5, [sp, #0]
 80a1504:	f7ff feda 	bl	80a12bc <_ZN15Adafruit_ST773513setAddrWindowEhhhh>

#if defined(SPARK)
  digitalWrite(_rs, HIGH); 
 80a1508:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 80a150c:	2101      	movs	r1, #1
 80a150e:	f002 ffb6 	bl	80a447e <digitalWrite>
  digitalWrite(_cs, LOW); 
 80a1512:	2100      	movs	r1, #0
 80a1514:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a1518:	f002 ffb1 	bl	80a447e <digitalWrite>
#if defined(__SAM3X8E__)
  rsport->PIO_SODR |=  rspinmask;
  csport->PIO_CODR  |=  cspinmask;
#endif

  spiwrite(color >> 8);
 80a151c:	0a30      	lsrs	r0, r6, #8
 80a151e:	f7ff fde3 	bl	80a10e8 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>
  spiwrite(color);
 80a1522:	b2f0      	uxtb	r0, r6
 80a1524:	f7ff fde0 	bl	80a10e8 <_ZN15Adafruit_ST77358spiwriteEh.isra.0>

#if defined(SPARK)
    digitalWrite(_cs, HIGH); 
 80a1528:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80a152c:	2101      	movs	r1, #1
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a152e:	b002      	add	sp, #8
 80a1530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

  spiwrite(color >> 8);
  spiwrite(color);

#if defined(SPARK)
    digitalWrite(_cs, HIGH); 
 80a1534:	f002 bfa3 	b.w	80a447e <digitalWrite>
  *csport |= cspinmask;
#endif
#if defined(__SAM3X8E__)
  csport->PIO_SODR  |=  cspinmask;
#endif
}
 80a1538:	b002      	add	sp, #8
 80a153a:	bd70      	pop	{r4, r5, r6, pc}

080a153c <_ZN15Adafruit_ST773511setRotationEh>:
#define MADCTL_ML  0x10
#define MADCTL_RGB 0x00
#define MADCTL_BGR 0x08
#define MADCTL_MH  0x04

void Adafruit_ST7735::setRotation(uint8_t m) {
 80a153c:	b538      	push	{r3, r4, r5, lr}
 80a153e:	460d      	mov	r5, r1
 80a1540:	4604      	mov	r4, r0

  writecommand(ST7735_MADCTL);
 80a1542:	2136      	movs	r1, #54	; 0x36
 80a1544:	f7ff fdee 	bl	80a1124 <_ZN15Adafruit_ST773512writecommandEh>
  rotation = m % 4; // can't be higher than 3
 80a1548:	f005 0103 	and.w	r1, r5, #3
  switch (rotation) {
 80a154c:	2902      	cmp	r1, #2
#define MADCTL_MH  0x04

void Adafruit_ST7735::setRotation(uint8_t m) {

  writecommand(ST7735_MADCTL);
  rotation = m % 4; // can't be higher than 3
 80a154e:	7661      	strb	r1, [r4, #25]
 80a1550:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
  switch (rotation) {
 80a1554:	d01a      	beq.n	80a158c <_ZN15Adafruit_ST773511setRotationEh+0x50>
 80a1556:	2903      	cmp	r1, #3
 80a1558:	d01d      	beq.n	80a1596 <_ZN15Adafruit_ST773511setRotationEh+0x5a>
 80a155a:	2901      	cmp	r1, #1
 80a155c:	d00a      	beq.n	80a1574 <_ZN15Adafruit_ST773511setRotationEh+0x38>
   case 0:
     if (tabcolor == INITR_BLACKTAB) {
 80a155e:	2b02      	cmp	r3, #2
       writedata(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
 80a1560:	bf0c      	ite	eq
 80a1562:	21c0      	moveq	r1, #192	; 0xc0
     } else {
       writedata(MADCTL_MX | MADCTL_MY | MADCTL_BGR);
 80a1564:	21c8      	movne	r1, #200	; 0xc8
 80a1566:	4620      	mov	r0, r4
 80a1568:	f7ff fdf9 	bl	80a115e <_ZN15Adafruit_ST77359writedataEh>
     }
     _width  = ST7735_TFTWIDTH;
 80a156c:	2380      	movs	r3, #128	; 0x80
 80a156e:	81a3      	strh	r3, [r4, #12]
     _height = ST7735_TFTHEIGHT;
 80a1570:	23a0      	movs	r3, #160	; 0xa0
 80a1572:	e009      	b.n	80a1588 <_ZN15Adafruit_ST773511setRotationEh+0x4c>
     break;
   case 1:
     if (tabcolor == INITR_BLACKTAB) {
 80a1574:	2b02      	cmp	r3, #2
       writedata(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
 80a1576:	bf0c      	ite	eq
 80a1578:	21a0      	moveq	r1, #160	; 0xa0
     } else {
       writedata(MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 80a157a:	21a8      	movne	r1, #168	; 0xa8
 80a157c:	4620      	mov	r0, r4
 80a157e:	f7ff fdee 	bl	80a115e <_ZN15Adafruit_ST77359writedataEh>
     }
     _width  = ST7735_TFTHEIGHT;
 80a1582:	23a0      	movs	r3, #160	; 0xa0
 80a1584:	81a3      	strh	r3, [r4, #12]
     _height = ST7735_TFTWIDTH;
 80a1586:	2380      	movs	r3, #128	; 0x80
 80a1588:	81e3      	strh	r3, [r4, #14]
     break;
 80a158a:	bd38      	pop	{r3, r4, r5, pc}
  case 2:
     if (tabcolor == INITR_BLACKTAB) {
 80a158c:	2b02      	cmp	r3, #2
       writedata(MADCTL_RGB);
 80a158e:	bf0c      	ite	eq
 80a1590:	2100      	moveq	r1, #0
     } else {
       writedata(MADCTL_BGR);
 80a1592:	2108      	movne	r1, #8
 80a1594:	e7e7      	b.n	80a1566 <_ZN15Adafruit_ST773511setRotationEh+0x2a>
     }
     _width  = ST7735_TFTWIDTH;
     _height = ST7735_TFTHEIGHT;
    break;
   case 3:
     if (tabcolor == INITR_BLACKTAB) {
 80a1596:	2b02      	cmp	r3, #2
       writedata(MADCTL_MX | MADCTL_MV | MADCTL_RGB);
 80a1598:	bf0c      	ite	eq
 80a159a:	2160      	moveq	r1, #96	; 0x60
     } else {
       writedata(MADCTL_MX | MADCTL_MV | MADCTL_BGR);
 80a159c:	2168      	movne	r1, #104	; 0x68
 80a159e:	e7ed      	b.n	80a157c <_ZN15Adafruit_ST773511setRotationEh+0x40>

080a15a0 <_GLOBAL__sub_I__ZN15Adafruit_ST7735C2Ehhh>:
 80a15a0:	f000 bc58 	b.w	80a1e54 <HAL_Pin_Map>

080a15a4 <_GLOBAL__sub_I_timesNewRoman_8ptBitmaps>:
 80a15a4:	f000 bc56 	b.w	80a1e54 <HAL_Pin_Map>

080a15a8 <_ZN3DHTC1Ehhh>:
 * modified for Spark Core by RussGrue
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
 80a15a8:	b510      	push	{r4, lr}
	_pin = pin;
	_type = type;
	_count = count;
 80a15aa:	7203      	strb	r3, [r0, #8]
	firstreading = true;
 80a15ac:	2301      	movs	r3, #1
 * */

#include "Adafruit_DHT_Particle.h"

DHT::DHT(uint8_t pin, uint8_t type, uint8_t count) {
	_pin = pin;
 80a15ae:	7181      	strb	r1, [r0, #6]
	_type = type;
 80a15b0:	71c2      	strb	r2, [r0, #7]
	_count = count;
	firstreading = true;
 80a15b2:	7403      	strb	r3, [r0, #16]
}
 80a15b4:	bd10      	pop	{r4, pc}

080a15b6 <_ZN3DHT5beginEv>:

void DHT::begin(void) {
 80a15b6:	b510      	push	{r4, lr}
 80a15b8:	4604      	mov	r4, r0
// set up the pins!
	pinMode(_pin, INPUT);
 80a15ba:	2100      	movs	r1, #0
 80a15bc:	7980      	ldrb	r0, [r0, #6]
 80a15be:	f002 ff4d 	bl	80a445c <pinMode>
	digitalWrite(_pin, HIGH);
 80a15c2:	2101      	movs	r1, #1
 80a15c4:	79a0      	ldrb	r0, [r4, #6]
 80a15c6:	f002 ff5a 	bl	80a447e <digitalWrite>
	_lastreadtime = 0;
 80a15ca:	2300      	movs	r3, #0
 80a15cc:	60e3      	str	r3, [r4, #12]
 80a15ce:	bd10      	pop	{r4, pc}

080a15d0 <_ZN3DHT4readEv>:
	double Td = (b * tC) / (a - tC);
	return Td;
}


boolean DHT::read(void) {
 80a15d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a15d4:	4604      	mov	r4, r0
 80a15d6:	f000 fbe5 	bl	80a1da4 <HAL_Timer_Get_Milli_Seconds>
	unsigned long currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime) {
 80a15da:	68e3      	ldr	r3, [r4, #12]
 80a15dc:	4283      	cmp	r3, r0
// ie there was a rollover
		_lastreadtime = 0;
 80a15de:	bf84      	itt	hi
 80a15e0:	2300      	movhi	r3, #0
 80a15e2:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
 80a15e4:	7c23      	ldrb	r3, [r4, #16]
 80a15e6:	b93b      	cbnz	r3, 80a15f8 <_ZN3DHT4readEv+0x28>
 80a15e8:	68e3      	ldr	r3, [r4, #12]
 80a15ea:	1ac0      	subs	r0, r0, r3
 80a15ec:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80a15f0:	d202      	bcs.n	80a15f8 <_ZN3DHT4readEv+0x28>
		return true; // return last correct measurement
 80a15f2:	2001      	movs	r0, #1
 80a15f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
 80a15f8:	2500      	movs	r5, #0
 80a15fa:	7425      	strb	r5, [r4, #16]
 80a15fc:	f000 fbd2 	bl	80a1da4 <HAL_Timer_Get_Milli_Seconds>
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 80a1600:	2101      	movs	r1, #1
	firstreading = false;
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
 80a1602:	60e0      	str	r0, [r4, #12]

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a1604:	7125      	strb	r5, [r4, #4]
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 80a1606:	79a0      	ldrb	r0, [r4, #6]
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
 80a1608:	70e5      	strb	r5, [r4, #3]
 80a160a:	70a5      	strb	r5, [r4, #2]
 80a160c:	7065      	strb	r5, [r4, #1]
 80a160e:	7025      	strb	r5, [r4, #0]
  
// pull the pin high and wait 250 milliseconds
	digitalWrite(_pin, HIGH);
 80a1610:	f002 ff35 	bl	80a447e <digitalWrite>
	delay(250);
 80a1614:	20fa      	movs	r0, #250	; 0xfa
 80a1616:	f001 fa79 	bl	80a2b0c <delay>

// now pull it low for ~20 milliseconds
	pinMode(_pin, OUTPUT);
 80a161a:	2101      	movs	r1, #1
 80a161c:	79a0      	ldrb	r0, [r4, #6]
 80a161e:	f002 ff1d 	bl	80a445c <pinMode>
	digitalWrite(_pin, LOW);
 80a1622:	4629      	mov	r1, r5
 80a1624:	79a0      	ldrb	r0, [r4, #6]
 80a1626:	f002 ff2a 	bl	80a447e <digitalWrite>
	delay(20);
 80a162a:	2014      	movs	r0, #20
 80a162c:	f001 fa6e 	bl	80a2b0c <delay>
	noInterrupts();
 80a1630:	f001 fb20 	bl	80a2c74 <_Z12noInterruptsv>
	digitalWrite(_pin, HIGH);
 80a1634:	2101      	movs	r1, #1
 80a1636:	79a0      	ldrb	r0, [r4, #6]
 80a1638:	f002 ff21 	bl	80a447e <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a163c:	2028      	movs	r0, #40	; 0x28
 80a163e:	f000 fba9 	bl	80a1d94 <HAL_Delay_Microseconds>
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
 80a1642:	4629      	mov	r1, r5
 80a1644:	79a0      	ldrb	r0, [r4, #6]
 80a1646:	f002 ff09 	bl	80a445c <pinMode>


boolean DHT::read(void) {
	uint8_t laststate = HIGH;
	uint8_t counter = 0;
	uint8_t j = 0, i;
 80a164a:	462e      	mov	r6, r5
	return Td;
}


boolean DHT::read(void) {
	uint8_t laststate = HIGH;
 80a164c:	2701      	movs	r7, #1
 80a164e:	f04f 0800 	mov.w	r8, #0
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (digitalRead(_pin) == laststate) {
 80a1652:	79a0      	ldrb	r0, [r4, #6]
 80a1654:	f002 ff2c 	bl	80a44b0 <digitalRead>
 80a1658:	42b8      	cmp	r0, r7
 80a165a:	fa5f f988 	uxtb.w	r9, r8
 80a165e:	d108      	bne.n	80a1672 <_ZN3DHT4readEv+0xa2>
 80a1660:	2001      	movs	r0, #1
 80a1662:	f108 0801 	add.w	r8, r8, #1
 80a1666:	f000 fb95 	bl	80a1d94 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
 80a166a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80a166e:	d1f0      	bne.n	80a1652 <_ZN3DHT4readEv+0x82>
 80a1670:	46c1      	mov	r9, r8
				break;
			}
		}
		laststate = digitalRead(_pin);
 80a1672:	79a0      	ldrb	r0, [r4, #6]
 80a1674:	f002 ff1c 	bl	80a44b0 <digitalRead>

		if (counter == 255) break;
 80a1678:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = digitalRead(_pin);
 80a167c:	b2c7      	uxtb	r7, r0

		if (counter == 255) break;
 80a167e:	d014      	beq.n	80a16aa <_ZN3DHT4readEv+0xda>

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
 80a1680:	2d03      	cmp	r5, #3
 80a1682:	d90e      	bls.n	80a16a2 <_ZN3DHT4readEv+0xd2>
 80a1684:	07eb      	lsls	r3, r5, #31
 80a1686:	d40c      	bmi.n	80a16a2 <_ZN3DHT4readEv+0xd2>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 80a1688:	08f2      	lsrs	r2, r6, #3
 80a168a:	5ca3      	ldrb	r3, [r4, r2]
			if (counter > _count)
				data[j/8] |= 1;
			j++;
 80a168c:	3601      	adds	r6, #1
		if (counter == 255) break;

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
 80a168e:	005b      	lsls	r3, r3, #1
 80a1690:	b2db      	uxtb	r3, r3
 80a1692:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
 80a1694:	7a21      	ldrb	r1, [r4, #8]
				data[j/8] |= 1;
			j++;
 80a1696:	b2f6      	uxtb	r6, r6

// ignore first 3 transitions
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
			if (counter > _count)
 80a1698:	4549      	cmp	r1, r9
				data[j/8] |= 1;
 80a169a:	bf3c      	itt	cc
 80a169c:	f043 0301 	orrcc.w	r3, r3, #1
 80a16a0:	54a3      	strbcc	r3, [r4, r2]
	digitalWrite(_pin, HIGH);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read in timings
	for ( i=0; i< MAXTIMINGS; i++) {
 80a16a2:	3501      	adds	r5, #1
 80a16a4:	b2ed      	uxtb	r5, r5
 80a16a6:	2d55      	cmp	r5, #85	; 0x55
 80a16a8:	d1d1      	bne.n	80a164e <_ZN3DHT4readEv+0x7e>
			j++;
		}

	}

	interrupts();
 80a16aa:	f001 fae5 	bl	80a2c78 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// check we read 40 bits and that the checksum matches
	if ((j >= 40) && 
 80a16ae:	2e27      	cmp	r6, #39	; 0x27
 80a16b0:	d90a      	bls.n	80a16c8 <_ZN3DHT4readEv+0xf8>
 80a16b2:	7822      	ldrb	r2, [r4, #0]
 80a16b4:	7863      	ldrb	r3, [r4, #1]
 80a16b6:	7921      	ldrb	r1, [r4, #4]
 80a16b8:	4413      	add	r3, r2
 80a16ba:	78a2      	ldrb	r2, [r4, #2]
 80a16bc:	4413      	add	r3, r2
 80a16be:	78e2      	ldrb	r2, [r4, #3]
 80a16c0:	4413      	add	r3, r2
 80a16c2:	b2db      	uxtb	r3, r3
 80a16c4:	4299      	cmp	r1, r3
 80a16c6:	d094      	beq.n	80a15f2 <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}
 
	return false;
 80a16c8:	2000      	movs	r0, #0

}
 80a16ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080a16d0 <_ZN3DHT15readTemperatureEv>:
	pinMode(_pin, INPUT);
	digitalWrite(_pin, HIGH);
	_lastreadtime = 0;
}

float DHT::readTemperature() {
 80a16d0:	b570      	push	{r4, r5, r6, lr}
 80a16d2:	4604      	mov	r4, r0
	float f;

	if (read()) {
 80a16d4:	f7ff ff7c 	bl	80a15d0 <_ZN3DHT4readEv>
 80a16d8:	b318      	cbz	r0, 80a1722 <_ZN3DHT15readTemperatureEv+0x52>
		switch (_type) {
 80a16da:	79e3      	ldrb	r3, [r4, #7]
 80a16dc:	2b0b      	cmp	r3, #11
 80a16de:	d004      	beq.n	80a16ea <_ZN3DHT15readTemperatureEv+0x1a>
 80a16e0:	d31f      	bcc.n	80a1722 <_ZN3DHT15readTemperatureEv+0x52>
 80a16e2:	3b15      	subs	r3, #21
 80a16e4:	2b01      	cmp	r3, #1
 80a16e6:	d904      	bls.n	80a16f2 <_ZN3DHT15readTemperatureEv+0x22>
 80a16e8:	e01b      	b.n	80a1722 <_ZN3DHT15readTemperatureEv+0x52>
			case DHT11:
				f = data[2];
 80a16ea:	78a0      	ldrb	r0, [r4, #2]
 80a16ec:	f003 fdda 	bl	80a52a4 <__aeabi_ui2f>
				return f;
 80a16f0:	bd70      	pop	{r4, r5, r6, pc}
			case DHT22:
			case DHT21:
				f = data[2] & 0x7F;
 80a16f2:	78a5      	ldrb	r5, [r4, #2]
 80a16f4:	f005 007f 	and.w	r0, r5, #127	; 0x7f
 80a16f8:	f003 fdd8 	bl	80a52ac <__aeabi_i2f>
				f *= 256;
 80a16fc:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a1700:	f003 fe28 	bl	80a5354 <__aeabi_fmul>
 80a1704:	4606      	mov	r6, r0
				f += data[3];
 80a1706:	78e0      	ldrb	r0, [r4, #3]
 80a1708:	f003 fdd0 	bl	80a52ac <__aeabi_i2f>
 80a170c:	4631      	mov	r1, r6
 80a170e:	f003 fd19 	bl	80a5144 <__addsf3>
				f /= 10;
 80a1712:	4905      	ldr	r1, [pc, #20]	; (80a1728 <_ZN3DHT15readTemperatureEv+0x58>)
 80a1714:	f003 fed2 	bl	80a54bc <__aeabi_fdiv>
				if (data[2] & 0x80)
 80a1718:	062b      	lsls	r3, r5, #24
 80a171a:	d503      	bpl.n	80a1724 <_ZN3DHT15readTemperatureEv+0x54>
					f *= -1;
 80a171c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80a1720:	bd70      	pop	{r4, r5, r6, pc}
				return f;
		}
	}
	return NAN;
 80a1722:	4802      	ldr	r0, [pc, #8]	; (80a172c <_ZN3DHT15readTemperatureEv+0x5c>)
}
 80a1724:	bd70      	pop	{r4, r5, r6, pc}
 80a1726:	bf00      	nop
 80a1728:	41200000 	.word	0x41200000
 80a172c:	7fc00000 	.word	0x7fc00000

080a1730 <_ZN3DHT14getTempCelciusEv>:
float DHT::getHumidity() {
	return readHumidity();
}

float DHT::getTempCelcius() {
	return readTemperature();
 80a1730:	f7ff bfce 	b.w	80a16d0 <_ZN3DHT15readTemperatureEv>

080a1734 <_ZN3DHT12readHumidityEv>:

float DHT::convertCtoK(float c) {
	return c + 273.15;
}

float DHT::readHumidity(void) {
 80a1734:	b538      	push	{r3, r4, r5, lr}
 80a1736:	4604      	mov	r4, r0
	float f;

	if (read()) {
 80a1738:	f7ff ff4a 	bl	80a15d0 <_ZN3DHT4readEv>
 80a173c:	b1e0      	cbz	r0, 80a1778 <_ZN3DHT12readHumidityEv+0x44>
		switch (_type) {
 80a173e:	79e3      	ldrb	r3, [r4, #7]
 80a1740:	2b0b      	cmp	r3, #11
 80a1742:	d015      	beq.n	80a1770 <_ZN3DHT12readHumidityEv+0x3c>
 80a1744:	d318      	bcc.n	80a1778 <_ZN3DHT12readHumidityEv+0x44>
 80a1746:	3b15      	subs	r3, #21
 80a1748:	2b01      	cmp	r3, #1
 80a174a:	d815      	bhi.n	80a1778 <_ZN3DHT12readHumidityEv+0x44>
			case DHT11:
				f = data[0];
				return f;
			case DHT22:
			case DHT21:
				f = data[0];
 80a174c:	7820      	ldrb	r0, [r4, #0]
 80a174e:	f003 fda9 	bl	80a52a4 <__aeabi_ui2f>
				f *= 256;
 80a1752:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80a1756:	f003 fdfd 	bl	80a5354 <__aeabi_fmul>
 80a175a:	4605      	mov	r5, r0
				f += data[1];
 80a175c:	7860      	ldrb	r0, [r4, #1]
 80a175e:	f003 fda5 	bl	80a52ac <__aeabi_i2f>
 80a1762:	4629      	mov	r1, r5
 80a1764:	f003 fcee 	bl	80a5144 <__addsf3>
				f /= 10;
 80a1768:	4904      	ldr	r1, [pc, #16]	; (80a177c <_ZN3DHT12readHumidityEv+0x48>)
 80a176a:	f003 fea7 	bl	80a54bc <__aeabi_fdiv>
 80a176e:	bd38      	pop	{r3, r4, r5, pc}
	float f;

	if (read()) {
		switch (_type) {
			case DHT11:
				f = data[0];
 80a1770:	7820      	ldrb	r0, [r4, #0]
 80a1772:	f003 fd97 	bl	80a52a4 <__aeabi_ui2f>
				return f;
 80a1776:	bd38      	pop	{r3, r4, r5, pc}
				f += data[1];
				f /= 10;
				return f;
		}
	}
	return NAN;
 80a1778:	4801      	ldr	r0, [pc, #4]	; (80a1780 <_ZN3DHT12readHumidityEv+0x4c>)
}
 80a177a:	bd38      	pop	{r3, r4, r5, pc}
 80a177c:	41200000 	.word	0x41200000
 80a1780:	7fc00000 	.word	0x7fc00000

080a1784 <_ZN3DHT11getHumidityEv>:
	}
	return NAN;
}

float DHT::getHumidity() {
	return readHumidity();
 80a1784:	f7ff bfd6 	b.w	80a1734 <_ZN3DHT12readHumidityEv>

080a1788 <_GLOBAL__sub_I__ZN3DHTC2Ehhh>:
 80a1788:	f000 bb64 	b.w	80a1e54 <HAL_Pin_Map>

080a178c <_ZN6I2Cdev9readBytesEhhhPht>:
 * @param length Number of bytes to read
 * @param data Buffer to store read data in
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Number of bytes read (-1 indicates failure)
 */
int8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {
 80a178c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1790:	4617      	mov	r7, r2
 80a1792:	469b      	mov	fp, r3
 80a1794:	4681      	mov	r9, r0
 80a1796:	468a      	mov	sl, r1
 80a1798:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a179c:	f000 fb02 	bl	80a1da4 <HAL_Timer_Get_Milli_Seconds>
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
 80a17a0:	2500      	movs	r5, #0
 80a17a2:	463b      	mov	r3, r7
 80a17a4:	4606      	mov	r6, r0
        Serial.print(" bytes from 0x");
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif

    int8_t count = 0;
 80a17a6:	462c      	mov	r4, r5
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
 80a17a8:	2f20      	cmp	r7, #32
 80a17aa:	bfa8      	it	ge
 80a17ac:	2320      	movge	r3, #32
 80a17ae:	9301      	str	r3, [sp, #4]
 80a17b0:	42bd      	cmp	r5, r7
 80a17b2:	d22c      	bcs.n	80a180e <_ZN6I2Cdev9readBytesEhhhPht+0x82>
                Wire.beginTransmission(devAddr);
 80a17b4:	f002 fdd4 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a17b8:	4649      	mov	r1, r9
 80a17ba:	f001 f849 	bl	80a2850 <_ZN7TwoWire17beginTransmissionEh>
                Wire.write(regAddr);
 80a17be:	f002 fdcf 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a17c2:	6803      	ldr	r3, [r0, #0]
 80a17c4:	4651      	mov	r1, sl
 80a17c6:	689b      	ldr	r3, [r3, #8]
 80a17c8:	4798      	blx	r3
                Wire.endTransmission();
 80a17ca:	f002 fdc9 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a17ce:	f001 f847 	bl	80a2860 <_ZN7TwoWire15endTransmissionEv>
                Wire.beginTransmission(devAddr);
 80a17d2:	f002 fdc5 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a17d6:	4649      	mov	r1, r9
 80a17d8:	f001 f83a 	bl	80a2850 <_ZN7TwoWire17beginTransmissionEh>
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
 80a17dc:	f002 fdc0 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a17e0:	1b7a      	subs	r2, r7, r5
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
 80a17e2:	2a20      	cmp	r2, #32
 80a17e4:	bfa8      	it	ge
 80a17e6:	2220      	movge	r2, #32
 80a17e8:	b2d2      	uxtb	r2, r2
 80a17ea:	4649      	mov	r1, r9
 80a17ec:	f001 f82d 	bl	80a284a <_ZN7TwoWire11requestFromEhh>
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
 80a17f0:	f002 fdb6 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a17f4:	6803      	ldr	r3, [r0, #0]
 80a17f6:	691b      	ldr	r3, [r3, #16]
 80a17f8:	4798      	blx	r3
 80a17fa:	b1f8      	cbz	r0, 80a183c <_ZN6I2Cdev9readBytesEhhhPht+0xb0>
 80a17fc:	f1b8 0f00 	cmp.w	r8, #0
 80a1800:	d012      	beq.n	80a1828 <_ZN6I2Cdev9readBytesEhhhPht+0x9c>
 80a1802:	f000 facf 	bl	80a1da4 <HAL_Timer_Get_Milli_Seconds>
 80a1806:	1b80      	subs	r0, r0, r6
 80a1808:	4540      	cmp	r0, r8
 80a180a:	d30d      	bcc.n	80a1828 <_ZN6I2Cdev9readBytesEhhhPht+0x9c>
 80a180c:	e016      	b.n	80a183c <_ZN6I2Cdev9readBytesEhhhPht+0xb0>
        }

    #endif

    // check for timeout
    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout
 80a180e:	f1b8 0f00 	cmp.w	r8, #0
 80a1812:	d017      	beq.n	80a1844 <_ZN6I2Cdev9readBytesEhhhPht+0xb8>
 80a1814:	f000 fac6 	bl	80a1da4 <HAL_Timer_Get_Milli_Seconds>
 80a1818:	1b80      	subs	r0, r0, r6
 80a181a:	4540      	cmp	r0, r8
 80a181c:	d312      	bcc.n	80a1844 <_ZN6I2Cdev9readBytesEhhhPht+0xb8>
 80a181e:	42bc      	cmp	r4, r7
 80a1820:	bfb8      	it	lt
 80a1822:	f04f 34ff 	movlt.w	r4, #4294967295
 80a1826:	e00d      	b.n	80a1844 <_ZN6I2Cdev9readBytesEhhhPht+0xb8>
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
                    data[count] = Wire.read();
 80a1828:	f002 fd9a 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a182c:	6803      	ldr	r3, [r0, #0]
 80a182e:	695b      	ldr	r3, [r3, #20]
 80a1830:	4798      	blx	r3
 80a1832:	f80b 0004 	strb.w	r0, [fp, r4]
 80a1836:	3401      	adds	r4, #1
 80a1838:	b264      	sxtb	r4, r4
                Wire.write(regAddr);
                Wire.endTransmission();
                Wire.beginTransmission(devAddr);
                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));
        
                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {
 80a183a:	e7d9      	b.n	80a17f0 <_ZN6I2Cdev9readBytesEhhhPht+0x64>
            // Adds official support for repeated start condition, yay!

            // I2C/TWI subsystem uses internal buffer that breaks with large data requests
            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in
            // smaller chunks instead of all at once
            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {
 80a183c:	9b01      	ldr	r3, [sp, #4]
 80a183e:	441d      	add	r5, r3
 80a1840:	b2ed      	uxtb	r5, r5
 80a1842:	e7b5      	b.n	80a17b0 <_ZN6I2Cdev9readBytesEhhhPht+0x24>
        Serial.print(count, DEC);
        Serial.println(" read).");
    #endif

    return count;
}
 80a1844:	4620      	mov	r0, r4
 80a1846:	b003      	add	sp, #12
 80a1848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a184c <_ZN6I2Cdev8readByteEhhPht>:
 * @param regAddr Register regAddr to read from
 * @param data Container for byte value read from device
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {
 80a184c:	b507      	push	{r0, r1, r2, lr}
    return readBytes(devAddr, regAddr, 1, data, timeout);
 80a184e:	9300      	str	r3, [sp, #0]
 80a1850:	4613      	mov	r3, r2
 80a1852:	2201      	movs	r2, #1
 80a1854:	f7ff ff9a 	bl	80a178c <_ZN6I2Cdev9readBytesEhhhPht>
}
 80a1858:	b003      	add	sp, #12
 80a185a:	f85d fb04 	ldr.w	pc, [sp], #4

080a185e <_ZN6I2Cdev8readBitsEhhhhPht>:
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
 80a185e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1860:	4614      	mov	r4, r2
 80a1862:	461d      	mov	r5, r3
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
 80a1864:	f10d 0207 	add.w	r2, sp, #7
 80a1868:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80a186c:	f7ff ffee 	bl	80a184c <_ZN6I2Cdev8readByteEhhPht>
 80a1870:	b160      	cbz	r0, 80a188c <_ZN6I2Cdev8readBitsEhhhhPht+0x2e>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        b &= mask;
        b >>= (bitStart - length + 1);
        *data = b;
 80a1872:	2301      	movs	r3, #1
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80a1874:	1b62      	subs	r2, r4, r5
        b &= mask;
        b >>= (bitStart - length + 1);
        *data = b;
 80a1876:	40ab      	lsls	r3, r5
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80a1878:	3201      	adds	r2, #1
        b &= mask;
        b >>= (bitStart - length + 1);
        *data = b;
 80a187a:	3b01      	subs	r3, #1
 80a187c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a1880:	4093      	lsls	r3, r2
 80a1882:	400b      	ands	r3, r1
 80a1884:	fa43 f202 	asr.w	r2, r3, r2
 80a1888:	9b06      	ldr	r3, [sp, #24]
 80a188a:	701a      	strb	r2, [r3, #0]
    }
    return count;
}
 80a188c:	b003      	add	sp, #12
 80a188e:	bd30      	pop	{r4, r5, pc}

080a1890 <_ZN6I2Cdev10writeBytesEhhhPh>:
 * @param regAddr First register address to write to
 * @param length Number of bytes to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {
 80a1890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1892:	4607      	mov	r7, r0
 80a1894:	461e      	mov	r6, r3
 80a1896:	4614      	mov	r4, r2
 80a1898:	460d      	mov	r5, r1
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif
    uint8_t status = 0;
	#if defined (PARTICLE)
        Wire.beginTransmission(devAddr);
 80a189a:	f002 fd61 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a189e:	4639      	mov	r1, r7
 80a18a0:	f000 ffd6 	bl	80a2850 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write((uint8_t) regAddr); // send address
 80a18a4:	f002 fd5c 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a18a8:	6803      	ldr	r3, [r0, #0]
 80a18aa:	4629      	mov	r1, r5
 80a18ac:	689b      	ldr	r3, [r3, #8]
 80a18ae:	4798      	blx	r3
 80a18b0:	3c01      	subs	r4, #1
 80a18b2:	1e75      	subs	r5, r6, #1
 80a18b4:	4434      	add	r4, r6
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
 80a18b6:	42a5      	cmp	r5, r4
 80a18b8:	d007      	beq.n	80a18ca <_ZN6I2Cdev10writeBytesEhhhPh+0x3a>
        #ifdef I2CDEV_SERIAL_DEBUG
            Serial.print(data[i], HEX);
            if (i + 1 < length) Serial.print(" ");
        #endif
		#if defined (PARTICLE)
            Wire.write((uint8_t) data[i]);
 80a18ba:	f002 fd51 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a18be:	6803      	ldr	r3, [r0, #0]
 80a18c0:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a18c4:	689b      	ldr	r3, [r3, #8]
 80a18c6:	4798      	blx	r3
        Wire.write((uint8_t) regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length; i++) {
 80a18c8:	e7f5      	b.n	80a18b6 <_ZN6I2Cdev10writeBytesEhhhPh+0x26>
        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
            Fastwire::write((uint8_t) data[i]);
        #endif
    }
	#if defined (PARTICLE)
        status = Wire.endTransmission();
 80a18ca:	f002 fd49 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a18ce:	f000 ffc7 	bl	80a2860 <_ZN7TwoWire15endTransmissionEv>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
 80a18d2:	fab0 f080 	clz	r0, r0
 80a18d6:	0940      	lsrs	r0, r0, #5
 80a18d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a18da <_ZN6I2Cdev9writeByteEhhh>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New byte value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {
 80a18da:	b507      	push	{r0, r1, r2, lr}
 80a18dc:	ab02      	add	r3, sp, #8
 80a18de:	f803 2d01 	strb.w	r2, [r3, #-1]!
    return writeBytes(devAddr, regAddr, 1, &data);
 80a18e2:	2201      	movs	r2, #1
 80a18e4:	f7ff ffd4 	bl	80a1890 <_ZN6I2Cdev10writeBytesEhhhPh>
}
 80a18e8:	b003      	add	sp, #12
 80a18ea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a18f0 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 80a18f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a18f2:	4616      	mov	r6, r2
 80a18f4:	461f      	mov	r7, r3
    uint8_t b;
    readByte(devAddr, regAddr, &b);
 80a18f6:	4b0d      	ldr	r3, [pc, #52]	; (80a192c <_ZN6I2Cdev8writeBitEhhhh+0x3c>)
 80a18f8:	f10d 0207 	add.w	r2, sp, #7
 80a18fc:	881b      	ldrh	r3, [r3, #0]
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
 80a18fe:	4604      	mov	r4, r0
 80a1900:	460d      	mov	r5, r1
    uint8_t b;
    readByte(devAddr, regAddr, &b);
 80a1902:	f7ff ffa3 	bl	80a184c <_ZN6I2Cdev8readByteEhhPht>
 80a1906:	2201      	movs	r2, #1
 80a1908:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80a190c:	40b2      	lsls	r2, r6
 80a190e:	b117      	cbz	r7, 80a1916 <_ZN6I2Cdev8writeBitEhhhh+0x26>
 80a1910:	431a      	orrs	r2, r3
 80a1912:	b2d2      	uxtb	r2, r2
 80a1914:	e001      	b.n	80a191a <_ZN6I2Cdev8writeBitEhhhh+0x2a>
 80a1916:	ea23 0202 	bic.w	r2, r3, r2
    return writeByte(devAddr, regAddr, b);
 80a191a:	4629      	mov	r1, r5
 80a191c:	4620      	mov	r0, r4
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
    uint8_t b;
    readByte(devAddr, regAddr, &b);
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
 80a191e:	f88d 2007 	strb.w	r2, [sp, #7]
    return writeByte(devAddr, regAddr, b);
 80a1922:	f7ff ffda 	bl	80a18da <_ZN6I2Cdev9writeByteEhhh>
}
 80a1926:	b003      	add	sp, #12
 80a1928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a192a:	bf00      	nop
 80a192c:	20000040 	.word	0x20000040

080a1930 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80a1930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1932:	461f      	mov	r7, r3
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
 80a1934:	4b11      	ldr	r3, [pc, #68]	; (80a197c <_ZN6I2Cdev9writeBitsEhhhhh+0x4c>)
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80a1936:	4616      	mov	r6, r2
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
 80a1938:	881b      	ldrh	r3, [r3, #0]
 80a193a:	f10d 0207 	add.w	r2, sp, #7
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
 80a193e:	4604      	mov	r4, r0
 80a1940:	460d      	mov	r5, r1
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
 80a1942:	f7ff ff83 	bl	80a184c <_ZN6I2Cdev8readByteEhhPht>
 80a1946:	b1b8      	cbz	r0, 80a1978 <_ZN6I2Cdev9writeBitsEhhhhh+0x48>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80a1948:	2301      	movs	r3, #1
        data <<= (bitStart - length + 1); // shift data into correct position
 80a194a:	f89d 1020 	ldrb.w	r1, [sp, #32]
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
 80a194e:	1bf2      	subs	r2, r6, r7
 80a1950:	40bb      	lsls	r3, r7
 80a1952:	3201      	adds	r2, #1
 80a1954:	3b01      	subs	r3, #1
 80a1956:	4093      	lsls	r3, r2
        data <<= (bitStart - length + 1); // shift data into correct position
 80a1958:	fa01 f202 	lsl.w	r2, r1, r2
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
 80a195c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        data <<= (bitStart - length + 1); // shift data into correct position
 80a1960:	b2d2      	uxtb	r2, r2
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
 80a1962:	ea21 0103 	bic.w	r1, r1, r3
 80a1966:	4013      	ands	r3, r2
 80a1968:	ea41 0203 	orr.w	r2, r1, r3
        return writeByte(devAddr, regAddr, b);
 80a196c:	4620      	mov	r0, r4
 80a196e:	4629      	mov	r1, r5
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        data <<= (bitStart - length + 1); // shift data into correct position
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
 80a1970:	f88d 2007 	strb.w	r2, [sp, #7]
        return writeByte(devAddr, regAddr, b);
 80a1974:	f7ff ffb1 	bl	80a18da <_ZN6I2Cdev9writeByteEhhh>
    } else {
        return false;
    }
}
 80a1978:	b003      	add	sp, #12
 80a197a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a197c:	20000040 	.word	0x20000040

080a1980 <_ZN6I2Cdev10writeWordsEhhhPt>:
 * @param regAddr First register address to write to
 * @param length Number of words to write
 * @param data Buffer to copy new data from
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t* data) {
 80a1980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1982:	4607      	mov	r7, r0
 80a1984:	4614      	mov	r4, r2
 80a1986:	460d      	mov	r5, r1
 80a1988:	461e      	mov	r6, r3
        Serial.print(regAddr, HEX);
        Serial.print("...");
    #endif
    uint8_t status = 0;
	#if defined (PARTICLE)
        Wire.beginTransmission(devAddr);
 80a198a:	f002 fce9 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a198e:	4639      	mov	r1, r7
 80a1990:	f000 ff5e 	bl	80a2850 <_ZN7TwoWire17beginTransmissionEh>
        Wire.write(regAddr); // send address
 80a1994:	f002 fce4 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a1998:	6803      	ldr	r3, [r0, #0]
 80a199a:	4629      	mov	r1, r5
 80a199c:	689b      	ldr	r3, [r3, #8]
 80a199e:	4798      	blx	r3
        Wire.write(regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length * 2; i++) {
 80a19a0:	0065      	lsls	r5, r4, #1
 80a19a2:	2400      	movs	r4, #0
 80a19a4:	42ac      	cmp	r4, r5
 80a19a6:	da11      	bge.n	80a19cc <_ZN6I2Cdev10writeWordsEhhhPt+0x4c>
        #ifdef I2CDEV_SERIAL_DEBUG
            Serial.print(data[i], HEX);
            if (i + 1 < length) Serial.print(" ");
        #endif
		#if defined (PARTICLE)
            Wire.write((uint8_t)(data[i] >> 8));    // send MSB
 80a19a8:	f002 fcda 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a19ac:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 80a19b0:	6803      	ldr	r3, [r0, #0]
 80a19b2:	0a09      	lsrs	r1, r1, #8
 80a19b4:	689b      	ldr	r3, [r3, #8]
 80a19b6:	4798      	blx	r3
            Wire.write((uint8_t)data[i++]);         // send LSB
 80a19b8:	f002 fcd2 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a19bc:	6803      	ldr	r3, [r0, #0]
 80a19be:	f816 1014 	ldrb.w	r1, [r6, r4, lsl #1]
 80a19c2:	689b      	ldr	r3, [r3, #8]
        Wire.write(regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length * 2; i++) {
 80a19c4:	3402      	adds	r4, #2
            Serial.print(data[i], HEX);
            if (i + 1 < length) Serial.print(" ");
        #endif
		#if defined (PARTICLE)
            Wire.write((uint8_t)(data[i] >> 8));    // send MSB
            Wire.write((uint8_t)data[i++]);         // send LSB
 80a19c6:	4798      	blx	r3
        Wire.write(regAddr); // send address
    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)
        Fastwire::beginTransmission(devAddr);
        Fastwire::write(regAddr);
    #endif
    for (uint8_t i = 0; i < length * 2; i++) {
 80a19c8:	b2e4      	uxtb	r4, r4
 80a19ca:	e7eb      	b.n	80a19a4 <_ZN6I2Cdev10writeWordsEhhhPt+0x24>
            status = Fastwire::write((uint8_t)data[i++]);   // send LSB
            if (status != 0) break;
        #endif
    }
	#if defined (PARTICLE)
        status = Wire.endTransmission();
 80a19cc:	f002 fcc8 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a19d0:	f000 ff46 	bl	80a2860 <_ZN7TwoWire15endTransmissionEv>
    #endif
    #ifdef I2CDEV_SERIAL_DEBUG
        Serial.println(". Done.");
    #endif
    return status == 0;
}
 80a19d4:	fab0 f080 	clz	r0, r0
 80a19d8:	0940      	lsrs	r0, r0, #5
 80a19da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a19dc <_ZN6I2Cdev9writeWordEhht>:
 * @param devAddr I2C slave device address
 * @param regAddr Register address to write to
 * @param data New word value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data) {
 80a19dc:	b507      	push	{r0, r1, r2, lr}
 80a19de:	ab02      	add	r3, sp, #8
 80a19e0:	f823 2d02 	strh.w	r2, [r3, #-2]!
    return writeWords(devAddr, regAddr, 1, &data);
 80a19e4:	2201      	movs	r2, #1
 80a19e6:	f7ff ffcb 	bl	80a1980 <_ZN6I2Cdev10writeWordsEhhhPt>
}
 80a19ea:	b003      	add	sp, #12
 80a19ec:	f85d fb04 	ldr.w	pc, [sp], #4

080a19f0 <_GLOBAL__sub_I__ZN6I2CdevC2Ev>:
 80a19f0:	f000 ba30 	b.w	80a1e54 <HAL_Pin_Map>

080a19f4 <_ZN7MPU6050C1Ev>:

/** Default constructor, uses default I2C address.
 * @see MPU6050_DEFAULT_ADDRESS
 */
MPU6050::MPU6050() {
    devAddr = MPU6050_DEFAULT_ADDRESS;
 80a19f4:	2368      	movs	r3, #104	; 0x68
 80a19f6:	7003      	strb	r3, [r0, #0]
}
 80a19f8:	4770      	bx	lr

080a19fa <_ZN7MPU605021setFullScaleGyroRangeEh>:
 * @see MPU6050_GYRO_FS_250
 * @see MPU6050_RA_GYRO_CONFIG
 * @see MPU6050_GCONFIG_FS_SEL_BIT
 * @see MPU6050_GCONFIG_FS_SEL_LENGTH
 */
void MPU6050::setFullScaleGyroRange(uint8_t range) {
 80a19fa:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);
 80a19fc:	2302      	movs	r3, #2
 80a19fe:	7800      	ldrb	r0, [r0, #0]
 80a1a00:	2204      	movs	r2, #4
 80a1a02:	9100      	str	r1, [sp, #0]
 80a1a04:	211b      	movs	r1, #27
 80a1a06:	f7ff ff93 	bl	80a1930 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80a1a0a:	b003      	add	sp, #12
 80a1a0c:	f85d fb04 	ldr.w	pc, [sp], #4

080a1a10 <_ZN7MPU605022setFullScaleAccelRangeEh>:
}
/** Set full-scale accelerometer range.
 * @param range New full-scale accelerometer range setting
 * @see getFullScaleAccelRange()
 */
void MPU6050::setFullScaleAccelRange(uint8_t range) {
 80a1a10:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);
 80a1a12:	2302      	movs	r3, #2
 80a1a14:	7800      	ldrb	r0, [r0, #0]
 80a1a16:	2204      	movs	r2, #4
 80a1a18:	9100      	str	r1, [sp, #0]
 80a1a1a:	211c      	movs	r1, #28
 80a1a1c:	f7ff ff88 	bl	80a1930 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80a1a20:	b003      	add	sp, #12
 80a1a22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1a28 <_ZN7MPU605016getAccelerationXEv>:
/** Get X-axis accelerometer reading.
 * @return X-axis acceleration measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_ACCEL_XOUT_H
 */
int16_t MPU6050::getAccelerationX() {
 80a1a28:	b513      	push	{r0, r1, r4, lr}
 80a1a2a:	4604      	mov	r4, r0
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 2, buffer);
 80a1a2c:	4b07      	ldr	r3, [pc, #28]	; (80a1a4c <_ZN7MPU605016getAccelerationXEv+0x24>)
 80a1a2e:	7800      	ldrb	r0, [r0, #0]
 80a1a30:	881b      	ldrh	r3, [r3, #0]
 80a1a32:	2202      	movs	r2, #2
 80a1a34:	9300      	str	r3, [sp, #0]
 80a1a36:	213b      	movs	r1, #59	; 0x3b
 80a1a38:	1c63      	adds	r3, r4, #1
 80a1a3a:	f7ff fea7 	bl	80a178c <_ZN6I2Cdev9readBytesEhhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 80a1a3e:	7860      	ldrb	r0, [r4, #1]
 80a1a40:	78a3      	ldrb	r3, [r4, #2]
 80a1a42:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 80a1a46:	b200      	sxth	r0, r0
 80a1a48:	b002      	add	sp, #8
 80a1a4a:	bd10      	pop	{r4, pc}
 80a1a4c:	20000040 	.word	0x20000040

080a1a50 <_ZN7MPU605016getAccelerationYEv>:
/** Get Y-axis accelerometer reading.
 * @return Y-axis acceleration measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_ACCEL_YOUT_H
 */
int16_t MPU6050::getAccelerationY() {
 80a1a50:	b513      	push	{r0, r1, r4, lr}
 80a1a52:	4604      	mov	r4, r0
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_YOUT_H, 2, buffer);
 80a1a54:	4b07      	ldr	r3, [pc, #28]	; (80a1a74 <_ZN7MPU605016getAccelerationYEv+0x24>)
 80a1a56:	7800      	ldrb	r0, [r0, #0]
 80a1a58:	881b      	ldrh	r3, [r3, #0]
 80a1a5a:	2202      	movs	r2, #2
 80a1a5c:	9300      	str	r3, [sp, #0]
 80a1a5e:	213d      	movs	r1, #61	; 0x3d
 80a1a60:	1c63      	adds	r3, r4, #1
 80a1a62:	f7ff fe93 	bl	80a178c <_ZN6I2Cdev9readBytesEhhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 80a1a66:	7860      	ldrb	r0, [r4, #1]
 80a1a68:	78a3      	ldrb	r3, [r4, #2]
 80a1a6a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 80a1a6e:	b200      	sxth	r0, r0
 80a1a70:	b002      	add	sp, #8
 80a1a72:	bd10      	pop	{r4, pc}
 80a1a74:	20000040 	.word	0x20000040

080a1a78 <_ZN7MPU605016getAccelerationZEv>:
/** Get Z-axis accelerometer reading.
 * @return Z-axis acceleration measurement in 16-bit 2's complement format
 * @see getMotion6()
 * @see MPU6050_RA_ACCEL_ZOUT_H
 */
int16_t MPU6050::getAccelerationZ() {
 80a1a78:	b513      	push	{r0, r1, r4, lr}
 80a1a7a:	4604      	mov	r4, r0
    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_ZOUT_H, 2, buffer);
 80a1a7c:	4b07      	ldr	r3, [pc, #28]	; (80a1a9c <_ZN7MPU605016getAccelerationZEv+0x24>)
 80a1a7e:	7800      	ldrb	r0, [r0, #0]
 80a1a80:	881b      	ldrh	r3, [r3, #0]
 80a1a82:	2202      	movs	r2, #2
 80a1a84:	9300      	str	r3, [sp, #0]
 80a1a86:	213f      	movs	r1, #63	; 0x3f
 80a1a88:	1c63      	adds	r3, r4, #1
 80a1a8a:	f7ff fe7f 	bl	80a178c <_ZN6I2Cdev9readBytesEhhhPht>
    return (((int16_t)buffer[0]) << 8) | buffer[1];
 80a1a8e:	7860      	ldrb	r0, [r4, #1]
 80a1a90:	78a3      	ldrb	r3, [r4, #2]
 80a1a92:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
}
 80a1a96:	b200      	sxth	r0, r0
 80a1a98:	b002      	add	sp, #8
 80a1a9a:	bd10      	pop	{r4, pc}
 80a1a9c:	20000040 	.word	0x20000040

080a1aa0 <_ZN7MPU605015setSleepEnabledEb>:
 * @see getSleepEnabled()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_SLEEP_BIT
 */
void MPU6050::setSleepEnabled(bool enabled) {
    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);
 80a1aa0:	460b      	mov	r3, r1
 80a1aa2:	2206      	movs	r2, #6
 80a1aa4:	216b      	movs	r1, #107	; 0x6b
 80a1aa6:	7800      	ldrb	r0, [r0, #0]
 80a1aa8:	f7ff bf22 	b.w	80a18f0 <_ZN6I2Cdev8writeBitEhhhh>

080a1aac <_ZN7MPU605014setClockSourceEh>:
 * @see getClockSource()
 * @see MPU6050_RA_PWR_MGMT_1
 * @see MPU6050_PWR1_CLKSEL_BIT
 * @see MPU6050_PWR1_CLKSEL_LENGTH
 */
void MPU6050::setClockSource(uint8_t source) {
 80a1aac:	b507      	push	{r0, r1, r2, lr}
    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);
 80a1aae:	2303      	movs	r3, #3
 80a1ab0:	7800      	ldrb	r0, [r0, #0]
 80a1ab2:	2202      	movs	r2, #2
 80a1ab4:	9100      	str	r1, [sp, #0]
 80a1ab6:	216b      	movs	r1, #107	; 0x6b
 80a1ab8:	f7ff ff3a 	bl	80a1930 <_ZN6I2Cdev9writeBitsEhhhhh>
}
 80a1abc:	b003      	add	sp, #12
 80a1abe:	f85d fb04 	ldr.w	pc, [sp], #4

080a1ac2 <_ZN7MPU605010initializeEv>:
 * after start-up). This function also sets both the accelerometer and the gyroscope
 * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets
 * the clock source to use the X Gyro for reference, which is slightly better than
 * the default internal clock source.
 */
void MPU6050::initialize() {
 80a1ac2:	b510      	push	{r4, lr}
 80a1ac4:	4604      	mov	r4, r0
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
 80a1ac6:	2101      	movs	r1, #1
 80a1ac8:	f7ff fff0 	bl	80a1aac <_ZN7MPU605014setClockSourceEh>
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
 80a1acc:	4620      	mov	r0, r4
 80a1ace:	2100      	movs	r1, #0
 80a1ad0:	f7ff ff93 	bl	80a19fa <_ZN7MPU605021setFullScaleGyroRangeEh>
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
 80a1ad4:	4620      	mov	r0, r4
 80a1ad6:	2100      	movs	r1, #0
 80a1ad8:	f7ff ff9a 	bl	80a1a10 <_ZN7MPU605022setFullScaleAccelRangeEh>
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 80a1adc:	4620      	mov	r0, r4
}
 80a1ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void MPU6050::initialize() {
    setClockSource(MPU6050_CLOCK_PLL_XGYRO);
    setFullScaleGyroRange(MPU6050_GYRO_FS_250);
    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);
    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!
 80a1ae2:	2100      	movs	r1, #0
 80a1ae4:	f7ff bfdc 	b.w	80a1aa0 <_ZN7MPU605015setSleepEnabledEb>

080a1ae8 <_ZN7MPU605011getDeviceIDEv>:
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80a1ae8:	4603      	mov	r3, r0
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
 80a1aea:	b513      	push	{r0, r1, r4, lr}
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80a1aec:	4a07      	ldr	r2, [pc, #28]	; (80a1b0c <_ZN7MPU605011getDeviceIDEv+0x24>)
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
 80a1aee:	4604      	mov	r4, r0
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
 80a1af0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a1af4:	8812      	ldrh	r2, [r2, #0]
 80a1af6:	9300      	str	r3, [sp, #0]
 80a1af8:	2306      	movs	r3, #6
 80a1afa:	9201      	str	r2, [sp, #4]
 80a1afc:	2175      	movs	r1, #117	; 0x75
 80a1afe:	461a      	mov	r2, r3
 80a1b00:	f7ff fead 	bl	80a185e <_ZN6I2Cdev8readBitsEhhhhPht>
    return buffer[0];
}
 80a1b04:	7860      	ldrb	r0, [r4, #1]
 80a1b06:	b002      	add	sp, #8
 80a1b08:	bd10      	pop	{r4, pc}
 80a1b0a:	bf00      	nop
 80a1b0c:	20000040 	.word	0x20000040

080a1b10 <_ZN7MPU605014testConnectionEv>:

/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool MPU6050::testConnection() {
 80a1b10:	b508      	push	{r3, lr}
    return getDeviceID() == 0x34;
 80a1b12:	f7ff ffe9 	bl	80a1ae8 <_ZN7MPU605011getDeviceIDEv>
}
 80a1b16:	f1a0 0334 	sub.w	r3, r0, #52	; 0x34
 80a1b1a:	4258      	negs	r0, r3
 80a1b1c:	4158      	adcs	r0, r3
 80a1b1e:	bd08      	pop	{r3, pc}

080a1b20 <_ZN7MPU605015setXAccelOffsetEs>:
int16_t MPU6050::getXAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXAccelOffset(int16_t offset) {
    I2Cdev::writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);
 80a1b20:	b28a      	uxth	r2, r1
 80a1b22:	7800      	ldrb	r0, [r0, #0]
 80a1b24:	2106      	movs	r1, #6
 80a1b26:	f7ff bf59 	b.w	80a19dc <_ZN6I2Cdev9writeWordEhht>

080a1b2a <_ZN7MPU605015setYAccelOffsetEs>:
int16_t MPU6050::getYAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYAccelOffset(int16_t offset) {
    I2Cdev::writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);
 80a1b2a:	b28a      	uxth	r2, r1
 80a1b2c:	7800      	ldrb	r0, [r0, #0]
 80a1b2e:	2108      	movs	r1, #8
 80a1b30:	f7ff bf54 	b.w	80a19dc <_ZN6I2Cdev9writeWordEhht>

080a1b34 <_ZN7MPU605015setZAccelOffsetEs>:
int16_t MPU6050::getZAccelOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZAccelOffset(int16_t offset) {
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);
 80a1b34:	b28a      	uxth	r2, r1
 80a1b36:	7800      	ldrb	r0, [r0, #0]
 80a1b38:	210a      	movs	r1, #10
 80a1b3a:	f7ff bf4f 	b.w	80a19dc <_ZN6I2Cdev9writeWordEhht>

080a1b3e <_ZN7MPU605014setXGyroOffsetEs>:
int16_t MPU6050::getXGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setXGyroOffset(int16_t offset) {
    I2Cdev::writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);
 80a1b3e:	b28a      	uxth	r2, r1
 80a1b40:	7800      	ldrb	r0, [r0, #0]
 80a1b42:	2113      	movs	r1, #19
 80a1b44:	f7ff bf4a 	b.w	80a19dc <_ZN6I2Cdev9writeWordEhht>

080a1b48 <_ZN7MPU605014setYGyroOffsetEs>:
int16_t MPU6050::getYGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setYGyroOffset(int16_t offset) {
    I2Cdev::writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);
 80a1b48:	b28a      	uxth	r2, r1
 80a1b4a:	7800      	ldrb	r0, [r0, #0]
 80a1b4c:	2115      	movs	r1, #21
 80a1b4e:	f7ff bf45 	b.w	80a19dc <_ZN6I2Cdev9writeWordEhht>

080a1b52 <_ZN7MPU605014setZGyroOffsetEs>:
int16_t MPU6050::getZGyroOffset() {
    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);
    return (((int16_t)buffer[0]) << 8) | buffer[1];
}
void MPU6050::setZGyroOffset(int16_t offset) {
    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);
 80a1b52:	b28a      	uxth	r2, r1
 80a1b54:	7800      	ldrb	r0, [r0, #0]
 80a1b56:	2117      	movs	r1, #23
 80a1b58:	f7ff bf40 	b.w	80a19dc <_ZN6I2Cdev9writeWordEhht>

080a1b5c <_GLOBAL__sub_I__ZN7MPU6050C2Ev>:
 80a1b5c:	f000 b97a 	b.w	80a1e54 <HAL_Pin_Map>

080a1b60 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1b60:	b508      	push	{r3, lr}
 80a1b62:	4b02      	ldr	r3, [pc, #8]	; (80a1b6c <inet_gethostbyname+0xc>)
 80a1b64:	681b      	ldr	r3, [r3, #0]
 80a1b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1b68:	9301      	str	r3, [sp, #4]
 80a1b6a:	bd08      	pop	{r3, pc}
 80a1b6c:	080601c0 	.word	0x080601c0

080a1b70 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1b70:	b508      	push	{r3, lr}
 80a1b72:	4b02      	ldr	r3, [pc, #8]	; (80a1b7c <HAL_USB_USART_Init+0xc>)
 80a1b74:	681b      	ldr	r3, [r3, #0]
 80a1b76:	681b      	ldr	r3, [r3, #0]
 80a1b78:	9301      	str	r3, [sp, #4]
 80a1b7a:	bd08      	pop	{r3, pc}
 80a1b7c:	080601d8 	.word	0x080601d8

080a1b80 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1b80:	b508      	push	{r3, lr}
 80a1b82:	4b02      	ldr	r3, [pc, #8]	; (80a1b8c <HAL_USB_USART_Begin+0xc>)
 80a1b84:	681b      	ldr	r3, [r3, #0]
 80a1b86:	685b      	ldr	r3, [r3, #4]
 80a1b88:	9301      	str	r3, [sp, #4]
 80a1b8a:	bd08      	pop	{r3, pc}
 80a1b8c:	080601d8 	.word	0x080601d8

080a1b90 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
 80a1b90:	b508      	push	{r3, lr}
 80a1b92:	4b02      	ldr	r3, [pc, #8]	; (80a1b9c <HAL_USB_USART_End+0xc>)
 80a1b94:	681b      	ldr	r3, [r3, #0]
 80a1b96:	689b      	ldr	r3, [r3, #8]
 80a1b98:	9301      	str	r3, [sp, #4]
 80a1b9a:	bd08      	pop	{r3, pc}
 80a1b9c:	080601d8 	.word	0x080601d8

080a1ba0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1ba0:	b508      	push	{r3, lr}
 80a1ba2:	4b02      	ldr	r3, [pc, #8]	; (80a1bac <HAL_USB_USART_Available_Data+0xc>)
 80a1ba4:	681b      	ldr	r3, [r3, #0]
 80a1ba6:	691b      	ldr	r3, [r3, #16]
 80a1ba8:	9301      	str	r3, [sp, #4]
 80a1baa:	bd08      	pop	{r3, pc}
 80a1bac:	080601d8 	.word	0x080601d8

080a1bb0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1bb0:	b508      	push	{r3, lr}
 80a1bb2:	4b02      	ldr	r3, [pc, #8]	; (80a1bbc <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1bb4:	681b      	ldr	r3, [r3, #0]
 80a1bb6:	695b      	ldr	r3, [r3, #20]
 80a1bb8:	9301      	str	r3, [sp, #4]
 80a1bba:	bd08      	pop	{r3, pc}
 80a1bbc:	080601d8 	.word	0x080601d8

080a1bc0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1bc0:	b508      	push	{r3, lr}
 80a1bc2:	4b02      	ldr	r3, [pc, #8]	; (80a1bcc <HAL_USB_USART_Receive_Data+0xc>)
 80a1bc4:	681b      	ldr	r3, [r3, #0]
 80a1bc6:	699b      	ldr	r3, [r3, #24]
 80a1bc8:	9301      	str	r3, [sp, #4]
 80a1bca:	bd08      	pop	{r3, pc}
 80a1bcc:	080601d8 	.word	0x080601d8

080a1bd0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1bd0:	b508      	push	{r3, lr}
 80a1bd2:	4b02      	ldr	r3, [pc, #8]	; (80a1bdc <HAL_USB_USART_Send_Data+0xc>)
 80a1bd4:	681b      	ldr	r3, [r3, #0]
 80a1bd6:	69db      	ldr	r3, [r3, #28]
 80a1bd8:	9301      	str	r3, [sp, #4]
 80a1bda:	bd08      	pop	{r3, pc}
 80a1bdc:	080601d8 	.word	0x080601d8

080a1be0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1be0:	b508      	push	{r3, lr}
 80a1be2:	4b02      	ldr	r3, [pc, #8]	; (80a1bec <HAL_USB_USART_Flush_Data+0xc>)
 80a1be4:	681b      	ldr	r3, [r3, #0]
 80a1be6:	6a1b      	ldr	r3, [r3, #32]
 80a1be8:	9301      	str	r3, [sp, #4]
 80a1bea:	bd08      	pop	{r3, pc}
 80a1bec:	080601d8 	.word	0x080601d8

080a1bf0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1bf0:	b508      	push	{r3, lr}
 80a1bf2:	4b02      	ldr	r3, [pc, #8]	; (80a1bfc <HAL_I2C_Begin+0xc>)
 80a1bf4:	681b      	ldr	r3, [r3, #0]
 80a1bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1bf8:	9301      	str	r3, [sp, #4]
 80a1bfa:	bd08      	pop	{r3, pc}
 80a1bfc:	080601ac 	.word	0x080601ac

080a1c00 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1c00:	b508      	push	{r3, lr}
 80a1c02:	4b02      	ldr	r3, [pc, #8]	; (80a1c0c <HAL_I2C_Request_Data+0xc>)
 80a1c04:	681b      	ldr	r3, [r3, #0]
 80a1c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1c08:	9301      	str	r3, [sp, #4]
 80a1c0a:	bd08      	pop	{r3, pc}
 80a1c0c:	080601ac 	.word	0x080601ac

080a1c10 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1c10:	b508      	push	{r3, lr}
 80a1c12:	4b02      	ldr	r3, [pc, #8]	; (80a1c1c <HAL_I2C_Begin_Transmission+0xc>)
 80a1c14:	681b      	ldr	r3, [r3, #0]
 80a1c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1c18:	9301      	str	r3, [sp, #4]
 80a1c1a:	bd08      	pop	{r3, pc}
 80a1c1c:	080601ac 	.word	0x080601ac

080a1c20 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1c20:	b508      	push	{r3, lr}
 80a1c22:	4b02      	ldr	r3, [pc, #8]	; (80a1c2c <HAL_I2C_End_Transmission+0xc>)
 80a1c24:	681b      	ldr	r3, [r3, #0]
 80a1c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1c28:	9301      	str	r3, [sp, #4]
 80a1c2a:	bd08      	pop	{r3, pc}
 80a1c2c:	080601ac 	.word	0x080601ac

080a1c30 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1c30:	b508      	push	{r3, lr}
 80a1c32:	4b02      	ldr	r3, [pc, #8]	; (80a1c3c <HAL_I2C_Write_Data+0xc>)
 80a1c34:	681b      	ldr	r3, [r3, #0]
 80a1c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1c38:	9301      	str	r3, [sp, #4]
 80a1c3a:	bd08      	pop	{r3, pc}
 80a1c3c:	080601ac 	.word	0x080601ac

080a1c40 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1c40:	b508      	push	{r3, lr}
 80a1c42:	4b02      	ldr	r3, [pc, #8]	; (80a1c4c <HAL_I2C_Available_Data+0xc>)
 80a1c44:	681b      	ldr	r3, [r3, #0]
 80a1c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1c48:	9301      	str	r3, [sp, #4]
 80a1c4a:	bd08      	pop	{r3, pc}
 80a1c4c:	080601ac 	.word	0x080601ac

080a1c50 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1c50:	b508      	push	{r3, lr}
 80a1c52:	4b02      	ldr	r3, [pc, #8]	; (80a1c5c <HAL_I2C_Read_Data+0xc>)
 80a1c54:	681b      	ldr	r3, [r3, #0]
 80a1c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1c58:	9301      	str	r3, [sp, #4]
 80a1c5a:	bd08      	pop	{r3, pc}
 80a1c5c:	080601ac 	.word	0x080601ac

080a1c60 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1c60:	b508      	push	{r3, lr}
 80a1c62:	4b02      	ldr	r3, [pc, #8]	; (80a1c6c <HAL_I2C_Peek_Data+0xc>)
 80a1c64:	681b      	ldr	r3, [r3, #0]
 80a1c66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1c68:	9301      	str	r3, [sp, #4]
 80a1c6a:	bd08      	pop	{r3, pc}
 80a1c6c:	080601ac 	.word	0x080601ac

080a1c70 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1c70:	b508      	push	{r3, lr}
 80a1c72:	4b02      	ldr	r3, [pc, #8]	; (80a1c7c <HAL_I2C_Flush_Data+0xc>)
 80a1c74:	681b      	ldr	r3, [r3, #0]
 80a1c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1c78:	9301      	str	r3, [sp, #4]
 80a1c7a:	bd08      	pop	{r3, pc}
 80a1c7c:	080601ac 	.word	0x080601ac

080a1c80 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1c80:	b508      	push	{r3, lr}
 80a1c82:	4b02      	ldr	r3, [pc, #8]	; (80a1c8c <HAL_I2C_Is_Enabled+0xc>)
 80a1c84:	681b      	ldr	r3, [r3, #0]
 80a1c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1c88:	9301      	str	r3, [sp, #4]
 80a1c8a:	bd08      	pop	{r3, pc}
 80a1c8c:	080601ac 	.word	0x080601ac

080a1c90 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1c90:	b508      	push	{r3, lr}
 80a1c92:	4b03      	ldr	r3, [pc, #12]	; (80a1ca0 <HAL_I2C_Init+0x10>)
 80a1c94:	681b      	ldr	r3, [r3, #0]
 80a1c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1c9a:	9301      	str	r3, [sp, #4]
 80a1c9c:	bd08      	pop	{r3, pc}
 80a1c9e:	0000      	.short	0x0000
 80a1ca0:	080601ac 	.word	0x080601ac

080a1ca4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1ca4:	b508      	push	{r3, lr}
 80a1ca6:	4b02      	ldr	r3, [pc, #8]	; (80a1cb0 <HAL_USART_Init+0xc>)
 80a1ca8:	681b      	ldr	r3, [r3, #0]
 80a1caa:	699b      	ldr	r3, [r3, #24]
 80a1cac:	9301      	str	r3, [sp, #4]
 80a1cae:	bd08      	pop	{r3, pc}
 80a1cb0:	080601c4 	.word	0x080601c4

080a1cb4 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
 80a1cb4:	b508      	push	{r3, lr}
 80a1cb6:	4b02      	ldr	r3, [pc, #8]	; (80a1cc0 <HAL_USART_End+0xc>)
 80a1cb8:	681b      	ldr	r3, [r3, #0]
 80a1cba:	6a1b      	ldr	r3, [r3, #32]
 80a1cbc:	9301      	str	r3, [sp, #4]
 80a1cbe:	bd08      	pop	{r3, pc}
 80a1cc0:	080601c4 	.word	0x080601c4

080a1cc4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1cc4:	b508      	push	{r3, lr}
 80a1cc6:	4b02      	ldr	r3, [pc, #8]	; (80a1cd0 <HAL_USART_Write_Data+0xc>)
 80a1cc8:	681b      	ldr	r3, [r3, #0]
 80a1cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1ccc:	9301      	str	r3, [sp, #4]
 80a1cce:	bd08      	pop	{r3, pc}
 80a1cd0:	080601c4 	.word	0x080601c4

080a1cd4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1cd4:	b508      	push	{r3, lr}
 80a1cd6:	4b02      	ldr	r3, [pc, #8]	; (80a1ce0 <HAL_USART_Available_Data+0xc>)
 80a1cd8:	681b      	ldr	r3, [r3, #0]
 80a1cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1cdc:	9301      	str	r3, [sp, #4]
 80a1cde:	bd08      	pop	{r3, pc}
 80a1ce0:	080601c4 	.word	0x080601c4

080a1ce4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1ce4:	b508      	push	{r3, lr}
 80a1ce6:	4b02      	ldr	r3, [pc, #8]	; (80a1cf0 <HAL_USART_Read_Data+0xc>)
 80a1ce8:	681b      	ldr	r3, [r3, #0]
 80a1cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1cec:	9301      	str	r3, [sp, #4]
 80a1cee:	bd08      	pop	{r3, pc}
 80a1cf0:	080601c4 	.word	0x080601c4

080a1cf4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1cf4:	b508      	push	{r3, lr}
 80a1cf6:	4b02      	ldr	r3, [pc, #8]	; (80a1d00 <HAL_USART_Peek_Data+0xc>)
 80a1cf8:	681b      	ldr	r3, [r3, #0]
 80a1cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1cfc:	9301      	str	r3, [sp, #4]
 80a1cfe:	bd08      	pop	{r3, pc}
 80a1d00:	080601c4 	.word	0x080601c4

080a1d04 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1d04:	b508      	push	{r3, lr}
 80a1d06:	4b02      	ldr	r3, [pc, #8]	; (80a1d10 <HAL_USART_Flush_Data+0xc>)
 80a1d08:	681b      	ldr	r3, [r3, #0]
 80a1d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1d0c:	9301      	str	r3, [sp, #4]
 80a1d0e:	bd08      	pop	{r3, pc}
 80a1d10:	080601c4 	.word	0x080601c4

080a1d14 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1d14:	b508      	push	{r3, lr}
 80a1d16:	4b02      	ldr	r3, [pc, #8]	; (80a1d20 <HAL_USART_Is_Enabled+0xc>)
 80a1d18:	681b      	ldr	r3, [r3, #0]
 80a1d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1d1c:	9301      	str	r3, [sp, #4]
 80a1d1e:	bd08      	pop	{r3, pc}
 80a1d20:	080601c4 	.word	0x080601c4

080a1d24 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1d24:	b508      	push	{r3, lr}
 80a1d26:	4b02      	ldr	r3, [pc, #8]	; (80a1d30 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1d28:	681b      	ldr	r3, [r3, #0]
 80a1d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1d2c:	9301      	str	r3, [sp, #4]
 80a1d2e:	bd08      	pop	{r3, pc}
 80a1d30:	080601c4 	.word	0x080601c4

080a1d34 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a1d34:	b508      	push	{r3, lr}
 80a1d36:	4b02      	ldr	r3, [pc, #8]	; (80a1d40 <HAL_USART_BeginConfig+0xc>)
 80a1d38:	681b      	ldr	r3, [r3, #0]
 80a1d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1d3c:	9301      	str	r3, [sp, #4]
 80a1d3e:	bd08      	pop	{r3, pc}
 80a1d40:	080601c4 	.word	0x080601c4

080a1d44 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1d44:	b508      	push	{r3, lr}
 80a1d46:	4b02      	ldr	r3, [pc, #8]	; (80a1d50 <os_mutex_create+0xc>)
 80a1d48:	681b      	ldr	r3, [r3, #0]
 80a1d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1d4c:	9301      	str	r3, [sp, #4]
 80a1d4e:	bd08      	pop	{r3, pc}
 80a1d50:	080601d0 	.word	0x080601d0

080a1d54 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a1d54:	b508      	push	{r3, lr}
 80a1d56:	4b02      	ldr	r3, [pc, #8]	; (80a1d60 <os_mutex_recursive_create+0xc>)
 80a1d58:	681b      	ldr	r3, [r3, #0]
 80a1d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1d5c:	9301      	str	r3, [sp, #4]
 80a1d5e:	bd08      	pop	{r3, pc}
 80a1d60:	080601d0 	.word	0x080601d0

080a1d64 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
 80a1d64:	b508      	push	{r3, lr}
 80a1d66:	4b02      	ldr	r3, [pc, #8]	; (80a1d70 <os_mutex_recursive_lock+0xc>)
 80a1d68:	681b      	ldr	r3, [r3, #0]
 80a1d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1d6c:	9301      	str	r3, [sp, #4]
 80a1d6e:	bd08      	pop	{r3, pc}
 80a1d70:	080601d0 	.word	0x080601d0

080a1d74 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
 80a1d74:	b508      	push	{r3, lr}
 80a1d76:	4b02      	ldr	r3, [pc, #8]	; (80a1d80 <os_mutex_recursive_unlock+0xc>)
 80a1d78:	681b      	ldr	r3, [r3, #0]
 80a1d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1d7c:	9301      	str	r3, [sp, #4]
 80a1d7e:	bd08      	pop	{r3, pc}
 80a1d80:	080601d0 	.word	0x080601d0

080a1d84 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1d84:	b508      	push	{r3, lr}
 80a1d86:	4b02      	ldr	r3, [pc, #8]	; (80a1d90 <HAL_RNG_GetRandomNumber+0xc>)
 80a1d88:	681b      	ldr	r3, [r3, #0]
 80a1d8a:	685b      	ldr	r3, [r3, #4]
 80a1d8c:	9301      	str	r3, [sp, #4]
 80a1d8e:	bd08      	pop	{r3, pc}
 80a1d90:	0806019c 	.word	0x0806019c

080a1d94 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1d94:	b508      	push	{r3, lr}
 80a1d96:	4b02      	ldr	r3, [pc, #8]	; (80a1da0 <HAL_Delay_Microseconds+0xc>)
 80a1d98:	681b      	ldr	r3, [r3, #0]
 80a1d9a:	68db      	ldr	r3, [r3, #12]
 80a1d9c:	9301      	str	r3, [sp, #4]
 80a1d9e:	bd08      	pop	{r3, pc}
 80a1da0:	0806019c 	.word	0x0806019c

080a1da4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1da4:	b508      	push	{r3, lr}
 80a1da6:	4b02      	ldr	r3, [pc, #8]	; (80a1db0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1da8:	681b      	ldr	r3, [r3, #0]
 80a1daa:	695b      	ldr	r3, [r3, #20]
 80a1dac:	9301      	str	r3, [sp, #4]
 80a1dae:	bd08      	pop	{r3, pc}
 80a1db0:	0806019c 	.word	0x0806019c

080a1db4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a1db4:	b508      	push	{r3, lr}
 80a1db6:	4b02      	ldr	r3, [pc, #8]	; (80a1dc0 <HAL_RTC_Get_UnixTime+0xc>)
 80a1db8:	681b      	ldr	r3, [r3, #0]
 80a1dba:	69db      	ldr	r3, [r3, #28]
 80a1dbc:	9301      	str	r3, [sp, #4]
 80a1dbe:	bd08      	pop	{r3, pc}
 80a1dc0:	0806019c 	.word	0x0806019c

080a1dc4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a1dc4:	b508      	push	{r3, lr}
 80a1dc6:	4b02      	ldr	r3, [pc, #8]	; (80a1dd0 <HAL_RTC_Time_Is_Valid+0xc>)
 80a1dc8:	681b      	ldr	r3, [r3, #0]
 80a1dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1dcc:	9301      	str	r3, [sp, #4]
 80a1dce:	bd08      	pop	{r3, pc}
 80a1dd0:	0806019c 	.word	0x0806019c

080a1dd4 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a1dd4:	b508      	push	{r3, lr}
 80a1dd6:	4b02      	ldr	r3, [pc, #8]	; (80a1de0 <HAL_SPI_Begin+0xc>)
 80a1dd8:	681b      	ldr	r3, [r3, #0]
 80a1dda:	681b      	ldr	r3, [r3, #0]
 80a1ddc:	9301      	str	r3, [sp, #4]
 80a1dde:	bd08      	pop	{r3, pc}
 80a1de0:	080601b4 	.word	0x080601b4

080a1de4 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a1de4:	b508      	push	{r3, lr}
 80a1de6:	4b02      	ldr	r3, [pc, #8]	; (80a1df0 <HAL_SPI_Set_Bit_Order+0xc>)
 80a1de8:	681b      	ldr	r3, [r3, #0]
 80a1dea:	689b      	ldr	r3, [r3, #8]
 80a1dec:	9301      	str	r3, [sp, #4]
 80a1dee:	bd08      	pop	{r3, pc}
 80a1df0:	080601b4 	.word	0x080601b4

080a1df4 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a1df4:	b508      	push	{r3, lr}
 80a1df6:	4b02      	ldr	r3, [pc, #8]	; (80a1e00 <HAL_SPI_Set_Data_Mode+0xc>)
 80a1df8:	681b      	ldr	r3, [r3, #0]
 80a1dfa:	68db      	ldr	r3, [r3, #12]
 80a1dfc:	9301      	str	r3, [sp, #4]
 80a1dfe:	bd08      	pop	{r3, pc}
 80a1e00:	080601b4 	.word	0x080601b4

080a1e04 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a1e04:	b508      	push	{r3, lr}
 80a1e06:	4b02      	ldr	r3, [pc, #8]	; (80a1e10 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a1e08:	681b      	ldr	r3, [r3, #0]
 80a1e0a:	691b      	ldr	r3, [r3, #16]
 80a1e0c:	9301      	str	r3, [sp, #4]
 80a1e0e:	bd08      	pop	{r3, pc}
 80a1e10:	080601b4 	.word	0x080601b4

080a1e14 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a1e14:	b508      	push	{r3, lr}
 80a1e16:	4b02      	ldr	r3, [pc, #8]	; (80a1e20 <HAL_SPI_Send_Receive_Data+0xc>)
 80a1e18:	681b      	ldr	r3, [r3, #0]
 80a1e1a:	695b      	ldr	r3, [r3, #20]
 80a1e1c:	9301      	str	r3, [sp, #4]
 80a1e1e:	bd08      	pop	{r3, pc}
 80a1e20:	080601b4 	.word	0x080601b4

080a1e24 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1e24:	b508      	push	{r3, lr}
 80a1e26:	4b02      	ldr	r3, [pc, #8]	; (80a1e30 <HAL_SPI_Init+0xc>)
 80a1e28:	681b      	ldr	r3, [r3, #0]
 80a1e2a:	69db      	ldr	r3, [r3, #28]
 80a1e2c:	9301      	str	r3, [sp, #4]
 80a1e2e:	bd08      	pop	{r3, pc}
 80a1e30:	080601b4 	.word	0x080601b4

080a1e34 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1e34:	b508      	push	{r3, lr}
 80a1e36:	4b02      	ldr	r3, [pc, #8]	; (80a1e40 <HAL_SPI_Is_Enabled+0xc>)
 80a1e38:	681b      	ldr	r3, [r3, #0]
 80a1e3a:	6a1b      	ldr	r3, [r3, #32]
 80a1e3c:	9301      	str	r3, [sp, #4]
 80a1e3e:	bd08      	pop	{r3, pc}
 80a1e40:	080601b4 	.word	0x080601b4

080a1e44 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a1e44:	b508      	push	{r3, lr}
 80a1e46:	4b02      	ldr	r3, [pc, #8]	; (80a1e50 <HAL_SPI_Info+0xc>)
 80a1e48:	681b      	ldr	r3, [r3, #0]
 80a1e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1e4c:	9301      	str	r3, [sp, #4]
 80a1e4e:	bd08      	pop	{r3, pc}
 80a1e50:	080601b4 	.word	0x080601b4

080a1e54 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1e54:	b508      	push	{r3, lr}
 80a1e56:	4b02      	ldr	r3, [pc, #8]	; (80a1e60 <HAL_Pin_Map+0xc>)
 80a1e58:	681b      	ldr	r3, [r3, #0]
 80a1e5a:	681b      	ldr	r3, [r3, #0]
 80a1e5c:	9301      	str	r3, [sp, #4]
 80a1e5e:	bd08      	pop	{r3, pc}
 80a1e60:	080601b0 	.word	0x080601b0

080a1e64 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1e64:	b508      	push	{r3, lr}
 80a1e66:	4b02      	ldr	r3, [pc, #8]	; (80a1e70 <HAL_Validate_Pin_Function+0xc>)
 80a1e68:	681b      	ldr	r3, [r3, #0]
 80a1e6a:	685b      	ldr	r3, [r3, #4]
 80a1e6c:	9301      	str	r3, [sp, #4]
 80a1e6e:	bd08      	pop	{r3, pc}
 80a1e70:	080601b0 	.word	0x080601b0

080a1e74 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1e74:	b508      	push	{r3, lr}
 80a1e76:	4b02      	ldr	r3, [pc, #8]	; (80a1e80 <HAL_Pin_Mode+0xc>)
 80a1e78:	681b      	ldr	r3, [r3, #0]
 80a1e7a:	689b      	ldr	r3, [r3, #8]
 80a1e7c:	9301      	str	r3, [sp, #4]
 80a1e7e:	bd08      	pop	{r3, pc}
 80a1e80:	080601b0 	.word	0x080601b0

080a1e84 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1e84:	b508      	push	{r3, lr}
 80a1e86:	4b02      	ldr	r3, [pc, #8]	; (80a1e90 <HAL_Get_Pin_Mode+0xc>)
 80a1e88:	681b      	ldr	r3, [r3, #0]
 80a1e8a:	68db      	ldr	r3, [r3, #12]
 80a1e8c:	9301      	str	r3, [sp, #4]
 80a1e8e:	bd08      	pop	{r3, pc}
 80a1e90:	080601b0 	.word	0x080601b0

080a1e94 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1e94:	b508      	push	{r3, lr}
 80a1e96:	4b02      	ldr	r3, [pc, #8]	; (80a1ea0 <HAL_GPIO_Write+0xc>)
 80a1e98:	681b      	ldr	r3, [r3, #0]
 80a1e9a:	691b      	ldr	r3, [r3, #16]
 80a1e9c:	9301      	str	r3, [sp, #4]
 80a1e9e:	bd08      	pop	{r3, pc}
 80a1ea0:	080601b0 	.word	0x080601b0

080a1ea4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1ea4:	b508      	push	{r3, lr}
 80a1ea6:	4b02      	ldr	r3, [pc, #8]	; (80a1eb0 <HAL_GPIO_Read+0xc>)
 80a1ea8:	681b      	ldr	r3, [r3, #0]
 80a1eaa:	695b      	ldr	r3, [r3, #20]
 80a1eac:	9301      	str	r3, [sp, #4]
 80a1eae:	bd08      	pop	{r3, pc}
 80a1eb0:	080601b0 	.word	0x080601b0

080a1eb4 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a1eb4:	b508      	push	{r3, lr}
 80a1eb6:	4b02      	ldr	r3, [pc, #8]	; (80a1ec0 <HAL_Interrupts_Enable_All+0xc>)
 80a1eb8:	681b      	ldr	r3, [r3, #0]
 80a1eba:	6a1b      	ldr	r3, [r3, #32]
 80a1ebc:	9301      	str	r3, [sp, #4]
 80a1ebe:	bd08      	pop	{r3, pc}
 80a1ec0:	080601b0 	.word	0x080601b0

080a1ec4 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a1ec4:	b508      	push	{r3, lr}
 80a1ec6:	4b02      	ldr	r3, [pc, #8]	; (80a1ed0 <HAL_Interrupts_Disable_All+0xc>)
 80a1ec8:	681b      	ldr	r3, [r3, #0]
 80a1eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1ecc:	9301      	str	r3, [sp, #4]
 80a1ece:	bd08      	pop	{r3, pc}
 80a1ed0:	080601b0 	.word	0x080601b0

080a1ed4 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a1ed4:	b508      	push	{r3, lr}
 80a1ed6:	4b02      	ldr	r3, [pc, #8]	; (80a1ee0 <HAL_ADC_Read+0xc>)
 80a1ed8:	681b      	ldr	r3, [r3, #0]
 80a1eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1edc:	9301      	str	r3, [sp, #4]
 80a1ede:	bd08      	pop	{r3, pc}
 80a1ee0:	080601b0 	.word	0x080601b0

080a1ee4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a1ee4:	b508      	push	{r3, lr}
 80a1ee6:	4b02      	ldr	r3, [pc, #8]	; (80a1ef0 <panic_+0xc>)
 80a1ee8:	681b      	ldr	r3, [r3, #0]
 80a1eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1eec:	9301      	str	r3, [sp, #4]
 80a1eee:	bd08      	pop	{r3, pc}
 80a1ef0:	080201a8 	.word	0x080201a8

080a1ef4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
 80a1ef4:	b508      	push	{r3, lr}
 80a1ef6:	4b02      	ldr	r3, [pc, #8]	; (80a1f00 <log_level_name+0xc>)
 80a1ef8:	681b      	ldr	r3, [r3, #0]
 80a1efa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1efc:	9301      	str	r3, [sp, #4]
 80a1efe:	bd08      	pop	{r3, pc}
 80a1f00:	080201a8 	.word	0x080201a8

080a1f04 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
 80a1f04:	b508      	push	{r3, lr}
 80a1f06:	4b02      	ldr	r3, [pc, #8]	; (80a1f10 <log_set_callbacks+0xc>)
 80a1f08:	681b      	ldr	r3, [r3, #0]
 80a1f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1f0c:	9301      	str	r3, [sp, #4]
 80a1f0e:	bd08      	pop	{r3, pc}
 80a1f10:	080201a8 	.word	0x080201a8

080a1f14 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a1f14:	b508      	push	{r3, lr}
 80a1f16:	4b02      	ldr	r3, [pc, #8]	; (80a1f20 <spark_process+0xc>)
 80a1f18:	681b      	ldr	r3, [r3, #0]
 80a1f1a:	689b      	ldr	r3, [r3, #8]
 80a1f1c:	9301      	str	r3, [sp, #4]
 80a1f1e:	bd08      	pop	{r3, pc}
 80a1f20:	080601cc 	.word	0x080601cc

080a1f24 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1f24:	b508      	push	{r3, lr}
 80a1f26:	4b02      	ldr	r3, [pc, #8]	; (80a1f30 <spark_cloud_flag_connected+0xc>)
 80a1f28:	681b      	ldr	r3, [r3, #0]
 80a1f2a:	695b      	ldr	r3, [r3, #20]
 80a1f2c:	9301      	str	r3, [sp, #4]
 80a1f2e:	bd08      	pop	{r3, pc}
 80a1f30:	080601cc 	.word	0x080601cc

080a1f34 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a1f34:	b508      	push	{r3, lr}
 80a1f36:	4b02      	ldr	r3, [pc, #8]	; (80a1f40 <spark_sync_time_pending+0xc>)
 80a1f38:	681b      	ldr	r3, [r3, #0]
 80a1f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1f3c:	9301      	str	r3, [sp, #4]
 80a1f3e:	bd08      	pop	{r3, pc}
 80a1f40:	080601cc 	.word	0x080601cc

080a1f44 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1f44:	b508      	push	{r3, lr}
 80a1f46:	4b02      	ldr	r3, [pc, #8]	; (80a1f50 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1f48:	681b      	ldr	r3, [r3, #0]
 80a1f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1f4c:	9301      	str	r3, [sp, #4]
 80a1f4e:	bd08      	pop	{r3, pc}
 80a1f50:	080601cc 	.word	0x080601cc

080a1f54 <spark_publish_vitals>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
 80a1f54:	b508      	push	{r3, lr}
 80a1f56:	4b02      	ldr	r3, [pc, #8]	; (80a1f60 <spark_publish_vitals+0xc>)
 80a1f58:	681b      	ldr	r3, [r3, #0]
 80a1f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1f5c:	9301      	str	r3, [sp, #4]
 80a1f5e:	bd08      	pop	{r3, pc}
 80a1f60:	080601cc 	.word	0x080601cc

080a1f64 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1f64:	b508      	push	{r3, lr}
 80a1f66:	4b02      	ldr	r3, [pc, #8]	; (80a1f70 <network_connect+0xc>)
 80a1f68:	681b      	ldr	r3, [r3, #0]
 80a1f6a:	685b      	ldr	r3, [r3, #4]
 80a1f6c:	9301      	str	r3, [sp, #4]
 80a1f6e:	bd08      	pop	{r3, pc}
 80a1f70:	080601c8 	.word	0x080601c8

080a1f74 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1f74:	b508      	push	{r3, lr}
 80a1f76:	4b02      	ldr	r3, [pc, #8]	; (80a1f80 <network_connecting+0xc>)
 80a1f78:	681b      	ldr	r3, [r3, #0]
 80a1f7a:	689b      	ldr	r3, [r3, #8]
 80a1f7c:	9301      	str	r3, [sp, #4]
 80a1f7e:	bd08      	pop	{r3, pc}
 80a1f80:	080601c8 	.word	0x080601c8

080a1f84 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1f84:	b508      	push	{r3, lr}
 80a1f86:	4b02      	ldr	r3, [pc, #8]	; (80a1f90 <network_disconnect+0xc>)
 80a1f88:	681b      	ldr	r3, [r3, #0]
 80a1f8a:	68db      	ldr	r3, [r3, #12]
 80a1f8c:	9301      	str	r3, [sp, #4]
 80a1f8e:	bd08      	pop	{r3, pc}
 80a1f90:	080601c8 	.word	0x080601c8

080a1f94 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1f94:	b508      	push	{r3, lr}
 80a1f96:	4b02      	ldr	r3, [pc, #8]	; (80a1fa0 <network_ready+0xc>)
 80a1f98:	681b      	ldr	r3, [r3, #0]
 80a1f9a:	691b      	ldr	r3, [r3, #16]
 80a1f9c:	9301      	str	r3, [sp, #4]
 80a1f9e:	bd08      	pop	{r3, pc}
 80a1fa0:	080601c8 	.word	0x080601c8

080a1fa4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1fa4:	b508      	push	{r3, lr}
 80a1fa6:	4b02      	ldr	r3, [pc, #8]	; (80a1fb0 <network_on+0xc>)
 80a1fa8:	681b      	ldr	r3, [r3, #0]
 80a1faa:	695b      	ldr	r3, [r3, #20]
 80a1fac:	9301      	str	r3, [sp, #4]
 80a1fae:	bd08      	pop	{r3, pc}
 80a1fb0:	080601c8 	.word	0x080601c8

080a1fb4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1fb4:	b508      	push	{r3, lr}
 80a1fb6:	4b02      	ldr	r3, [pc, #8]	; (80a1fc0 <network_off+0xc>)
 80a1fb8:	681b      	ldr	r3, [r3, #0]
 80a1fba:	699b      	ldr	r3, [r3, #24]
 80a1fbc:	9301      	str	r3, [sp, #4]
 80a1fbe:	bd08      	pop	{r3, pc}
 80a1fc0:	080601c8 	.word	0x080601c8

080a1fc4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1fc4:	b508      	push	{r3, lr}
 80a1fc6:	4b02      	ldr	r3, [pc, #8]	; (80a1fd0 <network_listen+0xc>)
 80a1fc8:	681b      	ldr	r3, [r3, #0]
 80a1fca:	69db      	ldr	r3, [r3, #28]
 80a1fcc:	9301      	str	r3, [sp, #4]
 80a1fce:	bd08      	pop	{r3, pc}
 80a1fd0:	080601c8 	.word	0x080601c8

080a1fd4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1fd4:	b508      	push	{r3, lr}
 80a1fd6:	4b02      	ldr	r3, [pc, #8]	; (80a1fe0 <network_listening+0xc>)
 80a1fd8:	681b      	ldr	r3, [r3, #0]
 80a1fda:	6a1b      	ldr	r3, [r3, #32]
 80a1fdc:	9301      	str	r3, [sp, #4]
 80a1fde:	bd08      	pop	{r3, pc}
 80a1fe0:	080601c8 	.word	0x080601c8

080a1fe4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1fe4:	b508      	push	{r3, lr}
 80a1fe6:	4b02      	ldr	r3, [pc, #8]	; (80a1ff0 <network_set_listen_timeout+0xc>)
 80a1fe8:	681b      	ldr	r3, [r3, #0]
 80a1fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1fec:	9301      	str	r3, [sp, #4]
 80a1fee:	bd08      	pop	{r3, pc}
 80a1ff0:	080601c8 	.word	0x080601c8

080a1ff4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1ff4:	b508      	push	{r3, lr}
 80a1ff6:	4b02      	ldr	r3, [pc, #8]	; (80a2000 <network_get_listen_timeout+0xc>)
 80a1ff8:	681b      	ldr	r3, [r3, #0]
 80a1ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1ffc:	9301      	str	r3, [sp, #4]
 80a1ffe:	bd08      	pop	{r3, pc}
 80a2000:	080601c8 	.word	0x080601c8

080a2004 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a2004:	b508      	push	{r3, lr}
 80a2006:	4b02      	ldr	r3, [pc, #8]	; (80a2010 <system_mode+0xc>)
 80a2008:	681b      	ldr	r3, [r3, #0]
 80a200a:	681b      	ldr	r3, [r3, #0]
 80a200c:	9301      	str	r3, [sp, #4]
 80a200e:	bd08      	pop	{r3, pc}
 80a2010:	080601a4 	.word	0x080601a4

080a2014 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2014:	b508      	push	{r3, lr}
 80a2016:	4b02      	ldr	r3, [pc, #8]	; (80a2020 <set_system_mode+0xc>)
 80a2018:	681b      	ldr	r3, [r3, #0]
 80a201a:	685b      	ldr	r3, [r3, #4]
 80a201c:	9301      	str	r3, [sp, #4]
 80a201e:	bd08      	pop	{r3, pc}
 80a2020:	080601a4 	.word	0x080601a4

080a2024 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2024:	b508      	push	{r3, lr}
 80a2026:	4b02      	ldr	r3, [pc, #8]	; (80a2030 <system_delay_ms+0xc>)
 80a2028:	681b      	ldr	r3, [r3, #0]
 80a202a:	695b      	ldr	r3, [r3, #20]
 80a202c:	9301      	str	r3, [sp, #4]
 80a202e:	bd08      	pop	{r3, pc}
 80a2030:	080601a4 	.word	0x080601a4

080a2034 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a2034:	b508      	push	{r3, lr}
 80a2036:	4b02      	ldr	r3, [pc, #8]	; (80a2040 <system_thread_get_state+0xc>)
 80a2038:	681b      	ldr	r3, [r3, #0]
 80a203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a203c:	9301      	str	r3, [sp, #4]
 80a203e:	bd08      	pop	{r3, pc}
 80a2040:	080601a4 	.word	0x080601a4

080a2044 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2044:	b508      	push	{r3, lr}
 80a2046:	4b03      	ldr	r3, [pc, #12]	; (80a2054 <system_ctrl_set_app_request_handler+0x10>)
 80a2048:	681b      	ldr	r3, [r3, #0]
 80a204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a204e:	9301      	str	r3, [sp, #4]
 80a2050:	bd08      	pop	{r3, pc}
 80a2052:	0000      	.short	0x0000
 80a2054:	080601a4 	.word	0x080601a4

080a2058 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2058:	b508      	push	{r3, lr}
 80a205a:	4b03      	ldr	r3, [pc, #12]	; (80a2068 <system_ctrl_set_result+0x10>)
 80a205c:	681b      	ldr	r3, [r3, #0]
 80a205e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2062:	9301      	str	r3, [sp, #4]
 80a2064:	bd08      	pop	{r3, pc}
 80a2066:	0000      	.short	0x0000
 80a2068:	080601a4 	.word	0x080601a4

080a206c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a206c:	b508      	push	{r3, lr}
 80a206e:	4b02      	ldr	r3, [pc, #8]	; (80a2078 <malloc+0xc>)
 80a2070:	681b      	ldr	r3, [r3, #0]
 80a2072:	681b      	ldr	r3, [r3, #0]
 80a2074:	9301      	str	r3, [sp, #4]
 80a2076:	bd08      	pop	{r3, pc}
 80a2078:	080601a0 	.word	0x080601a0

080a207c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a207c:	b508      	push	{r3, lr}
 80a207e:	4b02      	ldr	r3, [pc, #8]	; (80a2088 <free+0xc>)
 80a2080:	681b      	ldr	r3, [r3, #0]
 80a2082:	685b      	ldr	r3, [r3, #4]
 80a2084:	9301      	str	r3, [sp, #4]
 80a2086:	bd08      	pop	{r3, pc}
 80a2088:	080601a0 	.word	0x080601a0

080a208c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a208c:	b508      	push	{r3, lr}
 80a208e:	4b02      	ldr	r3, [pc, #8]	; (80a2098 <realloc+0xc>)
 80a2090:	681b      	ldr	r3, [r3, #0]
 80a2092:	689b      	ldr	r3, [r3, #8]
 80a2094:	9301      	str	r3, [sp, #4]
 80a2096:	bd08      	pop	{r3, pc}
 80a2098:	080601a0 	.word	0x080601a0

080a209c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a209c:	b508      	push	{r3, lr}
 80a209e:	4b02      	ldr	r3, [pc, #8]	; (80a20a8 <sprintf+0xc>)
 80a20a0:	681b      	ldr	r3, [r3, #0]
 80a20a2:	68db      	ldr	r3, [r3, #12]
 80a20a4:	9301      	str	r3, [sp, #4]
 80a20a6:	bd08      	pop	{r3, pc}
 80a20a8:	080601a0 	.word	0x080601a0

080a20ac <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a20ac:	b508      	push	{r3, lr}
 80a20ae:	4b02      	ldr	r3, [pc, #8]	; (80a20b8 <siprintf+0xc>)
 80a20b0:	681b      	ldr	r3, [r3, #0]
 80a20b2:	691b      	ldr	r3, [r3, #16]
 80a20b4:	9301      	str	r3, [sp, #4]
 80a20b6:	bd08      	pop	{r3, pc}
 80a20b8:	080601a0 	.word	0x080601a0

080a20bc <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a20bc:	b508      	push	{r3, lr}
 80a20be:	4b02      	ldr	r3, [pc, #8]	; (80a20c8 <siscanf+0xc>)
 80a20c0:	681b      	ldr	r3, [r3, #0]
 80a20c2:	699b      	ldr	r3, [r3, #24]
 80a20c4:	9301      	str	r3, [sp, #4]
 80a20c6:	bd08      	pop	{r3, pc}
 80a20c8:	080601a0 	.word	0x080601a0

080a20cc <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a20cc:	b508      	push	{r3, lr}
 80a20ce:	4b02      	ldr	r3, [pc, #8]	; (80a20d8 <snprintf+0xc>)
 80a20d0:	681b      	ldr	r3, [r3, #0]
 80a20d2:	69db      	ldr	r3, [r3, #28]
 80a20d4:	9301      	str	r3, [sp, #4]
 80a20d6:	bd08      	pop	{r3, pc}
 80a20d8:	080601a0 	.word	0x080601a0

080a20dc <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 80a20dc:	b508      	push	{r3, lr}
 80a20de:	4b02      	ldr	r3, [pc, #8]	; (80a20e8 <sniprintf+0xc>)
 80a20e0:	681b      	ldr	r3, [r3, #0]
 80a20e2:	6a1b      	ldr	r3, [r3, #32]
 80a20e4:	9301      	str	r3, [sp, #4]
 80a20e6:	bd08      	pop	{r3, pc}
 80a20e8:	080601a0 	.word	0x080601a0

080a20ec <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a20ec:	b508      	push	{r3, lr}
 80a20ee:	4b02      	ldr	r3, [pc, #8]	; (80a20f8 <vsnprintf+0xc>)
 80a20f0:	681b      	ldr	r3, [r3, #0]
 80a20f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a20f4:	9301      	str	r3, [sp, #4]
 80a20f6:	bd08      	pop	{r3, pc}
 80a20f8:	080601a0 	.word	0x080601a0

080a20fc <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a20fc:	b508      	push	{r3, lr}
 80a20fe:	4b02      	ldr	r3, [pc, #8]	; (80a2108 <abort+0xc>)
 80a2100:	681b      	ldr	r3, [r3, #0]
 80a2102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2104:	9301      	str	r3, [sp, #4]
 80a2106:	bd08      	pop	{r3, pc}
 80a2108:	080601a0 	.word	0x080601a0

080a210c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a210c:	b508      	push	{r3, lr}
 80a210e:	4b02      	ldr	r3, [pc, #8]	; (80a2118 <_malloc_r+0xc>)
 80a2110:	681b      	ldr	r3, [r3, #0]
 80a2112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2114:	9301      	str	r3, [sp, #4]
 80a2116:	bd08      	pop	{r3, pc}
 80a2118:	080601a0 	.word	0x080601a0

080a211c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
 80a211c:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
 80a2120:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
 80a2122:	f812 1c10 	ldrb.w	r1, [r2, #-16]
 80a2126:	4610      	mov	r0, r2
 80a2128:	2901      	cmp	r1, #1
 80a212a:	d104      	bne.n	80a2136 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
 80a212c:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80a2130:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80a2134:	e004      	b.n	80a2140 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
 80a2136:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
 80a2138:	bf04      	itt	eq
 80a213a:	f852 1c04 	ldreq.w	r1, [r2, #-4]
 80a213e:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
 80a2140:	3b01      	subs	r3, #1
 80a2142:	f102 0210 	add.w	r2, r2, #16
 80a2146:	d1ec      	bne.n	80a2122 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
 80a2148:	4770      	bx	lr

080a214a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
 80a214a:	b40e      	push	{r1, r2, r3}
 80a214c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2150:	b087      	sub	sp, #28
 80a2152:	af00      	add	r7, sp, #0
 80a2154:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80a2158:	f854 6b04 	ldr.w	r6, [r4], #4
 80a215c:	4605      	mov	r5, r0
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a215e:	4623      	mov	r3, r4
 80a2160:	4632      	mov	r2, r6
 80a2162:	2110      	movs	r1, #16
 80a2164:	f107 0008 	add.w	r0, r7, #8
}

void spark::JSONWriter::printf(const char *fmt, ...) {
    char buf[16];
    va_list args;
    va_start(args, fmt);
 80a2168:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a216a:	f7ff ffbf 	bl	80a20ec <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
 80a216e:	280f      	cmp	r0, #15
 80a2170:	d916      	bls.n	80a21a0 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
 80a2172:	f100 0308 	add.w	r3, r0, #8
 80a2176:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
 80a217a:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
 80a217c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a2180:	4632      	mov	r2, r6
 80a2182:	1c41      	adds	r1, r0, #1
 80a2184:	4623      	mov	r3, r4
 80a2186:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
 80a2188:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
 80a218a:	f7ff ffaf 	bl	80a20ec <vsnprintf>
        va_end(args);
        if (n > 0) {
 80a218e:	1e02      	subs	r2, r0, #0
 80a2190:	dd04      	ble.n	80a219c <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
 80a2192:	682b      	ldr	r3, [r5, #0]
 80a2194:	4669      	mov	r1, sp
 80a2196:	689b      	ldr	r3, [r3, #8]
 80a2198:	4628      	mov	r0, r5
 80a219a:	4798      	blx	r3
 80a219c:	46c5      	mov	sp, r8
 80a219e:	e007      	b.n	80a21b0 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
 80a21a0:	b130      	cbz	r0, 80a21b0 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
 80a21a2:	682b      	ldr	r3, [r5, #0]
 80a21a4:	4602      	mov	r2, r0
 80a21a6:	689b      	ldr	r3, [r3, #8]
 80a21a8:	f107 0108 	add.w	r1, r7, #8
 80a21ac:	4628      	mov	r0, r5
 80a21ae:	4798      	blx	r3
    }
}
 80a21b0:	371c      	adds	r7, #28
 80a21b2:	46bd      	mov	sp, r7
 80a21b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80a21b8:	b003      	add	sp, #12
 80a21ba:	4770      	bx	lr

080a21bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a21bc:	b510      	push	{r4, lr}
 80a21be:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a21c0:	6803      	ldr	r3, [r0, #0]
 80a21c2:	689b      	ldr	r3, [r3, #8]
 80a21c4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a21c6:	68a3      	ldr	r3, [r4, #8]
 80a21c8:	3b01      	subs	r3, #1
 80a21ca:	60a3      	str	r3, [r4, #8]
 80a21cc:	b92b      	cbnz	r3, 80a21da <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12+0x1e>
            _M_destroy();
 80a21ce:	6823      	ldr	r3, [r4, #0]
 80a21d0:	4620      	mov	r0, r4
        }
    }
 80a21d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a21d6:	68db      	ldr	r3, [r3, #12]
 80a21d8:	4718      	bx	r3
 80a21da:	bd10      	pop	{r4, pc}

080a21dc <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80a21dc:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 80a21de:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 80a21e0:	ab02      	add	r3, sp, #8
 80a21e2:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 80a21e6:	6894      	ldr	r4, [r2, #8]
 80a21e8:	4619      	mov	r1, r3
 80a21ea:	2201      	movs	r2, #1
 80a21ec:	47a0      	blx	r4
}
 80a21ee:	b002      	add	sp, #8
 80a21f0:	bd10      	pop	{r4, pc}

080a21f2 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
 80a21f2:	6883      	ldr	r3, [r0, #8]
 80a21f4:	b1fb      	cbz	r3, 80a2236 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
 80a21f6:	781a      	ldrb	r2, [r3, #0]
 80a21f8:	2a03      	cmp	r2, #3
 80a21fa:	d81a      	bhi.n	80a2232 <_ZNK5spark9JSONValue4typeEv+0x40>
 80a21fc:	e8df f002 	tbb	[pc, r2]
 80a2200:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
 80a2204:	2005      	movs	r0, #5
 80a2206:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
 80a2208:	6802      	ldr	r2, [r0, #0]
 80a220a:	685b      	ldr	r3, [r3, #4]
 80a220c:	6852      	ldr	r2, [r2, #4]
 80a220e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
 80a2210:	282d      	cmp	r0, #45	; 0x2d
 80a2212:	d014      	beq.n	80a223e <_ZNK5spark9JSONValue4typeEv+0x4c>
 80a2214:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80a2218:	2b09      	cmp	r3, #9
 80a221a:	d910      	bls.n	80a223e <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
 80a221c:	2874      	cmp	r0, #116	; 0x74
 80a221e:	d010      	beq.n	80a2242 <_ZNK5spark9JSONValue4typeEv+0x50>
 80a2220:	2866      	cmp	r0, #102	; 0x66
 80a2222:	d00e      	beq.n	80a2242 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
 80a2224:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
 80a2228:	4258      	negs	r0, r3
 80a222a:	4158      	adcs	r0, r3
 80a222c:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
 80a222e:	2006      	movs	r0, #6
 80a2230:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
 80a2232:	2000      	movs	r0, #0
 80a2234:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
 80a2236:	4618      	mov	r0, r3
 80a2238:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
 80a223a:	2004      	movs	r0, #4
 80a223c:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
 80a223e:	2003      	movs	r0, #3
 80a2240:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
 80a2242:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
 80a2244:	4770      	bx	lr

080a2246 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
 80a2246:	b510      	push	{r4, lr}
 80a2248:	4604      	mov	r4, r0
    switch (type()) {
 80a224a:	f7ff ffd2 	bl	80a21f2 <_ZNK5spark9JSONValue4typeEv>
 80a224e:	2802      	cmp	r0, #2
 80a2250:	d00d      	beq.n	80a226e <_ZNK5spark9JSONValue5toIntEv+0x28>
 80a2252:	d316      	bcc.n	80a2282 <_ZNK5spark9JSONValue5toIntEv+0x3c>
 80a2254:	2804      	cmp	r0, #4
 80a2256:	d814      	bhi.n	80a2282 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
 80a2258:	6822      	ldr	r2, [r4, #0]
 80a225a:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
 80a225c:	6850      	ldr	r0, [r2, #4]
 80a225e:	685b      	ldr	r3, [r3, #4]
 80a2260:	220a      	movs	r2, #10
 80a2262:	2100      	movs	r1, #0
 80a2264:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
 80a2266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
 80a226a:	f004 b94f 	b.w	80a650c <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
 80a226e:	6822      	ldr	r2, [r4, #0]
 80a2270:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
 80a2272:	6852      	ldr	r2, [r2, #4]
 80a2274:	685b      	ldr	r3, [r3, #4]
 80a2276:	5cd0      	ldrb	r0, [r2, r3]
 80a2278:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
 80a227c:	4258      	negs	r0, r3
 80a227e:	4158      	adcs	r0, r3
 80a2280:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
 80a2282:	2000      	movs	r0, #0
    }
}
 80a2284:	bd10      	pop	{r4, pc}

080a2286 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
 80a2286:	b510      	push	{r4, lr}
    if (!n_) {
 80a2288:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
 80a228a:	4604      	mov	r4, r0
    if (!n_) {
 80a228c:	b15b      	cbz	r3, 80a22a6 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
 80a228e:	6880      	ldr	r0, [r0, #8]
    ++t_;
    v_ = t_; // Value
    --n_;
 80a2290:	3b01      	subs	r3, #1

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
 80a2292:	60e0      	str	r0, [r4, #12]
    ++t_;
 80a2294:	3010      	adds	r0, #16
 80a2296:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
 80a2298:	6120      	str	r0, [r4, #16]
    --n_;
 80a229a:	6163      	str	r3, [r4, #20]
    if (n_) {
 80a229c:	b12b      	cbz	r3, 80a22aa <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
 80a229e:	f7ff ff3d 	bl	80a211c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
 80a22a2:	60a0      	str	r0, [r4, #8]
 80a22a4:	e001      	b.n	80a22aa <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
 80a22a6:	4618      	mov	r0, r3
 80a22a8:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
 80a22aa:	2001      	movs	r0, #1
}
 80a22ac:	bd10      	pop	{r4, pc}

080a22ae <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
 80a22ae:	b510      	push	{r4, lr}
 80a22b0:	4604      	mov	r4, r0
    write('}');
 80a22b2:	217d      	movs	r1, #125	; 0x7d
 80a22b4:	f7ff ff92 	bl	80a21dc <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 80a22b8:	2301      	movs	r3, #1
 80a22ba:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a22bc:	4620      	mov	r0, r4
 80a22be:	bd10      	pop	{r4, pc}

080a22c0 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
 80a22c0:	b508      	push	{r3, lr}
    switch (state_) {
 80a22c2:	7903      	ldrb	r3, [r0, #4]
 80a22c4:	2b01      	cmp	r3, #1
 80a22c6:	d002      	beq.n	80a22ce <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 80a22c8:	2b02      	cmp	r3, #2
 80a22ca:	d002      	beq.n	80a22d2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
 80a22cc:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
 80a22ce:	212c      	movs	r1, #44	; 0x2c
 80a22d0:	e000      	b.n	80a22d4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
 80a22d2:	213a      	movs	r1, #58	; 0x3a
 80a22d4:	f7ff ff82 	bl	80a21dc <_ZN5spark10JSONWriter5writeEc>
 80a22d8:	bd08      	pop	{r3, pc}

080a22da <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
 80a22da:	b510      	push	{r4, lr}
 80a22dc:	4604      	mov	r4, r0
    writeSeparator();
 80a22de:	f7ff ffef 	bl	80a22c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 80a22e2:	4620      	mov	r0, r4
 80a22e4:	217b      	movs	r1, #123	; 0x7b
 80a22e6:	f7ff ff79 	bl	80a21dc <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 80a22ea:	2300      	movs	r3, #0
 80a22ec:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a22ee:	4620      	mov	r0, r4
 80a22f0:	bd10      	pop	{r4, pc}
	...

080a22f4 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
 80a22f4:	b538      	push	{r3, r4, r5, lr}
 80a22f6:	4604      	mov	r4, r0
 80a22f8:	460d      	mov	r5, r1
    writeSeparator();
 80a22fa:	f7ff ffe1 	bl	80a22c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
 80a22fe:	6823      	ldr	r3, [r4, #0]
 80a2300:	4620      	mov	r0, r4
 80a2302:	68db      	ldr	r3, [r3, #12]
 80a2304:	462a      	mov	r2, r5
 80a2306:	4903      	ldr	r1, [pc, #12]	; (80a2314 <_ZN5spark10JSONWriter5valueEi+0x20>)
 80a2308:	4798      	blx	r3
    state_ = NEXT;
 80a230a:	2301      	movs	r3, #1
 80a230c:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a230e:	4620      	mov	r0, r4
 80a2310:	bd38      	pop	{r3, r4, r5, pc}
 80a2312:	bf00      	nop
 80a2314:	080a9765 	.word	0x080a9765

080a2318 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
 80a2318:	b538      	push	{r3, r4, r5, lr}
 80a231a:	4604      	mov	r4, r0
 80a231c:	460d      	mov	r5, r1
    writeSeparator();
 80a231e:	f7ff ffcf 	bl	80a22c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
 80a2322:	6823      	ldr	r3, [r4, #0]
 80a2324:	4620      	mov	r0, r4
 80a2326:	68db      	ldr	r3, [r3, #12]
 80a2328:	462a      	mov	r2, r5
 80a232a:	4903      	ldr	r1, [pc, #12]	; (80a2338 <_ZN5spark10JSONWriter5valueEj+0x20>)
 80a232c:	4798      	blx	r3
    state_ = NEXT;
 80a232e:	2301      	movs	r3, #1
 80a2330:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a2332:	4620      	mov	r0, r4
 80a2334:	bd38      	pop	{r3, r4, r5, pc}
 80a2336:	bf00      	nop
 80a2338:	080a9259 	.word	0x080a9259

080a233c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a233e:	460d      	mov	r5, r1
 80a2340:	4617      	mov	r7, r2
    write('"');
 80a2342:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 80a2344:	4604      	mov	r4, r0
    write('"');
 80a2346:	f7ff ff49 	bl	80a21dc <_ZN5spark10JSONWriter5writeEc>
 80a234a:	462a      	mov	r2, r5
    const char* const end = str + size;
 80a234c:	4629      	mov	r1, r5
 80a234e:	442f      	add	r7, r5
    const char *s = str;
    while (s != end) {
 80a2350:	42ba      	cmp	r2, r7
 80a2352:	d038      	beq.n	80a23c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
 80a2354:	4616      	mov	r6, r2
 80a2356:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 80a235a:	2d22      	cmp	r5, #34	; 0x22
 80a235c:	d003      	beq.n	80a2366 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 80a235e:	2d5c      	cmp	r5, #92	; 0x5c
 80a2360:	d001      	beq.n	80a2366 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 80a2362:	2d1f      	cmp	r5, #31
 80a2364:	d82d      	bhi.n	80a23c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
 80a2366:	6823      	ldr	r3, [r4, #0]
 80a2368:	1a52      	subs	r2, r2, r1
 80a236a:	689b      	ldr	r3, [r3, #8]
 80a236c:	4620      	mov	r0, r4
 80a236e:	4798      	blx	r3
            write('\\');
 80a2370:	215c      	movs	r1, #92	; 0x5c
 80a2372:	4620      	mov	r0, r4
 80a2374:	f7ff ff32 	bl	80a21dc <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 80a2378:	2d0c      	cmp	r5, #12
 80a237a:	d019      	beq.n	80a23b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
 80a237c:	d807      	bhi.n	80a238e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
 80a237e:	2d09      	cmp	r5, #9
 80a2380:	d00f      	beq.n	80a23a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
 80a2382:	2d0a      	cmp	r5, #10
 80a2384:	d012      	beq.n	80a23ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
 80a2386:	2d08      	cmp	r5, #8
 80a2388:	d114      	bne.n	80a23b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 80a238a:	2162      	movs	r1, #98	; 0x62
 80a238c:	e00a      	b.n	80a23a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
 80a238e:	2d22      	cmp	r5, #34	; 0x22
 80a2390:	d005      	beq.n	80a239e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a2392:	2d5c      	cmp	r5, #92	; 0x5c
 80a2394:	d003      	beq.n	80a239e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 80a2396:	2d0d      	cmp	r5, #13
 80a2398:	d10c      	bne.n	80a23b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
 80a239a:	2172      	movs	r1, #114	; 0x72
 80a239c:	e002      	b.n	80a23a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
 80a239e:	4629      	mov	r1, r5
 80a23a0:	e000      	b.n	80a23a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
 80a23a2:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 80a23a4:	4620      	mov	r0, r4
 80a23a6:	f7ff ff19 	bl	80a21dc <_ZN5spark10JSONWriter5writeEc>
                break;
 80a23aa:	e009      	b.n	80a23c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
 80a23ac:	216e      	movs	r1, #110	; 0x6e
 80a23ae:	e7f9      	b.n	80a23a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
 80a23b0:	2166      	movs	r1, #102	; 0x66
 80a23b2:	e7f7      	b.n	80a23a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 80a23b4:	6823      	ldr	r3, [r4, #0]
 80a23b6:	462a      	mov	r2, r5
 80a23b8:	68db      	ldr	r3, [r3, #12]
 80a23ba:	4909      	ldr	r1, [pc, #36]	; (80a23e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
 80a23bc:	4620      	mov	r0, r4
 80a23be:	4798      	blx	r3
                break;
            }
            str = s + 1;
 80a23c0:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
 80a23c2:	4632      	mov	r2, r6
 80a23c4:	e7c4      	b.n	80a2350 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
 80a23c6:	4291      	cmp	r1, r2
 80a23c8:	d004      	beq.n	80a23d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
 80a23ca:	6823      	ldr	r3, [r4, #0]
 80a23cc:	1a52      	subs	r2, r2, r1
 80a23ce:	689d      	ldr	r5, [r3, #8]
 80a23d0:	4620      	mov	r0, r4
 80a23d2:	47a8      	blx	r5
    }
    write('"');
 80a23d4:	2122      	movs	r1, #34	; 0x22
 80a23d6:	4620      	mov	r0, r4
 80a23d8:	f7ff ff00 	bl	80a21dc <_ZN5spark10JSONWriter5writeEc>
 80a23dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a23de:	bf00      	nop
 80a23e0:	080a9264 	.word	0x080a9264

080a23e4 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 80a23e4:	b570      	push	{r4, r5, r6, lr}
 80a23e6:	4604      	mov	r4, r0
 80a23e8:	460d      	mov	r5, r1
 80a23ea:	4616      	mov	r6, r2
    writeSeparator();
 80a23ec:	f7ff ff68 	bl	80a22c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 80a23f0:	4620      	mov	r0, r4
 80a23f2:	4632      	mov	r2, r6
 80a23f4:	4629      	mov	r1, r5
 80a23f6:	f7ff ffa1 	bl	80a233c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 80a23fa:	2302      	movs	r3, #2
 80a23fc:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a23fe:	4620      	mov	r0, r4
 80a2400:	bd70      	pop	{r4, r5, r6, pc}

080a2402 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 80a2402:	b570      	push	{r4, r5, r6, lr}
 80a2404:	4604      	mov	r4, r0
 80a2406:	460d      	mov	r5, r1
 80a2408:	4616      	mov	r6, r2
    writeSeparator();
 80a240a:	f7ff ff59 	bl	80a22c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 80a240e:	4620      	mov	r0, r4
 80a2410:	4632      	mov	r2, r6
 80a2412:	4629      	mov	r1, r5
 80a2414:	f7ff ff92 	bl	80a233c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 80a2418:	2301      	movs	r3, #1
 80a241a:	7123      	strb	r3, [r4, #4]
    return *this;
}
 80a241c:	4620      	mov	r0, r4
 80a241e:	bd70      	pop	{r4, r5, r6, pc}

080a2420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a2420:	b510      	push	{r4, lr}
 80a2422:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
 80a2424:	6800      	ldr	r0, [r0, #0]
 80a2426:	b128      	cbz	r0, 80a2434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a2428:	6843      	ldr	r3, [r0, #4]
 80a242a:	3b01      	subs	r3, #1
 80a242c:	6043      	str	r3, [r0, #4]
 80a242e:	b90b      	cbnz	r3, 80a2434 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
 80a2430:	f7ff fec4 	bl	80a21bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a2434:	4620      	mov	r0, r4
 80a2436:	bd10      	pop	{r4, pc}

080a2438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
 80a2438:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a243a:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
 80a243c:	6803      	ldr	r3, [r0, #0]
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
 80a243e:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
 80a2440:	429c      	cmp	r4, r3
 80a2442:	d00c      	beq.n	80a245e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
 80a2444:	b114      	cbz	r4, 80a244c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a2446:	6863      	ldr	r3, [r4, #4]
 80a2448:	3301      	adds	r3, #1
 80a244a:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
 80a244c:	6828      	ldr	r0, [r5, #0]
 80a244e:	b128      	cbz	r0, 80a245c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a2450:	6843      	ldr	r3, [r0, #4]
 80a2452:	3b01      	subs	r3, #1
 80a2454:	6043      	str	r3, [r0, #4]
 80a2456:	b90b      	cbnz	r3, 80a245c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
 80a2458:	f7ff feb0 	bl	80a21bc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.3.constprop.12>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
 80a245c:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
 80a245e:	4628      	mov	r0, r5
 80a2460:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2464 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a2464:	b510      	push	{r4, lr}
 80a2466:	4604      	mov	r4, r0

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80a2468:	2300      	movs	r3, #0
 80a246a:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a246c:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
 80a246e:	4810      	ldr	r0, [pc, #64]	; (80a24b0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
 80a2470:	60e3      	str	r3, [r4, #12]
 80a2472:	60a0      	str	r0, [r4, #8]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
 80a2474:	b1d1      	cbz	r1, 80a24ac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
 80a2476:	780b      	ldrb	r3, [r1, #0]
 80a2478:	2b03      	cmp	r3, #3
 80a247a:	d006      	beq.n	80a248a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
 80a247c:	b9b3      	cbnz	r3, 80a24ac <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
 80a247e:	6813      	ldr	r3, [r2, #0]
 80a2480:	6858      	ldr	r0, [r3, #4]
 80a2482:	684b      	ldr	r3, [r1, #4]
 80a2484:	5cc3      	ldrb	r3, [r0, r3]
 80a2486:	2b6e      	cmp	r3, #110	; 0x6e
 80a2488:	d008      	beq.n	80a249c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
 80a248a:	6813      	ldr	r3, [r2, #0]
 80a248c:	6858      	ldr	r0, [r3, #4]
 80a248e:	684b      	ldr	r3, [r1, #4]
 80a2490:	4403      	add	r3, r0
 80a2492:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
 80a2494:	688b      	ldr	r3, [r1, #8]
 80a2496:	6849      	ldr	r1, [r1, #4]
 80a2498:	1a5b      	subs	r3, r3, r1
 80a249a:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a249c:	4611      	mov	r1, r2
 80a249e:	4620      	mov	r0, r4
 80a24a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80a24a4:	f840 3b04 	str.w	r3, [r0], #4
 80a24a8:	f7ff ffc6 	bl	80a2438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
 80a24ac:	4620      	mov	r0, r4
 80a24ae:	bd10      	pop	{r4, pc}
 80a24b0:	080a946f 	.word	0x080a946f

080a24b4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80a24b4:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a24b6:	b510      	push	{r4, lr}
 80a24b8:	4604      	mov	r4, r0
 80a24ba:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a24bc:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
 80a24be:	6083      	str	r3, [r0, #8]
 80a24c0:	60c3      	str	r3, [r0, #12]
 80a24c2:	6103      	str	r3, [r0, #16]
 80a24c4:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
 80a24c6:	b171      	cbz	r1, 80a24e6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
 80a24c8:	780b      	ldrb	r3, [r1, #0]
 80a24ca:	2b01      	cmp	r3, #1
 80a24cc:	d10b      	bne.n	80a24e6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
 80a24ce:	f101 0310 	add.w	r3, r1, #16
 80a24d2:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
 80a24d4:	68cb      	ldr	r3, [r1, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a24d6:	4611      	mov	r1, r2
 80a24d8:	6143      	str	r3, [r0, #20]
 80a24da:	f851 3b04 	ldr.w	r3, [r1], #4
 80a24de:	f840 3b04 	str.w	r3, [r0], #4
 80a24e2:	f7ff ffa9 	bl	80a2438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
 80a24e6:	4620      	mov	r0, r4
 80a24e8:	bd10      	pop	{r4, pc}

080a24ea <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
 80a24ea:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
 80a24ec:	b510      	push	{r4, lr}
 80a24ee:	4604      	mov	r4, r0
 80a24f0:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a24f2:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
 80a24f4:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
 80a24f6:	b131      	cbz	r1, 80a2506 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
 80a24f8:	4611      	mov	r1, r2
 80a24fa:	f851 3b04 	ldr.w	r3, [r1], #4
 80a24fe:	f840 3b04 	str.w	r3, [r0], #4
 80a2502:	f7ff ff99 	bl	80a2438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
 80a2506:	4620      	mov	r0, r4
 80a2508:	bd10      	pop	{r4, pc}

080a250a <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a250a:	2300      	movs	r3, #0
 80a250c:	461a      	mov	r2, r3
 80a250e:	6840      	ldr	r0, [r0, #4]
 80a2510:	f7ff bd28 	b.w	80a1f64 <network_connect>

080a2514 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2514:	2200      	movs	r2, #0
 80a2516:	2102      	movs	r1, #2
 80a2518:	6840      	ldr	r0, [r0, #4]
 80a251a:	f7ff bd33 	b.w	80a1f84 <network_disconnect>

080a251e <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a251e:	2200      	movs	r2, #0
 80a2520:	4611      	mov	r1, r2
 80a2522:	6840      	ldr	r0, [r0, #4]
 80a2524:	f7ff bd26 	b.w	80a1f74 <network_connecting>

080a2528 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a2528:	2200      	movs	r2, #0
 80a252a:	4611      	mov	r1, r2
 80a252c:	6840      	ldr	r0, [r0, #4]
 80a252e:	f7ff bd31 	b.w	80a1f94 <network_ready>

080a2532 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2532:	2300      	movs	r3, #0
 80a2534:	461a      	mov	r2, r3
 80a2536:	4619      	mov	r1, r3
 80a2538:	6840      	ldr	r0, [r0, #4]
 80a253a:	f7ff bd33 	b.w	80a1fa4 <network_on>

080a253e <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a253e:	2300      	movs	r3, #0
 80a2540:	461a      	mov	r2, r3
 80a2542:	4619      	mov	r1, r3
 80a2544:	6840      	ldr	r0, [r0, #4]
 80a2546:	f7ff bd35 	b.w	80a1fb4 <network_off>

080a254a <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a254a:	2200      	movs	r2, #0
 80a254c:	f081 0101 	eor.w	r1, r1, #1
 80a2550:	6840      	ldr	r0, [r0, #4]
 80a2552:	f7ff bd37 	b.w	80a1fc4 <network_listen>

080a2556 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2556:	2200      	movs	r2, #0
 80a2558:	6840      	ldr	r0, [r0, #4]
 80a255a:	f7ff bd43 	b.w	80a1fe4 <network_set_listen_timeout>

080a255e <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a255e:	2200      	movs	r2, #0
 80a2560:	4611      	mov	r1, r2
 80a2562:	6840      	ldr	r0, [r0, #4]
 80a2564:	f7ff bd46 	b.w	80a1ff4 <network_get_listen_timeout>

080a2568 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2568:	2200      	movs	r2, #0
 80a256a:	4611      	mov	r1, r2
 80a256c:	6840      	ldr	r0, [r0, #4]
 80a256e:	f7ff bd31 	b.w	80a1fd4 <network_listening>
	...

080a2574 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2574:	b570      	push	{r4, r5, r6, lr}
 80a2576:	4616      	mov	r6, r2
 80a2578:	b08e      	sub	sp, #56	; 0x38
 80a257a:	4604      	mov	r4, r0
    IPAddress addr;
 80a257c:	a808      	add	r0, sp, #32
 80a257e:	f000 fa6f 	bl	80a2a60 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2582:	2211      	movs	r2, #17
 80a2584:	2100      	movs	r1, #0
 80a2586:	a803      	add	r0, sp, #12
 80a2588:	f003 f99c 	bl	80a58c4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a258c:	4630      	mov	r0, r6
 80a258e:	f003 ff07 	bl	80a63a0 <strlen>
 80a2592:	2500      	movs	r5, #0
 80a2594:	4b0a      	ldr	r3, [pc, #40]	; (80a25c0 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2596:	9500      	str	r5, [sp, #0]
 80a2598:	b281      	uxth	r1, r0
 80a259a:	685b      	ldr	r3, [r3, #4]
 80a259c:	aa03      	add	r2, sp, #12
 80a259e:	4630      	mov	r0, r6
 80a25a0:	f7ff fade 	bl	80a1b60 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a25a4:	b120      	cbz	r0, 80a25b0 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a25a6:	4629      	mov	r1, r5
 80a25a8:	4620      	mov	r0, r4
 80a25aa:	f000 fa79 	bl	80a2aa0 <_ZN9IPAddressC1Em>
 80a25ae:	e003      	b.n	80a25b8 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a25b0:	a903      	add	r1, sp, #12
 80a25b2:	4620      	mov	r0, r4
 80a25b4:	f000 fa62 	bl	80a2a7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a25b8:	4620      	mov	r0, r4
 80a25ba:	b00e      	add	sp, #56	; 0x38
 80a25bc:	bd70      	pop	{r4, r5, r6, pc}
 80a25be:	bf00      	nop
 80a25c0:	200001a0 	.word	0x200001a0

080a25c4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a25c4:	4b02      	ldr	r3, [pc, #8]	; (80a25d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a25c6:	4a03      	ldr	r2, [pc, #12]	; (80a25d4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a25c8:	601a      	str	r2, [r3, #0]
 80a25ca:	2200      	movs	r2, #0
 80a25cc:	605a      	str	r2, [r3, #4]
 80a25ce:	4770      	bx	lr
 80a25d0:	20000198 	.word	0x20000198
 80a25d4:	080a9274 	.word	0x080a9274

080a25d8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a25d8:	2200      	movs	r2, #0
 80a25da:	4611      	mov	r1, r2
 80a25dc:	6840      	ldr	r0, [r0, #4]
 80a25de:	f7ff bcd9 	b.w	80a1f94 <network_ready>

080a25e2 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a25e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a25e4:	4616      	mov	r6, r2
 80a25e6:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a25e8:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a25ea:	460f      	mov	r7, r1
 80a25ec:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a25ee:	2100      	movs	r1, #0
 80a25f0:	a803      	add	r0, sp, #12
 80a25f2:	f003 f967 	bl	80a58c4 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a25f6:	4630      	mov	r0, r6
 80a25f8:	f003 fed2 	bl	80a63a0 <strlen>
 80a25fc:	2500      	movs	r5, #0
 80a25fe:	9500      	str	r5, [sp, #0]
 80a2600:	b281      	uxth	r1, r0
 80a2602:	687b      	ldr	r3, [r7, #4]
 80a2604:	aa03      	add	r2, sp, #12
 80a2606:	4630      	mov	r0, r6
 80a2608:	f7ff faaa 	bl	80a1b60 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a260c:	b120      	cbz	r0, 80a2618 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a260e:	4629      	mov	r1, r5
 80a2610:	4620      	mov	r0, r4
 80a2612:	f000 fa45 	bl	80a2aa0 <_ZN9IPAddressC1Em>
 80a2616:	e003      	b.n	80a2620 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2618:	a903      	add	r1, sp, #12
 80a261a:	4620      	mov	r0, r4
 80a261c:	f000 fa2e 	bl	80a2a7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2620:	4620      	mov	r0, r4
 80a2622:	b009      	add	sp, #36	; 0x24
 80a2624:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2626 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2626:	2200      	movs	r2, #0
 80a2628:	4611      	mov	r1, r2
 80a262a:	6840      	ldr	r0, [r0, #4]
 80a262c:	f7ff bcd2 	b.w	80a1fd4 <network_listening>

080a2630 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2630:	2200      	movs	r2, #0
 80a2632:	4611      	mov	r1, r2
 80a2634:	6840      	ldr	r0, [r0, #4]
 80a2636:	f7ff bcdd 	b.w	80a1ff4 <network_get_listen_timeout>

080a263a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a263a:	2200      	movs	r2, #0
 80a263c:	6840      	ldr	r0, [r0, #4]
 80a263e:	f7ff bcd1 	b.w	80a1fe4 <network_set_listen_timeout>

080a2642 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2642:	2200      	movs	r2, #0
 80a2644:	f081 0101 	eor.w	r1, r1, #1
 80a2648:	6840      	ldr	r0, [r0, #4]
 80a264a:	f7ff bcbb 	b.w	80a1fc4 <network_listen>

080a264e <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a264e:	2300      	movs	r3, #0
 80a2650:	461a      	mov	r2, r3
 80a2652:	4619      	mov	r1, r3
 80a2654:	6840      	ldr	r0, [r0, #4]
 80a2656:	f7ff bcad 	b.w	80a1fb4 <network_off>

080a265a <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a265a:	2300      	movs	r3, #0
 80a265c:	461a      	mov	r2, r3
 80a265e:	4619      	mov	r1, r3
 80a2660:	6840      	ldr	r0, [r0, #4]
 80a2662:	f7ff bc9f 	b.w	80a1fa4 <network_on>

080a2666 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2666:	2200      	movs	r2, #0
 80a2668:	4611      	mov	r1, r2
 80a266a:	6840      	ldr	r0, [r0, #4]
 80a266c:	f7ff bc82 	b.w	80a1f74 <network_connecting>

080a2670 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2670:	2200      	movs	r2, #0
 80a2672:	2102      	movs	r1, #2
 80a2674:	6840      	ldr	r0, [r0, #4]
 80a2676:	f7ff bc85 	b.w	80a1f84 <network_disconnect>

080a267a <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a267a:	2300      	movs	r3, #0
 80a267c:	461a      	mov	r2, r3
 80a267e:	6840      	ldr	r0, [r0, #4]
 80a2680:	f7ff bc70 	b.w	80a1f64 <network_connect>

080a2684 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a2684:	4b02      	ldr	r3, [pc, #8]	; (80a2690 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2686:	2204      	movs	r2, #4
 80a2688:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a268a:	4a02      	ldr	r2, [pc, #8]	; (80a2694 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a268c:	601a      	str	r2, [r3, #0]
 80a268e:	4770      	bx	lr
 80a2690:	200001a0 	.word	0x200001a0
 80a2694:	080a92a8 	.word	0x080a92a8

080a2698 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2698:	4770      	bx	lr

080a269a <_ZN8SPIClassD0Ev>:
 80a269a:	b510      	push	{r4, lr}
 80a269c:	4604      	mov	r4, r0
 80a269e:	2110      	movs	r1, #16
 80a26a0:	f001 ff3e 	bl	80a4520 <_ZdlPvj>
 80a26a4:	4620      	mov	r0, r4
 80a26a6:	bd10      	pop	{r4, pc}

080a26a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a26a8:	b570      	push	{r4, r5, r6, lr}
 80a26aa:	4604      	mov	r4, r0
 80a26ac:	460e      	mov	r6, r1
 80a26ae:	4b07      	ldr	r3, [pc, #28]	; (80a26cc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a26b0:	2500      	movs	r5, #0
 80a26b2:	6003      	str	r3, [r0, #0]
 80a26b4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a26b8:	f7ff fb44 	bl	80a1d44 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a26bc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a26be:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a26c0:	f7ff fbb0 	bl	80a1e24 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a26c4:	60a5      	str	r5, [r4, #8]
}
 80a26c6:	4620      	mov	r0, r4
 80a26c8:	bd70      	pop	{r4, r5, r6, pc}
 80a26ca:	bf00      	nop
 80a26cc:	080a92dc 	.word	0x080a92dc

080a26d0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a26d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a26d4:	7900      	ldrb	r0, [r0, #4]
 80a26d6:	f7ff bb7d 	b.w	80a1dd4 <HAL_SPI_Begin>

080a26da <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a26da:	7900      	ldrb	r0, [r0, #4]
 80a26dc:	f7ff bb82 	b.w	80a1de4 <HAL_SPI_Set_Bit_Order>

080a26e0 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a26e0:	7900      	ldrb	r0, [r0, #4]
 80a26e2:	f7ff bb87 	b.w	80a1df4 <HAL_SPI_Set_Data_Mode>
	...

080a26e8 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a26e8:	4a05      	ldr	r2, [pc, #20]	; (80a2700 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a26ea:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a26ec:	5c99      	ldrb	r1, [r3, r2]
 80a26ee:	4281      	cmp	r1, r0
 80a26f0:	d002      	beq.n	80a26f8 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a26f2:	3301      	adds	r3, #1
 80a26f4:	2b08      	cmp	r3, #8
 80a26f6:	d1f9      	bne.n	80a26ec <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a26f8:	1c58      	adds	r0, r3, #1
}
 80a26fa:	b2c0      	uxtb	r0, r0
 80a26fc:	4770      	bx	lr
 80a26fe:	bf00      	nop
 80a2700:	080a92e4 	.word	0x080a92e4

080a2704 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2704:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a2706:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2708:	6018      	str	r0, [r3, #0]
 80a270a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a270c:	6818      	ldr	r0, [r3, #0]
 80a270e:	b2e5      	uxtb	r5, r4
 80a2710:	4288      	cmp	r0, r1
 80a2712:	d906      	bls.n	80a2722 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a2714:	3401      	adds	r4, #1
 80a2716:	2c08      	cmp	r4, #8
 80a2718:	d002      	beq.n	80a2720 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a271a:	0840      	lsrs	r0, r0, #1
 80a271c:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a271e:	e7f5      	b.n	80a270c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a2720:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a2722:	4b02      	ldr	r3, [pc, #8]	; (80a272c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a2724:	5d5b      	ldrb	r3, [r3, r5]
 80a2726:	7013      	strb	r3, [r2, #0]
 80a2728:	bd30      	pop	{r4, r5, pc}
 80a272a:	bf00      	nop
 80a272c:	080a92e4 	.word	0x080a92e4

080a2730 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2730:	b570      	push	{r4, r5, r6, lr}
 80a2732:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a2734:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a2738:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a273a:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a273c:	2214      	movs	r2, #20
 80a273e:	2100      	movs	r1, #0
 80a2740:	a803      	add	r0, sp, #12
 80a2742:	f003 f8bf 	bl	80a58c4 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a2746:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a2748:	a903      	add	r1, sp, #12
 80a274a:	4630      	mov	r0, r6
 80a274c:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a274e:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a2752:	f7ff fb77 	bl	80a1e44 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a2756:	ab02      	add	r3, sp, #8
 80a2758:	f10d 0207 	add.w	r2, sp, #7
 80a275c:	4629      	mov	r1, r5
 80a275e:	9804      	ldr	r0, [sp, #16]
 80a2760:	f7ff ffd0 	bl	80a2704 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2764:	7920      	ldrb	r0, [r4, #4]
 80a2766:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a276a:	f7ff fb4b 	bl	80a1e04 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a276e:	9802      	ldr	r0, [sp, #8]
 80a2770:	b008      	add	sp, #32
 80a2772:	bd70      	pop	{r4, r5, r6, pc}

080a2774 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a2774:	b538      	push	{r3, r4, r5, lr}
 80a2776:	4604      	mov	r4, r0
    if (dividerReference)
 80a2778:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a277a:	4608      	mov	r0, r1
    if (dividerReference)
 80a277c:	b14d      	cbz	r5, 80a2792 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a277e:	f7ff ffb3 	bl	80a26e8 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a2782:	2201      	movs	r2, #1
 80a2784:	fa25 f100 	lsr.w	r1, r5, r0
 80a2788:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a278a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a278e:	f7ff bfcf 	b.w	80a2730 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2792:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a2794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a2798:	f7ff bb34 	b.w	80a1e04 <HAL_SPI_Set_Clock_Divider>

080a279c <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a279c:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a279e:	7900      	ldrb	r0, [r0, #4]
 80a27a0:	f7ff fb38 	bl	80a1e14 <HAL_SPI_Send_Receive_Data>
}
 80a27a4:	b2c0      	uxtb	r0, r0
 80a27a6:	bd08      	pop	{r3, pc}

080a27a8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a27a8:	7900      	ldrb	r0, [r0, #4]
 80a27aa:	f7ff bb43 	b.w	80a1e34 <HAL_SPI_Is_Enabled>

080a27ae <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a27ae:	4770      	bx	lr

080a27b0 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a27b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a27b2:	4606      	mov	r6, r0
 80a27b4:	4615      	mov	r5, r2
 80a27b6:	460c      	mov	r4, r1
 80a27b8:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a27ba:	42bc      	cmp	r4, r7
 80a27bc:	d006      	beq.n	80a27cc <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a27be:	6833      	ldr	r3, [r6, #0]
 80a27c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a27c4:	689b      	ldr	r3, [r3, #8]
 80a27c6:	4630      	mov	r0, r6
 80a27c8:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a27ca:	e7f6      	b.n	80a27ba <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a27cc:	4628      	mov	r0, r5
 80a27ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a27d0 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a27d0:	2200      	movs	r2, #0
 80a27d2:	7c00      	ldrb	r0, [r0, #16]
 80a27d4:	f7ff ba2c 	b.w	80a1c30 <HAL_I2C_Write_Data>

080a27d8 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a27d8:	2100      	movs	r1, #0
 80a27da:	7c00      	ldrb	r0, [r0, #16]
 80a27dc:	f7ff ba30 	b.w	80a1c40 <HAL_I2C_Available_Data>

080a27e0 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a27e0:	2100      	movs	r1, #0
 80a27e2:	7c00      	ldrb	r0, [r0, #16]
 80a27e4:	f7ff ba34 	b.w	80a1c50 <HAL_I2C_Read_Data>

080a27e8 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a27e8:	2100      	movs	r1, #0
 80a27ea:	7c00      	ldrb	r0, [r0, #16]
 80a27ec:	f7ff ba38 	b.w	80a1c60 <HAL_I2C_Peek_Data>

080a27f0 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a27f0:	2100      	movs	r1, #0
 80a27f2:	7c00      	ldrb	r0, [r0, #16]
 80a27f4:	f7ff ba3c 	b.w	80a1c70 <HAL_I2C_Flush_Data>

080a27f8 <_ZN7TwoWireD0Ev>:
 80a27f8:	b510      	push	{r4, lr}
 80a27fa:	4604      	mov	r4, r0
 80a27fc:	2114      	movs	r1, #20
 80a27fe:	f001 fe8f 	bl	80a4520 <_ZdlPvj>
 80a2802:	4620      	mov	r0, r4
 80a2804:	bd10      	pop	{r4, pc}
	...

080a2808 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2808:	b510      	push	{r4, lr}
 80a280a:	4604      	mov	r4, r0
 80a280c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a280e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2812:	60a3      	str	r3, [r4, #8]
 80a2814:	4b04      	ldr	r3, [pc, #16]	; (80a2828 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2816:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2818:	7420      	strb	r0, [r4, #16]
 80a281a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a281c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a281e:	f7ff fa37 	bl	80a1c90 <HAL_I2C_Init>

}
 80a2822:	4620      	mov	r0, r4
 80a2824:	bd10      	pop	{r4, pc}
 80a2826:	bf00      	nop
 80a2828:	080a92f4 	.word	0x080a92f4

080a282c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a282c:	2300      	movs	r3, #0
 80a282e:	461a      	mov	r2, r3
 80a2830:	4619      	mov	r1, r3
 80a2832:	7c00      	ldrb	r0, [r0, #16]
 80a2834:	f7ff b9dc 	b.w	80a1bf0 <HAL_I2C_Begin>

080a2838 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a2838:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a283a:	2400      	movs	r4, #0
 80a283c:	7c00      	ldrb	r0, [r0, #16]
 80a283e:	9400      	str	r4, [sp, #0]
 80a2840:	f7ff f9de 	bl	80a1c00 <HAL_I2C_Request_Data>
  return result;
}
 80a2844:	b2c0      	uxtb	r0, r0
 80a2846:	b002      	add	sp, #8
 80a2848:	bd10      	pop	{r4, pc}

080a284a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a284a:	2301      	movs	r3, #1
 80a284c:	f7ff bff4 	b.w	80a2838 <_ZN7TwoWire11requestFromEhhh>

080a2850 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a2850:	2200      	movs	r2, #0
 80a2852:	7c00      	ldrb	r0, [r0, #16]
 80a2854:	f7ff b9dc 	b.w	80a1c10 <HAL_I2C_Begin_Transmission>

080a2858 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a2858:	2200      	movs	r2, #0
 80a285a:	7c00      	ldrb	r0, [r0, #16]
 80a285c:	f7ff b9e0 	b.w	80a1c20 <HAL_I2C_End_Transmission>

080a2860 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a2860:	2101      	movs	r1, #1
 80a2862:	f7ff bff9 	b.w	80a2858 <_ZN7TwoWire15endTransmissionEh>

080a2866 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2866:	2100      	movs	r1, #0
 80a2868:	7c00      	ldrb	r0, [r0, #16]
 80a286a:	f7ff ba09 	b.w	80a1c80 <HAL_I2C_Is_Enabled>

080a286e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a286e:	7441      	strb	r1, [r0, #17]
 80a2870:	4770      	bx	lr

080a2872 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2872:	4770      	bx	lr

080a2874 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2874:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2876:	2100      	movs	r1, #0
 80a2878:	7c00      	ldrb	r0, [r0, #16]
 80a287a:	f7ff f9a1 	bl	80a1bc0 <HAL_USB_USART_Receive_Data>
}
 80a287e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2882:	bf28      	it	cs
 80a2884:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2888:	bd08      	pop	{r3, pc}

080a288a <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a288a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a288c:	2101      	movs	r1, #1
 80a288e:	7c00      	ldrb	r0, [r0, #16]
 80a2890:	f7ff f996 	bl	80a1bc0 <HAL_USB_USART_Receive_Data>
}
 80a2894:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2898:	bf28      	it	cs
 80a289a:	f04f 30ff 	movcs.w	r0, #4294967295
 80a289e:	bd08      	pop	{r3, pc}

080a28a0 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a28a0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a28a2:	7c00      	ldrb	r0, [r0, #16]
 80a28a4:	f7ff f984 	bl	80a1bb0 <HAL_USB_USART_Available_Data_For_Write>
}
 80a28a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a28ac:	bd08      	pop	{r3, pc}

080a28ae <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a28ae:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a28b0:	7c00      	ldrb	r0, [r0, #16]
 80a28b2:	f7ff f975 	bl	80a1ba0 <HAL_USB_USART_Available_Data>
}
 80a28b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a28ba:	bd08      	pop	{r3, pc}

080a28bc <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a28bc:	7c00      	ldrb	r0, [r0, #16]
 80a28be:	f7ff b98f 	b.w	80a1be0 <HAL_USB_USART_Flush_Data>

080a28c2 <_ZN9USBSerialD0Ev>:
 80a28c2:	b510      	push	{r4, lr}
 80a28c4:	4604      	mov	r4, r0
 80a28c6:	2114      	movs	r1, #20
 80a28c8:	f001 fe2a 	bl	80a4520 <_ZdlPvj>
 80a28cc:	4620      	mov	r0, r4
 80a28ce:	bd10      	pop	{r4, pc}

080a28d0 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a28d0:	b538      	push	{r3, r4, r5, lr}
 80a28d2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a28d4:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a28d6:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a28d8:	f7ff f96a 	bl	80a1bb0 <HAL_USB_USART_Available_Data_For_Write>
 80a28dc:	2800      	cmp	r0, #0
 80a28de:	dc01      	bgt.n	80a28e4 <_ZN9USBSerial5writeEh+0x14>
 80a28e0:	7c60      	ldrb	r0, [r4, #17]
 80a28e2:	b128      	cbz	r0, 80a28f0 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a28e4:	4629      	mov	r1, r5
 80a28e6:	7c20      	ldrb	r0, [r4, #16]
 80a28e8:	f7ff f972 	bl	80a1bd0 <HAL_USB_USART_Send_Data>
 80a28ec:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a28f0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a28f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a28f4:	b510      	push	{r4, lr}
 80a28f6:	4604      	mov	r4, r0
 80a28f8:	2300      	movs	r3, #0
 80a28fa:	6063      	str	r3, [r4, #4]
 80a28fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2900:	60a3      	str	r3, [r4, #8]
 80a2902:	4b05      	ldr	r3, [pc, #20]	; (80a2918 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2904:	4608      	mov	r0, r1
 80a2906:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2908:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a290a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a290c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a290e:	4611      	mov	r1, r2
 80a2910:	f7ff f92e 	bl	80a1b70 <HAL_USB_USART_Init>
}
 80a2914:	4620      	mov	r0, r4
 80a2916:	bd10      	pop	{r4, pc}
 80a2918:	080a931c 	.word	0x080a931c

080a291c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a291c:	2200      	movs	r2, #0
 80a291e:	7c00      	ldrb	r0, [r0, #16]
 80a2920:	f7ff b92e 	b.w	80a1b80 <HAL_USB_USART_Begin>

080a2924 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
 80a2924:	7c00      	ldrb	r0, [r0, #16]
 80a2926:	f7ff b933 	b.w	80a1b90 <HAL_USB_USART_End>
	...

080a292c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a292c:	b510      	push	{r4, lr}
 80a292e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2930:	2214      	movs	r2, #20
 80a2932:	2100      	movs	r1, #0
 80a2934:	f002 ffc6 	bl	80a58c4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2938:	4b05      	ldr	r3, [pc, #20]	; (80a2950 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a293a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a293c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a293e:	4b05      	ldr	r3, [pc, #20]	; (80a2954 <_Z19acquireSerialBufferv+0x28>)
 80a2940:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2942:	f240 1301 	movw	r3, #257	; 0x101
 80a2946:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2948:	2381      	movs	r3, #129	; 0x81
 80a294a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a294c:	bd10      	pop	{r4, pc}
 80a294e:	bf00      	nop
 80a2950:	2000022d 	.word	0x2000022d
 80a2954:	200001ac 	.word	0x200001ac

080a2958 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2958:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a295a:	4d0e      	ldr	r5, [pc, #56]	; (80a2994 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a295c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a295e:	a801      	add	r0, sp, #4
 80a2960:	f7ff ffe4 	bl	80a292c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2964:	6829      	ldr	r1, [r5, #0]
 80a2966:	f011 0401 	ands.w	r4, r1, #1
 80a296a:	d110      	bne.n	80a298e <_Z16_fetch_usbserialv+0x36>
 80a296c:	4628      	mov	r0, r5
 80a296e:	f7fd fba5 	bl	80a00bc <__cxa_guard_acquire>
 80a2972:	b160      	cbz	r0, 80a298e <_Z16_fetch_usbserialv+0x36>
 80a2974:	aa01      	add	r2, sp, #4
 80a2976:	4621      	mov	r1, r4
 80a2978:	4807      	ldr	r0, [pc, #28]	; (80a2998 <_Z16_fetch_usbserialv+0x40>)
 80a297a:	f7ff ffbb 	bl	80a28f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a297e:	4628      	mov	r0, r5
 80a2980:	f7fd fba1 	bl	80a00c6 <__cxa_guard_release>
 80a2984:	4a05      	ldr	r2, [pc, #20]	; (80a299c <_Z16_fetch_usbserialv+0x44>)
 80a2986:	4906      	ldr	r1, [pc, #24]	; (80a29a0 <_Z16_fetch_usbserialv+0x48>)
 80a2988:	4803      	ldr	r0, [pc, #12]	; (80a2998 <_Z16_fetch_usbserialv+0x40>)
 80a298a:	f001 fdbb 	bl	80a4504 <__aeabi_atexit>
	return _usbserial;
}
 80a298e:	4802      	ldr	r0, [pc, #8]	; (80a2998 <_Z16_fetch_usbserialv+0x40>)
 80a2990:	b007      	add	sp, #28
 80a2992:	bd30      	pop	{r4, r5, pc}
 80a2994:	200001a8 	.word	0x200001a8
 80a2998:	20000330 	.word	0x20000330
 80a299c:	20000104 	.word	0x20000104
 80a29a0:	080a2873 	.word	0x080a2873

080a29a4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a29a4:	b510      	push	{r4, lr}
 80a29a6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a29a8:	2214      	movs	r2, #20
 80a29aa:	2100      	movs	r1, #0
 80a29ac:	f002 ff8a 	bl	80a58c4 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a29b0:	4b05      	ldr	r3, [pc, #20]	; (80a29c8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a29b2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a29b4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a29b6:	4b05      	ldr	r3, [pc, #20]	; (80a29cc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a29b8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a29ba:	f240 1301 	movw	r3, #257	; 0x101
 80a29be:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a29c0:	2381      	movs	r3, #129	; 0x81
 80a29c2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a29c4:	bd10      	pop	{r4, pc}
 80a29c6:	bf00      	nop
 80a29c8:	200003e0 	.word	0x200003e0
 80a29cc:	20000348 	.word	0x20000348

080a29d0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a29d0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a29d2:	4c0e      	ldr	r4, [pc, #56]	; (80a2a0c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a29d4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a29d6:	a801      	add	r0, sp, #4
 80a29d8:	f7ff ffe4 	bl	80a29a4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a29dc:	6823      	ldr	r3, [r4, #0]
 80a29de:	07db      	lsls	r3, r3, #31
 80a29e0:	d410      	bmi.n	80a2a04 <_Z17_fetch_usbserial1v+0x34>
 80a29e2:	4620      	mov	r0, r4
 80a29e4:	f7fd fb6a 	bl	80a00bc <__cxa_guard_acquire>
 80a29e8:	b160      	cbz	r0, 80a2a04 <_Z17_fetch_usbserial1v+0x34>
 80a29ea:	aa01      	add	r2, sp, #4
 80a29ec:	2101      	movs	r1, #1
 80a29ee:	4808      	ldr	r0, [pc, #32]	; (80a2a10 <_Z17_fetch_usbserial1v+0x40>)
 80a29f0:	f7ff ff80 	bl	80a28f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a29f4:	4620      	mov	r0, r4
 80a29f6:	f7fd fb66 	bl	80a00c6 <__cxa_guard_release>
 80a29fa:	4a06      	ldr	r2, [pc, #24]	; (80a2a14 <_Z17_fetch_usbserial1v+0x44>)
 80a29fc:	4906      	ldr	r1, [pc, #24]	; (80a2a18 <_Z17_fetch_usbserial1v+0x48>)
 80a29fe:	4804      	ldr	r0, [pc, #16]	; (80a2a10 <_Z17_fetch_usbserial1v+0x40>)
 80a2a00:	f001 fd80 	bl	80a4504 <__aeabi_atexit>
  return _usbserial1;
}
 80a2a04:	4802      	ldr	r0, [pc, #8]	; (80a2a10 <_Z17_fetch_usbserial1v+0x40>)
 80a2a06:	b006      	add	sp, #24
 80a2a08:	bd10      	pop	{r4, pc}
 80a2a0a:	bf00      	nop
 80a2a0c:	20000344 	.word	0x20000344
 80a2a10:	200003cc 	.word	0x200003cc
 80a2a14:	20000104 	.word	0x20000104
 80a2a18:	080a2873 	.word	0x080a2873

080a2a1c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2a1c:	4770      	bx	lr

080a2a1e <_ZN9IPAddressD0Ev>:
 80a2a1e:	b510      	push	{r4, lr}
 80a2a20:	4604      	mov	r4, r0
 80a2a22:	2118      	movs	r1, #24
 80a2a24:	f001 fd7c 	bl	80a4520 <_ZdlPvj>
 80a2a28:	4620      	mov	r0, r4
 80a2a2a:	bd10      	pop	{r4, pc}

080a2a2c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2a2e:	460f      	mov	r7, r1
 80a2a30:	f100 0608 	add.w	r6, r0, #8
 80a2a34:	1d05      	adds	r5, r0, #4
 80a2a36:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2a38:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2a3c:	220a      	movs	r2, #10
 80a2a3e:	4638      	mov	r0, r7
 80a2a40:	f001 fa4d 	bl	80a3ede <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2a44:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2a46:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2a48:	d007      	beq.n	80a2a5a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2a4a:	2c00      	cmp	r4, #0
 80a2a4c:	d0f4      	beq.n	80a2a38 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2a4e:	212e      	movs	r1, #46	; 0x2e
 80a2a50:	4638      	mov	r0, r7
 80a2a52:	f001 fa01 	bl	80a3e58 <_ZN5Print5printEc>
 80a2a56:	4404      	add	r4, r0
 80a2a58:	e7ee      	b.n	80a2a38 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2a5a:	4620      	mov	r0, r4
 80a2a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2a60 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2a60:	b510      	push	{r4, lr}
 80a2a62:	4604      	mov	r4, r0
 80a2a64:	4b04      	ldr	r3, [pc, #16]	; (80a2a78 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2a66:	2211      	movs	r2, #17
 80a2a68:	f840 3b04 	str.w	r3, [r0], #4
 80a2a6c:	2100      	movs	r1, #0
 80a2a6e:	f002 ff29 	bl	80a58c4 <memset>
{
    clear();
}
 80a2a72:	4620      	mov	r0, r4
 80a2a74:	bd10      	pop	{r4, pc}
 80a2a76:	bf00      	nop
 80a2a78:	080a934c 	.word	0x080a934c

080a2a7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2a7c:	4603      	mov	r3, r0
 80a2a7e:	4a07      	ldr	r2, [pc, #28]	; (80a2a9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2a80:	b510      	push	{r4, lr}
 80a2a82:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a2a86:	f101 0210 	add.w	r2, r1, #16
 80a2a8a:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2a8e:	4291      	cmp	r1, r2
 80a2a90:	f843 4b04 	str.w	r4, [r3], #4
 80a2a94:	d1f9      	bne.n	80a2a8a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2a96:	780a      	ldrb	r2, [r1, #0]
 80a2a98:	701a      	strb	r2, [r3, #0]
}
 80a2a9a:	bd10      	pop	{r4, pc}
 80a2a9c:	080a934c 	.word	0x080a934c

080a2aa0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2aa0:	4a02      	ldr	r2, [pc, #8]	; (80a2aac <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a2aa2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2aa4:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a2aa6:	2204      	movs	r2, #4
 80a2aa8:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2aaa:	4770      	bx	lr
 80a2aac:	080a934c 	.word	0x080a934c

080a2ab0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2ab0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2ab2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2ab6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2aba:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2abe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a2ac2:	2304      	movs	r3, #4
 80a2ac4:	6041      	str	r1, [r0, #4]
 80a2ac6:	7503      	strb	r3, [r0, #20]
 80a2ac8:	bd10      	pop	{r4, pc}
	...

080a2acc <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2acc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2ace:	4d04      	ldr	r5, [pc, #16]	; (80a2ae0 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2ad0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2ad2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2ad6:	9500      	str	r5, [sp, #0]
 80a2ad8:	f7ff ffea 	bl	80a2ab0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2adc:	b003      	add	sp, #12
 80a2ade:	bd30      	pop	{r4, r5, pc}
 80a2ae0:	080a934c 	.word	0x080a934c

080a2ae4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2ae4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2ae6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2ae8:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2aea:	b113      	cbz	r3, 80a2af2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2aec:	2203      	movs	r2, #3
 80a2aee:	4601      	mov	r1, r0
 80a2af0:	4798      	blx	r3
    }
 80a2af2:	4620      	mov	r0, r4
 80a2af4:	bd10      	pop	{r4, pc}

080a2af6 <_ZN10CloudClass13publishVitalsEm>:
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}

int CloudClass::publishVitals(system_tick_t period_s_) {
 80a2af6:	4608      	mov	r0, r1
    return spark_publish_vitals(period_s_, nullptr);
 80a2af8:	2100      	movs	r1, #0
 80a2afa:	f7ff ba2b 	b.w	80a1f54 <spark_publish_vitals>

080a2afe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a2afe:	680b      	ldr	r3, [r1, #0]
 80a2b00:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a2b02:	b113      	cbz	r3, 80a2b0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a2b04:	685a      	ldr	r2, [r3, #4]
 80a2b06:	3201      	adds	r2, #1
 80a2b08:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a2b0a:	4770      	bx	lr

080a2b0c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2b0c:	2100      	movs	r1, #0
 80a2b0e:	f7ff ba89 	b.w	80a2024 <system_delay_ms>
	...

080a2b14 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2b14:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2b16:	4b14      	ldr	r3, [pc, #80]	; (80a2b68 <serialEventRun+0x54>)
 80a2b18:	b133      	cbz	r3, 80a2b28 <serialEventRun+0x14>
 80a2b1a:	f7ff ff1d 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a2b1e:	6803      	ldr	r3, [r0, #0]
 80a2b20:	691b      	ldr	r3, [r3, #16]
 80a2b22:	4798      	blx	r3
 80a2b24:	2800      	cmp	r0, #0
 80a2b26:	dc16      	bgt.n	80a2b56 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2b28:	4b10      	ldr	r3, [pc, #64]	; (80a2b6c <serialEventRun+0x58>)
 80a2b2a:	b133      	cbz	r3, 80a2b3a <serialEventRun+0x26>
 80a2b2c:	f001 fb62 	bl	80a41f4 <_Z22__fetch_global_Serial1v>
 80a2b30:	6803      	ldr	r3, [r0, #0]
 80a2b32:	691b      	ldr	r3, [r3, #16]
 80a2b34:	4798      	blx	r3
 80a2b36:	2800      	cmp	r0, #0
 80a2b38:	dc10      	bgt.n	80a2b5c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2b3a:	4b0d      	ldr	r3, [pc, #52]	; (80a2b70 <serialEventRun+0x5c>)
 80a2b3c:	b10b      	cbz	r3, 80a2b42 <serialEventRun+0x2e>
 80a2b3e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2b42:	4b0c      	ldr	r3, [pc, #48]	; (80a2b74 <serialEventRun+0x60>)
 80a2b44:	b17b      	cbz	r3, 80a2b66 <serialEventRun+0x52>
 80a2b46:	f7ff ff43 	bl	80a29d0 <_Z17_fetch_usbserial1v>
 80a2b4a:	6803      	ldr	r3, [r0, #0]
 80a2b4c:	691b      	ldr	r3, [r3, #16]
 80a2b4e:	4798      	blx	r3
 80a2b50:	2800      	cmp	r0, #0
 80a2b52:	dc06      	bgt.n	80a2b62 <serialEventRun+0x4e>
 80a2b54:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2b56:	f3af 8000 	nop.w
 80a2b5a:	e7e5      	b.n	80a2b28 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2b5c:	f3af 8000 	nop.w
 80a2b60:	e7eb      	b.n	80a2b3a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2b62:	f3af 8000 	nop.w
 80a2b66:	bd08      	pop	{r3, pc}
	...

080a2b78 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2b78:	b508      	push	{r3, lr}
	serialEventRun();
 80a2b7a:	f7ff ffcb 	bl	80a2b14 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2b7e:	f7ff f911 	bl	80a1da4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2b82:	4b01      	ldr	r3, [pc, #4]	; (80a2b88 <_post_loop+0x10>)
 80a2b84:	6018      	str	r0, [r3, #0]
 80a2b86:	bd08      	pop	{r3, pc}
 80a2b88:	200006a0 	.word	0x200006a0

080a2b8c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2b8c:	4802      	ldr	r0, [pc, #8]	; (80a2b98 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2b8e:	4a03      	ldr	r2, [pc, #12]	; (80a2b9c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2b90:	4903      	ldr	r1, [pc, #12]	; (80a2ba0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2b92:	1a12      	subs	r2, r2, r0
 80a2b94:	f002 be70 	b.w	80a5878 <memcpy>
 80a2b98:	40024000 	.word	0x40024000
 80a2b9c:	40024004 	.word	0x40024004
 80a2ba0:	080a9a60 	.word	0x080a9a60

080a2ba4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2ba4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2ba6:	2300      	movs	r3, #0
 80a2ba8:	9300      	str	r3, [sp, #0]
 80a2baa:	461a      	mov	r2, r3
 80a2bac:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2bb0:	f7ff fa52 	bl	80a2058 <system_ctrl_set_result>
}
 80a2bb4:	b003      	add	sp, #12
 80a2bb6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2bbc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2bbc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2bbe:	8843      	ldrh	r3, [r0, #2]
 80a2bc0:	2b0a      	cmp	r3, #10
 80a2bc2:	d008      	beq.n	80a2bd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2bc4:	2b50      	cmp	r3, #80	; 0x50
 80a2bc6:	d109      	bne.n	80a2bdc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2bc8:	4b09      	ldr	r3, [pc, #36]	; (80a2bf0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2bca:	681b      	ldr	r3, [r3, #0]
 80a2bcc:	b13b      	cbz	r3, 80a2bde <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2bce:	b003      	add	sp, #12
 80a2bd0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2bd4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2bd6:	f7ff ffe5 	bl	80a2ba4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2bda:	e006      	b.n	80a2bea <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2bdc:	2300      	movs	r3, #0
 80a2bde:	9300      	str	r3, [sp, #0]
 80a2be0:	461a      	mov	r2, r3
 80a2be2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2be6:	f7ff fa37 	bl	80a2058 <system_ctrl_set_result>
        break;
    }
}
 80a2bea:	b003      	add	sp, #12
 80a2bec:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2bf0:	200004e4 	.word	0x200004e4

080a2bf4 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2bf4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2bf6:	4c10      	ldr	r4, [pc, #64]	; (80a2c38 <module_user_init_hook+0x44>)
 80a2bf8:	4d10      	ldr	r5, [pc, #64]	; (80a2c3c <module_user_init_hook+0x48>)
 80a2bfa:	6823      	ldr	r3, [r4, #0]
 80a2bfc:	42ab      	cmp	r3, r5
 80a2bfe:	4b10      	ldr	r3, [pc, #64]	; (80a2c40 <module_user_init_hook+0x4c>)
 80a2c00:	bf0c      	ite	eq
 80a2c02:	2201      	moveq	r2, #1
 80a2c04:	2200      	movne	r2, #0
 80a2c06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2c08:	d002      	beq.n	80a2c10 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2c0a:	f7ff ffbf 	bl	80a2b8c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2c0e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2c10:	f7ff f8b8 	bl	80a1d84 <HAL_RNG_GetRandomNumber>
 80a2c14:	4604      	mov	r4, r0
    srand(seed);
 80a2c16:	f002 fe5d 	bl	80a58d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2c1a:	4b0a      	ldr	r3, [pc, #40]	; (80a2c44 <module_user_init_hook+0x50>)
 80a2c1c:	b113      	cbz	r3, 80a2c24 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2c1e:	4620      	mov	r0, r4
 80a2c20:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2c24:	2100      	movs	r1, #0
 80a2c26:	4807      	ldr	r0, [pc, #28]	; (80a2c44 <module_user_init_hook+0x50>)
 80a2c28:	f7ff f98c 	bl	80a1f44 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2c30:	2100      	movs	r1, #0
 80a2c32:	4805      	ldr	r0, [pc, #20]	; (80a2c48 <module_user_init_hook+0x54>)
 80a2c34:	f7ff ba06 	b.w	80a2044 <system_ctrl_set_app_request_handler>
 80a2c38:	40024000 	.word	0x40024000
 80a2c3c:	9a271c1e 	.word	0x9a271c1e
 80a2c40:	200004e8 	.word	0x200004e8
 80a2c44:	00000000 	.word	0x00000000
 80a2c48:	080a2bbd 	.word	0x080a2bbd

080a2c4c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2c4c:	b510      	push	{r4, lr}
 80a2c4e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2c50:	f7ff ff48 	bl	80a2ae4 <_ZNSt14_Function_baseD1Ev>
 80a2c54:	4620      	mov	r0, r4
 80a2c56:	bd10      	pop	{r4, pc}

080a2c58 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2c58:	4803      	ldr	r0, [pc, #12]	; (80a2c68 <_GLOBAL__sub_I_RGB+0x10>)
 80a2c5a:	2300      	movs	r3, #0
 80a2c5c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2c5e:	4a03      	ldr	r2, [pc, #12]	; (80a2c6c <_GLOBAL__sub_I_RGB+0x14>)
 80a2c60:	4903      	ldr	r1, [pc, #12]	; (80a2c70 <_GLOBAL__sub_I_RGB+0x18>)
 80a2c62:	f001 bc4f 	b.w	80a4504 <__aeabi_atexit>
 80a2c66:	bf00      	nop
 80a2c68:	200004ec 	.word	0x200004ec
 80a2c6c:	20000104 	.word	0x20000104
 80a2c70:	080a2c4d 	.word	0x080a2c4d

080a2c74 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a2c74:	f7ff b926 	b.w	80a1ec4 <HAL_Interrupts_Disable_All>

080a2c78 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a2c78:	f7ff b91c 	b.w	80a1eb4 <HAL_Interrupts_Enable_All>

080a2c7c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a2c7c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a2c7e:	2000      	movs	r0, #0
 80a2c80:	f7ff f958 	bl	80a1f34 <spark_sync_time_pending>
 80a2c84:	b128      	cbz	r0, 80a2c92 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2c86:	f7ff f94d 	bl	80a1f24 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a2c8a:	f080 0001 	eor.w	r0, r0, #1
 80a2c8e:	b2c0      	uxtb	r0, r0
 80a2c90:	bd08      	pop	{r3, pc}
 80a2c92:	2001      	movs	r0, #1
    }
 80a2c94:	bd08      	pop	{r3, pc}
	...

080a2c98 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a2c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80a2c9a:	4b0e      	ldr	r3, [pc, #56]	; (80a2cd4 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a2c9c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80a2c9e:	681b      	ldr	r3, [r3, #0]
 80a2ca0:	a802      	add	r0, sp, #8
 80a2ca2:	4419      	add	r1, r3
 80a2ca4:	4b0c      	ldr	r3, [pc, #48]	; (80a2cd8 <_ZN9TimeClass7timeStrEl+0x40>)
 80a2ca6:	681b      	ldr	r3, [r3, #0]
 80a2ca8:	4419      	add	r1, r3
 80a2caa:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80a2cae:	f002 fceb 	bl	80a5688 <localtime>
        char* ascstr = asctime(calendar_time);
 80a2cb2:	f002 fc9f 	bl	80a55f4 <asctime>
 80a2cb6:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80a2cb8:	f003 fb72 	bl	80a63a0 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80a2cbc:	2300      	movs	r3, #0
 80a2cbe:	4428      	add	r0, r5
 80a2cc0:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80a2cc4:	4629      	mov	r1, r5
 80a2cc6:	4620      	mov	r0, r4
 80a2cc8:	f001 fb1d 	bl	80a4306 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a2ccc:	4620      	mov	r0, r4
 80a2cce:	b003      	add	sp, #12
 80a2cd0:	bd30      	pop	{r4, r5, pc}
 80a2cd2:	bf00      	nop
 80a2cd4:	20000508 	.word	0x20000508
 80a2cd8:	20000504 	.word	0x20000504

080a2cdc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a2cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2ce0:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
 80a2ce2:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a2ce4:	4607      	mov	r7, r0
 80a2ce6:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
 80a2ce8:	4620      	mov	r0, r4
 80a2cea:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a2cec:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
 80a2cee:	f002 fe3b 	bl	80a5968 <strcpy>
    size_t len = strlen(format_str);
 80a2cf2:	4620      	mov	r0, r4
 80a2cf4:	f003 fb54 	bl	80a63a0 <strlen>
 80a2cf8:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 80a2cfa:	b925      	cbnz	r5, 80a2d06 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
 80a2cfc:	4924      	ldr	r1, [pc, #144]	; (80a2d90 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
 80a2cfe:	a803      	add	r0, sp, #12
 80a2d00:	f002 fe32 	bl	80a5968 <strcpy>
 80a2d04:	e013      	b.n	80a2d2e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 80a2d06:	213c      	movs	r1, #60	; 0x3c
 80a2d08:	fb95 f2f1 	sdiv	r2, r5, r1
 80a2d0c:	2a00      	cmp	r2, #0
 80a2d0e:	bfb8      	it	lt
 80a2d10:	4252      	neglt	r2, r2
 80a2d12:	fb92 f3f1 	sdiv	r3, r2, r1
 80a2d16:	fb01 2213 	mls	r2, r1, r3, r2
 80a2d1a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a2d1e:	9200      	str	r2, [sp, #0]
 80a2d20:	fb95 f3f3 	sdiv	r3, r5, r3
 80a2d24:	4a1b      	ldr	r2, [pc, #108]	; (80a2d94 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
 80a2d26:	2110      	movs	r1, #16
 80a2d28:	a803      	add	r0, sp, #12
 80a2d2a:	f7ff f9cf 	bl	80a20cc <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80a2d2e:	4625      	mov	r5, r4
 80a2d30:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a2d32:	f108 3aff 	add.w	sl, r8, #4294967295
 80a2d36:	45b2      	cmp	sl, r6
 80a2d38:	d91b      	bls.n	80a2d72 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80a2d3a:	782b      	ldrb	r3, [r5, #0]
 80a2d3c:	2b25      	cmp	r3, #37	; 0x25
 80a2d3e:	d116      	bne.n	80a2d6e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
 80a2d40:	786b      	ldrb	r3, [r5, #1]
 80a2d42:	2b7a      	cmp	r3, #122	; 0x7a
 80a2d44:	d113      	bne.n	80a2d6e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
 80a2d46:	a803      	add	r0, sp, #12
 80a2d48:	f003 fb2a 	bl	80a63a0 <strlen>
 80a2d4c:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80a2d4e:	4430      	add	r0, r6
 80a2d50:	ebc6 020a 	rsb	r2, r6, sl
 80a2d54:	1ca9      	adds	r1, r5, #2
 80a2d56:	4420      	add	r0, r4
 80a2d58:	f002 fd8e 	bl	80a5878 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80a2d5c:	4642      	mov	r2, r8
 80a2d5e:	a903      	add	r1, sp, #12
 80a2d60:	4628      	mov	r0, r5
 80a2d62:	f002 fd89 	bl	80a5878 <memcpy>
            len = strlen(format_str);
 80a2d66:	4620      	mov	r0, r4
 80a2d68:	f003 fb1a 	bl	80a63a0 <strlen>
 80a2d6c:	4680      	mov	r8, r0
 80a2d6e:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80a2d70:	e7de      	b.n	80a2d30 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 80a2d72:	464b      	mov	r3, r9
 80a2d74:	4622      	mov	r2, r4
 80a2d76:	2132      	movs	r1, #50	; 0x32
 80a2d78:	a807      	add	r0, sp, #28
 80a2d7a:	f002 fe5d 	bl	80a5a38 <strftime>
    return String(buf);
 80a2d7e:	a907      	add	r1, sp, #28
 80a2d80:	4638      	mov	r0, r7
 80a2d82:	f001 fac0 	bl	80a4306 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a2d86:	4638      	mov	r0, r7
 80a2d88:	b024      	add	sp, #144	; 0x90
 80a2d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a2d8e:	bf00      	nop
 80a2d90:	080a99c1 	.word	0x080a99c1
 80a2d94:	080a9358 	.word	0x080a9358

080a2d98 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 80a2d98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a2d9a:	4605      	mov	r5, r0
 80a2d9c:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 80a2d9e:	461c      	mov	r4, r3
 80a2da0:	b913      	cbnz	r3, 80a2da8 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 80a2da2:	4b12      	ldr	r3, [pc, #72]	; (80a2dec <_ZN9TimeClass6formatElPKc+0x54>)
 80a2da4:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 80a2da6:	b12c      	cbz	r4, 80a2db4 <_ZN9TimeClass6formatElPKc+0x1c>
 80a2da8:	4b11      	ldr	r3, [pc, #68]	; (80a2df0 <_ZN9TimeClass6formatElPKc+0x58>)
 80a2daa:	4620      	mov	r0, r4
 80a2dac:	6819      	ldr	r1, [r3, #0]
 80a2dae:	f002 fdd1 	bl	80a5954 <strcmp>
 80a2db2:	b920      	cbnz	r0, 80a2dbe <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 80a2db4:	9901      	ldr	r1, [sp, #4]
 80a2db6:	4628      	mov	r0, r5
 80a2db8:	f7ff ff6e 	bl	80a2c98 <_ZN9TimeClass7timeStrEl>
 80a2dbc:	e013      	b.n	80a2de6 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 80a2dbe:	4f0d      	ldr	r7, [pc, #52]	; (80a2df4 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 80a2dc0:	9a01      	ldr	r2, [sp, #4]
 80a2dc2:	683b      	ldr	r3, [r7, #0]
 80a2dc4:	4e0c      	ldr	r6, [pc, #48]	; (80a2df8 <_ZN9TimeClass6formatElPKc+0x60>)
 80a2dc6:	441a      	add	r2, r3
 80a2dc8:	6833      	ldr	r3, [r6, #0]
 80a2dca:	a802      	add	r0, sp, #8
 80a2dcc:	4413      	add	r3, r2
 80a2dce:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 80a2dd2:	f002 fc59 	bl	80a5688 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80a2dd6:	683a      	ldr	r2, [r7, #0]
 80a2dd8:	6833      	ldr	r3, [r6, #0]
 80a2dda:	4601      	mov	r1, r0
 80a2ddc:	4413      	add	r3, r2
 80a2dde:	4628      	mov	r0, r5
 80a2de0:	4622      	mov	r2, r4
 80a2de2:	f7ff ff7b 	bl	80a2cdc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 80a2de6:	4628      	mov	r0, r5
 80a2de8:	b003      	add	sp, #12
 80a2dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2dec:	20000500 	.word	0x20000500
 80a2df0:	20000044 	.word	0x20000044
 80a2df4:	20000508 	.word	0x20000508
 80a2df8:	20000504 	.word	0x20000504

080a2dfc <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a2dfc:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a2dfe:	2000      	movs	r0, #0
 80a2e00:	f7fe ffe0 	bl	80a1dc4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a2e04:	4604      	mov	r4, r0
 80a2e06:	b968      	cbnz	r0, 80a2e24 <_ZN9TimeClass7isValidEv+0x28>
    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2e08:	f7ff f8fc 	bl	80a2004 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2e0c:	2801      	cmp	r0, #1
 80a2e0e:	d10b      	bne.n	80a2e28 <_ZN9TimeClass7isValidEv+0x2c>
 80a2e10:	4620      	mov	r0, r4
 80a2e12:	f7ff f90f 	bl	80a2034 <system_thread_get_state>
 80a2e16:	b938      	cbnz	r0, 80a2e28 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a2e18:	f7ff ff30 	bl	80a2c7c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a2e1c:	b930      	cbnz	r0, 80a2e2c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a2e1e:	f7ff f879 	bl	80a1f14 <spark_process>
 80a2e22:	e7f9      	b.n	80a2e18 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a2e24:	2001      	movs	r0, #1
 80a2e26:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a2e28:	2000      	movs	r0, #0
 80a2e2a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a2e2c:	f7ff ff26 	bl	80a2c7c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a2e30:	2000      	movs	r0, #0
 80a2e32:	f7fe ffc7 	bl	80a1dc4 <HAL_RTC_Time_Is_Valid>
 80a2e36:	3000      	adds	r0, #0
 80a2e38:	bf18      	it	ne
 80a2e3a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a2e3c:	bd10      	pop	{r4, pc}

080a2e3e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a2e3e:	b508      	push	{r3, lr}
    (void)isValid();
 80a2e40:	f7ff ffdc 	bl	80a2dfc <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a2e44:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a2e48:	f7fe bfb4 	b.w	80a1db4 <HAL_RTC_Get_UnixTime>

080a2e4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2e4c:	4b02      	ldr	r3, [pc, #8]	; (80a2e58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2e4e:	681a      	ldr	r2, [r3, #0]
 80a2e50:	4b02      	ldr	r3, [pc, #8]	; (80a2e5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2e52:	601a      	str	r2, [r3, #0]
 80a2e54:	4770      	bx	lr
 80a2e56:	bf00      	nop
 80a2e58:	20000044 	.word	0x20000044
 80a2e5c:	20000500 	.word	0x20000500

080a2e60 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
 80a2e60:	6880      	ldr	r0, [r0, #8]
 80a2e62:	6803      	ldr	r3, [r0, #0]
 80a2e64:	68db      	ldr	r3, [r3, #12]
 80a2e66:	4718      	bx	r3

080a2e68 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
 80a2e68:	4770      	bx	lr

080a2e6a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
 80a2e6a:	b119      	cbz	r1, 80a2e74 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
 80a2e6c:	680b      	ldr	r3, [r1, #0]
 80a2e6e:	4608      	mov	r0, r1
 80a2e70:	685b      	ldr	r3, [r3, #4]
 80a2e72:	4718      	bx	r3
 80a2e74:	4770      	bx	lr

080a2e76 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
 80a2e76:	b119      	cbz	r1, 80a2e80 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
 80a2e78:	680b      	ldr	r3, [r1, #0]
 80a2e7a:	4608      	mov	r0, r1
 80a2e7c:	685b      	ldr	r3, [r3, #4]
 80a2e7e:	4718      	bx	r3
 80a2e80:	4770      	bx	lr

080a2e82 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a2e82:	4770      	bx	lr

080a2e84 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
 80a2e84:	4770      	bx	lr

080a2e86 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
 80a2e86:	4770      	bx	lr

080a2e88 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
 80a2e88:	b538      	push	{r3, r4, r5, lr}
 80a2e8a:	4604      	mov	r4, r0
 80a2e8c:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
 80a2e8e:	6800      	ldr	r0, [r0, #0]
 80a2e90:	212e      	movs	r1, #46	; 0x2e
 80a2e92:	f002 fd55 	bl	80a5940 <strchrnul>
    size = s - category;
 80a2e96:	6823      	ldr	r3, [r4, #0]
 80a2e98:	1ac3      	subs	r3, r0, r3
 80a2e9a:	602b      	str	r3, [r5, #0]
    if (size) {
 80a2e9c:	b123      	cbz	r3, 80a2ea8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
 80a2e9e:	7803      	ldrb	r3, [r0, #0]
 80a2ea0:	b103      	cbz	r3, 80a2ea4 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
 80a2ea2:	3001      	adds	r0, #1
 80a2ea4:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2ea6:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
 80a2ea8:	4618      	mov	r0, r3
}
 80a2eaa:	bd38      	pop	{r3, r4, r5, pc}

080a2eac <_ZN5spark16JSONStreamWriterD0Ev>:
 80a2eac:	b510      	push	{r4, lr}
 80a2eae:	4604      	mov	r4, r0
 80a2eb0:	210c      	movs	r1, #12
 80a2eb2:	f001 fb35 	bl	80a4520 <_ZdlPvj>
 80a2eb6:	4620      	mov	r0, r4
 80a2eb8:	bd10      	pop	{r4, pc}

080a2eba <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
 80a2eba:	b510      	push	{r4, lr}
 80a2ebc:	4604      	mov	r4, r0
 80a2ebe:	2104      	movs	r1, #4
 80a2ec0:	f001 fb2e 	bl	80a4520 <_ZdlPvj>
 80a2ec4:	4620      	mov	r0, r4
 80a2ec6:	bd10      	pop	{r4, pc}

080a2ec8 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
 80a2ec8:	b510      	push	{r4, lr}
 80a2eca:	4604      	mov	r4, r0
 80a2ecc:	2104      	movs	r1, #4
 80a2ece:	f001 fb27 	bl	80a4520 <_ZdlPvj>
 80a2ed2:	4620      	mov	r0, r4
 80a2ed4:	bd10      	pop	{r4, pc}

080a2ed6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
 80a2ed6:	b538      	push	{r3, r4, r5, lr}
 80a2ed8:	460c      	mov	r4, r1
 80a2eda:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
 80a2edc:	f7ff fd3c 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a2ee0:	4284      	cmp	r4, r0
 80a2ee2:	d102      	bne.n	80a2eea <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x14>
        // FIXME: Uninitializing Serial detaches a Gen 3 device from the host
#if !HAL_PLATFORM_NRF52840
        Serial.end();
 80a2ee4:	f7ff fd38 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a2ee8:	e005      	b.n	80a2ef6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
#endif
        return;
    }
#if Wiring_USBSerial1
    if (stream == &USBSerial1) {
 80a2eea:	f7ff fd71 	bl	80a29d0 <_Z17_fetch_usbserial1v>
 80a2eee:	4284      	cmp	r4, r0
 80a2ef0:	d105      	bne.n	80a2efe <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x28>
        USBSerial1.end();
 80a2ef2:	f7ff fd6d 	bl	80a29d0 <_Z17_fetch_usbserial1v>
        Serial1.end();
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a2ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
        return;
    }
#if Wiring_USBSerial1
    if (stream == &USBSerial1) {
        USBSerial1.end();
 80a2efa:	f7ff bd13 	b.w	80a2924 <_ZN9USBSerial3endEv>
        return;
    }
#endif
    if (stream == &Serial1) {
 80a2efe:	f001 f979 	bl	80a41f4 <_Z22__fetch_global_Serial1v>
 80a2f02:	4284      	cmp	r4, r0
 80a2f04:	d105      	bne.n	80a2f12 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x3c>
        Serial1.end();
 80a2f06:	f001 f975 	bl	80a41f4 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
 80a2f0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
 80a2f0e:	f001 b96a 	b.w	80a41e6 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
 80a2f12:	4621      	mov	r1, r4
 80a2f14:	4628      	mov	r0, r5
 80a2f16:	f7ff ffae 	bl	80a2e76 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
 80a2f1a:	bd38      	pop	{r3, r4, r5, pc}

080a2f1c <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
 80a2f1c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
 80a2f1e:	f002 fd19 	bl	80a5954 <strcmp>
}
 80a2f22:	fab0 f080 	clz	r0, r0
 80a2f26:	0940      	lsrs	r0, r0, #5
 80a2f28:	bd08      	pop	{r3, pc}

080a2f2a <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a2f2a:	b538      	push	{r3, r4, r5, lr}
 80a2f2c:	4605      	mov	r5, r0
    return value(val, strlen(val));
 80a2f2e:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
 80a2f30:	460c      	mov	r4, r1
    return value(val, strlen(val));
 80a2f32:	f003 fa35 	bl	80a63a0 <strlen>
 80a2f36:	4621      	mov	r1, r4
 80a2f38:	4602      	mov	r2, r0
 80a2f3a:	4628      	mov	r0, r5
}
 80a2f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
 80a2f40:	f7ff ba5f 	b.w	80a2402 <_ZN5spark10JSONWriter5valueEPKcj>

080a2f44 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
 80a2f44:	6800      	ldr	r0, [r0, #0]
 80a2f46:	f7fe bf0d 	b.w	80a1d64 <os_mutex_recursive_lock>

080a2f4a <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
 80a2f4a:	b570      	push	{r4, r5, r6, lr}
 80a2f4c:	4604      	mov	r4, r0
    write(str, strlen(str));
 80a2f4e:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
 80a2f50:	460d      	mov	r5, r1
    write(str, strlen(str));
 80a2f52:	f003 fa25 	bl	80a63a0 <strlen>
 80a2f56:	6823      	ldr	r3, [r4, #0]
 80a2f58:	4602      	mov	r2, r0
 80a2f5a:	4629      	mov	r1, r5
 80a2f5c:	4620      	mov	r0, r4
}
 80a2f5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
 80a2f62:	68db      	ldr	r3, [r3, #12]
 80a2f64:	4718      	bx	r3

080a2f66 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
 80a2f66:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 80a2f68:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
 80a2f6a:	ab02      	add	r3, sp, #8
 80a2f6c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 80a2f70:	68d4      	ldr	r4, [r2, #12]
 80a2f72:	4619      	mov	r1, r3
 80a2f74:	2201      	movs	r2, #1
 80a2f76:	47a0      	blx	r4
}
 80a2f78:	b002      	add	sp, #8
 80a2f7a:	bd10      	pop	{r4, pc}

080a2f7c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a2f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2f80:	6807      	ldr	r7, [r0, #0]
 80a2f82:	468b      	mov	fp, r1
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a2f84:	463c      	mov	r4, r7
 80a2f86:	6845      	ldr	r5, [r0, #4]
 80a2f88:	4691      	mov	r9, r2
 80a2f8a:	2214      	movs	r2, #20
 80a2f8c:	4355      	muls	r5, r2
 80a2f8e:	b085      	sub	sp, #20
 80a2f90:	9301      	str	r3, [sp, #4]
 80a2f92:	10ab      	asrs	r3, r5, #2
 80a2f94:	4d18      	ldr	r5, [pc, #96]	; (80a2ff8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 80a2f96:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
 80a2f98:	435d      	muls	r5, r3
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a2f9a:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
 80a2f9c:	2d00      	cmp	r5, #0
 80a2f9e:	9303      	str	r3, [sp, #12]
 80a2fa0:	dd23      	ble.n	80a2fea <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
 80a2fa2:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
 80a2fa4:	106e      	asrs	r6, r5, #1
 80a2fa6:	fb03 f006 	mul.w	r0, r3, r6
 80a2faa:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
 80a2fae:	f8b8 a004 	ldrh.w	sl, [r8, #4]
 80a2fb2:	464a      	mov	r2, r9
 80a2fb4:	45d1      	cmp	r9, sl
 80a2fb6:	bf28      	it	cs
 80a2fb8:	4652      	movcs	r2, sl
 80a2fba:	4659      	mov	r1, fp
 80a2fbc:	5820      	ldr	r0, [r4, r0]
 80a2fbe:	f003 f9f7 	bl	80a63b0 <strncmp>
                if (cmp == 0) {
 80a2fc2:	9b03      	ldr	r3, [sp, #12]
 80a2fc4:	b948      	cbnz	r0, 80a2fda <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
 80a2fc6:	45d1      	cmp	r9, sl
 80a2fc8:	d103      	bne.n	80a2fd2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
 80a2fca:	9a01      	ldr	r2, [sp, #4]
 80a2fcc:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
 80a2fce:	4635      	mov	r5, r6
 80a2fd0:	e7e4      	b.n	80a2f9c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
 80a2fd2:	bf8c      	ite	hi
 80a2fd4:	2001      	movhi	r0, #1
 80a2fd6:	2000      	movls	r0, #0
 80a2fd8:	e000      	b.n	80a2fdc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
 80a2fda:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
 80a2fdc:	2800      	cmp	r0, #0
 80a2fde:	d0f6      	beq.n	80a2fce <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
 80a2fe0:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
 80a2fe2:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
 80a2fe6:	3e01      	subs	r6, #1
 80a2fe8:	e7f1      	b.n	80a2fce <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
 80a2fea:	1be4      	subs	r4, r4, r7
}
 80a2fec:	4802      	ldr	r0, [pc, #8]	; (80a2ff8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
 80a2fee:	10a4      	asrs	r4, r4, #2
}
 80a2ff0:	4360      	muls	r0, r4
 80a2ff2:	b005      	add	sp, #20
 80a2ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2ff8:	cccccccd 	.word	0xcccccccd

080a2ffc <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a2ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
 80a2ffe:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
 80a3000:	b085      	sub	sp, #20
 80a3002:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
 80a3004:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
 80a3006:	b313      	cbz	r3, 80a304e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
 80a3008:	b309      	cbz	r1, 80a304e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a300a:	2300      	movs	r3, #0
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
 80a300c:	461d      	mov	r5, r3
LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a300e:	af04      	add	r7, sp, #16
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
 80a3010:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a3014:	f847 3d04 	str.w	r3, [r7, #-4]!
        while ((name = nextSubcategoryName(category, size))) {
 80a3018:	4639      	mov	r1, r7
 80a301a:	a801      	add	r0, sp, #4
 80a301c:	f7ff ff34 	bl	80a2e88 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a3020:	4601      	mov	r1, r0
 80a3022:	b1a0      	cbz	r0, 80a304e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
 80a3024:	ab04      	add	r3, sp, #16
 80a3026:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
 80a302a:	9a03      	ldr	r2, [sp, #12]
 80a302c:	4620      	mov	r0, r4
 80a302e:	f7ff ffa5 	bl	80a2f7c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
 80a3032:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80a3036:	b153      	cbz	r3, 80a304e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
 80a3038:	6823      	ldr	r3, [r4, #0]
 80a303a:	2414      	movs	r4, #20
 80a303c:	fb04 3400 	mla	r4, r4, r0, r3
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
 80a3040:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
 80a3044:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
 80a3046:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
 80a3048:	bfa8      	it	ge
 80a304a:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 80a304c:	e7e4      	b.n	80a3018 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
 80a304e:	4630      	mov	r0, r6
 80a3050:	b005      	add	sp, #20
 80a3052:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3054 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
 80a3054:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
 80a3056:	4c09      	ldr	r4, [pc, #36]	; (80a307c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
 80a3058:	6823      	ldr	r3, [r4, #0]
 80a305a:	07db      	lsls	r3, r3, #31
 80a305c:	d40b      	bmi.n	80a3076 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80a305e:	4620      	mov	r0, r4
 80a3060:	f7fd f82c 	bl	80a00bc <__cxa_guard_acquire>
 80a3064:	b138      	cbz	r0, 80a3076 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
 80a3066:	4620      	mov	r0, r4
 80a3068:	f7fd f82d 	bl	80a00c6 <__cxa_guard_release>
 80a306c:	4a04      	ldr	r2, [pc, #16]	; (80a3080 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
 80a306e:	4905      	ldr	r1, [pc, #20]	; (80a3084 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
 80a3070:	4805      	ldr	r0, [pc, #20]	; (80a3088 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a3072:	f001 fa47 	bl	80a4504 <__aeabi_atexit>
    return &factory;
}
 80a3076:	4804      	ldr	r0, [pc, #16]	; (80a3088 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
 80a3078:	bd10      	pop	{r4, pc}
 80a307a:	bf00      	nop
 80a307c:	2000050c 	.word	0x2000050c
 80a3080:	20000104 	.word	0x20000104
 80a3084:	080a2e85 	.word	0x080a2e85
 80a3088:	2000004c 	.word	0x2000004c

080a308c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
 80a308c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
 80a308e:	4c09      	ldr	r4, [pc, #36]	; (80a30b4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
 80a3090:	6823      	ldr	r3, [r4, #0]
 80a3092:	07db      	lsls	r3, r3, #31
 80a3094:	d40b      	bmi.n	80a30ae <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80a3096:	4620      	mov	r0, r4
 80a3098:	f7fd f810 	bl	80a00bc <__cxa_guard_acquire>
 80a309c:	b138      	cbz	r0, 80a30ae <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
 80a309e:	4620      	mov	r0, r4
 80a30a0:	f7fd f811 	bl	80a00c6 <__cxa_guard_release>
 80a30a4:	4a04      	ldr	r2, [pc, #16]	; (80a30b8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
 80a30a6:	4905      	ldr	r1, [pc, #20]	; (80a30bc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
 80a30a8:	4805      	ldr	r0, [pc, #20]	; (80a30c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a30aa:	f001 fa2b 	bl	80a4504 <__aeabi_atexit>
    return &factory;
}
 80a30ae:	4804      	ldr	r0, [pc, #16]	; (80a30c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
 80a30b0:	bd10      	pop	{r4, pc}
 80a30b2:	bf00      	nop
 80a30b4:	2000053c 	.word	0x2000053c
 80a30b8:	20000104 	.word	0x20000104
 80a30bc:	080a2e83 	.word	0x080a2e83
 80a30c0:	20000048 	.word	0x20000048

080a30c4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
 80a30c4:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a30c6:	2500      	movs	r5, #0
 80a30c8:	4604      	mov	r4, r0
 80a30ca:	6005      	str	r5, [r0, #0]
 80a30cc:	6045      	str	r5, [r0, #4]
 80a30ce:	6085      	str	r5, [r0, #8]
 80a30d0:	6105      	str	r5, [r0, #16]
 80a30d2:	6145      	str	r5, [r0, #20]
 80a30d4:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a30d6:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
 80a30da:	f7fe fe3b 	bl	80a1d54 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
 80a30de:	f7ff ffb9 	bl	80a3054 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
 80a30e2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a30e4:	f7ff ffd2 	bl	80a308c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
 80a30e8:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
 80a30ea:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
 80a30ec:	4620      	mov	r0, r4
 80a30ee:	bd38      	pop	{r3, r4, r5, pc}

080a30f0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
 80a30f0:	b510      	push	{r4, lr}
    static LogManager mgr;
 80a30f2:	4c0a      	ldr	r4, [pc, #40]	; (80a311c <_ZN5spark10LogManager8instanceEv+0x2c>)
 80a30f4:	6823      	ldr	r3, [r4, #0]
 80a30f6:	07db      	lsls	r3, r3, #31
 80a30f8:	d40e      	bmi.n	80a3118 <_ZN5spark10LogManager8instanceEv+0x28>
 80a30fa:	4620      	mov	r0, r4
 80a30fc:	f7fc ffde 	bl	80a00bc <__cxa_guard_acquire>
 80a3100:	b150      	cbz	r0, 80a3118 <_ZN5spark10LogManager8instanceEv+0x28>
 80a3102:	4807      	ldr	r0, [pc, #28]	; (80a3120 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a3104:	f7ff ffde 	bl	80a30c4 <_ZN5spark10LogManagerC1Ev>
 80a3108:	4620      	mov	r0, r4
 80a310a:	f7fc ffdc 	bl	80a00c6 <__cxa_guard_release>
 80a310e:	4a05      	ldr	r2, [pc, #20]	; (80a3124 <_ZN5spark10LogManager8instanceEv+0x34>)
 80a3110:	4905      	ldr	r1, [pc, #20]	; (80a3128 <_ZN5spark10LogManager8instanceEv+0x38>)
 80a3112:	4803      	ldr	r0, [pc, #12]	; (80a3120 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a3114:	f001 f9f6 	bl	80a4504 <__aeabi_atexit>
    return &mgr;
}
 80a3118:	4801      	ldr	r0, [pc, #4]	; (80a3120 <_ZN5spark10LogManager8instanceEv+0x30>)
 80a311a:	bd10      	pop	{r4, pc}
 80a311c:	20000510 	.word	0x20000510
 80a3120:	20000514 	.word	0x20000514
 80a3124:	20000104 	.word	0x20000104
 80a3128:	080a3579 	.word	0x080a3579

080a312c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
 80a312c:	2300      	movs	r3, #0
 80a312e:	4a02      	ldr	r2, [pc, #8]	; (80a3138 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
 80a3130:	4902      	ldr	r1, [pc, #8]	; (80a313c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
 80a3132:	4803      	ldr	r0, [pc, #12]	; (80a3140 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
 80a3134:	f7fe bee6 	b.w	80a1f04 <log_set_callbacks>
 80a3138:	080a345d 	.word	0x080a345d
 80a313c:	080a33ed 	.word	0x080a33ed
 80a3140:	080a3375 	.word	0x080a3375

080a3144 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
 80a3144:	2300      	movs	r3, #0
 80a3146:	461a      	mov	r2, r3
 80a3148:	4619      	mov	r1, r3
 80a314a:	4618      	mov	r0, r3
 80a314c:	f7fe beda 	b.w	80a1f04 <log_set_callbacks>

080a3150 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
 80a3150:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a3152:	4605      	mov	r5, r0
    return JSONValue(v_, d_);
 80a3154:	690e      	ldr	r6, [r1, #16]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3156:	f851 3b04 	ldr.w	r3, [r1], #4
 80a315a:	ac02      	add	r4, sp, #8
 80a315c:	f844 3d08 	str.w	r3, [r4, #-8]!
 80a3160:	a801      	add	r0, sp, #4
 80a3162:	f7ff fccc 	bl	80a2afe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a3166:	4622      	mov	r2, r4
 80a3168:	4631      	mov	r1, r6
 80a316a:	4628      	mov	r0, r5
 80a316c:	f7ff f9bd 	bl	80a24ea <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a3170:	a801      	add	r0, sp, #4
 80a3172:	f7ff f955 	bl	80a2420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a3176:	4628      	mov	r0, r5
 80a3178:	b002      	add	sp, #8
 80a317a:	bd70      	pop	{r4, r5, r6, pc}

080a317c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
 80a317c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a317e:	4605      	mov	r5, r0
        JSONObjectIterator(value.t_, value.d_) {
 80a3180:	688e      	ldr	r6, [r1, #8]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3182:	f851 3b04 	ldr.w	r3, [r1], #4
 80a3186:	ac02      	add	r4, sp, #8
 80a3188:	f844 3d08 	str.w	r3, [r4, #-8]!
 80a318c:	a801      	add	r0, sp, #4
 80a318e:	f7ff fcb6 	bl	80a2afe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a3192:	4622      	mov	r2, r4
 80a3194:	4631      	mov	r1, r6
 80a3196:	4628      	mov	r0, r5
 80a3198:	f7ff f98c 	bl	80a24b4 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a319c:	a801      	add	r0, sp, #4
 80a319e:	f7ff f93f 	bl	80a2420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a31a2:	4628      	mov	r0, r5
 80a31a4:	b002      	add	sp, #8
 80a31a6:	bd70      	pop	{r4, r5, r6, pc}

080a31a8 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
 80a31a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a31aa:	4605      	mov	r5, r0
    return JSONString(k_, d_);
 80a31ac:	68ce      	ldr	r6, [r1, #12]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a31ae:	f851 3b04 	ldr.w	r3, [r1], #4
 80a31b2:	ac02      	add	r4, sp, #8
 80a31b4:	f844 3d08 	str.w	r3, [r4, #-8]!
 80a31b8:	a801      	add	r0, sp, #4
 80a31ba:	f7ff fca0 	bl	80a2afe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
 80a31be:	4622      	mov	r2, r4
 80a31c0:	4631      	mov	r1, r6
 80a31c2:	4628      	mov	r0, r5
 80a31c4:	f7ff f94e 	bl	80a2464 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a31c8:	a801      	add	r0, sp, #4
 80a31ca:	f7ff f929 	bl	80a2420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 80a31ce:	4628      	mov	r0, r5
 80a31d0:	b002      	add	sp, #8
 80a31d2:	bd70      	pop	{r4, r5, r6, pc}

080a31d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
 80a31d4:	b530      	push	{r4, r5, lr}
 80a31d6:	b08b      	sub	sp, #44	; 0x2c
 80a31d8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
 80a31da:	4601      	mov	r1, r0
 80a31dc:	a804      	add	r0, sp, #16
 80a31de:	f7ff ffcd 	bl	80a317c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
 80a31e2:	a804      	add	r0, sp, #16
 80a31e4:	f7ff f84f 	bl	80a2286 <_ZN5spark18JSONObjectIterator4nextEv>
 80a31e8:	b1e8      	cbz	r0, 80a3226 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
 80a31ea:	a904      	add	r1, sp, #16
 80a31ec:	4668      	mov	r0, sp
 80a31ee:	f7ff ffdb 	bl	80a31a8 <_ZNK5spark18JSONObjectIterator4nameEv>
 80a31f2:	490f      	ldr	r1, [pc, #60]	; (80a3230 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
 80a31f4:	9802      	ldr	r0, [sp, #8]
 80a31f6:	f7ff fe91 	bl	80a2f1c <_ZNK5spark10JSONStringeqEPKc.isra.7>
 80a31fa:	4604      	mov	r4, r0
 80a31fc:	b110      	cbz	r0, 80a3204 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
 80a31fe:	1c2c      	adds	r4, r5, #0
 80a3200:	bf18      	it	ne
 80a3202:	2401      	movne	r4, #1
 80a3204:	a801      	add	r0, sp, #4
 80a3206:	f7ff f90b 	bl	80a2420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a320a:	2c00      	cmp	r4, #0
 80a320c:	d0e9      	beq.n	80a31e2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
 80a320e:	a904      	add	r1, sp, #16
 80a3210:	4668      	mov	r0, sp
 80a3212:	f7ff ff9d 	bl	80a3150 <_ZNK5spark18JSONObjectIterator5valueEv>
 80a3216:	4668      	mov	r0, sp
 80a3218:	f7ff f815 	bl	80a2246 <_ZNK5spark9JSONValue5toIntEv>
 80a321c:	6028      	str	r0, [r5, #0]
 80a321e:	a801      	add	r0, sp, #4
 80a3220:	f7ff f8fe 	bl	80a2420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3224:	e7dd      	b.n	80a31e2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
 80a3226:	a805      	add	r0, sp, #20
 80a3228:	f7ff f8fa 	bl	80a2420 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
 80a322c:	b00b      	add	sp, #44	; 0x2c
 80a322e:	bd30      	pop	{r4, r5, pc}
 80a3230:	080a93c8 	.word	0x080a93c8

080a3234 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a3234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3236:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
 80a3238:	491a      	ldr	r1, [pc, #104]	; (80a32a4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x70>)
 80a323a:	4620      	mov	r0, r4
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
 80a323c:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
 80a323e:	f002 fb89 	bl	80a5954 <strcmp>
 80a3242:	b940      	cbnz	r0, 80a3256 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
 80a3244:	f7ff fb88 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a3248:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a324c:	f7ff fb66 	bl	80a291c <_ZN9USBSerial5beginEl>
        return &Serial;
 80a3250:	f7ff fb82 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a3254:	e023      	b.n	80a329e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#if Wiring_USBSerial1
    if (strcmp(type, "USBSerial1") == 0) {
 80a3256:	4914      	ldr	r1, [pc, #80]	; (80a32a8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x74>)
 80a3258:	4620      	mov	r0, r4
 80a325a:	f002 fb7b 	bl	80a5954 <strcmp>
 80a325e:	b940      	cbnz	r0, 80a3272 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x3e>
        USBSerial1.begin();
 80a3260:	f7ff fbb6 	bl	80a29d0 <_Z17_fetch_usbserial1v>
 80a3264:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a3268:	f7ff fb58 	bl	80a291c <_ZN9USBSerial5beginEl>
        return &USBSerial1;
 80a326c:	f7ff fbb0 	bl	80a29d0 <_Z17_fetch_usbserial1v>
 80a3270:	e015      	b.n	80a329e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
 80a3272:	490e      	ldr	r1, [pc, #56]	; (80a32ac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x78>)
 80a3274:	4620      	mov	r0, r4
 80a3276:	f002 fb6d 	bl	80a5954 <strcmp>
 80a327a:	b978      	cbnz	r0, 80a329c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x68>
        int baud = 9600;
 80a327c:	a902      	add	r1, sp, #8
 80a327e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80a3282:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
 80a3286:	4628      	mov	r0, r5
 80a3288:	f7ff ffa4 	bl	80a31d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
 80a328c:	f000 ffb2 	bl	80a41f4 <_Z22__fetch_global_Serial1v>
 80a3290:	9901      	ldr	r1, [sp, #4]
 80a3292:	f000 ffa5 	bl	80a41e0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
 80a3296:	f000 ffad 	bl	80a41f4 <_Z22__fetch_global_Serial1v>
 80a329a:	e000      	b.n	80a329e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x6a>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
 80a329c:	2000      	movs	r0, #0
}
 80a329e:	b003      	add	sp, #12
 80a32a0:	bd30      	pop	{r4, r5, pc}
 80a32a2:	bf00      	nop
 80a32a4:	080a93cd 	.word	0x080a93cd
 80a32a8:	080a93d4 	.word	0x080a93d4
 80a32ac:	080a93d7 	.word	0x080a93d7

080a32b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a32b0:	b570      	push	{r4, r5, r6, lr}
 80a32b2:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 80a32b4:	6804      	ldr	r4, [r0, #0]
 80a32b6:	6843      	ldr	r3, [r0, #4]
 80a32b8:	2614      	movs	r6, #20
 80a32ba:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a32be:	42a6      	cmp	r6, r4
 80a32c0:	d005      	beq.n	80a32ce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 80a32c2:	f104 0008 	add.w	r0, r4, #8
 80a32c6:	f7ff fff3 	bl	80a32b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a32ca:	3414      	adds	r4, #20
 80a32cc:	e7f7      	b.n	80a32be <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a32ce:	6828      	ldr	r0, [r5, #0]
 80a32d0:	f7fe fed4 	bl	80a207c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 80a32d4:	4628      	mov	r0, r5
 80a32d6:	bd70      	pop	{r4, r5, r6, pc}

080a32d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
 80a32d8:	b570      	push	{r4, r5, r6, lr}
 80a32da:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
 80a32dc:	6804      	ldr	r4, [r0, #0]
 80a32de:	6843      	ldr	r3, [r0, #4]
 80a32e0:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a32e4:	42a6      	cmp	r6, r4
 80a32e6:	d004      	beq.n	80a32f2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
 80a32e8:	4620      	mov	r0, r4
 80a32ea:	f000 ffc5 	bl	80a4278 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a32ee:	3410      	adds	r4, #16
 80a32f0:	e7f8      	b.n	80a32e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a32f2:	6828      	ldr	r0, [r5, #0]
 80a32f4:	f7fe fec2 	bl	80a207c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
 80a32f8:	4628      	mov	r0, r5
 80a32fa:	bd70      	pop	{r4, r5, r6, pc}

080a32fc <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
 80a32fc:	b510      	push	{r4, lr}
 80a32fe:	4604      	mov	r4, r0
 80a3300:	300c      	adds	r0, #12
 80a3302:	f7ff ffd5 	bl	80a32b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a3306:	4620      	mov	r0, r4
 80a3308:	f7ff ffe6 	bl	80a32d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
 80a330c:	4620      	mov	r0, r4
 80a330e:	bd10      	pop	{r4, pc}

080a3310 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
 80a3310:	b510      	push	{r4, lr}
 80a3312:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
 80a3314:	4b03      	ldr	r3, [pc, #12]	; (80a3324 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
 80a3316:	f840 3b04 	str.w	r3, [r0], #4
 80a331a:	f7ff ffef 	bl	80a32fc <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
 80a331e:	4620      	mov	r0, r4
 80a3320:	bd10      	pop	{r4, pc}
 80a3322:	bf00      	nop
 80a3324:	080a6c9c 	.word	0x080a6c9c

080a3328 <_ZN5spark16StreamLogHandlerD0Ev>:
 80a3328:	b510      	push	{r4, lr}
 80a332a:	4604      	mov	r4, r0
 80a332c:	f7ff fff0 	bl	80a3310 <_ZN5spark16StreamLogHandlerD1Ev>
 80a3330:	4620      	mov	r0, r4
 80a3332:	2124      	movs	r1, #36	; 0x24
 80a3334:	f001 f8f4 	bl	80a4520 <_ZdlPvj>
 80a3338:	4620      	mov	r0, r4
 80a333a:	bd10      	pop	{r4, pc}

080a333c <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
 80a333c:	b510      	push	{r4, lr}
 80a333e:	4604      	mov	r4, r0
 80a3340:	4b02      	ldr	r3, [pc, #8]	; (80a334c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
 80a3342:	6003      	str	r3, [r0, #0]
 80a3344:	f7ff ffe4 	bl	80a3310 <_ZN5spark16StreamLogHandlerD1Ev>
 80a3348:	4620      	mov	r0, r4
 80a334a:	bd10      	pop	{r4, pc}
 80a334c:	080a93a0 	.word	0x080a93a0

080a3350 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
 80a3350:	b510      	push	{r4, lr}
 80a3352:	4604      	mov	r4, r0
 80a3354:	f7ff fff2 	bl	80a333c <_ZN5spark20JSONStreamLogHandlerD1Ev>
 80a3358:	4620      	mov	r0, r4
 80a335a:	2124      	movs	r1, #36	; 0x24
 80a335c:	f001 f8e0 	bl	80a4520 <_ZdlPvj>
 80a3360:	4620      	mov	r0, r4
 80a3362:	bd10      	pop	{r4, pc}

080a3364 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80a3364:	b510      	push	{r4, lr}
 80a3366:	4604      	mov	r4, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
 80a3368:	6803      	ldr	r3, [r0, #0]
 80a336a:	6818      	ldr	r0, [r3, #0]
 80a336c:	f7fe fd02 	bl	80a1d74 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
 80a3370:	4620      	mov	r0, r4
 80a3372:	bd10      	pop	{r4, pc}

080a3374 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a3374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3378:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
 80a337a:	4b1b      	ldr	r3, [pc, #108]	; (80a33e8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
 80a337c:	b085      	sub	sp, #20
 80a337e:	685b      	ldr	r3, [r3, #4]
 80a3380:	4682      	mov	sl, r0
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a3382:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
 80a3386:	460e      	mov	r6, r1
 80a3388:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a338a:	bb53      	cbnz	r3, 80a33e2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
 80a338c:	f7ff feb0 	bl	80a30f0 <_ZN5spark10LogManager8instanceEv>
 80a3390:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a3392:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a3394:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 80a3396:	f7ff fdd5 	bl	80a2f44 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
 80a339a:	7b23      	ldrb	r3, [r4, #12]
 80a339c:	b9f3      	cbnz	r3, 80a33dc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a339e:	2301      	movs	r3, #1
 80a33a0:	7323      	strb	r3, [r4, #12]
 80a33a2:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 80a33a4:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
 80a33a6:	b2f6      	uxtb	r6, r6
 80a33a8:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
 80a33ac:	454d      	cmp	r5, r9
 80a33ae:	d013      	beq.n	80a33d8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
 80a33b0:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
 80a33b4:	4641      	mov	r1, r8
 80a33b6:	1d38      	adds	r0, r7, #4
 80a33b8:	f7ff fe20 	bl	80a2ffc <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a33bc:	4286      	cmp	r6, r0
 80a33be:	d3f5      	bcc.n	80a33ac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
 80a33c0:	683b      	ldr	r3, [r7, #0]
 80a33c2:	f8cd b000 	str.w	fp, [sp]
 80a33c6:	689b      	ldr	r3, [r3, #8]
 80a33c8:	4638      	mov	r0, r7
 80a33ca:	469e      	mov	lr, r3
 80a33cc:	4632      	mov	r2, r6
 80a33ce:	4643      	mov	r3, r8
 80a33d0:	4651      	mov	r1, sl
 80a33d2:	4677      	mov	r7, lr
 80a33d4:	47b8      	blx	r7
 80a33d6:	e7e9      	b.n	80a33ac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a33d8:	2300      	movs	r3, #0
 80a33da:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
 80a33dc:	a803      	add	r0, sp, #12
 80a33de:	f7ff ffc1 	bl	80a3364 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
 80a33e2:	b005      	add	sp, #20
 80a33e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a33e8:	e000ed00 	.word	0xe000ed00

080a33ec <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a33ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a33f0:	4699      	mov	r9, r3
 80a33f2:	4b19      	ldr	r3, [pc, #100]	; (80a3458 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
 80a33f4:	4607      	mov	r7, r0
 80a33f6:	685b      	ldr	r3, [r3, #4]
 80a33f8:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a33fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
 80a33fe:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a3400:	bb33      	cbnz	r3, 80a3450 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
 80a3402:	f7ff fe75 	bl	80a30f0 <_ZN5spark10LogManager8instanceEv>
 80a3406:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
 80a3408:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a340a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80a340c:	f7ff fd9a 	bl	80a2f44 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
 80a3410:	7b23      	ldrb	r3, [r4, #12]
 80a3412:	b9d3      	cbnz	r3, 80a344a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a3414:	2301      	movs	r3, #1
 80a3416:	7323      	strb	r3, [r4, #12]
 80a3418:	6825      	ldr	r5, [r4, #0]
 80a341a:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
 80a341c:	fa5f fb86 	uxtb.w	fp, r6
 80a3420:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
 80a3424:	4555      	cmp	r5, sl
 80a3426:	d00e      	beq.n	80a3446 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
 80a3428:	f855 6b04 	ldr.w	r6, [r5], #4
 80a342c:	4649      	mov	r1, r9
 80a342e:	1d30      	adds	r0, r6, #4
 80a3430:	f7ff fde4 	bl	80a2ffc <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a3434:	4583      	cmp	fp, r0
 80a3436:	d3f5      	bcc.n	80a3424 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
 80a3438:	6833      	ldr	r3, [r6, #0]
 80a343a:	4642      	mov	r2, r8
 80a343c:	68db      	ldr	r3, [r3, #12]
 80a343e:	4639      	mov	r1, r7
 80a3440:	4630      	mov	r0, r6
 80a3442:	4798      	blx	r3
 80a3444:	e7ee      	b.n	80a3424 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
 80a3446:	2300      	movs	r3, #0
 80a3448:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
 80a344a:	a801      	add	r0, sp, #4
 80a344c:	f7ff ff8a 	bl	80a3364 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
 80a3450:	b003      	add	sp, #12
 80a3452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3456:	bf00      	nop
 80a3458:	e000ed00 	.word	0xe000ed00

080a345c <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
 80a345c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a3460:	4b15      	ldr	r3, [pc, #84]	; (80a34b8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
 80a3462:	4604      	mov	r4, r0
 80a3464:	685b      	ldr	r3, [r3, #4]
 80a3466:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
 80a3468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80a346c:	b9fb      	cbnz	r3, 80a34ae <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
 80a346e:	f7ff fe3f 	bl	80a30f0 <_ZN5spark10LogManager8instanceEv>
 80a3472:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
 80a3474:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a3476:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80a3478:	f7ff fd64 	bl	80a2f44 <_ZN14RecursiveMutex4lockEv>
 80a347c:	e896 00a0 	ldmia.w	r6, {r5, r7}
 80a3480:	2646      	movs	r6, #70	; 0x46
 80a3482:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
 80a3486:	42af      	cmp	r7, r5
 80a3488:	d107      	bne.n	80a349a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
 80a348a:	a801      	add	r0, sp, #4
 80a348c:	f7ff ff6a 	bl	80a3364 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
 80a3490:	42b4      	cmp	r4, r6
 80a3492:	bfb4      	ite	lt
 80a3494:	2000      	movlt	r0, #0
 80a3496:	2001      	movge	r0, #1
 80a3498:	e00a      	b.n	80a34b0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
 80a349a:	f855 0b04 	ldr.w	r0, [r5], #4
 80a349e:	4641      	mov	r1, r8
 80a34a0:	3004      	adds	r0, #4
 80a34a2:	f7ff fdab 	bl	80a2ffc <_ZNK5spark6detail9LogFilter5levelEPKc>
 80a34a6:	4286      	cmp	r6, r0
 80a34a8:	bfa8      	it	ge
 80a34aa:	4606      	movge	r6, r0
 80a34ac:	e7eb      	b.n	80a3486 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
 80a34ae:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
 80a34b0:	b002      	add	sp, #8
 80a34b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a34b6:	bf00      	nop
 80a34b8:	e000ed00 	.word	0xe000ed00

080a34bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
 80a34bc:	b570      	push	{r4, r5, r6, lr}
 80a34be:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
 80a34c0:	6803      	ldr	r3, [r0, #0]
 80a34c2:	6842      	ldr	r2, [r0, #4]
 80a34c4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
 80a34c8:	429a      	cmp	r2, r3
 80a34ca:	4618      	mov	r0, r3
 80a34cc:	d00d      	beq.n	80a34ea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x2e>
            if (*p == value) {
 80a34ce:	6806      	ldr	r6, [r0, #0]
 80a34d0:	680d      	ldr	r5, [r1, #0]
 80a34d2:	3304      	adds	r3, #4
 80a34d4:	42ae      	cmp	r6, r5
 80a34d6:	d1f7      	bne.n	80a34c8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
 80a34d8:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a34da:	1a52      	subs	r2, r2, r1
 80a34dc:	f002 f9d7 	bl	80a588e <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
 80a34e0:	6863      	ldr	r3, [r4, #4]
    return true;
 80a34e2:	2001      	movs	r0, #1
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
 80a34e4:	3b01      	subs	r3, #1
 80a34e6:	6063      	str	r3, [r4, #4]
    return true;
}
 80a34e8:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
 80a34ea:	2000      	movs	r0, #0
 80a34ec:	bd70      	pop	{r4, r5, r6, pc}

080a34ee <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
 80a34ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a34f0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a34f2:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
 80a34f4:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a34f6:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
 80a34f8:	f7ff fd24 	bl	80a2f44 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a34fc:	a901      	add	r1, sp, #4
 80a34fe:	4620      	mov	r0, r4
 80a3500:	f7ff ffdc 	bl	80a34bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
 80a3504:	b920      	cbnz	r0, 80a3510 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
 80a3506:	a803      	add	r0, sp, #12
 80a3508:	f7ff ff2c 	bl	80a3364 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
 80a350c:	b004      	add	sp, #16
 80a350e:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
 80a3510:	6863      	ldr	r3, [r4, #4]
 80a3512:	2b00      	cmp	r3, #0
 80a3514:	d1f7      	bne.n	80a3506 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
 80a3516:	f7ff fe15 	bl	80a3144 <_ZN5spark10LogManager20resetSystemCallbacksEv>
 80a351a:	e7f4      	b.n	80a3506 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

080a351c <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
 80a351c:	b570      	push	{r4, r5, r6, lr}
 80a351e:	4604      	mov	r4, r0
 80a3520:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 80a3522:	6943      	ldr	r3, [r0, #20]
 80a3524:	2618      	movs	r6, #24
 80a3526:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
 80a352a:	42ae      	cmp	r6, r5
 80a352c:	d015      	beq.n	80a355a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
 80a352e:	f105 0110 	add.w	r1, r5, #16
 80a3532:	4620      	mov	r0, r4
 80a3534:	f7ff ffc2 	bl	80a34bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
 80a3538:	6863      	ldr	r3, [r4, #4]
 80a353a:	b90b      	cbnz	r3, 80a3540 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
 80a353c:	f7ff fe02 	bl	80a3144 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
 80a3540:	69e0      	ldr	r0, [r4, #28]
 80a3542:	6929      	ldr	r1, [r5, #16]
 80a3544:	6803      	ldr	r3, [r0, #0]
 80a3546:	68db      	ldr	r3, [r3, #12]
 80a3548:	4798      	blx	r3
        if (h.stream) {
 80a354a:	6969      	ldr	r1, [r5, #20]
 80a354c:	b119      	cbz	r1, 80a3556 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
 80a354e:	6a20      	ldr	r0, [r4, #32]
 80a3550:	6803      	ldr	r3, [r0, #0]
 80a3552:	68db      	ldr	r3, [r3, #12]
 80a3554:	4798      	blx	r3
 80a3556:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
 80a3558:	e7e7      	b.n	80a352a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
 80a355a:	6925      	ldr	r5, [r4, #16]
 80a355c:	6963      	ldr	r3, [r4, #20]
 80a355e:	2618      	movs	r6, #24
 80a3560:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a3564:	42b5      	cmp	r5, r6
 80a3566:	d004      	beq.n	80a3572 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
 80a3568:	4628      	mov	r0, r5
 80a356a:	f000 fe85 	bl	80a4278 <_ZN6StringD1Ev>
 80a356e:	3518      	adds	r5, #24
 80a3570:	e7f8      	b.n	80a3564 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
 80a3572:	2300      	movs	r3, #0
 80a3574:	6163      	str	r3, [r4, #20]
 80a3576:	bd70      	pop	{r4, r5, r6, pc}

080a3578 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
 80a3578:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a357a:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a357c:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
 80a357e:	f7ff fde1 	bl	80a3144 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
 80a3582:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80a3586:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
 80a358a:	f7ff fcdb 	bl	80a2f44 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
 80a358e:	4620      	mov	r0, r4
 80a3590:	f7ff ffc4 	bl	80a351c <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
 80a3594:	4628      	mov	r0, r5
 80a3596:	f7ff fee5 	bl	80a3364 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
 80a359a:	6925      	ldr	r5, [r4, #16]
 80a359c:	6963      	ldr	r3, [r4, #20]
 80a359e:	2618      	movs	r6, #24
 80a35a0:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
 80a35a4:	42b5      	cmp	r5, r6
 80a35a6:	d004      	beq.n	80a35b2 <_ZN5spark10LogManagerD1Ev+0x3a>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
 80a35a8:	4628      	mov	r0, r5
 80a35aa:	f000 fe65 	bl	80a4278 <_ZN6StringD1Ev>
 80a35ae:	3518      	adds	r5, #24
 80a35b0:	e7f8      	b.n	80a35a4 <_ZN5spark10LogManagerD1Ev+0x2c>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a35b2:	6920      	ldr	r0, [r4, #16]
 80a35b4:	f7fe fd62 	bl	80a207c <free>
 80a35b8:	6820      	ldr	r0, [r4, #0]
 80a35ba:	f7fe fd5f 	bl	80a207c <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
 80a35be:	4620      	mov	r0, r4
 80a35c0:	b002      	add	sp, #8
 80a35c2:	bd70      	pop	{r4, r5, r6, pc}

080a35c4 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a35c4:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a35c6:	680a      	ldr	r2, [r1, #0]
 80a35c8:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a35ca:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a35cc:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 80a35ce:	684a      	ldr	r2, [r1, #4]
 80a35d0:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a35d2:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a35d4:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a35d6:	688a      	ldr	r2, [r1, #8]
 80a35d8:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a35da:	608b      	str	r3, [r1, #8]
 80a35dc:	4770      	bx	lr

080a35de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
 80a35de:	b510      	push	{r4, lr}
 80a35e0:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a35e2:	2300      	movs	r3, #0
 80a35e4:	6003      	str	r3, [r0, #0]
 80a35e6:	6043      	str	r3, [r0, #4]
 80a35e8:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a35ea:	f7ff ffeb 	bl	80a35c4 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
 80a35ee:	4620      	mov	r0, r4
 80a35f0:	bd10      	pop	{r4, pc}

080a35f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 80a35f2:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 80a35f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a35f6:	4604      	mov	r4, r0
 80a35f8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
 80a35fa:	d925      	bls.n	80a3648 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
 80a35fc:	4290      	cmp	r0, r2
 80a35fe:	d224      	bcs.n	80a364a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
 80a3600:	1a55      	subs	r5, r2, r1
 80a3602:	3d14      	subs	r5, #20
 80a3604:	442c      	add	r4, r5
 80a3606:	f1a1 0714 	sub.w	r7, r1, #20
 80a360a:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a360e:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a3610:	f1a5 0308 	sub.w	r3, r5, #8
 80a3614:	429f      	cmp	r7, r3
 80a3616:	d037      	beq.n	80a3688 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
 80a3618:	b184      	cbz	r4, 80a363c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 80a361a:	f855 3c08 	ldr.w	r3, [r5, #-8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a361e:	4629      	mov	r1, r5
 80a3620:	6023      	str	r3, [r4, #0]
 80a3622:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 80a3626:	f104 0008 	add.w	r0, r4, #8
 80a362a:	80a3      	strh	r3, [r4, #4]
 80a362c:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a3630:	60a6      	str	r6, [r4, #8]
 80a3632:	80e3      	strh	r3, [r4, #6]
 80a3634:	60e6      	str	r6, [r4, #12]
 80a3636:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a3638:	f7ff ffc4 	bl	80a35c4 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
 80a363c:	4628      	mov	r0, r5
 80a363e:	f7ff fe37 	bl	80a32b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a3642:	3c14      	subs	r4, #20
 80a3644:	3d14      	subs	r5, #20
 80a3646:	e7e3      	b.n	80a3610 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 80a3648:	d01e      	beq.n	80a3688 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
 80a364a:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a364e:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a3650:	f1a5 0308 	sub.w	r3, r5, #8
 80a3654:	429e      	cmp	r6, r3
 80a3656:	d017      	beq.n	80a3688 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
 80a3658:	b184      	cbz	r4, 80a367c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
 80a365a:	f855 3c08 	ldr.w	r3, [r5, #-8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a365e:	4629      	mov	r1, r5
 80a3660:	6023      	str	r3, [r4, #0]
 80a3662:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 80a3666:	f104 0008 	add.w	r0, r4, #8
 80a366a:	80a3      	strh	r3, [r4, #4]
 80a366c:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a3670:	60a7      	str	r7, [r4, #8]
 80a3672:	80e3      	strh	r3, [r4, #6]
 80a3674:	60e7      	str	r7, [r4, #12]
 80a3676:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a3678:	f7ff ffa4 	bl	80a35c4 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
 80a367c:	4628      	mov	r0, r5
 80a367e:	f7ff fe17 	bl	80a32b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a3682:	3414      	adds	r4, #20
 80a3684:	3514      	adds	r5, #20
 80a3686:	e7e3      	b.n	80a3650 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
 80a3688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a368a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a368a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a368c:	6845      	ldr	r5, [r0, #4]
 80a368e:	6883      	ldr	r3, [r0, #8]
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a3690:	4604      	mov	r4, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a3692:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
 80a3694:	460e      	mov	r6, r1
 80a3696:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a3698:	db0e      	blt.n	80a36b8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
 80a369a:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
 80a369c:	2d00      	cmp	r5, #0
 80a369e:	dd05      	ble.n	80a36ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
 80a36a0:	00a9      	lsls	r1, r5, #2
 80a36a2:	6800      	ldr	r0, [r0, #0]
 80a36a4:	f7fe fcf2 	bl	80a208c <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
 80a36a8:	b920      	cbnz	r0, 80a36b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
 80a36aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a36ac:	6800      	ldr	r0, [r0, #0]
 80a36ae:	f7fe fce5 	bl	80a207c <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80a36b2:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
 80a36b4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
 80a36b6:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a36b8:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a36ba:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a36bc:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
 80a36c0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80a36c4:	1a52      	subs	r2, r2, r1
 80a36c6:	1d08      	adds	r0, r1, #4
 80a36c8:	f002 f8e1 	bl	80a588e <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
 80a36cc:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
 80a36d0:	6863      	ldr	r3, [r4, #4]
 80a36d2:	2001      	movs	r0, #1
 80a36d4:	3301      	adds	r3, #1
 80a36d6:	6063      	str	r3, [r4, #4]
    return true;
}
 80a36d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a36da <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
 80a36da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a36dc:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
 80a36de:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
 80a36e0:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80a36e2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80a36e4:	f7ff fc2e 	bl	80a2f44 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
 80a36e8:	6823      	ldr	r3, [r4, #0]
 80a36ea:	6861      	ldr	r1, [r4, #4]
 80a36ec:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
 80a36f0:	4283      	cmp	r3, r0
 80a36f2:	461a      	mov	r2, r3
 80a36f4:	d008      	beq.n	80a3708 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2e>
            if (*p == value) {
 80a36f6:	6812      	ldr	r2, [r2, #0]
 80a36f8:	3304      	adds	r3, #4
 80a36fa:	42aa      	cmp	r2, r5
 80a36fc:	d1f8      	bne.n	80a36f0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
 80a36fe:	a801      	add	r0, sp, #4
 80a3700:	f7ff fe30 	bl	80a3364 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
 80a3704:	2500      	movs	r5, #0
 80a3706:	e00e      	b.n	80a3726 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4c>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 80a3708:	462a      	mov	r2, r5
 80a370a:	4620      	mov	r0, r4
 80a370c:	f7ff ffbd 	bl	80a368a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
 80a3710:	4605      	mov	r5, r0
 80a3712:	2800      	cmp	r0, #0
 80a3714:	d0f3      	beq.n	80a36fe <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x24>
            return false;
        }
        if (activeHandlers_.size() == 1) {
 80a3716:	6863      	ldr	r3, [r4, #4]
 80a3718:	2b01      	cmp	r3, #1
 80a371a:	d101      	bne.n	80a3720 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x46>
            setSystemCallbacks();
 80a371c:	f7ff fd06 	bl	80a312c <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
 80a3720:	a801      	add	r0, sp, #4
 80a3722:	f7ff fe1f 	bl	80a3364 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
 80a3726:	4628      	mov	r0, r5
 80a3728:	b003      	add	sp, #12
 80a372a:	bd30      	pop	{r4, r5, pc}

080a372c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
 80a372c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
 80a372e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3730:	4606      	mov	r6, r0
 80a3732:	460c      	mov	r4, r1
 80a3734:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
 80a3736:	d914      	bls.n	80a3762 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
 80a3738:	4290      	cmp	r0, r2
 80a373a:	d213      	bcs.n	80a3764 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
 80a373c:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
 80a3740:	1a6c      	subs	r4, r5, r1
 80a3742:	f1a1 0710 	sub.w	r7, r1, #16
 80a3746:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
 80a3748:	42af      	cmp	r7, r5
 80a374a:	d018      	beq.n	80a377e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
 80a374c:	b11c      	cbz	r4, 80a3756 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
 80a374e:	4629      	mov	r1, r5
 80a3750:	4620      	mov	r0, r4
 80a3752:	f000 fd81 	bl	80a4258 <_ZN6StringC1EOS_>
                end->~T();
 80a3756:	4628      	mov	r0, r5
 80a3758:	f000 fd8e 	bl	80a4278 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
 80a375c:	3d10      	subs	r5, #16
 80a375e:	3c10      	subs	r4, #16
 80a3760:	e7f2      	b.n	80a3748 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
 80a3762:	d00c      	beq.n	80a377e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
 80a3764:	42ac      	cmp	r4, r5
 80a3766:	d00a      	beq.n	80a377e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
 80a3768:	b11e      	cbz	r6, 80a3772 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
 80a376a:	4621      	mov	r1, r4
 80a376c:	4630      	mov	r0, r6
 80a376e:	f000 fd73 	bl	80a4258 <_ZN6StringC1EOS_>
                p->~T();
 80a3772:	4620      	mov	r0, r4
 80a3774:	f000 fd80 	bl	80a4278 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
 80a3778:	3410      	adds	r4, #16
 80a377a:	3610      	adds	r6, #16
 80a377c:	e7f2      	b.n	80a3764 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
 80a377e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3780 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
 80a3780:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
 80a3782:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
 80a3784:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
 80a3786:	dd0b      	ble.n	80a37a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 80a3788:	0130      	lsls	r0, r6, #4
 80a378a:	f7fe fc6f 	bl	80a206c <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 80a378e:	4604      	mov	r4, r0
 80a3790:	b170      	cbz	r0, 80a37b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
 80a3792:	e895 0006 	ldmia.w	r5, {r1, r2}
 80a3796:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 80a379a:	f7ff ffc7 	bl	80a372c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
 80a379e:	e000      	b.n	80a37a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80a37a0:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a37a2:	6828      	ldr	r0, [r5, #0]
 80a37a4:	f7fe fc6a 	bl	80a207c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80a37a8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
 80a37aa:	60ae      	str	r6, [r5, #8]
        return true;
 80a37ac:	2001      	movs	r0, #1
 80a37ae:	bd70      	pop	{r4, r5, r6, pc}
    }
 80a37b0:	bd70      	pop	{r4, r5, r6, pc}

080a37b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a37b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a37b6:	4692      	mov	sl, r2
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a37b8:	2300      	movs	r3, #0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a37ba:	2246      	movs	r2, #70	; 0x46

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a37bc:	b095      	sub	sp, #84	; 0x54
 80a37be:	6003      	str	r3, [r0, #0]
 80a37c0:	6043      	str	r3, [r0, #4]
 80a37c2:	6083      	str	r3, [r0, #8]
 80a37c4:	60c3      	str	r3, [r0, #12]
 80a37c6:	6103      	str	r3, [r0, #16]
 80a37c8:	6143      	str	r3, [r0, #20]
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
 80a37ca:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
 80a37cc:	9102      	str	r1, [sp, #8]
 80a37ce:	f8da 1004 	ldr.w	r1, [sl, #4]
 80a37d2:	4605      	mov	r5, r0
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
 80a37d4:	4299      	cmp	r1, r3
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a37d6:	9308      	str	r3, [sp, #32]
 80a37d8:	9309      	str	r3, [sp, #36]	; 0x24
 80a37da:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
 80a37dc:	f340 809d 	ble.w	80a391a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
 80a37e0:	a808      	add	r0, sp, #32
 80a37e2:	f7ff ffcd 	bl	80a3780 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a37e6:	2800      	cmp	r0, #0
 80a37e8:	f040 8097 	bne.w	80a391a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
 80a37ec:	e08e      	b.n	80a390c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
 80a37ee:	4621      	mov	r1, r4
 80a37f0:	a80b      	add	r0, sp, #44	; 0x2c
 80a37f2:	f000 fd31 	bl	80a4258 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 80a37f6:	a90b      	add	r1, sp, #44	; 0x2c
 80a37f8:	a80f      	add	r0, sp, #60	; 0x3c
 80a37fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a37fc:	f000 fd2c 	bl	80a4258 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a3800:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a3802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a3804:	4299      	cmp	r1, r3
 80a3806:	f2c0 80ce 	blt.w	80a39a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
 80a380a:	3101      	adds	r1, #1
 80a380c:	a808      	add	r0, sp, #32
 80a380e:	f7ff ffb7 	bl	80a3780 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
 80a3812:	2800      	cmp	r0, #0
 80a3814:	f040 80c7 	bne.w	80a39a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
 80a3818:	a80f      	add	r0, sp, #60	; 0x3c
 80a381a:	f000 fd2d 	bl	80a4278 <_ZN6StringD1Ev>
 80a381e:	a80b      	add	r0, sp, #44	; 0x2c
 80a3820:	f000 fd2a 	bl	80a4278 <_ZN6StringD1Ev>
 80a3824:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
 80a3826:	42a7      	cmp	r7, r4
 80a3828:	d1e1      	bne.n	80a37ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a382a:	2600      	movs	r6, #0
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a382c:	46b1      	mov	r9, r6
 80a382e:	960b      	str	r6, [sp, #44]	; 0x2c
 80a3830:	960c      	str	r6, [sp, #48]	; 0x30
 80a3832:	960d      	str	r6, [sp, #52]	; 0x34
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
 80a3834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a3836:	429e      	cmp	r6, r3
 80a3838:	f280 80a8 	bge.w	80a398c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
 80a383c:	9a08      	ldr	r2, [sp, #32]
 80a383e:	0133      	lsls	r3, r6, #4
 80a3840:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
 80a3842:	9306      	str	r3, [sp, #24]
        if (!category) {
 80a3844:	2b00      	cmp	r3, #0
 80a3846:	f000 809f 	beq.w	80a3988 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
 80a384a:	2314      	movs	r3, #20
 80a384c:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
 80a384e:	f8cd 901c 	str.w	r9, [sp, #28]
 80a3852:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
 80a3854:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 80a3856:	a907      	add	r1, sp, #28
 80a3858:	a806      	add	r0, sp, #24
 80a385a:	f7ff fb15 	bl	80a2e88 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
 80a385e:	4607      	mov	r7, r0
 80a3860:	2800      	cmp	r0, #0
 80a3862:	f000 8091 	beq.w	80a3988 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
 80a3866:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
 80a3868:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
 80a386a:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
 80a386e:	9a07      	ldr	r2, [sp, #28]
 80a3870:	4620      	mov	r0, r4
 80a3872:	f7ff fb83 	bl	80a2f7c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a3876:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
 80a387a:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a387c:	f1b8 0f00 	cmp.w	r8, #0
 80a3880:	d153      	bne.n	80a392a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
 80a3882:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
 80a3886:	970f      	str	r7, [sp, #60]	; 0x3c
 80a3888:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80a388c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a3890:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80a3894:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80a3898:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 80a389c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a38a0:	6867      	ldr	r7, [r4, #4]
 80a38a2:	68a3      	ldr	r3, [r4, #8]
 80a38a4:	429f      	cmp	r7, r3
 80a38a6:	da4f      	bge.n	80a3948 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
 80a38a8:	9b00      	ldr	r3, [sp, #0]
 80a38aa:	2214      	movs	r2, #20
 80a38ac:	4353      	muls	r3, r2
 80a38ae:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
 80a38b2:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a38b4:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
 80a38b8:	fb02 b201 	mla	r2, r2, r1, fp
 80a38bc:	f107 0014 	add.w	r0, r7, #20
 80a38c0:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a38c2:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
 80a38c4:	f7ff fe95 	bl	80a35f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
 80a38c8:	b1a7      	cbz	r7, 80a38f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
 80a38ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80a38cc:	9b03      	ldr	r3, [sp, #12]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a38ce:	a911      	add	r1, sp, #68	; 0x44
 80a38d0:	f84b 2003 	str.w	r2, [fp, r3]
 80a38d4:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80a38d8:	f107 0008 	add.w	r0, r7, #8
 80a38dc:	80bb      	strh	r3, [r7, #4]
 80a38de:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
 80a38e2:	f8c7 9008 	str.w	r9, [r7, #8]
 80a38e6:	80fb      	strh	r3, [r7, #6]
 80a38e8:	f8c7 900c 	str.w	r9, [r7, #12]
 80a38ec:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
 80a38f0:	f7ff fe68 	bl	80a35c4 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
 80a38f4:	6863      	ldr	r3, [r4, #4]
 80a38f6:	3301      	adds	r3, #1
 80a38f8:	6063      	str	r3, [r4, #4]
 80a38fa:	a811      	add	r0, sp, #68	; 0x44
 80a38fc:	f7ff fcd8 	bl	80a32b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a3900:	f1b8 0f00 	cmp.w	r8, #0
 80a3904:	d011      	beq.n	80a392a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
 80a3906:	a80b      	add	r0, sp, #44	; 0x2c
 80a3908:	f7ff fcd2 	bl	80a32b0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
 80a390c:	a808      	add	r0, sp, #32
 80a390e:	f7ff fce3 	bl	80a32d8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
 80a3912:	4628      	mov	r0, r5
 80a3914:	b015      	add	sp, #84	; 0x54
 80a3916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a391a:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
 80a391e:	f8da 3004 	ldr.w	r3, [sl, #4]
 80a3922:	2714      	movs	r7, #20
 80a3924:	fb07 4703 	mla	r7, r7, r3, r4
 80a3928:	e77d      	b.n	80a3826 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
 80a392a:	6823      	ldr	r3, [r4, #0]
 80a392c:	9a00      	ldr	r2, [sp, #0]
 80a392e:	2414      	movs	r4, #20
 80a3930:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
 80a3934:	9b06      	ldr	r3, [sp, #24]
 80a3936:	781b      	ldrb	r3, [r3, #0]
 80a3938:	bb23      	cbnz	r3, 80a3984 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
 80a393a:	f8da 3000 	ldr.w	r3, [sl]
 80a393e:	9a01      	ldr	r2, [sp, #4]
 80a3940:	4413      	add	r3, r2
 80a3942:	7c1b      	ldrb	r3, [r3, #16]
 80a3944:	80e3      	strh	r3, [r4, #6]
 80a3946:	e01d      	b.n	80a3984 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
 80a3948:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
 80a394a:	2f00      	cmp	r7, #0
 80a394c:	dd0f      	ble.n	80a396e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
 80a394e:	2314      	movs	r3, #20
 80a3950:	fb03 f007 	mul.w	r0, r3, r7
 80a3954:	9303      	str	r3, [sp, #12]
 80a3956:	f7fe fb89 	bl	80a206c <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
 80a395a:	4683      	mov	fp, r0
 80a395c:	b178      	cbz	r0, 80a397e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
 80a395e:	e894 0006 	ldmia.w	r4, {r1, r2}
 80a3962:	9b03      	ldr	r3, [sp, #12]
 80a3964:	fb03 1202 	mla	r2, r3, r2, r1
 80a3968:	f7ff fe43 	bl	80a35f2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
 80a396c:	e000      	b.n	80a3970 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
 80a396e:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
 80a3970:	6820      	ldr	r0, [r4, #0]
 80a3972:	f7fe fb83 	bl	80a207c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
 80a3976:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
 80a397a:	60a7      	str	r7, [r4, #8]
 80a397c:	e794      	b.n	80a38a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
 80a397e:	f04f 0801 	mov.w	r8, #1
 80a3982:	e7ba      	b.n	80a38fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
 80a3984:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
 80a3986:	e766      	b.n	80a3856 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
 80a3988:	3601      	adds	r6, #1
 80a398a:	e753      	b.n	80a3834 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
 80a398c:	a908      	add	r1, sp, #32
 80a398e:	4628      	mov	r0, r5
 80a3990:	f7ff fe18 	bl	80a35c4 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
 80a3994:	a90b      	add	r1, sp, #44	; 0x2c
 80a3996:	f105 000c 	add.w	r0, r5, #12
 80a399a:	f7ff fe13 	bl	80a35c4 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
 80a399e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80a39a2:	762b      	strb	r3, [r5, #24]
 80a39a4:	e7af      	b.n	80a3906 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a39a6:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
 80a39a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
 80a39aa:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
 80a39ae:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80a39b2:	4631      	mov	r1, r6
 80a39b4:	f106 0010 	add.w	r0, r6, #16
 80a39b8:	f7ff feb8 	bl	80a372c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
 80a39bc:	b11e      	cbz	r6, 80a39c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
 80a39be:	a90f      	add	r1, sp, #60	; 0x3c
 80a39c0:	4630      	mov	r0, r6
 80a39c2:	f000 fc49 	bl	80a4258 <_ZN6StringC1EOS_>
    ++size_;
 80a39c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80a39c8:	3301      	adds	r3, #1
 80a39ca:	9309      	str	r3, [sp, #36]	; 0x24
 80a39cc:	e724      	b.n	80a3818 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

080a39d0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a39d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
 80a39d2:	4604      	mov	r4, r0
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
 80a39d4:	460e      	mov	r6, r1
 80a39d6:	4605      	mov	r5, r0
        filter_(level, filters) {
 80a39d8:	4b08      	ldr	r3, [pc, #32]	; (80a39fc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
 80a39da:	4611      	mov	r1, r2
 80a39dc:	f844 3b04 	str.w	r3, [r4], #4
 80a39e0:	a801      	add	r0, sp, #4
 80a39e2:	f7fc fcb0 	bl	80a0346 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a39e6:	aa01      	add	r2, sp, #4
 80a39e8:	4631      	mov	r1, r6
 80a39ea:	4620      	mov	r0, r4
 80a39ec:	f7ff fee1 	bl	80a37b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a39f0:	a801      	add	r0, sp, #4
 80a39f2:	f7fc fc67 	bl	80a02c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
 80a39f6:	4628      	mov	r0, r5
 80a39f8:	b004      	add	sp, #16
 80a39fa:	bd70      	pop	{r4, r5, r6, pc}
 80a39fc:	080a6c9c 	.word	0x080a6c9c

080a3a00 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
 80a3a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3a02:	460f      	mov	r7, r1
 80a3a04:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a3a06:	492b      	ldr	r1, [pc, #172]	; (80a3ab4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)
 80a3a08:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
 80a3a0a:	4616      	mov	r6, r2
 80a3a0c:	461d      	mov	r5, r3
 80a3a0e:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
 80a3a10:	f001 ffa0 	bl	80a5954 <strcmp>
 80a3a14:	bb28      	cbnz	r0, 80a3a62 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
 80a3a16:	2c00      	cmp	r4, #0
 80a3a18:	d049      	beq.n	80a3aae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
 80a3a1a:	4629      	mov	r1, r5
 80a3a1c:	a801      	add	r0, sp, #4
 80a3a1e:	f7ff fdde 	bl	80a35de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a3a22:	4925      	ldr	r1, [pc, #148]	; (80a3ab8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
 80a3a24:	2024      	movs	r0, #36	; 0x24
 80a3a26:	f000 fd7d 	bl	80a4524 <_ZnwjRKSt9nothrow_t>
 80a3a2a:	4605      	mov	r5, r0
 80a3a2c:	b1b8      	cbz	r0, 80a3a5e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
 80a3a2e:	a901      	add	r1, sp, #4
 80a3a30:	a804      	add	r0, sp, #16
 80a3a32:	f7ff fdd4 	bl	80a35de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a3a36:	a904      	add	r1, sp, #16
 80a3a38:	a807      	add	r0, sp, #28
 80a3a3a:	f7fc fc84 	bl	80a0346 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a3a3e:	aa07      	add	r2, sp, #28
 80a3a40:	4631      	mov	r1, r6
 80a3a42:	4628      	mov	r0, r5
 80a3a44:	f7ff ffc4 	bl	80a39d0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a3a48:	a807      	add	r0, sp, #28
 80a3a4a:	f7fc fc3b 	bl	80a02c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a3a4e:	4b1b      	ldr	r3, [pc, #108]	; (80a3abc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
 80a3a50:	622c      	str	r4, [r5, #32]
 80a3a52:	602b      	str	r3, [r5, #0]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
 80a3a54:	a804      	add	r0, sp, #16
 80a3a56:	f7fc fc35 	bl	80a02c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a3a5a:	4b19      	ldr	r3, [pc, #100]	; (80a3ac0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
 80a3a5c:	602b      	str	r3, [r5, #0]
 80a3a5e:	a801      	add	r0, sp, #4
 80a3a60:	e01f      	b.n	80a3aa2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
 80a3a62:	4918      	ldr	r1, [pc, #96]	; (80a3ac4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
 80a3a64:	4638      	mov	r0, r7
 80a3a66:	f001 ff75 	bl	80a5954 <strcmp>
 80a3a6a:	b9f0      	cbnz	r0, 80a3aaa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
 80a3a6c:	b1fc      	cbz	r4, 80a3aae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
 80a3a6e:	4629      	mov	r1, r5
 80a3a70:	a804      	add	r0, sp, #16
 80a3a72:	f7ff fdb4 	bl	80a35de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
 80a3a76:	4910      	ldr	r1, [pc, #64]	; (80a3ab8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
 80a3a78:	2024      	movs	r0, #36	; 0x24
 80a3a7a:	f000 fd53 	bl	80a4524 <_ZnwjRKSt9nothrow_t>
 80a3a7e:	4605      	mov	r5, r0
 80a3a80:	b170      	cbz	r0, 80a3aa0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
 80a3a82:	a904      	add	r1, sp, #16
 80a3a84:	a807      	add	r0, sp, #28
 80a3a86:	f7fc fc5e 	bl	80a0346 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
 80a3a8a:	aa07      	add	r2, sp, #28
 80a3a8c:	4631      	mov	r1, r6
 80a3a8e:	4628      	mov	r0, r5
 80a3a90:	f7ff ff9e 	bl	80a39d0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
 80a3a94:	a807      	add	r0, sp, #28
 80a3a96:	f7fc fc15 	bl	80a02c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a3a9a:	4b08      	ldr	r3, [pc, #32]	; (80a3abc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
 80a3a9c:	622c      	str	r4, [r5, #32]
 80a3a9e:	602b      	str	r3, [r5, #0]
 80a3aa0:	a804      	add	r0, sp, #16
 80a3aa2:	f7fc fc0f 	bl	80a02c4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
 80a3aa6:	4628      	mov	r0, r5
 80a3aa8:	e002      	b.n	80a3ab0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
 80a3aaa:	2000      	movs	r0, #0
 80a3aac:	e000      	b.n	80a3ab0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
 80a3aae:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
 80a3ab0:	b00b      	add	sp, #44	; 0x2c
 80a3ab2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3ab4:	080a9429 	.word	0x080a9429
 80a3ab8:	080a9518 	.word	0x080a9518
 80a3abc:	080a94b0 	.word	0x080a94b0
 80a3ac0:	080a93a0 	.word	0x080a93a0
 80a3ac4:	080a942d 	.word	0x080a942d

080a3ac8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a3ac8:	4a01      	ldr	r2, [pc, #4]	; (80a3ad0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a3aca:	4b02      	ldr	r3, [pc, #8]	; (80a3ad4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a3acc:	601a      	str	r2, [r3, #0]
 80a3ace:	4770      	bx	lr
 80a3ad0:	080a943e 	.word	0x080a943e
 80a3ad4:	20000540 	.word	0x20000540

080a3ad8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a3ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a3adc:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
 80a3ade:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a3ae2:	4604      	mov	r4, r0
 80a3ae4:	460e      	mov	r6, r1
 80a3ae6:	4617      	mov	r7, r2
 80a3ae8:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
 80a3aea:	f7fe ff35 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a3aee:	4581      	cmp	r9, r0
 80a3af0:	d105      	bne.n	80a3afe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
 80a3af2:	485a      	ldr	r0, [pc, #360]	; (80a3c5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
 80a3af4:	f7fe fd38 	bl	80a2568 <_ZN5spark12NetworkClass9listeningEv>
 80a3af8:	2800      	cmp	r0, #0
 80a3afa:	f040 80ac 	bne.w	80a3c56 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
 80a3afe:	792b      	ldrb	r3, [r5, #4]
 80a3b00:	071b      	lsls	r3, r3, #28
 80a3b02:	d505      	bpl.n	80a3b10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a3b04:	696b      	ldr	r3, [r5, #20]
 80a3b06:	4a56      	ldr	r2, [pc, #344]	; (80a3c60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
 80a3b08:	2100      	movs	r1, #0
 80a3b0a:	6a20      	ldr	r0, [r4, #32]
 80a3b0c:	f000 fad2 	bl	80a40b4 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
 80a3b10:	f1b8 0f00 	cmp.w	r8, #0
 80a3b14:	d00d      	beq.n	80a3b32 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
 80a3b16:	215b      	movs	r1, #91	; 0x5b
 80a3b18:	4620      	mov	r0, r4
 80a3b1a:	f7ff fa24 	bl	80a2f66 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
 80a3b1e:	4641      	mov	r1, r8
 80a3b20:	4620      	mov	r0, r4
 80a3b22:	f7ff fa12 	bl	80a2f4a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
 80a3b26:	6823      	ldr	r3, [r4, #0]
 80a3b28:	2202      	movs	r2, #2
 80a3b2a:	68db      	ldr	r3, [r3, #12]
 80a3b2c:	494d      	ldr	r1, [pc, #308]	; (80a3c64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
 80a3b2e:	4620      	mov	r0, r4
 80a3b30:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
 80a3b32:	792b      	ldrb	r3, [r5, #4]
 80a3b34:	07d9      	lsls	r1, r3, #31
 80a3b36:	d525      	bpl.n	80a3b84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
 80a3b38:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
 80a3b3c:	212f      	movs	r1, #47	; 0x2f
 80a3b3e:	4640      	mov	r0, r8
 80a3b40:	f002 fc4b 	bl	80a63da <strrchr>
    if (s1) {
 80a3b44:	b108      	cbz	r0, 80a3b4a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
 80a3b46:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
 80a3b4a:	4641      	mov	r1, r8
 80a3b4c:	4620      	mov	r0, r4
 80a3b4e:	f7ff f9fc 	bl	80a2f4a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
 80a3b52:	792b      	ldrb	r3, [r5, #4]
 80a3b54:	079a      	lsls	r2, r3, #30
 80a3b56:	d509      	bpl.n	80a3b6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
 80a3b58:	213a      	movs	r1, #58	; 0x3a
 80a3b5a:	4620      	mov	r0, r4
 80a3b5c:	f7ff fa03 	bl	80a2f66 <_ZN5spark16StreamLogHandler5writeEc>
 80a3b60:	68eb      	ldr	r3, [r5, #12]
 80a3b62:	4a41      	ldr	r2, [pc, #260]	; (80a3c68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
 80a3b64:	2100      	movs	r1, #0
 80a3b66:	6a20      	ldr	r0, [r4, #32]
 80a3b68:	f000 faa4 	bl	80a40b4 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
 80a3b6c:	792b      	ldrb	r3, [r5, #4]
            write(", ", 2);
 80a3b6e:	2202      	movs	r2, #2
        write(s); // File name
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
 80a3b70:	f013 0f04 	tst.w	r3, #4
 80a3b74:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
 80a3b76:	bf18      	it	ne
 80a3b78:	493c      	ldrne	r1, [pc, #240]	; (80a3c6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a3b7a:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
 80a3b7c:	bf08      	it	eq
 80a3b7e:	493c      	ldreq	r1, [pc, #240]	; (80a3c70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a3b80:	4620      	mov	r0, r4
 80a3b82:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
 80a3b84:	792b      	ldrb	r3, [r5, #4]
 80a3b86:	075b      	lsls	r3, r3, #29
 80a3b88:	d518      	bpl.n	80a3bbc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a3b8a:	6929      	ldr	r1, [r5, #16]
 80a3b8c:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
 80a3b8e:	4613      	mov	r3, r2
 80a3b90:	f813 0b01 	ldrb.w	r0, [r3], #1
 80a3b94:	b138      	cbz	r0, 80a3ba6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
 80a3b96:	2820      	cmp	r0, #32
 80a3b98:	d101      	bne.n	80a3b9e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
 80a3b9a:	4619      	mov	r1, r3
 80a3b9c:	e001      	b.n	80a3ba2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
 80a3b9e:	2828      	cmp	r0, #40	; 0x28
 80a3ba0:	d001      	beq.n	80a3ba6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a3ba2:	461a      	mov	r2, r3
 80a3ba4:	e7f3      	b.n	80a3b8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
 80a3ba6:	6823      	ldr	r3, [r4, #0]
 80a3ba8:	1a52      	subs	r2, r2, r1
 80a3baa:	68db      	ldr	r3, [r3, #12]
 80a3bac:	4620      	mov	r0, r4
 80a3bae:	4798      	blx	r3
        write("(): ", 4);
 80a3bb0:	6823      	ldr	r3, [r4, #0]
 80a3bb2:	2204      	movs	r2, #4
 80a3bb4:	68db      	ldr	r3, [r3, #12]
 80a3bb6:	492f      	ldr	r1, [pc, #188]	; (80a3c74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
 80a3bb8:	4620      	mov	r0, r4
 80a3bba:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
 80a3bbc:	2100      	movs	r1, #0
 80a3bbe:	4638      	mov	r0, r7
 80a3bc0:	f7fe f998 	bl	80a1ef4 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
 80a3bc4:	4601      	mov	r1, r0
 80a3bc6:	4620      	mov	r0, r4
 80a3bc8:	f7ff f9bf 	bl	80a2f4a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
 80a3bcc:	6823      	ldr	r3, [r4, #0]
 80a3bce:	2202      	movs	r2, #2
 80a3bd0:	68db      	ldr	r3, [r3, #12]
 80a3bd2:	4927      	ldr	r1, [pc, #156]	; (80a3c70 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
 80a3bd4:	4620      	mov	r0, r4
 80a3bd6:	4798      	blx	r3
    // Message
    if (msg) {
 80a3bd8:	b11e      	cbz	r6, 80a3be2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
 80a3bda:	4631      	mov	r1, r6
 80a3bdc:	4620      	mov	r0, r4
 80a3bde:	f7ff f9b4 	bl	80a2f4a <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
 80a3be2:	792b      	ldrb	r3, [r5, #4]
 80a3be4:	f013 0f30 	tst.w	r3, #48	; 0x30
 80a3be8:	d02d      	beq.n	80a3c46 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
 80a3bea:	6823      	ldr	r3, [r4, #0]
 80a3bec:	4620      	mov	r0, r4
 80a3bee:	68db      	ldr	r3, [r3, #12]
 80a3bf0:	2202      	movs	r2, #2
 80a3bf2:	4921      	ldr	r1, [pc, #132]	; (80a3c78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
 80a3bf4:	4798      	blx	r3
        // Code
        if (attr.has_code) {
 80a3bf6:	792b      	ldrb	r3, [r5, #4]
 80a3bf8:	06d8      	lsls	r0, r3, #27
 80a3bfa:	d50b      	bpl.n	80a3c14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
 80a3bfc:	6823      	ldr	r3, [r4, #0]
 80a3bfe:	2207      	movs	r2, #7
 80a3c00:	68db      	ldr	r3, [r3, #12]
 80a3c02:	491e      	ldr	r1, [pc, #120]	; (80a3c7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
 80a3c04:	4620      	mov	r0, r4
 80a3c06:	4798      	blx	r3
 80a3c08:	69ab      	ldr	r3, [r5, #24]
 80a3c0a:	4a1d      	ldr	r2, [pc, #116]	; (80a3c80 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
 80a3c0c:	2100      	movs	r1, #0
 80a3c0e:	6a20      	ldr	r0, [r4, #32]
 80a3c10:	f000 fa50 	bl	80a40b4 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
 80a3c14:	792b      	ldrb	r3, [r5, #4]
 80a3c16:	0699      	lsls	r1, r3, #26
 80a3c18:	d511      	bpl.n	80a3c3e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
 80a3c1a:	06da      	lsls	r2, r3, #27
 80a3c1c:	d505      	bpl.n	80a3c2a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
 80a3c1e:	6823      	ldr	r3, [r4, #0]
 80a3c20:	2202      	movs	r2, #2
 80a3c22:	68db      	ldr	r3, [r3, #12]
 80a3c24:	4911      	ldr	r1, [pc, #68]	; (80a3c6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
 80a3c26:	4620      	mov	r0, r4
 80a3c28:	4798      	blx	r3
            }
            write("details = ", 10);
 80a3c2a:	6823      	ldr	r3, [r4, #0]
 80a3c2c:	4915      	ldr	r1, [pc, #84]	; (80a3c84 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
 80a3c2e:	4620      	mov	r0, r4
 80a3c30:	68db      	ldr	r3, [r3, #12]
 80a3c32:	220a      	movs	r2, #10
 80a3c34:	4798      	blx	r3
            write(attr.details);
 80a3c36:	69e9      	ldr	r1, [r5, #28]
 80a3c38:	4620      	mov	r0, r4
 80a3c3a:	f7ff f986 	bl	80a2f4a <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
 80a3c3e:	215d      	movs	r1, #93	; 0x5d
 80a3c40:	4620      	mov	r0, r4
 80a3c42:	f7ff f990 	bl	80a2f66 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
 80a3c46:	6823      	ldr	r3, [r4, #0]
 80a3c48:	4620      	mov	r0, r4
}
 80a3c4a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
 80a3c4e:	68db      	ldr	r3, [r3, #12]
 80a3c50:	2202      	movs	r2, #2
 80a3c52:	490d      	ldr	r1, [pc, #52]	; (80a3c88 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
 80a3c54:	4718      	bx	r3
 80a3c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a3c5a:	bf00      	nop
 80a3c5c:	20000198 	.word	0x20000198
 80a3c60:	080a9442 	.word	0x080a9442
 80a3c64:	080a9449 	.word	0x080a9449
 80a3c68:	080a9765 	.word	0x080a9765
 80a3c6c:	080a944c 	.word	0x080a944c
 80a3c70:	080a9451 	.word	0x080a9451
 80a3c74:	080a944f 	.word	0x080a944f
 80a3c78:	080a9454 	.word	0x080a9454
 80a3c7c:	080a9457 	.word	0x080a9457
 80a3c80:	080a945f 	.word	0x080a945f
 80a3c84:	080a9462 	.word	0x080a9462
 80a3c88:	080a946d 	.word	0x080a946d

080a3c8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a3c8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a3c90:	b085      	sub	sp, #20
 80a3c92:	f8d0 8020 	ldr.w	r8, [r0, #32]
 80a3c96:	4606      	mov	r6, r0
 80a3c98:	460f      	mov	r7, r1
 80a3c9a:	4691      	mov	r9, r2
 80a3c9c:	461d      	mov	r5, r3
 80a3c9e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
 80a3ca0:	f7fe fe5a 	bl	80a2958 <_Z16_fetch_usbserialv>
 80a3ca4:	4580      	cmp	r8, r0
 80a3ca6:	d105      	bne.n	80a3cb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
 80a3ca8:	484a      	ldr	r0, [pc, #296]	; (80a3dd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
 80a3caa:	f7fe fc5d 	bl	80a2568 <_ZN5spark12NetworkClass9listeningEv>
 80a3cae:	2800      	cmp	r0, #0
 80a3cb0:	f040 808c 	bne.w	80a3dcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
 80a3cb4:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
 80a3cb6:	4a48      	ldr	r2, [pc, #288]	; (80a3dd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 80a3cb8:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
 80a3cbc:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
 80a3cbe:	9201      	str	r2, [sp, #4]
 80a3cc0:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 80a3cc2:	f88d 8008 	strb.w	r8, [sp, #8]
 80a3cc6:	f7fe fb08 	bl	80a22da <_ZN5spark10JSONWriter11beginObjectEv>
 80a3cca:	4641      	mov	r1, r8
 80a3ccc:	4648      	mov	r0, r9
 80a3cce:	f7fe f911 	bl	80a1ef4 <log_level_name>
 80a3cd2:	4680      	mov	r8, r0
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
 80a3cd4:	4941      	ldr	r1, [pc, #260]	; (80a3ddc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
 80a3cd6:	2201      	movs	r2, #1
 80a3cd8:	a801      	add	r0, sp, #4
 80a3cda:	f7fe fb83 	bl	80a23e4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a3cde:	4641      	mov	r1, r8
 80a3ce0:	f7ff f923 	bl	80a2f2a <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
 80a3ce4:	b13f      	cbz	r7, 80a3cf6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
 80a3ce6:	493e      	ldr	r1, [pc, #248]	; (80a3de0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
 80a3ce8:	2201      	movs	r2, #1
 80a3cea:	a801      	add	r0, sp, #4
 80a3cec:	f7fe fb7a 	bl	80a23e4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a3cf0:	4639      	mov	r1, r7
 80a3cf2:	f7ff f91a 	bl	80a2f2a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
 80a3cf6:	b13d      	cbz	r5, 80a3d08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
 80a3cf8:	493a      	ldr	r1, [pc, #232]	; (80a3de4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
 80a3cfa:	2201      	movs	r2, #1
 80a3cfc:	a801      	add	r0, sp, #4
 80a3cfe:	f7fe fb71 	bl	80a23e4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a3d02:	4629      	mov	r1, r5
 80a3d04:	f7ff f911 	bl	80a2f2a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
 80a3d08:	7923      	ldrb	r3, [r4, #4]
 80a3d0a:	07df      	lsls	r7, r3, #31
 80a3d0c:	d50e      	bpl.n	80a3d2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
 80a3d0e:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
 80a3d10:	212f      	movs	r1, #47	; 0x2f
 80a3d12:	4628      	mov	r0, r5
 80a3d14:	f002 fb61 	bl	80a63da <strrchr>
    if (s1) {
 80a3d18:	b100      	cbz	r0, 80a3d1c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
 80a3d1a:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
 80a3d1c:	4932      	ldr	r1, [pc, #200]	; (80a3de8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
 80a3d1e:	2201      	movs	r2, #1
 80a3d20:	a801      	add	r0, sp, #4
 80a3d22:	f7fe fb5f 	bl	80a23e4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a3d26:	4629      	mov	r1, r5
 80a3d28:	f7ff f8ff 	bl	80a2f2a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
 80a3d2c:	7923      	ldrb	r3, [r4, #4]
 80a3d2e:	079d      	lsls	r5, r3, #30
 80a3d30:	d507      	bpl.n	80a3d42 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
 80a3d32:	492e      	ldr	r1, [pc, #184]	; (80a3dec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
 80a3d34:	2202      	movs	r2, #2
 80a3d36:	a801      	add	r0, sp, #4
 80a3d38:	f7fe fb54 	bl	80a23e4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a3d3c:	68e1      	ldr	r1, [r4, #12]
 80a3d3e:	f7fe fad9 	bl	80a22f4 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
 80a3d42:	7923      	ldrb	r3, [r4, #4]
 80a3d44:	0758      	lsls	r0, r3, #29
 80a3d46:	d516      	bpl.n	80a3d76 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
 80a3d48:	6925      	ldr	r5, [r4, #16]
 80a3d4a:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
 80a3d4c:	463b      	mov	r3, r7
 80a3d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3d52:	b13a      	cbz	r2, 80a3d64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
 80a3d54:	2a20      	cmp	r2, #32
 80a3d56:	d101      	bne.n	80a3d5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
 80a3d58:	461d      	mov	r5, r3
 80a3d5a:	e001      	b.n	80a3d60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
 80a3d5c:	2a28      	cmp	r2, #40	; 0x28
 80a3d5e:	d001      	beq.n	80a3d64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
 80a3d60:	461f      	mov	r7, r3
 80a3d62:	e7f3      	b.n	80a3d4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
 80a3d64:	2202      	movs	r2, #2
 80a3d66:	4922      	ldr	r1, [pc, #136]	; (80a3df0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
 80a3d68:	a801      	add	r0, sp, #4
 80a3d6a:	f7fe fb3b 	bl	80a23e4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a3d6e:	1b7a      	subs	r2, r7, r5
 80a3d70:	4629      	mov	r1, r5
 80a3d72:	f7fe fb46 	bl	80a2402 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
 80a3d76:	7923      	ldrb	r3, [r4, #4]
 80a3d78:	0719      	lsls	r1, r3, #28
 80a3d7a:	d507      	bpl.n	80a3d8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
 80a3d7c:	491d      	ldr	r1, [pc, #116]	; (80a3df4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
 80a3d7e:	2201      	movs	r2, #1
 80a3d80:	a801      	add	r0, sp, #4
 80a3d82:	f7fe fb2f 	bl	80a23e4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a3d86:	6961      	ldr	r1, [r4, #20]
 80a3d88:	f7fe fac6 	bl	80a2318 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
 80a3d8c:	7923      	ldrb	r3, [r4, #4]
 80a3d8e:	06da      	lsls	r2, r3, #27
 80a3d90:	d508      	bpl.n	80a3da4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
 80a3d92:	2204      	movs	r2, #4
 80a3d94:	4918      	ldr	r1, [pc, #96]	; (80a3df8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
 80a3d96:	eb0d 0002 	add.w	r0, sp, r2
 80a3d9a:	f7fe fb23 	bl	80a23e4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a3d9e:	69a1      	ldr	r1, [r4, #24]
 80a3da0:	f7fe faa8 	bl	80a22f4 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
 80a3da4:	7923      	ldrb	r3, [r4, #4]
 80a3da6:	069b      	lsls	r3, r3, #26
 80a3da8:	d507      	bpl.n	80a3dba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
 80a3daa:	4914      	ldr	r1, [pc, #80]	; (80a3dfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
 80a3dac:	2206      	movs	r2, #6
 80a3dae:	a801      	add	r0, sp, #4
 80a3db0:	f7fe fb18 	bl	80a23e4 <_ZN5spark10JSONWriter4nameEPKcj>
 80a3db4:	69e1      	ldr	r1, [r4, #28]
 80a3db6:	f7ff f8b8 	bl	80a2f2a <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
 80a3dba:	a801      	add	r0, sp, #4
 80a3dbc:	f7fe fa77 	bl	80a22ae <_ZN5spark10JSONWriter9endObjectEv>
 80a3dc0:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
 80a3dc2:	2202      	movs	r2, #2
 80a3dc4:	6803      	ldr	r3, [r0, #0]
 80a3dc6:	490e      	ldr	r1, [pc, #56]	; (80a3e00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
 80a3dc8:	68db      	ldr	r3, [r3, #12]
 80a3dca:	4798      	blx	r3
}
 80a3dcc:	b005      	add	sp, #20
 80a3dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3dd2:	bf00      	nop
 80a3dd4:	20000198 	.word	0x20000198
 80a3dd8:	080a9388 	.word	0x080a9388
 80a3ddc:	080a93d2 	.word	0x080a93d2
 80a3de0:	080a93e8 	.word	0x080a93e8
 80a3de4:	080a97c7 	.word	0x080a97c7
 80a3de8:	080a94e4 	.word	0x080a94e4
 80a3dec:	080a9470 	.word	0x080a9470
 80a3df0:	080a9473 	.word	0x080a9473
 80a3df4:	080a9835 	.word	0x080a9835
 80a3df8:	080a9476 	.word	0x080a9476
 80a3dfc:	080a947b 	.word	0x080a947b
 80a3e00:	080a946d 	.word	0x080a946d

080a3e04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a3e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3e06:	4606      	mov	r6, r0
 80a3e08:	460d      	mov	r5, r1
 80a3e0a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a3e0c:	2400      	movs	r4, #0
  while (size--) {
 80a3e0e:	42bd      	cmp	r5, r7
 80a3e10:	d00c      	beq.n	80a3e2c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a3e12:	6833      	ldr	r3, [r6, #0]
 80a3e14:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a3e18:	689b      	ldr	r3, [r3, #8]
 80a3e1a:	4630      	mov	r0, r6
 80a3e1c:	4798      	blx	r3
     if (chunk>=0)
 80a3e1e:	2800      	cmp	r0, #0
 80a3e20:	db01      	blt.n	80a3e26 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a3e22:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a3e24:	e7f3      	b.n	80a3e0e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a3e26:	2c00      	cmp	r4, #0
 80a3e28:	bf08      	it	eq
 80a3e2a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a3e2c:	4620      	mov	r0, r4
 80a3e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3e30 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a3e30:	b570      	push	{r4, r5, r6, lr}
 80a3e32:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a3e34:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a3e36:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a3e38:	b149      	cbz	r1, 80a3e4e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a3e3a:	f002 fab1 	bl	80a63a0 <strlen>
 80a3e3e:	682b      	ldr	r3, [r5, #0]
 80a3e40:	4602      	mov	r2, r0
 80a3e42:	4621      	mov	r1, r4
 80a3e44:	4628      	mov	r0, r5
    }
 80a3e46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a3e4a:	68db      	ldr	r3, [r3, #12]
 80a3e4c:	4718      	bx	r3
    }
 80a3e4e:	bd70      	pop	{r4, r5, r6, pc}

080a3e50 <_ZN5Print5printEPKc>:
 80a3e50:	b508      	push	{r3, lr}
 80a3e52:	f7ff ffed 	bl	80a3e30 <_ZN5Print5writeEPKc>
 80a3e56:	bd08      	pop	{r3, pc}

080a3e58 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a3e58:	6803      	ldr	r3, [r0, #0]
 80a3e5a:	689b      	ldr	r3, [r3, #8]
 80a3e5c:	4718      	bx	r3

080a3e5e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3e5e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a3e60:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a3e62:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a3e64:	f7ff fff8 	bl	80a3e58 <_ZN5Print5printEc>
  n += print('\n');
 80a3e68:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a3e6a:	4604      	mov	r4, r0
  n += print('\n');
 80a3e6c:	4628      	mov	r0, r5
 80a3e6e:	f7ff fff3 	bl	80a3e58 <_ZN5Print5printEc>
  return n;
}
 80a3e72:	4420      	add	r0, r4
 80a3e74:	bd38      	pop	{r3, r4, r5, pc}

080a3e76 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a3e76:	b538      	push	{r3, r4, r5, lr}
 80a3e78:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3e7a:	f7ff ffd9 	bl	80a3e30 <_ZN5Print5writeEPKc>
 80a3e7e:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a3e80:	4628      	mov	r0, r5
 80a3e82:	f7ff ffec 	bl	80a3e5e <_ZN5Print7printlnEv>
  return n;
}
 80a3e86:	4420      	add	r0, r4
 80a3e88:	bd38      	pop	{r3, r4, r5, pc}

080a3e8a <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a3e8a:	2a01      	cmp	r2, #1
 80a3e8c:	bf98      	it	ls
 80a3e8e:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a3e90:	b530      	push	{r4, r5, lr}
 80a3e92:	460b      	mov	r3, r1
 80a3e94:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a3e96:	2100      	movs	r1, #0
 80a3e98:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a3e9c:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a3ea0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a3ea4:	fb05 3312 	mls	r3, r5, r2, r3
 80a3ea8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a3eaa:	2b09      	cmp	r3, #9
 80a3eac:	bf94      	ite	ls
 80a3eae:	3330      	addls	r3, #48	; 0x30
 80a3eb0:	3337      	addhi	r3, #55	; 0x37
 80a3eb2:	b2db      	uxtb	r3, r3
 80a3eb4:	4621      	mov	r1, r4
 80a3eb6:	f804 3901 	strb.w	r3, [r4], #-1
 80a3eba:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a3ebc:	2d00      	cmp	r5, #0
 80a3ebe:	d1ef      	bne.n	80a3ea0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a3ec0:	f7ff ffb6 	bl	80a3e30 <_ZN5Print5writeEPKc>
}
 80a3ec4:	b00b      	add	sp, #44	; 0x2c
 80a3ec6:	bd30      	pop	{r4, r5, pc}

080a3ec8 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a3ec8:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a3eca:	b922      	cbnz	r2, 80a3ed6 <_ZN5Print5printEmi+0xe>
 80a3ecc:	6803      	ldr	r3, [r0, #0]
 80a3ece:	b2c9      	uxtb	r1, r1
 80a3ed0:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a3ed2:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a3ed4:	4718      	bx	r3
  else return printNumber(n, base);
 80a3ed6:	b2d2      	uxtb	r2, r2
}
 80a3ed8:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a3eda:	f7ff bfd6 	b.w	80a3e8a <_ZN5Print11printNumberEmh>

080a3ede <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a3ede:	f7ff bff3 	b.w	80a3ec8 <_ZN5Print5printEmi>

080a3ee2 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a3ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3ee6:	4607      	mov	r7, r0
 80a3ee8:	460e      	mov	r6, r1
  if (base == 0) {
 80a3eea:	4615      	mov	r5, r2
 80a3eec:	b92a      	cbnz	r2, 80a3efa <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a3eee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a3ef2:	6803      	ldr	r3, [r0, #0]
 80a3ef4:	b2c9      	uxtb	r1, r1
 80a3ef6:	689b      	ldr	r3, [r3, #8]
 80a3ef8:	4718      	bx	r3
  } else if (base == 10) {
 80a3efa:	2a0a      	cmp	r2, #10
 80a3efc:	d102      	bne.n	80a3f04 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a3efe:	2900      	cmp	r1, #0
 80a3f00:	da01      	bge.n	80a3f06 <_ZN5Print5printEli+0x24>
 80a3f02:	e004      	b.n	80a3f0e <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a3f04:	b2d2      	uxtb	r2, r2
  }
}
 80a3f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a3f0a:	f7ff bfbe 	b.w	80a3e8a <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a3f0e:	212d      	movs	r1, #45	; 0x2d
 80a3f10:	f7ff ffa2 	bl	80a3e58 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a3f14:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a3f16:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a3f18:	4271      	negs	r1, r6
 80a3f1a:	4638      	mov	r0, r7
 80a3f1c:	f7ff ffb5 	bl	80a3e8a <_ZN5Print11printNumberEmh>
 80a3f20:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a3f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3f26 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
 80a3f26:	b538      	push	{r3, r4, r5, lr}
 80a3f28:	4605      	mov	r5, r0
  size_t n = print(num, base);
 80a3f2a:	f7ff ffda 	bl	80a3ee2 <_ZN5Print5printEli>
 80a3f2e:	4604      	mov	r4, r0
  n += println();
 80a3f30:	4628      	mov	r0, r5
 80a3f32:	f7ff ff94 	bl	80a3e5e <_ZN5Print7printlnEv>
  return n;
}
 80a3f36:	4420      	add	r0, r4
 80a3f38:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3f3c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3f40:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3f42:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3f44:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3f46:	4617      	mov	r7, r2
 80a3f48:	461e      	mov	r6, r3
 80a3f4a:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3f4e:	f001 f895 	bl	80a507c <__aeabi_dcmpun>
 80a3f52:	b108      	cbz	r0, 80a3f58 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3f54:	4947      	ldr	r1, [pc, #284]	; (80a4074 <_ZN5Print10printFloatEdh+0x138>)
 80a3f56:	e012      	b.n	80a3f7e <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a3f58:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a3f5c:	f04f 32ff 	mov.w	r2, #4294967295
 80a3f60:	4b45      	ldr	r3, [pc, #276]	; (80a4078 <_ZN5Print10printFloatEdh+0x13c>)
 80a3f62:	4638      	mov	r0, r7
 80a3f64:	4621      	mov	r1, r4
 80a3f66:	f001 f889 	bl	80a507c <__aeabi_dcmpun>
 80a3f6a:	b968      	cbnz	r0, 80a3f88 <_ZN5Print10printFloatEdh+0x4c>
 80a3f6c:	f04f 32ff 	mov.w	r2, #4294967295
 80a3f70:	4b41      	ldr	r3, [pc, #260]	; (80a4078 <_ZN5Print10printFloatEdh+0x13c>)
 80a3f72:	4638      	mov	r0, r7
 80a3f74:	4621      	mov	r1, r4
 80a3f76:	f001 f863 	bl	80a5040 <__aeabi_dcmple>
 80a3f7a:	b928      	cbnz	r0, 80a3f88 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3f7c:	493f      	ldr	r1, [pc, #252]	; (80a407c <_ZN5Print10printFloatEdh+0x140>)
 80a3f7e:	4640      	mov	r0, r8
 80a3f80:	f7ff ff56 	bl	80a3e30 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a3f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a3f88:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3f8c:	4b3c      	ldr	r3, [pc, #240]	; (80a4080 <_ZN5Print10printFloatEdh+0x144>)
 80a3f8e:	4638      	mov	r0, r7
 80a3f90:	4631      	mov	r1, r6
 80a3f92:	f001 f869 	bl	80a5068 <__aeabi_dcmpgt>
 80a3f96:	b108      	cbz	r0, 80a3f9c <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3f98:	493a      	ldr	r1, [pc, #232]	; (80a4084 <_ZN5Print10printFloatEdh+0x148>)
 80a3f9a:	e7f0      	b.n	80a3f7e <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a3f9c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a3fa0:	4b39      	ldr	r3, [pc, #228]	; (80a4088 <_ZN5Print10printFloatEdh+0x14c>)
 80a3fa2:	4638      	mov	r0, r7
 80a3fa4:	4631      	mov	r1, r6
 80a3fa6:	f001 f841 	bl	80a502c <__aeabi_dcmplt>
 80a3faa:	2800      	cmp	r0, #0
 80a3fac:	d1f4      	bne.n	80a3f98 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a3fae:	2200      	movs	r2, #0
 80a3fb0:	2300      	movs	r3, #0
 80a3fb2:	4638      	mov	r0, r7
 80a3fb4:	4631      	mov	r1, r6
 80a3fb6:	f001 f839 	bl	80a502c <__aeabi_dcmplt>
 80a3fba:	b138      	cbz	r0, 80a3fcc <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a3fbc:	212d      	movs	r1, #45	; 0x2d
 80a3fbe:	4640      	mov	r0, r8
 80a3fc0:	f7ff ff4a 	bl	80a3e58 <_ZN5Print5printEc>
     number = -number;
 80a3fc4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a3fc8:	4604      	mov	r4, r0
 80a3fca:	e000      	b.n	80a3fce <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a3fcc:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a3fce:	492f      	ldr	r1, [pc, #188]	; (80a408c <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a3fd0:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a3fd4:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a3fd6:	fa5f f389 	uxtb.w	r3, r9
 80a3fda:	429d      	cmp	r5, r3
 80a3fdc:	d906      	bls.n	80a3fec <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a3fde:	2200      	movs	r2, #0
 80a3fe0:	4b2b      	ldr	r3, [pc, #172]	; (80a4090 <_ZN5Print10printFloatEdh+0x154>)
 80a3fe2:	f000 fedb 	bl	80a4d9c <__aeabi_ddiv>
 80a3fe6:	f109 0901 	add.w	r9, r9, #1
 80a3fea:	e7f4      	b.n	80a3fd6 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a3fec:	463a      	mov	r2, r7
 80a3fee:	4633      	mov	r3, r6
 80a3ff0:	f000 fbf8 	bl	80a47e4 <__adddf3>
 80a3ff4:	460f      	mov	r7, r1
 80a3ff6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a3ff8:	f001 f87e 	bl	80a50f8 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a3ffc:	220a      	movs	r2, #10
 80a3ffe:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a4000:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a4002:	4640      	mov	r0, r8
 80a4004:	f7ff ff41 	bl	80a3e8a <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a4008:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a400a:	b37d      	cbz	r5, 80a406c <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a400c:	4648      	mov	r0, r9
 80a400e:	f000 fd25 	bl	80a4a5c <__aeabi_ui2d>
 80a4012:	4602      	mov	r2, r0
 80a4014:	460b      	mov	r3, r1
 80a4016:	4630      	mov	r0, r6
 80a4018:	4639      	mov	r1, r7
 80a401a:	f000 fbe1 	bl	80a47e0 <__aeabi_dsub>
 80a401e:	4606      	mov	r6, r0
 80a4020:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a4022:	4640      	mov	r0, r8
 80a4024:	491b      	ldr	r1, [pc, #108]	; (80a4094 <_ZN5Print10printFloatEdh+0x158>)
 80a4026:	f7ff ff03 	bl	80a3e30 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a402a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a402c:	4b18      	ldr	r3, [pc, #96]	; (80a4090 <_ZN5Print10printFloatEdh+0x154>)
 80a402e:	2200      	movs	r2, #0
 80a4030:	4630      	mov	r0, r6
 80a4032:	4639      	mov	r1, r7
 80a4034:	f000 fd88 	bl	80a4b48 <__aeabi_dmul>
 80a4038:	460f      	mov	r7, r1
 80a403a:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a403c:	f001 f834 	bl	80a50a8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a4040:	220a      	movs	r2, #10
 80a4042:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a4044:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a4046:	4640      	mov	r0, r8
 80a4048:	f7ff ff4b 	bl	80a3ee2 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a404c:	4404      	add	r4, r0
    remainder -= toPrint;
 80a404e:	4648      	mov	r0, r9
 80a4050:	f000 fd14 	bl	80a4a7c <__aeabi_i2d>
 80a4054:	4602      	mov	r2, r0
 80a4056:	460b      	mov	r3, r1
 80a4058:	4630      	mov	r0, r6
 80a405a:	4639      	mov	r1, r7
 80a405c:	f000 fbc0 	bl	80a47e0 <__aeabi_dsub>
 80a4060:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a4062:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a4066:	4606      	mov	r6, r0
 80a4068:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a406a:	d1df      	bne.n	80a402c <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a406c:	4620      	mov	r0, r4
 80a406e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a4072:	bf00      	nop
 80a4074:	080a94d8 	.word	0x080a94d8
 80a4078:	7fefffff 	.word	0x7fefffff
 80a407c:	080a94e2 	.word	0x080a94e2
 80a4080:	41efffff 	.word	0x41efffff
 80a4084:	080a94dc 	.word	0x080a94dc
 80a4088:	c1efffff 	.word	0xc1efffff
 80a408c:	3fe00000 	.word	0x3fe00000
 80a4090:	40240000 	.word	0x40240000
 80a4094:	080a94e0 	.word	0x080a94e0

080a4098 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a4098:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a409a:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a409e:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a40a0:	9100      	str	r1, [sp, #0]
 80a40a2:	f7ff ff4b 	bl	80a3f3c <_ZN5Print10printFloatEdh>
 80a40a6:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a40a8:	4628      	mov	r0, r5
 80a40aa:	f7ff fed8 	bl	80a3e5e <_ZN5Print7printlnEv>
  return n;
}
 80a40ae:	4420      	add	r0, r4
 80a40b0:	b003      	add	sp, #12
 80a40b2:	bd30      	pop	{r4, r5, pc}

080a40b4 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a40b4:	b40c      	push	{r2, r3}
 80a40b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a40ba:	b087      	sub	sp, #28
 80a40bc:	af00      	add	r7, sp, #0
 80a40be:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a40c2:	f854 9b04 	ldr.w	r9, [r4], #4
 80a40c6:	4605      	mov	r5, r0
 80a40c8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a40ca:	4623      	mov	r3, r4
 80a40cc:	464a      	mov	r2, r9
 80a40ce:	2114      	movs	r1, #20
 80a40d0:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a40d2:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a40d4:	f7fe f80a 	bl	80a20ec <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a40d8:	2813      	cmp	r0, #19
 80a40da:	d805      	bhi.n	80a40e8 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a40dc:	1d39      	adds	r1, r7, #4
 80a40de:	4628      	mov	r0, r5
 80a40e0:	f7ff fea6 	bl	80a3e30 <_ZN5Print5writeEPKc>
 80a40e4:	4604      	mov	r4, r0
 80a40e6:	e013      	b.n	80a4110 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a40e8:	f100 0308 	add.w	r3, r0, #8
 80a40ec:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a40f0:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a40f2:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a40f6:	1c41      	adds	r1, r0, #1
 80a40f8:	4623      	mov	r3, r4
 80a40fa:	464a      	mov	r2, r9
 80a40fc:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a40fe:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a4100:	f7fd fff4 	bl	80a20ec <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a4104:	4669      	mov	r1, sp
 80a4106:	4628      	mov	r0, r5
 80a4108:	f7ff fe92 	bl	80a3e30 <_ZN5Print5writeEPKc>
 80a410c:	4604      	mov	r4, r0
 80a410e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a4110:	b11e      	cbz	r6, 80a411a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a4112:	4628      	mov	r0, r5
 80a4114:	f7ff fea3 	bl	80a3e5e <_ZN5Print7printlnEv>
 80a4118:	4404      	add	r4, r0
    return n;
}
 80a411a:	4620      	mov	r0, r4
 80a411c:	371c      	adds	r7, #28
 80a411e:	46bd      	mov	sp, r7
 80a4120:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a4124:	b002      	add	sp, #8
 80a4126:	4770      	bx	lr

080a4128 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a4128:	4770      	bx	lr

080a412a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a412a:	7441      	strb	r1, [r0, #17]
 80a412c:	4770      	bx	lr

080a412e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a412e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a4130:	7c00      	ldrb	r0, [r0, #16]
 80a4132:	f7fd fdf7 	bl	80a1d24 <HAL_USART_Available_Data_For_Write>
}
 80a4136:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a413a:	bd08      	pop	{r3, pc}

080a413c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a413c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a413e:	7c00      	ldrb	r0, [r0, #16]
 80a4140:	f7fd fdc8 	bl	80a1cd4 <HAL_USART_Available_Data>
}
 80a4144:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4148:	bd08      	pop	{r3, pc}

080a414a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a414a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a414c:	7c00      	ldrb	r0, [r0, #16]
 80a414e:	f7fd fdd1 	bl	80a1cf4 <HAL_USART_Peek_Data>
}
 80a4152:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a4156:	bf28      	it	cs
 80a4158:	f04f 30ff 	movcs.w	r0, #4294967295
 80a415c:	bd08      	pop	{r3, pc}

080a415e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a415e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a4160:	7c00      	ldrb	r0, [r0, #16]
 80a4162:	f7fd fdbf 	bl	80a1ce4 <HAL_USART_Read_Data>
}
 80a4166:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a416a:	bf28      	it	cs
 80a416c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4170:	bd08      	pop	{r3, pc}

080a4172 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a4172:	7c00      	ldrb	r0, [r0, #16]
 80a4174:	f7fd bdc6 	b.w	80a1d04 <HAL_USART_Flush_Data>

080a4178 <_ZN11USARTSerialD0Ev>:
 80a4178:	b510      	push	{r4, lr}
 80a417a:	4604      	mov	r4, r0
 80a417c:	2114      	movs	r1, #20
 80a417e:	f000 f9cf 	bl	80a4520 <_ZdlPvj>
 80a4182:	4620      	mov	r0, r4
 80a4184:	bd10      	pop	{r4, pc}

080a4186 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a4186:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a4188:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a418a:	4604      	mov	r4, r0
 80a418c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a418e:	b925      	cbnz	r5, 80a419a <_ZN11USARTSerial5writeEh+0x14>
 80a4190:	7c00      	ldrb	r0, [r0, #16]
 80a4192:	f7fd fdc7 	bl	80a1d24 <HAL_USART_Available_Data_For_Write>
 80a4196:	2800      	cmp	r0, #0
 80a4198:	dd05      	ble.n	80a41a6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a419a:	4631      	mov	r1, r6
 80a419c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a419e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a41a2:	f7fd bd8f 	b.w	80a1cc4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a41a6:	4628      	mov	r0, r5
 80a41a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080a41ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a41ac:	b510      	push	{r4, lr}
 80a41ae:	4604      	mov	r4, r0
 80a41b0:	4608      	mov	r0, r1
 80a41b2:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a41b4:	2200      	movs	r2, #0
 80a41b6:	6062      	str	r2, [r4, #4]
 80a41b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a41bc:	60a2      	str	r2, [r4, #8]
 80a41be:	4a05      	ldr	r2, [pc, #20]	; (80a41d4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a41c0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a41c2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a41c4:	2201      	movs	r2, #1
 80a41c6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a41c8:	461a      	mov	r2, r3
 80a41ca:	f7fd fd6b 	bl	80a1ca4 <HAL_USART_Init>
}
 80a41ce:	4620      	mov	r0, r4
 80a41d0:	bd10      	pop	{r4, pc}
 80a41d2:	bf00      	nop
 80a41d4:	080a94f0 	.word	0x080a94f0

080a41d8 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a41d8:	2300      	movs	r3, #0
 80a41da:	7c00      	ldrb	r0, [r0, #16]
 80a41dc:	f7fd bdaa 	b.w	80a1d34 <HAL_USART_BeginConfig>

080a41e0 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a41e0:	2200      	movs	r2, #0
 80a41e2:	f7ff bff9 	b.w	80a41d8 <_ZN11USARTSerial5beginEmm>

080a41e6 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
 80a41e6:	7c00      	ldrb	r0, [r0, #16]
 80a41e8:	f7fd bd64 	b.w	80a1cb4 <HAL_USART_End>

080a41ec <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a41ec:	7c00      	ldrb	r0, [r0, #16]
 80a41ee:	f7fd bd91 	b.w	80a1d14 <HAL_USART_Is_Enabled>
	...

080a41f4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a41f4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a41f6:	4d0c      	ldr	r5, [pc, #48]	; (80a4228 <_Z22__fetch_global_Serial1v+0x34>)
 80a41f8:	6829      	ldr	r1, [r5, #0]
 80a41fa:	f011 0401 	ands.w	r4, r1, #1
 80a41fe:	d111      	bne.n	80a4224 <_Z22__fetch_global_Serial1v+0x30>
 80a4200:	4628      	mov	r0, r5
 80a4202:	f7fb ff5b 	bl	80a00bc <__cxa_guard_acquire>
 80a4206:	b168      	cbz	r0, 80a4224 <_Z22__fetch_global_Serial1v+0x30>
 80a4208:	4a08      	ldr	r2, [pc, #32]	; (80a422c <_Z22__fetch_global_Serial1v+0x38>)
 80a420a:	4621      	mov	r1, r4
 80a420c:	4b08      	ldr	r3, [pc, #32]	; (80a4230 <_Z22__fetch_global_Serial1v+0x3c>)
 80a420e:	4809      	ldr	r0, [pc, #36]	; (80a4234 <_Z22__fetch_global_Serial1v+0x40>)
 80a4210:	f7ff ffcc 	bl	80a41ac <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a4214:	4628      	mov	r0, r5
 80a4216:	f7fb ff56 	bl	80a00c6 <__cxa_guard_release>
 80a421a:	4a07      	ldr	r2, [pc, #28]	; (80a4238 <_Z22__fetch_global_Serial1v+0x44>)
 80a421c:	4907      	ldr	r1, [pc, #28]	; (80a423c <_Z22__fetch_global_Serial1v+0x48>)
 80a421e:	4805      	ldr	r0, [pc, #20]	; (80a4234 <_Z22__fetch_global_Serial1v+0x40>)
 80a4220:	f000 f970 	bl	80a4504 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a4224:	4803      	ldr	r0, [pc, #12]	; (80a4234 <_Z22__fetch_global_Serial1v+0x40>)
 80a4226:	bd38      	pop	{r3, r4, r5, pc}
 80a4228:	200005dc 	.word	0x200005dc
 80a422c:	200005e0 	.word	0x200005e0
 80a4230:	20000558 	.word	0x20000558
 80a4234:	20000544 	.word	0x20000544
 80a4238:	20000104 	.word	0x20000104
 80a423c:	080a4129 	.word	0x080a4129

080a4240 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a4240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a4244:	4b03      	ldr	r3, [pc, #12]	; (80a4254 <_GLOBAL__sub_I_System+0x14>)
 80a4246:	2000      	movs	r0, #0
 80a4248:	7018      	strb	r0, [r3, #0]
 80a424a:	8058      	strh	r0, [r3, #2]
 80a424c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a424e:	f7fd bee1 	b.w	80a2014 <set_system_mode>
 80a4252:	bf00      	nop
 80a4254:	20000664 	.word	0x20000664

080a4258 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a4258:	2300      	movs	r3, #0
 80a425a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a425c:	6043      	str	r3, [r0, #4]
	len = 0;
 80a425e:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a4260:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
 80a4262:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
 80a4264:	680c      	ldr	r4, [r1, #0]
 80a4266:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
 80a4268:	684c      	ldr	r4, [r1, #4]
 80a426a:	6044      	str	r4, [r0, #4]
	len = rhs.len;
 80a426c:	688c      	ldr	r4, [r1, #8]
 80a426e:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
 80a4270:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
 80a4272:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
 80a4274:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
 80a4276:	bd10      	pop	{r4, pc}

080a4278 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a4278:	b510      	push	{r4, lr}
 80a427a:	4604      	mov	r4, r0
{
	free(buffer);
 80a427c:	6800      	ldr	r0, [r0, #0]
 80a427e:	f7fd fefd 	bl	80a207c <free>
}
 80a4282:	4620      	mov	r0, r4
 80a4284:	bd10      	pop	{r4, pc}

080a4286 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a4286:	b510      	push	{r4, lr}
 80a4288:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a428a:	6800      	ldr	r0, [r0, #0]
 80a428c:	b108      	cbz	r0, 80a4292 <_ZN6String10invalidateEv+0xc>
 80a428e:	f7fd fef5 	bl	80a207c <free>
	buffer = NULL;
 80a4292:	2300      	movs	r3, #0
 80a4294:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a4296:	60a3      	str	r3, [r4, #8]
 80a4298:	6063      	str	r3, [r4, #4]
 80a429a:	bd10      	pop	{r4, pc}

080a429c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a429c:	b538      	push	{r3, r4, r5, lr}
 80a429e:	4604      	mov	r4, r0
 80a42a0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a42a2:	6800      	ldr	r0, [r0, #0]
 80a42a4:	3101      	adds	r1, #1
 80a42a6:	f7fd fef1 	bl	80a208c <realloc>
	if (newbuffer) {
 80a42aa:	b110      	cbz	r0, 80a42b2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a42ac:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a42b0:	2001      	movs	r0, #1
	}
	return 0;
}
 80a42b2:	bd38      	pop	{r3, r4, r5, pc}

080a42b4 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a42b4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a42b6:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a42b8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a42ba:	b113      	cbz	r3, 80a42c2 <_ZN6String7reserveEj+0xe>
 80a42bc:	6843      	ldr	r3, [r0, #4]
 80a42be:	428b      	cmp	r3, r1
 80a42c0:	d207      	bcs.n	80a42d2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a42c2:	4620      	mov	r0, r4
 80a42c4:	f7ff ffea 	bl	80a429c <_ZN6String12changeBufferEj>
 80a42c8:	b120      	cbz	r0, 80a42d4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a42ca:	68a3      	ldr	r3, [r4, #8]
 80a42cc:	b90b      	cbnz	r3, 80a42d2 <_ZN6String7reserveEj+0x1e>
 80a42ce:	6822      	ldr	r2, [r4, #0]
 80a42d0:	7013      	strb	r3, [r2, #0]
 80a42d2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a42d4:	bd10      	pop	{r4, pc}

080a42d6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a42d6:	b570      	push	{r4, r5, r6, lr}
 80a42d8:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a42da:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a42dc:	4604      	mov	r4, r0
 80a42de:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a42e0:	f7ff ffe8 	bl	80a42b4 <_ZN6String7reserveEj>
 80a42e4:	b918      	cbnz	r0, 80a42ee <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a42e6:	4620      	mov	r0, r4
 80a42e8:	f7ff ffcd 	bl	80a4286 <_ZN6String10invalidateEv>
		return *this;
 80a42ec:	e009      	b.n	80a4302 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a42ee:	462a      	mov	r2, r5
 80a42f0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a42f2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a42f4:	6820      	ldr	r0, [r4, #0]
 80a42f6:	f001 fabf 	bl	80a5878 <memcpy>
	buffer[len] = 0;
 80a42fa:	6822      	ldr	r2, [r4, #0]
 80a42fc:	68a3      	ldr	r3, [r4, #8]
 80a42fe:	2100      	movs	r1, #0
 80a4300:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a4302:	4620      	mov	r0, r4
 80a4304:	bd70      	pop	{r4, r5, r6, pc}

080a4306 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a4306:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a4308:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a430a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a430c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a430e:	6043      	str	r3, [r0, #4]
	len = 0;
 80a4310:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a4312:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a4314:	460d      	mov	r5, r1
 80a4316:	b139      	cbz	r1, 80a4328 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a4318:	4608      	mov	r0, r1
 80a431a:	f002 f841 	bl	80a63a0 <strlen>
 80a431e:	4629      	mov	r1, r5
 80a4320:	4602      	mov	r2, r0
 80a4322:	4620      	mov	r0, r4
 80a4324:	f7ff ffd7 	bl	80a42d6 <_ZN6String4copyEPKcj>
}
 80a4328:	4620      	mov	r0, r4
 80a432a:	bd38      	pop	{r3, r4, r5, pc}

080a432c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a432c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a432e:	b510      	push	{r4, lr}
 80a4330:	460b      	mov	r3, r1
 80a4332:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a4334:	d007      	beq.n	80a4346 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a4336:	6809      	ldr	r1, [r1, #0]
 80a4338:	b119      	cbz	r1, 80a4342 <_ZN6StringaSERKS_+0x16>
 80a433a:	689a      	ldr	r2, [r3, #8]
 80a433c:	f7ff ffcb 	bl	80a42d6 <_ZN6String4copyEPKcj>
 80a4340:	e001      	b.n	80a4346 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a4342:	f7ff ffa0 	bl	80a4286 <_ZN6String10invalidateEv>

	return *this;
}
 80a4346:	4620      	mov	r0, r4
 80a4348:	bd10      	pop	{r4, pc}

080a434a <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a434a:	b510      	push	{r4, lr}
 80a434c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a434e:	2300      	movs	r3, #0
 80a4350:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a4352:	6043      	str	r3, [r0, #4]
	len = 0;
 80a4354:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a4356:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a4358:	f7ff ffe8 	bl	80a432c <_ZN6StringaSERKS_>
}
 80a435c:	4620      	mov	r0, r4
 80a435e:	bd10      	pop	{r4, pc}

080a4360 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a4360:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a4362:	4d0b      	ldr	r5, [pc, #44]	; (80a4390 <_Z19__fetch_global_Wirev+0x30>)
 80a4364:	6829      	ldr	r1, [r5, #0]
 80a4366:	f011 0401 	ands.w	r4, r1, #1
 80a436a:	d10f      	bne.n	80a438c <_Z19__fetch_global_Wirev+0x2c>
 80a436c:	4628      	mov	r0, r5
 80a436e:	f7fb fea5 	bl	80a00bc <__cxa_guard_acquire>
 80a4372:	b158      	cbz	r0, 80a438c <_Z19__fetch_global_Wirev+0x2c>
 80a4374:	4621      	mov	r1, r4
 80a4376:	4807      	ldr	r0, [pc, #28]	; (80a4394 <_Z19__fetch_global_Wirev+0x34>)
 80a4378:	f7fe fa46 	bl	80a2808 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a437c:	4628      	mov	r0, r5
 80a437e:	f7fb fea2 	bl	80a00c6 <__cxa_guard_release>
 80a4382:	4a05      	ldr	r2, [pc, #20]	; (80a4398 <_Z19__fetch_global_Wirev+0x38>)
 80a4384:	4905      	ldr	r1, [pc, #20]	; (80a439c <_Z19__fetch_global_Wirev+0x3c>)
 80a4386:	4803      	ldr	r0, [pc, #12]	; (80a4394 <_Z19__fetch_global_Wirev+0x34>)
 80a4388:	f000 f8bc 	bl	80a4504 <__aeabi_atexit>
	return wire;
}
 80a438c:	4801      	ldr	r0, [pc, #4]	; (80a4394 <_Z19__fetch_global_Wirev+0x34>)
 80a438e:	bd38      	pop	{r3, r4, r5, pc}
 80a4390:	2000066c 	.word	0x2000066c
 80a4394:	20000670 	.word	0x20000670
 80a4398:	20000104 	.word	0x20000104
 80a439c:	080a27af 	.word	0x080a27af

080a43a0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a43a0:	b513      	push	{r0, r1, r4, lr}
 80a43a2:	4c08      	ldr	r4, [pc, #32]	; (80a43c4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a43a4:	2300      	movs	r3, #0
 80a43a6:	461a      	mov	r2, r3
 80a43a8:	4619      	mov	r1, r3
 80a43aa:	9300      	str	r3, [sp, #0]
 80a43ac:	4620      	mov	r0, r4
 80a43ae:	f7fe fb8d 	bl	80a2acc <_ZN9IPAddressC1Ehhhh>
 80a43b2:	4620      	mov	r0, r4
 80a43b4:	4a04      	ldr	r2, [pc, #16]	; (80a43c8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a43b6:	4905      	ldr	r1, [pc, #20]	; (80a43cc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a43b8:	b002      	add	sp, #8
 80a43ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a43be:	f000 b8a1 	b.w	80a4504 <__aeabi_atexit>
 80a43c2:	bf00      	nop
 80a43c4:	20000684 	.word	0x20000684
 80a43c8:	20000104 	.word	0x20000104
 80a43cc:	080a2a1d 	.word	0x080a2a1d

080a43d0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a43d0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a43d2:	4c0c      	ldr	r4, [pc, #48]	; (80a4404 <_GLOBAL__sub_I_SPI+0x34>)
 80a43d4:	4e0c      	ldr	r6, [pc, #48]	; (80a4408 <_GLOBAL__sub_I_SPI+0x38>)
 80a43d6:	4d0d      	ldr	r5, [pc, #52]	; (80a440c <_GLOBAL__sub_I_SPI+0x3c>)
 80a43d8:	2100      	movs	r1, #0
 80a43da:	4620      	mov	r0, r4
 80a43dc:	f7fe f964 	bl	80a26a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a43e0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a43e2:	4c0b      	ldr	r4, [pc, #44]	; (80a4410 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a43e4:	4632      	mov	r2, r6
 80a43e6:	4629      	mov	r1, r5
 80a43e8:	f000 f88c 	bl	80a4504 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a43ec:	2101      	movs	r1, #1
 80a43ee:	4620      	mov	r0, r4
 80a43f0:	f7fe f95a 	bl	80a26a8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a43f4:	4632      	mov	r2, r6
 80a43f6:	4629      	mov	r1, r5
 80a43f8:	4620      	mov	r0, r4
 80a43fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a43fe:	f000 b881 	b.w	80a4504 <__aeabi_atexit>
 80a4402:	bf00      	nop
 80a4404:	200006a4 	.word	0x200006a4
 80a4408:	20000104 	.word	0x20000104
 80a440c:	080a2699 	.word	0x080a2699
 80a4410:	200006b4 	.word	0x200006b4

080a4414 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a4414:	b510      	push	{r4, lr}
 80a4416:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a4418:	480f      	ldr	r0, [pc, #60]	; (80a4458 <pinAvailable+0x44>)
 80a441a:	f7fe f9c5 	bl	80a27a8 <_ZN8SPIClass9isEnabledEv>
 80a441e:	b128      	cbz	r0, 80a442c <pinAvailable+0x18>
 80a4420:	f1a4 030d 	sub.w	r3, r4, #13
 80a4424:	2b02      	cmp	r3, #2
 80a4426:	d801      	bhi.n	80a442c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a4428:	2000      	movs	r0, #0
 80a442a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a442c:	f7ff ff98 	bl	80a4360 <_Z19__fetch_global_Wirev>
 80a4430:	f7fe fa19 	bl	80a2866 <_ZN7TwoWire9isEnabledEv>
 80a4434:	b108      	cbz	r0, 80a443a <pinAvailable+0x26>
 80a4436:	2c01      	cmp	r4, #1
 80a4438:	d9f6      	bls.n	80a4428 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a443a:	f7ff fedb 	bl	80a41f4 <_Z22__fetch_global_Serial1v>
 80a443e:	f7ff fed5 	bl	80a41ec <_ZN11USARTSerial9isEnabledEv>
 80a4442:	b118      	cbz	r0, 80a444c <pinAvailable+0x38>
 80a4444:	f1a4 0312 	sub.w	r3, r4, #18
 80a4448:	2b01      	cmp	r3, #1
 80a444a:	d9ed      	bls.n	80a4428 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a444c:	2c17      	cmp	r4, #23
 80a444e:	bf8c      	ite	hi
 80a4450:	2000      	movhi	r0, #0
 80a4452:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a4454:	bd10      	pop	{r4, pc}
 80a4456:	bf00      	nop
 80a4458:	200006a4 	.word	0x200006a4

080a445c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a445c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a445e:	b538      	push	{r3, r4, r5, lr}
 80a4460:	4604      	mov	r4, r0
 80a4462:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4464:	d80a      	bhi.n	80a447c <pinMode+0x20>
 80a4466:	29ff      	cmp	r1, #255	; 0xff
 80a4468:	d008      	beq.n	80a447c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a446a:	f7ff ffd3 	bl	80a4414 <pinAvailable>
 80a446e:	b128      	cbz	r0, 80a447c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4470:	4629      	mov	r1, r5
 80a4472:	4620      	mov	r0, r4
}
 80a4474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4478:	f7fd bcfc 	b.w	80a1e74 <HAL_Pin_Mode>
 80a447c:	bd38      	pop	{r3, r4, r5, pc}

080a447e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a447e:	b538      	push	{r3, r4, r5, lr}
 80a4480:	4604      	mov	r4, r0
 80a4482:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a4484:	f7fd fcfe 	bl	80a1e84 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a4488:	28ff      	cmp	r0, #255	; 0xff
 80a448a:	d010      	beq.n	80a44ae <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a448c:	2806      	cmp	r0, #6
 80a448e:	d804      	bhi.n	80a449a <digitalWrite+0x1c>
 80a4490:	234d      	movs	r3, #77	; 0x4d
 80a4492:	fa23 f000 	lsr.w	r0, r3, r0
 80a4496:	07c3      	lsls	r3, r0, #31
 80a4498:	d409      	bmi.n	80a44ae <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a449a:	4620      	mov	r0, r4
 80a449c:	f7ff ffba 	bl	80a4414 <pinAvailable>
 80a44a0:	b128      	cbz	r0, 80a44ae <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a44a2:	4629      	mov	r1, r5
 80a44a4:	4620      	mov	r0, r4
}
 80a44a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a44aa:	f7fd bcf3 	b.w	80a1e94 <HAL_GPIO_Write>
 80a44ae:	bd38      	pop	{r3, r4, r5, pc}

080a44b0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a44b0:	b510      	push	{r4, lr}
 80a44b2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a44b4:	f7fd fce6 	bl	80a1e84 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a44b8:	3804      	subs	r0, #4
 80a44ba:	b2c0      	uxtb	r0, r0
 80a44bc:	2801      	cmp	r0, #1
 80a44be:	d908      	bls.n	80a44d2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a44c0:	4620      	mov	r0, r4
 80a44c2:	f7ff ffa7 	bl	80a4414 <pinAvailable>
 80a44c6:	b120      	cbz	r0, 80a44d2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a44c8:	4620      	mov	r0, r4
}
 80a44ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a44ce:	f7fd bce9 	b.w	80a1ea4 <HAL_GPIO_Read>
}
 80a44d2:	2000      	movs	r0, #0
 80a44d4:	bd10      	pop	{r4, pc}

080a44d6 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a44d6:	b510      	push	{r4, lr}
 80a44d8:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a44da:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a44dc:	bf9c      	itt	ls
 80a44de:	340a      	addls	r4, #10
 80a44e0:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a44e2:	4620      	mov	r0, r4
 80a44e4:	f7ff ff96 	bl	80a4414 <pinAvailable>
 80a44e8:	b150      	cbz	r0, 80a4500 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a44ea:	2103      	movs	r1, #3
 80a44ec:	4620      	mov	r0, r4
 80a44ee:	f7fd fcb9 	bl	80a1e64 <HAL_Validate_Pin_Function>
 80a44f2:	2803      	cmp	r0, #3
 80a44f4:	d104      	bne.n	80a4500 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a44f6:	4620      	mov	r0, r4
}
 80a44f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a44fc:	f7fd bcea 	b.w	80a1ed4 <HAL_ADC_Read>
}
 80a4500:	2000      	movs	r0, #0
 80a4502:	bd10      	pop	{r4, pc}

080a4504 <__aeabi_atexit>:
 80a4504:	460b      	mov	r3, r1
 80a4506:	4601      	mov	r1, r0
 80a4508:	4618      	mov	r0, r3
 80a450a:	f001 b8af 	b.w	80a566c <__cxa_atexit>
	...

080a4510 <_ZSt15get_new_handlerv>:
 80a4510:	4b02      	ldr	r3, [pc, #8]	; (80a451c <_ZSt15get_new_handlerv+0xc>)
 80a4512:	6818      	ldr	r0, [r3, #0]
 80a4514:	f3bf 8f5f 	dmb	sy
 80a4518:	4770      	bx	lr
 80a451a:	bf00      	nop
 80a451c:	200006c4 	.word	0x200006c4

080a4520 <_ZdlPvj>:
 80a4520:	f7fb bdbf 	b.w	80a00a2 <_ZdlPv>

080a4524 <_ZnwjRKSt9nothrow_t>:
 80a4524:	b510      	push	{r4, lr}
 80a4526:	2800      	cmp	r0, #0
 80a4528:	bf14      	ite	ne
 80a452a:	4604      	movne	r4, r0
 80a452c:	2401      	moveq	r4, #1
 80a452e:	4620      	mov	r0, r4
 80a4530:	f7fd fd9c 	bl	80a206c <malloc>
 80a4534:	b920      	cbnz	r0, 80a4540 <_ZnwjRKSt9nothrow_t+0x1c>
 80a4536:	f7ff ffeb 	bl	80a4510 <_ZSt15get_new_handlerv>
 80a453a:	b108      	cbz	r0, 80a4540 <_ZnwjRKSt9nothrow_t+0x1c>
 80a453c:	4780      	blx	r0
 80a453e:	e7f6      	b.n	80a452e <_ZnwjRKSt9nothrow_t+0xa>
 80a4540:	bd10      	pop	{r4, pc}

080a4542 <_ZSt17__throw_bad_allocv>:
 80a4542:	b508      	push	{r3, lr}
 80a4544:	f7fd fdda 	bl	80a20fc <abort>

080a4548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4548:	4b18      	ldr	r3, [pc, #96]	; (80a45ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a454a:	681a      	ldr	r2, [r3, #0]
 80a454c:	07d1      	lsls	r1, r2, #31
 80a454e:	bf5c      	itt	pl
 80a4550:	2201      	movpl	r2, #1
 80a4552:	601a      	strpl	r2, [r3, #0]
 80a4554:	4b16      	ldr	r3, [pc, #88]	; (80a45b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a4556:	681a      	ldr	r2, [r3, #0]
 80a4558:	07d2      	lsls	r2, r2, #31
 80a455a:	bf5c      	itt	pl
 80a455c:	2201      	movpl	r2, #1
 80a455e:	601a      	strpl	r2, [r3, #0]
 80a4560:	4b14      	ldr	r3, [pc, #80]	; (80a45b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a4562:	681a      	ldr	r2, [r3, #0]
 80a4564:	07d0      	lsls	r0, r2, #31
 80a4566:	bf5c      	itt	pl
 80a4568:	2201      	movpl	r2, #1
 80a456a:	601a      	strpl	r2, [r3, #0]
 80a456c:	4b12      	ldr	r3, [pc, #72]	; (80a45b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a456e:	681a      	ldr	r2, [r3, #0]
 80a4570:	07d1      	lsls	r1, r2, #31
 80a4572:	bf5c      	itt	pl
 80a4574:	2201      	movpl	r2, #1
 80a4576:	601a      	strpl	r2, [r3, #0]
 80a4578:	4b10      	ldr	r3, [pc, #64]	; (80a45bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a457a:	681a      	ldr	r2, [r3, #0]
 80a457c:	07d2      	lsls	r2, r2, #31
 80a457e:	bf5c      	itt	pl
 80a4580:	2201      	movpl	r2, #1
 80a4582:	601a      	strpl	r2, [r3, #0]
 80a4584:	4b0e      	ldr	r3, [pc, #56]	; (80a45c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a4586:	681a      	ldr	r2, [r3, #0]
 80a4588:	07d0      	lsls	r0, r2, #31
 80a458a:	bf5c      	itt	pl
 80a458c:	2201      	movpl	r2, #1
 80a458e:	601a      	strpl	r2, [r3, #0]
 80a4590:	4b0c      	ldr	r3, [pc, #48]	; (80a45c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a4592:	681a      	ldr	r2, [r3, #0]
 80a4594:	07d1      	lsls	r1, r2, #31
 80a4596:	bf5c      	itt	pl
 80a4598:	2201      	movpl	r2, #1
 80a459a:	601a      	strpl	r2, [r3, #0]
 80a459c:	4b0a      	ldr	r3, [pc, #40]	; (80a45c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a459e:	681a      	ldr	r2, [r3, #0]
 80a45a0:	07d2      	lsls	r2, r2, #31
 80a45a2:	bf5c      	itt	pl
 80a45a4:	2201      	movpl	r2, #1
 80a45a6:	601a      	strpl	r2, [r3, #0]
 80a45a8:	4770      	bx	lr
 80a45aa:	bf00      	nop
 80a45ac:	200006e4 	.word	0x200006e4
 80a45b0:	200006e0 	.word	0x200006e0
 80a45b4:	200006dc 	.word	0x200006dc
 80a45b8:	200006d8 	.word	0x200006d8
 80a45bc:	200006d4 	.word	0x200006d4
 80a45c0:	200006d0 	.word	0x200006d0
 80a45c4:	200006cc 	.word	0x200006cc
 80a45c8:	200006c8 	.word	0x200006c8

080a45cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a45cc:	4b24      	ldr	r3, [pc, #144]	; (80a4660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a45ce:	681a      	ldr	r2, [r3, #0]
 80a45d0:	07d0      	lsls	r0, r2, #31
 80a45d2:	bf5c      	itt	pl
 80a45d4:	2201      	movpl	r2, #1
 80a45d6:	601a      	strpl	r2, [r3, #0]
 80a45d8:	4b22      	ldr	r3, [pc, #136]	; (80a4664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a45da:	681a      	ldr	r2, [r3, #0]
 80a45dc:	07d1      	lsls	r1, r2, #31
 80a45de:	bf5c      	itt	pl
 80a45e0:	2201      	movpl	r2, #1
 80a45e2:	601a      	strpl	r2, [r3, #0]
 80a45e4:	4b20      	ldr	r3, [pc, #128]	; (80a4668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a45e6:	681a      	ldr	r2, [r3, #0]
 80a45e8:	07d2      	lsls	r2, r2, #31
 80a45ea:	bf5c      	itt	pl
 80a45ec:	2201      	movpl	r2, #1
 80a45ee:	601a      	strpl	r2, [r3, #0]
 80a45f0:	4b1e      	ldr	r3, [pc, #120]	; (80a466c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a45f2:	681a      	ldr	r2, [r3, #0]
 80a45f4:	07d0      	lsls	r0, r2, #31
 80a45f6:	bf5c      	itt	pl
 80a45f8:	2201      	movpl	r2, #1
 80a45fa:	601a      	strpl	r2, [r3, #0]
 80a45fc:	4b1c      	ldr	r3, [pc, #112]	; (80a4670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a45fe:	681a      	ldr	r2, [r3, #0]
 80a4600:	07d1      	lsls	r1, r2, #31
 80a4602:	bf5c      	itt	pl
 80a4604:	2201      	movpl	r2, #1
 80a4606:	601a      	strpl	r2, [r3, #0]
 80a4608:	4b1a      	ldr	r3, [pc, #104]	; (80a4674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a460a:	681a      	ldr	r2, [r3, #0]
 80a460c:	07d2      	lsls	r2, r2, #31
 80a460e:	bf5c      	itt	pl
 80a4610:	2201      	movpl	r2, #1
 80a4612:	601a      	strpl	r2, [r3, #0]
 80a4614:	4b18      	ldr	r3, [pc, #96]	; (80a4678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a4616:	681a      	ldr	r2, [r3, #0]
 80a4618:	07d0      	lsls	r0, r2, #31
 80a461a:	bf5c      	itt	pl
 80a461c:	2201      	movpl	r2, #1
 80a461e:	601a      	strpl	r2, [r3, #0]
 80a4620:	4b16      	ldr	r3, [pc, #88]	; (80a467c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a4622:	681a      	ldr	r2, [r3, #0]
 80a4624:	07d1      	lsls	r1, r2, #31
 80a4626:	bf5c      	itt	pl
 80a4628:	2201      	movpl	r2, #1
 80a462a:	601a      	strpl	r2, [r3, #0]
 80a462c:	4b14      	ldr	r3, [pc, #80]	; (80a4680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a462e:	681a      	ldr	r2, [r3, #0]
 80a4630:	07d2      	lsls	r2, r2, #31
 80a4632:	bf5c      	itt	pl
 80a4634:	2201      	movpl	r2, #1
 80a4636:	601a      	strpl	r2, [r3, #0]
 80a4638:	4b12      	ldr	r3, [pc, #72]	; (80a4684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a463a:	681a      	ldr	r2, [r3, #0]
 80a463c:	07d0      	lsls	r0, r2, #31
 80a463e:	bf5c      	itt	pl
 80a4640:	2201      	movpl	r2, #1
 80a4642:	601a      	strpl	r2, [r3, #0]
 80a4644:	4b10      	ldr	r3, [pc, #64]	; (80a4688 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a4646:	681a      	ldr	r2, [r3, #0]
 80a4648:	07d1      	lsls	r1, r2, #31
 80a464a:	bf5c      	itt	pl
 80a464c:	2201      	movpl	r2, #1
 80a464e:	601a      	strpl	r2, [r3, #0]
 80a4650:	4b0e      	ldr	r3, [pc, #56]	; (80a468c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a4652:	681a      	ldr	r2, [r3, #0]
 80a4654:	07d2      	lsls	r2, r2, #31
 80a4656:	bf5c      	itt	pl
 80a4658:	2201      	movpl	r2, #1
 80a465a:	601a      	strpl	r2, [r3, #0]
 80a465c:	4770      	bx	lr
 80a465e:	bf00      	nop
 80a4660:	20000714 	.word	0x20000714
 80a4664:	20000710 	.word	0x20000710
 80a4668:	2000070c 	.word	0x2000070c
 80a466c:	20000708 	.word	0x20000708
 80a4670:	20000704 	.word	0x20000704
 80a4674:	20000700 	.word	0x20000700
 80a4678:	200006fc 	.word	0x200006fc
 80a467c:	200006f8 	.word	0x200006f8
 80a4680:	200006f4 	.word	0x200006f4
 80a4684:	200006f0 	.word	0x200006f0
 80a4688:	200006ec 	.word	0x200006ec
 80a468c:	200006e8 	.word	0x200006e8

080a4690 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a4690:	4b24      	ldr	r3, [pc, #144]	; (80a4724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a4692:	681a      	ldr	r2, [r3, #0]
 80a4694:	07d0      	lsls	r0, r2, #31
 80a4696:	bf5c      	itt	pl
 80a4698:	2201      	movpl	r2, #1
 80a469a:	601a      	strpl	r2, [r3, #0]
 80a469c:	4b22      	ldr	r3, [pc, #136]	; (80a4728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a469e:	681a      	ldr	r2, [r3, #0]
 80a46a0:	07d1      	lsls	r1, r2, #31
 80a46a2:	bf5c      	itt	pl
 80a46a4:	2201      	movpl	r2, #1
 80a46a6:	601a      	strpl	r2, [r3, #0]
 80a46a8:	4b20      	ldr	r3, [pc, #128]	; (80a472c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a46aa:	681a      	ldr	r2, [r3, #0]
 80a46ac:	07d2      	lsls	r2, r2, #31
 80a46ae:	bf5c      	itt	pl
 80a46b0:	2201      	movpl	r2, #1
 80a46b2:	601a      	strpl	r2, [r3, #0]
 80a46b4:	4b1e      	ldr	r3, [pc, #120]	; (80a4730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a46b6:	681a      	ldr	r2, [r3, #0]
 80a46b8:	07d0      	lsls	r0, r2, #31
 80a46ba:	bf5c      	itt	pl
 80a46bc:	2201      	movpl	r2, #1
 80a46be:	601a      	strpl	r2, [r3, #0]
 80a46c0:	4b1c      	ldr	r3, [pc, #112]	; (80a4734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a46c2:	681a      	ldr	r2, [r3, #0]
 80a46c4:	07d1      	lsls	r1, r2, #31
 80a46c6:	bf5c      	itt	pl
 80a46c8:	2201      	movpl	r2, #1
 80a46ca:	601a      	strpl	r2, [r3, #0]
 80a46cc:	4b1a      	ldr	r3, [pc, #104]	; (80a4738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a46ce:	681a      	ldr	r2, [r3, #0]
 80a46d0:	07d2      	lsls	r2, r2, #31
 80a46d2:	bf5c      	itt	pl
 80a46d4:	2201      	movpl	r2, #1
 80a46d6:	601a      	strpl	r2, [r3, #0]
 80a46d8:	4b18      	ldr	r3, [pc, #96]	; (80a473c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a46da:	681a      	ldr	r2, [r3, #0]
 80a46dc:	07d0      	lsls	r0, r2, #31
 80a46de:	bf5c      	itt	pl
 80a46e0:	2201      	movpl	r2, #1
 80a46e2:	601a      	strpl	r2, [r3, #0]
 80a46e4:	4b16      	ldr	r3, [pc, #88]	; (80a4740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a46e6:	681a      	ldr	r2, [r3, #0]
 80a46e8:	07d1      	lsls	r1, r2, #31
 80a46ea:	bf5c      	itt	pl
 80a46ec:	2201      	movpl	r2, #1
 80a46ee:	601a      	strpl	r2, [r3, #0]
 80a46f0:	4b14      	ldr	r3, [pc, #80]	; (80a4744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a46f2:	681a      	ldr	r2, [r3, #0]
 80a46f4:	07d2      	lsls	r2, r2, #31
 80a46f6:	bf5c      	itt	pl
 80a46f8:	2201      	movpl	r2, #1
 80a46fa:	601a      	strpl	r2, [r3, #0]
 80a46fc:	4b12      	ldr	r3, [pc, #72]	; (80a4748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a46fe:	681a      	ldr	r2, [r3, #0]
 80a4700:	07d0      	lsls	r0, r2, #31
 80a4702:	bf5c      	itt	pl
 80a4704:	2201      	movpl	r2, #1
 80a4706:	601a      	strpl	r2, [r3, #0]
 80a4708:	4b10      	ldr	r3, [pc, #64]	; (80a474c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a470a:	681a      	ldr	r2, [r3, #0]
 80a470c:	07d1      	lsls	r1, r2, #31
 80a470e:	bf5c      	itt	pl
 80a4710:	2201      	movpl	r2, #1
 80a4712:	601a      	strpl	r2, [r3, #0]
 80a4714:	4b0e      	ldr	r3, [pc, #56]	; (80a4750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a4716:	681a      	ldr	r2, [r3, #0]
 80a4718:	07d2      	lsls	r2, r2, #31
 80a471a:	bf5c      	itt	pl
 80a471c:	2201      	movpl	r2, #1
 80a471e:	601a      	strpl	r2, [r3, #0]
 80a4720:	4770      	bx	lr
 80a4722:	bf00      	nop
 80a4724:	20000744 	.word	0x20000744
 80a4728:	20000740 	.word	0x20000740
 80a472c:	2000073c 	.word	0x2000073c
 80a4730:	20000738 	.word	0x20000738
 80a4734:	20000734 	.word	0x20000734
 80a4738:	20000730 	.word	0x20000730
 80a473c:	2000072c 	.word	0x2000072c
 80a4740:	20000728 	.word	0x20000728
 80a4744:	20000724 	.word	0x20000724
 80a4748:	20000720 	.word	0x20000720
 80a474c:	2000071c 	.word	0x2000071c
 80a4750:	20000718 	.word	0x20000718

080a4754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4754:	4b18      	ldr	r3, [pc, #96]	; (80a47b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a4756:	681a      	ldr	r2, [r3, #0]
 80a4758:	07d1      	lsls	r1, r2, #31
 80a475a:	bf5c      	itt	pl
 80a475c:	2201      	movpl	r2, #1
 80a475e:	601a      	strpl	r2, [r3, #0]
 80a4760:	4b16      	ldr	r3, [pc, #88]	; (80a47bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a4762:	681a      	ldr	r2, [r3, #0]
 80a4764:	07d2      	lsls	r2, r2, #31
 80a4766:	bf5c      	itt	pl
 80a4768:	2201      	movpl	r2, #1
 80a476a:	601a      	strpl	r2, [r3, #0]
 80a476c:	4b14      	ldr	r3, [pc, #80]	; (80a47c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a476e:	681a      	ldr	r2, [r3, #0]
 80a4770:	07d0      	lsls	r0, r2, #31
 80a4772:	bf5c      	itt	pl
 80a4774:	2201      	movpl	r2, #1
 80a4776:	601a      	strpl	r2, [r3, #0]
 80a4778:	4b12      	ldr	r3, [pc, #72]	; (80a47c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a477a:	681a      	ldr	r2, [r3, #0]
 80a477c:	07d1      	lsls	r1, r2, #31
 80a477e:	bf5c      	itt	pl
 80a4780:	2201      	movpl	r2, #1
 80a4782:	601a      	strpl	r2, [r3, #0]
 80a4784:	4b10      	ldr	r3, [pc, #64]	; (80a47c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a4786:	681a      	ldr	r2, [r3, #0]
 80a4788:	07d2      	lsls	r2, r2, #31
 80a478a:	bf5c      	itt	pl
 80a478c:	2201      	movpl	r2, #1
 80a478e:	601a      	strpl	r2, [r3, #0]
 80a4790:	4b0e      	ldr	r3, [pc, #56]	; (80a47cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a4792:	681a      	ldr	r2, [r3, #0]
 80a4794:	07d0      	lsls	r0, r2, #31
 80a4796:	bf5c      	itt	pl
 80a4798:	2201      	movpl	r2, #1
 80a479a:	601a      	strpl	r2, [r3, #0]
 80a479c:	4b0c      	ldr	r3, [pc, #48]	; (80a47d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a479e:	681a      	ldr	r2, [r3, #0]
 80a47a0:	07d1      	lsls	r1, r2, #31
 80a47a2:	bf5c      	itt	pl
 80a47a4:	2201      	movpl	r2, #1
 80a47a6:	601a      	strpl	r2, [r3, #0]
 80a47a8:	4b0a      	ldr	r3, [pc, #40]	; (80a47d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a47aa:	681a      	ldr	r2, [r3, #0]
 80a47ac:	07d2      	lsls	r2, r2, #31
 80a47ae:	bf5c      	itt	pl
 80a47b0:	2201      	movpl	r2, #1
 80a47b2:	601a      	strpl	r2, [r3, #0]
 80a47b4:	4770      	bx	lr
 80a47b6:	bf00      	nop
 80a47b8:	20000764 	.word	0x20000764
 80a47bc:	20000760 	.word	0x20000760
 80a47c0:	2000075c 	.word	0x2000075c
 80a47c4:	20000758 	.word	0x20000758
 80a47c8:	20000754 	.word	0x20000754
 80a47cc:	20000750 	.word	0x20000750
 80a47d0:	2000074c 	.word	0x2000074c
 80a47d4:	20000748 	.word	0x20000748

080a47d8 <__aeabi_drsub>:
 80a47d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a47dc:	e002      	b.n	80a47e4 <__adddf3>
 80a47de:	bf00      	nop

080a47e0 <__aeabi_dsub>:
 80a47e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a47e4 <__adddf3>:
 80a47e4:	b530      	push	{r4, r5, lr}
 80a47e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a47ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a47ee:	ea94 0f05 	teq	r4, r5
 80a47f2:	bf08      	it	eq
 80a47f4:	ea90 0f02 	teqeq	r0, r2
 80a47f8:	bf1f      	itttt	ne
 80a47fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a47fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a4802:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a4806:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a480a:	f000 80e2 	beq.w	80a49d2 <__adddf3+0x1ee>
 80a480e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a4812:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a4816:	bfb8      	it	lt
 80a4818:	426d      	neglt	r5, r5
 80a481a:	dd0c      	ble.n	80a4836 <__adddf3+0x52>
 80a481c:	442c      	add	r4, r5
 80a481e:	ea80 0202 	eor.w	r2, r0, r2
 80a4822:	ea81 0303 	eor.w	r3, r1, r3
 80a4826:	ea82 0000 	eor.w	r0, r2, r0
 80a482a:	ea83 0101 	eor.w	r1, r3, r1
 80a482e:	ea80 0202 	eor.w	r2, r0, r2
 80a4832:	ea81 0303 	eor.w	r3, r1, r3
 80a4836:	2d36      	cmp	r5, #54	; 0x36
 80a4838:	bf88      	it	hi
 80a483a:	bd30      	pophi	{r4, r5, pc}
 80a483c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4844:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a4848:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a484c:	d002      	beq.n	80a4854 <__adddf3+0x70>
 80a484e:	4240      	negs	r0, r0
 80a4850:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4854:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a4858:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a485c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a4860:	d002      	beq.n	80a4868 <__adddf3+0x84>
 80a4862:	4252      	negs	r2, r2
 80a4864:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4868:	ea94 0f05 	teq	r4, r5
 80a486c:	f000 80a7 	beq.w	80a49be <__adddf3+0x1da>
 80a4870:	f1a4 0401 	sub.w	r4, r4, #1
 80a4874:	f1d5 0e20 	rsbs	lr, r5, #32
 80a4878:	db0d      	blt.n	80a4896 <__adddf3+0xb2>
 80a487a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a487e:	fa22 f205 	lsr.w	r2, r2, r5
 80a4882:	1880      	adds	r0, r0, r2
 80a4884:	f141 0100 	adc.w	r1, r1, #0
 80a4888:	fa03 f20e 	lsl.w	r2, r3, lr
 80a488c:	1880      	adds	r0, r0, r2
 80a488e:	fa43 f305 	asr.w	r3, r3, r5
 80a4892:	4159      	adcs	r1, r3
 80a4894:	e00e      	b.n	80a48b4 <__adddf3+0xd0>
 80a4896:	f1a5 0520 	sub.w	r5, r5, #32
 80a489a:	f10e 0e20 	add.w	lr, lr, #32
 80a489e:	2a01      	cmp	r2, #1
 80a48a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a48a4:	bf28      	it	cs
 80a48a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a48aa:	fa43 f305 	asr.w	r3, r3, r5
 80a48ae:	18c0      	adds	r0, r0, r3
 80a48b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a48b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a48b8:	d507      	bpl.n	80a48ca <__adddf3+0xe6>
 80a48ba:	f04f 0e00 	mov.w	lr, #0
 80a48be:	f1dc 0c00 	rsbs	ip, ip, #0
 80a48c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a48c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a48ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a48ce:	d31b      	bcc.n	80a4908 <__adddf3+0x124>
 80a48d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a48d4:	d30c      	bcc.n	80a48f0 <__adddf3+0x10c>
 80a48d6:	0849      	lsrs	r1, r1, #1
 80a48d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a48dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a48e0:	f104 0401 	add.w	r4, r4, #1
 80a48e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a48e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a48ec:	f080 809a 	bcs.w	80a4a24 <__adddf3+0x240>
 80a48f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a48f4:	bf08      	it	eq
 80a48f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a48fa:	f150 0000 	adcs.w	r0, r0, #0
 80a48fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4902:	ea41 0105 	orr.w	r1, r1, r5
 80a4906:	bd30      	pop	{r4, r5, pc}
 80a4908:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a490c:	4140      	adcs	r0, r0
 80a490e:	eb41 0101 	adc.w	r1, r1, r1
 80a4912:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4916:	f1a4 0401 	sub.w	r4, r4, #1
 80a491a:	d1e9      	bne.n	80a48f0 <__adddf3+0x10c>
 80a491c:	f091 0f00 	teq	r1, #0
 80a4920:	bf04      	itt	eq
 80a4922:	4601      	moveq	r1, r0
 80a4924:	2000      	moveq	r0, #0
 80a4926:	fab1 f381 	clz	r3, r1
 80a492a:	bf08      	it	eq
 80a492c:	3320      	addeq	r3, #32
 80a492e:	f1a3 030b 	sub.w	r3, r3, #11
 80a4932:	f1b3 0220 	subs.w	r2, r3, #32
 80a4936:	da0c      	bge.n	80a4952 <__adddf3+0x16e>
 80a4938:	320c      	adds	r2, #12
 80a493a:	dd08      	ble.n	80a494e <__adddf3+0x16a>
 80a493c:	f102 0c14 	add.w	ip, r2, #20
 80a4940:	f1c2 020c 	rsb	r2, r2, #12
 80a4944:	fa01 f00c 	lsl.w	r0, r1, ip
 80a4948:	fa21 f102 	lsr.w	r1, r1, r2
 80a494c:	e00c      	b.n	80a4968 <__adddf3+0x184>
 80a494e:	f102 0214 	add.w	r2, r2, #20
 80a4952:	bfd8      	it	le
 80a4954:	f1c2 0c20 	rsble	ip, r2, #32
 80a4958:	fa01 f102 	lsl.w	r1, r1, r2
 80a495c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a4960:	bfdc      	itt	le
 80a4962:	ea41 010c 	orrle.w	r1, r1, ip
 80a4966:	4090      	lslle	r0, r2
 80a4968:	1ae4      	subs	r4, r4, r3
 80a496a:	bfa2      	ittt	ge
 80a496c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a4970:	4329      	orrge	r1, r5
 80a4972:	bd30      	popge	{r4, r5, pc}
 80a4974:	ea6f 0404 	mvn.w	r4, r4
 80a4978:	3c1f      	subs	r4, #31
 80a497a:	da1c      	bge.n	80a49b6 <__adddf3+0x1d2>
 80a497c:	340c      	adds	r4, #12
 80a497e:	dc0e      	bgt.n	80a499e <__adddf3+0x1ba>
 80a4980:	f104 0414 	add.w	r4, r4, #20
 80a4984:	f1c4 0220 	rsb	r2, r4, #32
 80a4988:	fa20 f004 	lsr.w	r0, r0, r4
 80a498c:	fa01 f302 	lsl.w	r3, r1, r2
 80a4990:	ea40 0003 	orr.w	r0, r0, r3
 80a4994:	fa21 f304 	lsr.w	r3, r1, r4
 80a4998:	ea45 0103 	orr.w	r1, r5, r3
 80a499c:	bd30      	pop	{r4, r5, pc}
 80a499e:	f1c4 040c 	rsb	r4, r4, #12
 80a49a2:	f1c4 0220 	rsb	r2, r4, #32
 80a49a6:	fa20 f002 	lsr.w	r0, r0, r2
 80a49aa:	fa01 f304 	lsl.w	r3, r1, r4
 80a49ae:	ea40 0003 	orr.w	r0, r0, r3
 80a49b2:	4629      	mov	r1, r5
 80a49b4:	bd30      	pop	{r4, r5, pc}
 80a49b6:	fa21 f004 	lsr.w	r0, r1, r4
 80a49ba:	4629      	mov	r1, r5
 80a49bc:	bd30      	pop	{r4, r5, pc}
 80a49be:	f094 0f00 	teq	r4, #0
 80a49c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a49c6:	bf06      	itte	eq
 80a49c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a49cc:	3401      	addeq	r4, #1
 80a49ce:	3d01      	subne	r5, #1
 80a49d0:	e74e      	b.n	80a4870 <__adddf3+0x8c>
 80a49d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a49d6:	bf18      	it	ne
 80a49d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a49dc:	d029      	beq.n	80a4a32 <__adddf3+0x24e>
 80a49de:	ea94 0f05 	teq	r4, r5
 80a49e2:	bf08      	it	eq
 80a49e4:	ea90 0f02 	teqeq	r0, r2
 80a49e8:	d005      	beq.n	80a49f6 <__adddf3+0x212>
 80a49ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80a49ee:	bf04      	itt	eq
 80a49f0:	4619      	moveq	r1, r3
 80a49f2:	4610      	moveq	r0, r2
 80a49f4:	bd30      	pop	{r4, r5, pc}
 80a49f6:	ea91 0f03 	teq	r1, r3
 80a49fa:	bf1e      	ittt	ne
 80a49fc:	2100      	movne	r1, #0
 80a49fe:	2000      	movne	r0, #0
 80a4a00:	bd30      	popne	{r4, r5, pc}
 80a4a02:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a4a06:	d105      	bne.n	80a4a14 <__adddf3+0x230>
 80a4a08:	0040      	lsls	r0, r0, #1
 80a4a0a:	4149      	adcs	r1, r1
 80a4a0c:	bf28      	it	cs
 80a4a0e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a4a12:	bd30      	pop	{r4, r5, pc}
 80a4a14:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a4a18:	bf3c      	itt	cc
 80a4a1a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a4a1e:	bd30      	popcc	{r4, r5, pc}
 80a4a20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4a24:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a4a28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4a2c:	f04f 0000 	mov.w	r0, #0
 80a4a30:	bd30      	pop	{r4, r5, pc}
 80a4a32:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a4a36:	bf1a      	itte	ne
 80a4a38:	4619      	movne	r1, r3
 80a4a3a:	4610      	movne	r0, r2
 80a4a3c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a4a40:	bf1c      	itt	ne
 80a4a42:	460b      	movne	r3, r1
 80a4a44:	4602      	movne	r2, r0
 80a4a46:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4a4a:	bf06      	itte	eq
 80a4a4c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a4a50:	ea91 0f03 	teqeq	r1, r3
 80a4a54:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a4a58:	bd30      	pop	{r4, r5, pc}
 80a4a5a:	bf00      	nop

080a4a5c <__aeabi_ui2d>:
 80a4a5c:	f090 0f00 	teq	r0, #0
 80a4a60:	bf04      	itt	eq
 80a4a62:	2100      	moveq	r1, #0
 80a4a64:	4770      	bxeq	lr
 80a4a66:	b530      	push	{r4, r5, lr}
 80a4a68:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4a6c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4a70:	f04f 0500 	mov.w	r5, #0
 80a4a74:	f04f 0100 	mov.w	r1, #0
 80a4a78:	e750      	b.n	80a491c <__adddf3+0x138>
 80a4a7a:	bf00      	nop

080a4a7c <__aeabi_i2d>:
 80a4a7c:	f090 0f00 	teq	r0, #0
 80a4a80:	bf04      	itt	eq
 80a4a82:	2100      	moveq	r1, #0
 80a4a84:	4770      	bxeq	lr
 80a4a86:	b530      	push	{r4, r5, lr}
 80a4a88:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4a8c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4a90:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a4a94:	bf48      	it	mi
 80a4a96:	4240      	negmi	r0, r0
 80a4a98:	f04f 0100 	mov.w	r1, #0
 80a4a9c:	e73e      	b.n	80a491c <__adddf3+0x138>
 80a4a9e:	bf00      	nop

080a4aa0 <__aeabi_f2d>:
 80a4aa0:	0042      	lsls	r2, r0, #1
 80a4aa2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a4aa6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4aaa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a4aae:	bf1f      	itttt	ne
 80a4ab0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a4ab4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4ab8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a4abc:	4770      	bxne	lr
 80a4abe:	f092 0f00 	teq	r2, #0
 80a4ac2:	bf14      	ite	ne
 80a4ac4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a4ac8:	4770      	bxeq	lr
 80a4aca:	b530      	push	{r4, r5, lr}
 80a4acc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a4ad0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4ad4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4ad8:	e720      	b.n	80a491c <__adddf3+0x138>
 80a4ada:	bf00      	nop

080a4adc <__aeabi_ul2d>:
 80a4adc:	ea50 0201 	orrs.w	r2, r0, r1
 80a4ae0:	bf08      	it	eq
 80a4ae2:	4770      	bxeq	lr
 80a4ae4:	b530      	push	{r4, r5, lr}
 80a4ae6:	f04f 0500 	mov.w	r5, #0
 80a4aea:	e00a      	b.n	80a4b02 <__aeabi_l2d+0x16>

080a4aec <__aeabi_l2d>:
 80a4aec:	ea50 0201 	orrs.w	r2, r0, r1
 80a4af0:	bf08      	it	eq
 80a4af2:	4770      	bxeq	lr
 80a4af4:	b530      	push	{r4, r5, lr}
 80a4af6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a4afa:	d502      	bpl.n	80a4b02 <__aeabi_l2d+0x16>
 80a4afc:	4240      	negs	r0, r0
 80a4afe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4b02:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4b06:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a4b0a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a4b0e:	f43f aedc 	beq.w	80a48ca <__adddf3+0xe6>
 80a4b12:	f04f 0203 	mov.w	r2, #3
 80a4b16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4b1a:	bf18      	it	ne
 80a4b1c:	3203      	addne	r2, #3
 80a4b1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4b22:	bf18      	it	ne
 80a4b24:	3203      	addne	r2, #3
 80a4b26:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a4b2a:	f1c2 0320 	rsb	r3, r2, #32
 80a4b2e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a4b32:	fa20 f002 	lsr.w	r0, r0, r2
 80a4b36:	fa01 fe03 	lsl.w	lr, r1, r3
 80a4b3a:	ea40 000e 	orr.w	r0, r0, lr
 80a4b3e:	fa21 f102 	lsr.w	r1, r1, r2
 80a4b42:	4414      	add	r4, r2
 80a4b44:	e6c1      	b.n	80a48ca <__adddf3+0xe6>
 80a4b46:	bf00      	nop

080a4b48 <__aeabi_dmul>:
 80a4b48:	b570      	push	{r4, r5, r6, lr}
 80a4b4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4b4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4b52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4b56:	bf1d      	ittte	ne
 80a4b58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4b5c:	ea94 0f0c 	teqne	r4, ip
 80a4b60:	ea95 0f0c 	teqne	r5, ip
 80a4b64:	f000 f8de 	bleq	80a4d24 <__aeabi_dmul+0x1dc>
 80a4b68:	442c      	add	r4, r5
 80a4b6a:	ea81 0603 	eor.w	r6, r1, r3
 80a4b6e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a4b72:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a4b76:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a4b7a:	bf18      	it	ne
 80a4b7c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a4b80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4b84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a4b88:	d038      	beq.n	80a4bfc <__aeabi_dmul+0xb4>
 80a4b8a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a4b8e:	f04f 0500 	mov.w	r5, #0
 80a4b92:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a4b96:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a4b9a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a4b9e:	f04f 0600 	mov.w	r6, #0
 80a4ba2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a4ba6:	f09c 0f00 	teq	ip, #0
 80a4baa:	bf18      	it	ne
 80a4bac:	f04e 0e01 	orrne.w	lr, lr, #1
 80a4bb0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a4bb4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a4bb8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a4bbc:	d204      	bcs.n	80a4bc8 <__aeabi_dmul+0x80>
 80a4bbe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a4bc2:	416d      	adcs	r5, r5
 80a4bc4:	eb46 0606 	adc.w	r6, r6, r6
 80a4bc8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a4bcc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a4bd0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4bd4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4bd8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a4bdc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4be0:	bf88      	it	hi
 80a4be2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4be6:	d81e      	bhi.n	80a4c26 <__aeabi_dmul+0xde>
 80a4be8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a4bec:	bf08      	it	eq
 80a4bee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a4bf2:	f150 0000 	adcs.w	r0, r0, #0
 80a4bf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4bfa:	bd70      	pop	{r4, r5, r6, pc}
 80a4bfc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a4c00:	ea46 0101 	orr.w	r1, r6, r1
 80a4c04:	ea40 0002 	orr.w	r0, r0, r2
 80a4c08:	ea81 0103 	eor.w	r1, r1, r3
 80a4c0c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a4c10:	bfc2      	ittt	gt
 80a4c12:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4c16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4c1a:	bd70      	popgt	{r4, r5, r6, pc}
 80a4c1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4c20:	f04f 0e00 	mov.w	lr, #0
 80a4c24:	3c01      	subs	r4, #1
 80a4c26:	f300 80ab 	bgt.w	80a4d80 <__aeabi_dmul+0x238>
 80a4c2a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a4c2e:	bfde      	ittt	le
 80a4c30:	2000      	movle	r0, #0
 80a4c32:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a4c36:	bd70      	pople	{r4, r5, r6, pc}
 80a4c38:	f1c4 0400 	rsb	r4, r4, #0
 80a4c3c:	3c20      	subs	r4, #32
 80a4c3e:	da35      	bge.n	80a4cac <__aeabi_dmul+0x164>
 80a4c40:	340c      	adds	r4, #12
 80a4c42:	dc1b      	bgt.n	80a4c7c <__aeabi_dmul+0x134>
 80a4c44:	f104 0414 	add.w	r4, r4, #20
 80a4c48:	f1c4 0520 	rsb	r5, r4, #32
 80a4c4c:	fa00 f305 	lsl.w	r3, r0, r5
 80a4c50:	fa20 f004 	lsr.w	r0, r0, r4
 80a4c54:	fa01 f205 	lsl.w	r2, r1, r5
 80a4c58:	ea40 0002 	orr.w	r0, r0, r2
 80a4c5c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4c60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4c64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4c68:	fa21 f604 	lsr.w	r6, r1, r4
 80a4c6c:	eb42 0106 	adc.w	r1, r2, r6
 80a4c70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4c74:	bf08      	it	eq
 80a4c76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4c7a:	bd70      	pop	{r4, r5, r6, pc}
 80a4c7c:	f1c4 040c 	rsb	r4, r4, #12
 80a4c80:	f1c4 0520 	rsb	r5, r4, #32
 80a4c84:	fa00 f304 	lsl.w	r3, r0, r4
 80a4c88:	fa20 f005 	lsr.w	r0, r0, r5
 80a4c8c:	fa01 f204 	lsl.w	r2, r1, r4
 80a4c90:	ea40 0002 	orr.w	r0, r0, r2
 80a4c94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4c98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4c9c:	f141 0100 	adc.w	r1, r1, #0
 80a4ca0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4ca4:	bf08      	it	eq
 80a4ca6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4caa:	bd70      	pop	{r4, r5, r6, pc}
 80a4cac:	f1c4 0520 	rsb	r5, r4, #32
 80a4cb0:	fa00 f205 	lsl.w	r2, r0, r5
 80a4cb4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a4cb8:	fa20 f304 	lsr.w	r3, r0, r4
 80a4cbc:	fa01 f205 	lsl.w	r2, r1, r5
 80a4cc0:	ea43 0302 	orr.w	r3, r3, r2
 80a4cc4:	fa21 f004 	lsr.w	r0, r1, r4
 80a4cc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4ccc:	fa21 f204 	lsr.w	r2, r1, r4
 80a4cd0:	ea20 0002 	bic.w	r0, r0, r2
 80a4cd4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4cd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a4cdc:	bf08      	it	eq
 80a4cde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4ce2:	bd70      	pop	{r4, r5, r6, pc}
 80a4ce4:	f094 0f00 	teq	r4, #0
 80a4ce8:	d10f      	bne.n	80a4d0a <__aeabi_dmul+0x1c2>
 80a4cea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a4cee:	0040      	lsls	r0, r0, #1
 80a4cf0:	eb41 0101 	adc.w	r1, r1, r1
 80a4cf4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4cf8:	bf08      	it	eq
 80a4cfa:	3c01      	subeq	r4, #1
 80a4cfc:	d0f7      	beq.n	80a4cee <__aeabi_dmul+0x1a6>
 80a4cfe:	ea41 0106 	orr.w	r1, r1, r6
 80a4d02:	f095 0f00 	teq	r5, #0
 80a4d06:	bf18      	it	ne
 80a4d08:	4770      	bxne	lr
 80a4d0a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a4d0e:	0052      	lsls	r2, r2, #1
 80a4d10:	eb43 0303 	adc.w	r3, r3, r3
 80a4d14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a4d18:	bf08      	it	eq
 80a4d1a:	3d01      	subeq	r5, #1
 80a4d1c:	d0f7      	beq.n	80a4d0e <__aeabi_dmul+0x1c6>
 80a4d1e:	ea43 0306 	orr.w	r3, r3, r6
 80a4d22:	4770      	bx	lr
 80a4d24:	ea94 0f0c 	teq	r4, ip
 80a4d28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4d2c:	bf18      	it	ne
 80a4d2e:	ea95 0f0c 	teqne	r5, ip
 80a4d32:	d00c      	beq.n	80a4d4e <__aeabi_dmul+0x206>
 80a4d34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4d38:	bf18      	it	ne
 80a4d3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4d3e:	d1d1      	bne.n	80a4ce4 <__aeabi_dmul+0x19c>
 80a4d40:	ea81 0103 	eor.w	r1, r1, r3
 80a4d44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4d48:	f04f 0000 	mov.w	r0, #0
 80a4d4c:	bd70      	pop	{r4, r5, r6, pc}
 80a4d4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4d52:	bf06      	itte	eq
 80a4d54:	4610      	moveq	r0, r2
 80a4d56:	4619      	moveq	r1, r3
 80a4d58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4d5c:	d019      	beq.n	80a4d92 <__aeabi_dmul+0x24a>
 80a4d5e:	ea94 0f0c 	teq	r4, ip
 80a4d62:	d102      	bne.n	80a4d6a <__aeabi_dmul+0x222>
 80a4d64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4d68:	d113      	bne.n	80a4d92 <__aeabi_dmul+0x24a>
 80a4d6a:	ea95 0f0c 	teq	r5, ip
 80a4d6e:	d105      	bne.n	80a4d7c <__aeabi_dmul+0x234>
 80a4d70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a4d74:	bf1c      	itt	ne
 80a4d76:	4610      	movne	r0, r2
 80a4d78:	4619      	movne	r1, r3
 80a4d7a:	d10a      	bne.n	80a4d92 <__aeabi_dmul+0x24a>
 80a4d7c:	ea81 0103 	eor.w	r1, r1, r3
 80a4d80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4d84:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4d88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a4d8c:	f04f 0000 	mov.w	r0, #0
 80a4d90:	bd70      	pop	{r4, r5, r6, pc}
 80a4d92:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a4d96:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a4d9a:	bd70      	pop	{r4, r5, r6, pc}

080a4d9c <__aeabi_ddiv>:
 80a4d9c:	b570      	push	{r4, r5, r6, lr}
 80a4d9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4da2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4da6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4daa:	bf1d      	ittte	ne
 80a4dac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a4db0:	ea94 0f0c 	teqne	r4, ip
 80a4db4:	ea95 0f0c 	teqne	r5, ip
 80a4db8:	f000 f8a7 	bleq	80a4f0a <__aeabi_ddiv+0x16e>
 80a4dbc:	eba4 0405 	sub.w	r4, r4, r5
 80a4dc0:	ea81 0e03 	eor.w	lr, r1, r3
 80a4dc4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4dc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4dcc:	f000 8088 	beq.w	80a4ee0 <__aeabi_ddiv+0x144>
 80a4dd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4dd4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4dd8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a4ddc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4de0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4de4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4de8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a4dec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4df0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4df4:	429d      	cmp	r5, r3
 80a4df6:	bf08      	it	eq
 80a4df8:	4296      	cmpeq	r6, r2
 80a4dfa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a4dfe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a4e02:	d202      	bcs.n	80a4e0a <__aeabi_ddiv+0x6e>
 80a4e04:	085b      	lsrs	r3, r3, #1
 80a4e06:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4e0a:	1ab6      	subs	r6, r6, r2
 80a4e0c:	eb65 0503 	sbc.w	r5, r5, r3
 80a4e10:	085b      	lsrs	r3, r3, #1
 80a4e12:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4e16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a4e1a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a4e1e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4e22:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4e26:	bf22      	ittt	cs
 80a4e28:	1ab6      	subcs	r6, r6, r2
 80a4e2a:	4675      	movcs	r5, lr
 80a4e2c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4e30:	085b      	lsrs	r3, r3, #1
 80a4e32:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4e36:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4e3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4e3e:	bf22      	ittt	cs
 80a4e40:	1ab6      	subcs	r6, r6, r2
 80a4e42:	4675      	movcs	r5, lr
 80a4e44:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4e48:	085b      	lsrs	r3, r3, #1
 80a4e4a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4e4e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4e52:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4e56:	bf22      	ittt	cs
 80a4e58:	1ab6      	subcs	r6, r6, r2
 80a4e5a:	4675      	movcs	r5, lr
 80a4e5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4e60:	085b      	lsrs	r3, r3, #1
 80a4e62:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4e66:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4e6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4e6e:	bf22      	ittt	cs
 80a4e70:	1ab6      	subcs	r6, r6, r2
 80a4e72:	4675      	movcs	r5, lr
 80a4e74:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4e78:	ea55 0e06 	orrs.w	lr, r5, r6
 80a4e7c:	d018      	beq.n	80a4eb0 <__aeabi_ddiv+0x114>
 80a4e7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a4e82:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a4e86:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a4e8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a4e8e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a4e92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a4e96:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a4e9a:	d1c0      	bne.n	80a4e1e <__aeabi_ddiv+0x82>
 80a4e9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4ea0:	d10b      	bne.n	80a4eba <__aeabi_ddiv+0x11e>
 80a4ea2:	ea41 0100 	orr.w	r1, r1, r0
 80a4ea6:	f04f 0000 	mov.w	r0, #0
 80a4eaa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a4eae:	e7b6      	b.n	80a4e1e <__aeabi_ddiv+0x82>
 80a4eb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4eb4:	bf04      	itt	eq
 80a4eb6:	4301      	orreq	r1, r0
 80a4eb8:	2000      	moveq	r0, #0
 80a4eba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4ebe:	bf88      	it	hi
 80a4ec0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4ec4:	f63f aeaf 	bhi.w	80a4c26 <__aeabi_dmul+0xde>
 80a4ec8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a4ecc:	bf04      	itt	eq
 80a4ece:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4ed2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4ed6:	f150 0000 	adcs.w	r0, r0, #0
 80a4eda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4ede:	bd70      	pop	{r4, r5, r6, pc}
 80a4ee0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4ee4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4ee8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a4eec:	bfc2      	ittt	gt
 80a4eee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4ef2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4ef6:	bd70      	popgt	{r4, r5, r6, pc}
 80a4ef8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4efc:	f04f 0e00 	mov.w	lr, #0
 80a4f00:	3c01      	subs	r4, #1
 80a4f02:	e690      	b.n	80a4c26 <__aeabi_dmul+0xde>
 80a4f04:	ea45 0e06 	orr.w	lr, r5, r6
 80a4f08:	e68d      	b.n	80a4c26 <__aeabi_dmul+0xde>
 80a4f0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a4f0e:	ea94 0f0c 	teq	r4, ip
 80a4f12:	bf08      	it	eq
 80a4f14:	ea95 0f0c 	teqeq	r5, ip
 80a4f18:	f43f af3b 	beq.w	80a4d92 <__aeabi_dmul+0x24a>
 80a4f1c:	ea94 0f0c 	teq	r4, ip
 80a4f20:	d10a      	bne.n	80a4f38 <__aeabi_ddiv+0x19c>
 80a4f22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4f26:	f47f af34 	bne.w	80a4d92 <__aeabi_dmul+0x24a>
 80a4f2a:	ea95 0f0c 	teq	r5, ip
 80a4f2e:	f47f af25 	bne.w	80a4d7c <__aeabi_dmul+0x234>
 80a4f32:	4610      	mov	r0, r2
 80a4f34:	4619      	mov	r1, r3
 80a4f36:	e72c      	b.n	80a4d92 <__aeabi_dmul+0x24a>
 80a4f38:	ea95 0f0c 	teq	r5, ip
 80a4f3c:	d106      	bne.n	80a4f4c <__aeabi_ddiv+0x1b0>
 80a4f3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4f42:	f43f aefd 	beq.w	80a4d40 <__aeabi_dmul+0x1f8>
 80a4f46:	4610      	mov	r0, r2
 80a4f48:	4619      	mov	r1, r3
 80a4f4a:	e722      	b.n	80a4d92 <__aeabi_dmul+0x24a>
 80a4f4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4f50:	bf18      	it	ne
 80a4f52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4f56:	f47f aec5 	bne.w	80a4ce4 <__aeabi_dmul+0x19c>
 80a4f5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a4f5e:	f47f af0d 	bne.w	80a4d7c <__aeabi_dmul+0x234>
 80a4f62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4f66:	f47f aeeb 	bne.w	80a4d40 <__aeabi_dmul+0x1f8>
 80a4f6a:	e712      	b.n	80a4d92 <__aeabi_dmul+0x24a>

080a4f6c <__gedf2>:
 80a4f6c:	f04f 3cff 	mov.w	ip, #4294967295
 80a4f70:	e006      	b.n	80a4f80 <__cmpdf2+0x4>
 80a4f72:	bf00      	nop

080a4f74 <__ledf2>:
 80a4f74:	f04f 0c01 	mov.w	ip, #1
 80a4f78:	e002      	b.n	80a4f80 <__cmpdf2+0x4>
 80a4f7a:	bf00      	nop

080a4f7c <__cmpdf2>:
 80a4f7c:	f04f 0c01 	mov.w	ip, #1
 80a4f80:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4f84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4f88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4f8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4f90:	bf18      	it	ne
 80a4f92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a4f96:	d01b      	beq.n	80a4fd0 <__cmpdf2+0x54>
 80a4f98:	b001      	add	sp, #4
 80a4f9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a4f9e:	bf0c      	ite	eq
 80a4fa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a4fa4:	ea91 0f03 	teqne	r1, r3
 80a4fa8:	bf02      	ittt	eq
 80a4faa:	ea90 0f02 	teqeq	r0, r2
 80a4fae:	2000      	moveq	r0, #0
 80a4fb0:	4770      	bxeq	lr
 80a4fb2:	f110 0f00 	cmn.w	r0, #0
 80a4fb6:	ea91 0f03 	teq	r1, r3
 80a4fba:	bf58      	it	pl
 80a4fbc:	4299      	cmppl	r1, r3
 80a4fbe:	bf08      	it	eq
 80a4fc0:	4290      	cmpeq	r0, r2
 80a4fc2:	bf2c      	ite	cs
 80a4fc4:	17d8      	asrcs	r0, r3, #31
 80a4fc6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a4fca:	f040 0001 	orr.w	r0, r0, #1
 80a4fce:	4770      	bx	lr
 80a4fd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4fd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4fd8:	d102      	bne.n	80a4fe0 <__cmpdf2+0x64>
 80a4fda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a4fde:	d107      	bne.n	80a4ff0 <__cmpdf2+0x74>
 80a4fe0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4fe4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4fe8:	d1d6      	bne.n	80a4f98 <__cmpdf2+0x1c>
 80a4fea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a4fee:	d0d3      	beq.n	80a4f98 <__cmpdf2+0x1c>
 80a4ff0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4ff4:	4770      	bx	lr
 80a4ff6:	bf00      	nop

080a4ff8 <__aeabi_cdrcmple>:
 80a4ff8:	4684      	mov	ip, r0
 80a4ffa:	4610      	mov	r0, r2
 80a4ffc:	4662      	mov	r2, ip
 80a4ffe:	468c      	mov	ip, r1
 80a5000:	4619      	mov	r1, r3
 80a5002:	4663      	mov	r3, ip
 80a5004:	e000      	b.n	80a5008 <__aeabi_cdcmpeq>
 80a5006:	bf00      	nop

080a5008 <__aeabi_cdcmpeq>:
 80a5008:	b501      	push	{r0, lr}
 80a500a:	f7ff ffb7 	bl	80a4f7c <__cmpdf2>
 80a500e:	2800      	cmp	r0, #0
 80a5010:	bf48      	it	mi
 80a5012:	f110 0f00 	cmnmi.w	r0, #0
 80a5016:	bd01      	pop	{r0, pc}

080a5018 <__aeabi_dcmpeq>:
 80a5018:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a501c:	f7ff fff4 	bl	80a5008 <__aeabi_cdcmpeq>
 80a5020:	bf0c      	ite	eq
 80a5022:	2001      	moveq	r0, #1
 80a5024:	2000      	movne	r0, #0
 80a5026:	f85d fb08 	ldr.w	pc, [sp], #8
 80a502a:	bf00      	nop

080a502c <__aeabi_dcmplt>:
 80a502c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5030:	f7ff ffea 	bl	80a5008 <__aeabi_cdcmpeq>
 80a5034:	bf34      	ite	cc
 80a5036:	2001      	movcc	r0, #1
 80a5038:	2000      	movcs	r0, #0
 80a503a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a503e:	bf00      	nop

080a5040 <__aeabi_dcmple>:
 80a5040:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5044:	f7ff ffe0 	bl	80a5008 <__aeabi_cdcmpeq>
 80a5048:	bf94      	ite	ls
 80a504a:	2001      	movls	r0, #1
 80a504c:	2000      	movhi	r0, #0
 80a504e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5052:	bf00      	nop

080a5054 <__aeabi_dcmpge>:
 80a5054:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5058:	f7ff ffce 	bl	80a4ff8 <__aeabi_cdrcmple>
 80a505c:	bf94      	ite	ls
 80a505e:	2001      	movls	r0, #1
 80a5060:	2000      	movhi	r0, #0
 80a5062:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5066:	bf00      	nop

080a5068 <__aeabi_dcmpgt>:
 80a5068:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a506c:	f7ff ffc4 	bl	80a4ff8 <__aeabi_cdrcmple>
 80a5070:	bf34      	ite	cc
 80a5072:	2001      	movcc	r0, #1
 80a5074:	2000      	movcs	r0, #0
 80a5076:	f85d fb08 	ldr.w	pc, [sp], #8
 80a507a:	bf00      	nop

080a507c <__aeabi_dcmpun>:
 80a507c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5080:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5084:	d102      	bne.n	80a508c <__aeabi_dcmpun+0x10>
 80a5086:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a508a:	d10a      	bne.n	80a50a2 <__aeabi_dcmpun+0x26>
 80a508c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5090:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5094:	d102      	bne.n	80a509c <__aeabi_dcmpun+0x20>
 80a5096:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a509a:	d102      	bne.n	80a50a2 <__aeabi_dcmpun+0x26>
 80a509c:	f04f 0000 	mov.w	r0, #0
 80a50a0:	4770      	bx	lr
 80a50a2:	f04f 0001 	mov.w	r0, #1
 80a50a6:	4770      	bx	lr

080a50a8 <__aeabi_d2iz>:
 80a50a8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a50ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a50b0:	d215      	bcs.n	80a50de <__aeabi_d2iz+0x36>
 80a50b2:	d511      	bpl.n	80a50d8 <__aeabi_d2iz+0x30>
 80a50b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a50b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a50bc:	d912      	bls.n	80a50e4 <__aeabi_d2iz+0x3c>
 80a50be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a50c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a50c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a50ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a50ce:	fa23 f002 	lsr.w	r0, r3, r2
 80a50d2:	bf18      	it	ne
 80a50d4:	4240      	negne	r0, r0
 80a50d6:	4770      	bx	lr
 80a50d8:	f04f 0000 	mov.w	r0, #0
 80a50dc:	4770      	bx	lr
 80a50de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a50e2:	d105      	bne.n	80a50f0 <__aeabi_d2iz+0x48>
 80a50e4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a50e8:	bf08      	it	eq
 80a50ea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a50ee:	4770      	bx	lr
 80a50f0:	f04f 0000 	mov.w	r0, #0
 80a50f4:	4770      	bx	lr
 80a50f6:	bf00      	nop

080a50f8 <__aeabi_d2uiz>:
 80a50f8:	004a      	lsls	r2, r1, #1
 80a50fa:	d211      	bcs.n	80a5120 <__aeabi_d2uiz+0x28>
 80a50fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5100:	d211      	bcs.n	80a5126 <__aeabi_d2uiz+0x2e>
 80a5102:	d50d      	bpl.n	80a5120 <__aeabi_d2uiz+0x28>
 80a5104:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5108:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a510c:	d40e      	bmi.n	80a512c <__aeabi_d2uiz+0x34>
 80a510e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5112:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5116:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a511a:	fa23 f002 	lsr.w	r0, r3, r2
 80a511e:	4770      	bx	lr
 80a5120:	f04f 0000 	mov.w	r0, #0
 80a5124:	4770      	bx	lr
 80a5126:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a512a:	d102      	bne.n	80a5132 <__aeabi_d2uiz+0x3a>
 80a512c:	f04f 30ff 	mov.w	r0, #4294967295
 80a5130:	4770      	bx	lr
 80a5132:	f04f 0000 	mov.w	r0, #0
 80a5136:	4770      	bx	lr

080a5138 <__aeabi_frsub>:
 80a5138:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a513c:	e002      	b.n	80a5144 <__addsf3>
 80a513e:	bf00      	nop

080a5140 <__aeabi_fsub>:
 80a5140:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a5144 <__addsf3>:
 80a5144:	0042      	lsls	r2, r0, #1
 80a5146:	bf1f      	itttt	ne
 80a5148:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a514c:	ea92 0f03 	teqne	r2, r3
 80a5150:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a5154:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5158:	d06a      	beq.n	80a5230 <__addsf3+0xec>
 80a515a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a515e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a5162:	bfc1      	itttt	gt
 80a5164:	18d2      	addgt	r2, r2, r3
 80a5166:	4041      	eorgt	r1, r0
 80a5168:	4048      	eorgt	r0, r1
 80a516a:	4041      	eorgt	r1, r0
 80a516c:	bfb8      	it	lt
 80a516e:	425b      	neglt	r3, r3
 80a5170:	2b19      	cmp	r3, #25
 80a5172:	bf88      	it	hi
 80a5174:	4770      	bxhi	lr
 80a5176:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a517a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a517e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a5182:	bf18      	it	ne
 80a5184:	4240      	negne	r0, r0
 80a5186:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a518a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a518e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a5192:	bf18      	it	ne
 80a5194:	4249      	negne	r1, r1
 80a5196:	ea92 0f03 	teq	r2, r3
 80a519a:	d03f      	beq.n	80a521c <__addsf3+0xd8>
 80a519c:	f1a2 0201 	sub.w	r2, r2, #1
 80a51a0:	fa41 fc03 	asr.w	ip, r1, r3
 80a51a4:	eb10 000c 	adds.w	r0, r0, ip
 80a51a8:	f1c3 0320 	rsb	r3, r3, #32
 80a51ac:	fa01 f103 	lsl.w	r1, r1, r3
 80a51b0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a51b4:	d502      	bpl.n	80a51bc <__addsf3+0x78>
 80a51b6:	4249      	negs	r1, r1
 80a51b8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a51bc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a51c0:	d313      	bcc.n	80a51ea <__addsf3+0xa6>
 80a51c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a51c6:	d306      	bcc.n	80a51d6 <__addsf3+0x92>
 80a51c8:	0840      	lsrs	r0, r0, #1
 80a51ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80a51ce:	f102 0201 	add.w	r2, r2, #1
 80a51d2:	2afe      	cmp	r2, #254	; 0xfe
 80a51d4:	d251      	bcs.n	80a527a <__addsf3+0x136>
 80a51d6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a51da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a51de:	bf08      	it	eq
 80a51e0:	f020 0001 	biceq.w	r0, r0, #1
 80a51e4:	ea40 0003 	orr.w	r0, r0, r3
 80a51e8:	4770      	bx	lr
 80a51ea:	0049      	lsls	r1, r1, #1
 80a51ec:	eb40 0000 	adc.w	r0, r0, r0
 80a51f0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a51f4:	f1a2 0201 	sub.w	r2, r2, #1
 80a51f8:	d1ed      	bne.n	80a51d6 <__addsf3+0x92>
 80a51fa:	fab0 fc80 	clz	ip, r0
 80a51fe:	f1ac 0c08 	sub.w	ip, ip, #8
 80a5202:	ebb2 020c 	subs.w	r2, r2, ip
 80a5206:	fa00 f00c 	lsl.w	r0, r0, ip
 80a520a:	bfaa      	itet	ge
 80a520c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a5210:	4252      	neglt	r2, r2
 80a5212:	4318      	orrge	r0, r3
 80a5214:	bfbc      	itt	lt
 80a5216:	40d0      	lsrlt	r0, r2
 80a5218:	4318      	orrlt	r0, r3
 80a521a:	4770      	bx	lr
 80a521c:	f092 0f00 	teq	r2, #0
 80a5220:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a5224:	bf06      	itte	eq
 80a5226:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a522a:	3201      	addeq	r2, #1
 80a522c:	3b01      	subne	r3, #1
 80a522e:	e7b5      	b.n	80a519c <__addsf3+0x58>
 80a5230:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5234:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5238:	bf18      	it	ne
 80a523a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a523e:	d021      	beq.n	80a5284 <__addsf3+0x140>
 80a5240:	ea92 0f03 	teq	r2, r3
 80a5244:	d004      	beq.n	80a5250 <__addsf3+0x10c>
 80a5246:	f092 0f00 	teq	r2, #0
 80a524a:	bf08      	it	eq
 80a524c:	4608      	moveq	r0, r1
 80a524e:	4770      	bx	lr
 80a5250:	ea90 0f01 	teq	r0, r1
 80a5254:	bf1c      	itt	ne
 80a5256:	2000      	movne	r0, #0
 80a5258:	4770      	bxne	lr
 80a525a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a525e:	d104      	bne.n	80a526a <__addsf3+0x126>
 80a5260:	0040      	lsls	r0, r0, #1
 80a5262:	bf28      	it	cs
 80a5264:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a5268:	4770      	bx	lr
 80a526a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a526e:	bf3c      	itt	cc
 80a5270:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a5274:	4770      	bxcc	lr
 80a5276:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a527a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a527e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5282:	4770      	bx	lr
 80a5284:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a5288:	bf16      	itet	ne
 80a528a:	4608      	movne	r0, r1
 80a528c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a5290:	4601      	movne	r1, r0
 80a5292:	0242      	lsls	r2, r0, #9
 80a5294:	bf06      	itte	eq
 80a5296:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a529a:	ea90 0f01 	teqeq	r0, r1
 80a529e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a52a2:	4770      	bx	lr

080a52a4 <__aeabi_ui2f>:
 80a52a4:	f04f 0300 	mov.w	r3, #0
 80a52a8:	e004      	b.n	80a52b4 <__aeabi_i2f+0x8>
 80a52aa:	bf00      	nop

080a52ac <__aeabi_i2f>:
 80a52ac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a52b0:	bf48      	it	mi
 80a52b2:	4240      	negmi	r0, r0
 80a52b4:	ea5f 0c00 	movs.w	ip, r0
 80a52b8:	bf08      	it	eq
 80a52ba:	4770      	bxeq	lr
 80a52bc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a52c0:	4601      	mov	r1, r0
 80a52c2:	f04f 0000 	mov.w	r0, #0
 80a52c6:	e01c      	b.n	80a5302 <__aeabi_l2f+0x2a>

080a52c8 <__aeabi_ul2f>:
 80a52c8:	ea50 0201 	orrs.w	r2, r0, r1
 80a52cc:	bf08      	it	eq
 80a52ce:	4770      	bxeq	lr
 80a52d0:	f04f 0300 	mov.w	r3, #0
 80a52d4:	e00a      	b.n	80a52ec <__aeabi_l2f+0x14>
 80a52d6:	bf00      	nop

080a52d8 <__aeabi_l2f>:
 80a52d8:	ea50 0201 	orrs.w	r2, r0, r1
 80a52dc:	bf08      	it	eq
 80a52de:	4770      	bxeq	lr
 80a52e0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a52e4:	d502      	bpl.n	80a52ec <__aeabi_l2f+0x14>
 80a52e6:	4240      	negs	r0, r0
 80a52e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a52ec:	ea5f 0c01 	movs.w	ip, r1
 80a52f0:	bf02      	ittt	eq
 80a52f2:	4684      	moveq	ip, r0
 80a52f4:	4601      	moveq	r1, r0
 80a52f6:	2000      	moveq	r0, #0
 80a52f8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a52fc:	bf08      	it	eq
 80a52fe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a5302:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a5306:	fabc f28c 	clz	r2, ip
 80a530a:	3a08      	subs	r2, #8
 80a530c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a5310:	db10      	blt.n	80a5334 <__aeabi_l2f+0x5c>
 80a5312:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5316:	4463      	add	r3, ip
 80a5318:	fa00 fc02 	lsl.w	ip, r0, r2
 80a531c:	f1c2 0220 	rsb	r2, r2, #32
 80a5320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5324:	fa20 f202 	lsr.w	r2, r0, r2
 80a5328:	eb43 0002 	adc.w	r0, r3, r2
 80a532c:	bf08      	it	eq
 80a532e:	f020 0001 	biceq.w	r0, r0, #1
 80a5332:	4770      	bx	lr
 80a5334:	f102 0220 	add.w	r2, r2, #32
 80a5338:	fa01 fc02 	lsl.w	ip, r1, r2
 80a533c:	f1c2 0220 	rsb	r2, r2, #32
 80a5340:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a5344:	fa21 f202 	lsr.w	r2, r1, r2
 80a5348:	eb43 0002 	adc.w	r0, r3, r2
 80a534c:	bf08      	it	eq
 80a534e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5352:	4770      	bx	lr

080a5354 <__aeabi_fmul>:
 80a5354:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5358:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a535c:	bf1e      	ittt	ne
 80a535e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5362:	ea92 0f0c 	teqne	r2, ip
 80a5366:	ea93 0f0c 	teqne	r3, ip
 80a536a:	d06f      	beq.n	80a544c <__aeabi_fmul+0xf8>
 80a536c:	441a      	add	r2, r3
 80a536e:	ea80 0c01 	eor.w	ip, r0, r1
 80a5372:	0240      	lsls	r0, r0, #9
 80a5374:	bf18      	it	ne
 80a5376:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a537a:	d01e      	beq.n	80a53ba <__aeabi_fmul+0x66>
 80a537c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a5380:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a5384:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a5388:	fba0 3101 	umull	r3, r1, r0, r1
 80a538c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5390:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a5394:	bf3e      	ittt	cc
 80a5396:	0049      	lslcc	r1, r1, #1
 80a5398:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a539c:	005b      	lslcc	r3, r3, #1
 80a539e:	ea40 0001 	orr.w	r0, r0, r1
 80a53a2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a53a6:	2afd      	cmp	r2, #253	; 0xfd
 80a53a8:	d81d      	bhi.n	80a53e6 <__aeabi_fmul+0x92>
 80a53aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a53ae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a53b2:	bf08      	it	eq
 80a53b4:	f020 0001 	biceq.w	r0, r0, #1
 80a53b8:	4770      	bx	lr
 80a53ba:	f090 0f00 	teq	r0, #0
 80a53be:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a53c2:	bf08      	it	eq
 80a53c4:	0249      	lsleq	r1, r1, #9
 80a53c6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a53ca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a53ce:	3a7f      	subs	r2, #127	; 0x7f
 80a53d0:	bfc2      	ittt	gt
 80a53d2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a53d6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a53da:	4770      	bxgt	lr
 80a53dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a53e0:	f04f 0300 	mov.w	r3, #0
 80a53e4:	3a01      	subs	r2, #1
 80a53e6:	dc5d      	bgt.n	80a54a4 <__aeabi_fmul+0x150>
 80a53e8:	f112 0f19 	cmn.w	r2, #25
 80a53ec:	bfdc      	itt	le
 80a53ee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a53f2:	4770      	bxle	lr
 80a53f4:	f1c2 0200 	rsb	r2, r2, #0
 80a53f8:	0041      	lsls	r1, r0, #1
 80a53fa:	fa21 f102 	lsr.w	r1, r1, r2
 80a53fe:	f1c2 0220 	rsb	r2, r2, #32
 80a5402:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5406:	ea5f 0031 	movs.w	r0, r1, rrx
 80a540a:	f140 0000 	adc.w	r0, r0, #0
 80a540e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a5412:	bf08      	it	eq
 80a5414:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5418:	4770      	bx	lr
 80a541a:	f092 0f00 	teq	r2, #0
 80a541e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5422:	bf02      	ittt	eq
 80a5424:	0040      	lsleq	r0, r0, #1
 80a5426:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a542a:	3a01      	subeq	r2, #1
 80a542c:	d0f9      	beq.n	80a5422 <__aeabi_fmul+0xce>
 80a542e:	ea40 000c 	orr.w	r0, r0, ip
 80a5432:	f093 0f00 	teq	r3, #0
 80a5436:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a543a:	bf02      	ittt	eq
 80a543c:	0049      	lsleq	r1, r1, #1
 80a543e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5442:	3b01      	subeq	r3, #1
 80a5444:	d0f9      	beq.n	80a543a <__aeabi_fmul+0xe6>
 80a5446:	ea41 010c 	orr.w	r1, r1, ip
 80a544a:	e78f      	b.n	80a536c <__aeabi_fmul+0x18>
 80a544c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5450:	ea92 0f0c 	teq	r2, ip
 80a5454:	bf18      	it	ne
 80a5456:	ea93 0f0c 	teqne	r3, ip
 80a545a:	d00a      	beq.n	80a5472 <__aeabi_fmul+0x11e>
 80a545c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5460:	bf18      	it	ne
 80a5462:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5466:	d1d8      	bne.n	80a541a <__aeabi_fmul+0xc6>
 80a5468:	ea80 0001 	eor.w	r0, r0, r1
 80a546c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5470:	4770      	bx	lr
 80a5472:	f090 0f00 	teq	r0, #0
 80a5476:	bf17      	itett	ne
 80a5478:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a547c:	4608      	moveq	r0, r1
 80a547e:	f091 0f00 	teqne	r1, #0
 80a5482:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a5486:	d014      	beq.n	80a54b2 <__aeabi_fmul+0x15e>
 80a5488:	ea92 0f0c 	teq	r2, ip
 80a548c:	d101      	bne.n	80a5492 <__aeabi_fmul+0x13e>
 80a548e:	0242      	lsls	r2, r0, #9
 80a5490:	d10f      	bne.n	80a54b2 <__aeabi_fmul+0x15e>
 80a5492:	ea93 0f0c 	teq	r3, ip
 80a5496:	d103      	bne.n	80a54a0 <__aeabi_fmul+0x14c>
 80a5498:	024b      	lsls	r3, r1, #9
 80a549a:	bf18      	it	ne
 80a549c:	4608      	movne	r0, r1
 80a549e:	d108      	bne.n	80a54b2 <__aeabi_fmul+0x15e>
 80a54a0:	ea80 0001 	eor.w	r0, r0, r1
 80a54a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a54a8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a54ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a54b0:	4770      	bx	lr
 80a54b2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a54b6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a54ba:	4770      	bx	lr

080a54bc <__aeabi_fdiv>:
 80a54bc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a54c0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a54c4:	bf1e      	ittt	ne
 80a54c6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a54ca:	ea92 0f0c 	teqne	r2, ip
 80a54ce:	ea93 0f0c 	teqne	r3, ip
 80a54d2:	d069      	beq.n	80a55a8 <__aeabi_fdiv+0xec>
 80a54d4:	eba2 0203 	sub.w	r2, r2, r3
 80a54d8:	ea80 0c01 	eor.w	ip, r0, r1
 80a54dc:	0249      	lsls	r1, r1, #9
 80a54de:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a54e2:	d037      	beq.n	80a5554 <__aeabi_fdiv+0x98>
 80a54e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a54e8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a54ec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a54f0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a54f4:	428b      	cmp	r3, r1
 80a54f6:	bf38      	it	cc
 80a54f8:	005b      	lslcc	r3, r3, #1
 80a54fa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a54fe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a5502:	428b      	cmp	r3, r1
 80a5504:	bf24      	itt	cs
 80a5506:	1a5b      	subcs	r3, r3, r1
 80a5508:	ea40 000c 	orrcs.w	r0, r0, ip
 80a550c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a5510:	bf24      	itt	cs
 80a5512:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a5516:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a551a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a551e:	bf24      	itt	cs
 80a5520:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a5524:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5528:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a552c:	bf24      	itt	cs
 80a552e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a5532:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5536:	011b      	lsls	r3, r3, #4
 80a5538:	bf18      	it	ne
 80a553a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a553e:	d1e0      	bne.n	80a5502 <__aeabi_fdiv+0x46>
 80a5540:	2afd      	cmp	r2, #253	; 0xfd
 80a5542:	f63f af50 	bhi.w	80a53e6 <__aeabi_fmul+0x92>
 80a5546:	428b      	cmp	r3, r1
 80a5548:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a554c:	bf08      	it	eq
 80a554e:	f020 0001 	biceq.w	r0, r0, #1
 80a5552:	4770      	bx	lr
 80a5554:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5558:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a555c:	327f      	adds	r2, #127	; 0x7f
 80a555e:	bfc2      	ittt	gt
 80a5560:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5564:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5568:	4770      	bxgt	lr
 80a556a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a556e:	f04f 0300 	mov.w	r3, #0
 80a5572:	3a01      	subs	r2, #1
 80a5574:	e737      	b.n	80a53e6 <__aeabi_fmul+0x92>
 80a5576:	f092 0f00 	teq	r2, #0
 80a557a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a557e:	bf02      	ittt	eq
 80a5580:	0040      	lsleq	r0, r0, #1
 80a5582:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5586:	3a01      	subeq	r2, #1
 80a5588:	d0f9      	beq.n	80a557e <__aeabi_fdiv+0xc2>
 80a558a:	ea40 000c 	orr.w	r0, r0, ip
 80a558e:	f093 0f00 	teq	r3, #0
 80a5592:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5596:	bf02      	ittt	eq
 80a5598:	0049      	lsleq	r1, r1, #1
 80a559a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a559e:	3b01      	subeq	r3, #1
 80a55a0:	d0f9      	beq.n	80a5596 <__aeabi_fdiv+0xda>
 80a55a2:	ea41 010c 	orr.w	r1, r1, ip
 80a55a6:	e795      	b.n	80a54d4 <__aeabi_fdiv+0x18>
 80a55a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a55ac:	ea92 0f0c 	teq	r2, ip
 80a55b0:	d108      	bne.n	80a55c4 <__aeabi_fdiv+0x108>
 80a55b2:	0242      	lsls	r2, r0, #9
 80a55b4:	f47f af7d 	bne.w	80a54b2 <__aeabi_fmul+0x15e>
 80a55b8:	ea93 0f0c 	teq	r3, ip
 80a55bc:	f47f af70 	bne.w	80a54a0 <__aeabi_fmul+0x14c>
 80a55c0:	4608      	mov	r0, r1
 80a55c2:	e776      	b.n	80a54b2 <__aeabi_fmul+0x15e>
 80a55c4:	ea93 0f0c 	teq	r3, ip
 80a55c8:	d104      	bne.n	80a55d4 <__aeabi_fdiv+0x118>
 80a55ca:	024b      	lsls	r3, r1, #9
 80a55cc:	f43f af4c 	beq.w	80a5468 <__aeabi_fmul+0x114>
 80a55d0:	4608      	mov	r0, r1
 80a55d2:	e76e      	b.n	80a54b2 <__aeabi_fmul+0x15e>
 80a55d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a55d8:	bf18      	it	ne
 80a55da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a55de:	d1ca      	bne.n	80a5576 <__aeabi_fdiv+0xba>
 80a55e0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a55e4:	f47f af5c 	bne.w	80a54a0 <__aeabi_fmul+0x14c>
 80a55e8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a55ec:	f47f af3c 	bne.w	80a5468 <__aeabi_fmul+0x114>
 80a55f0:	e75f      	b.n	80a54b2 <__aeabi_fmul+0x15e>
 80a55f2:	bf00      	nop

080a55f4 <asctime>:
 80a55f4:	4b09      	ldr	r3, [pc, #36]	; (80a561c <asctime+0x28>)
 80a55f6:	b570      	push	{r4, r5, r6, lr}
 80a55f8:	681c      	ldr	r4, [r3, #0]
 80a55fa:	4606      	mov	r6, r0
 80a55fc:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80a55fe:	b93d      	cbnz	r5, 80a5610 <asctime+0x1c>
 80a5600:	201a      	movs	r0, #26
 80a5602:	f7fc fd33 	bl	80a206c <malloc>
 80a5606:	221a      	movs	r2, #26
 80a5608:	6420      	str	r0, [r4, #64]	; 0x40
 80a560a:	4629      	mov	r1, r5
 80a560c:	f000 f95a 	bl	80a58c4 <memset>
 80a5610:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80a5612:	4630      	mov	r0, r6
 80a5614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a5618:	f000 b802 	b.w	80a5620 <asctime_r>
 80a561c:	200000b4 	.word	0x200000b4

080a5620 <asctime_r>:
 80a5620:	b510      	push	{r4, lr}
 80a5622:	460c      	mov	r4, r1
 80a5624:	6941      	ldr	r1, [r0, #20]
 80a5626:	b086      	sub	sp, #24
 80a5628:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a562c:	6903      	ldr	r3, [r0, #16]
 80a562e:	6982      	ldr	r2, [r0, #24]
 80a5630:	9104      	str	r1, [sp, #16]
 80a5632:	6801      	ldr	r1, [r0, #0]
 80a5634:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a5638:	9103      	str	r1, [sp, #12]
 80a563a:	6841      	ldr	r1, [r0, #4]
 80a563c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a5640:	9102      	str	r1, [sp, #8]
 80a5642:	6881      	ldr	r1, [r0, #8]
 80a5644:	9101      	str	r1, [sp, #4]
 80a5646:	68c1      	ldr	r1, [r0, #12]
 80a5648:	4620      	mov	r0, r4
 80a564a:	9100      	str	r1, [sp, #0]
 80a564c:	4904      	ldr	r1, [pc, #16]	; (80a5660 <asctime_r+0x40>)
 80a564e:	440b      	add	r3, r1
 80a5650:	4904      	ldr	r1, [pc, #16]	; (80a5664 <asctime_r+0x44>)
 80a5652:	440a      	add	r2, r1
 80a5654:	4904      	ldr	r1, [pc, #16]	; (80a5668 <asctime_r+0x48>)
 80a5656:	f7fc fd29 	bl	80a20ac <siprintf>
 80a565a:	4620      	mov	r0, r4
 80a565c:	b006      	add	sp, #24
 80a565e:	bd10      	pop	{r4, pc}
 80a5660:	080a952e 	.word	0x080a952e
 80a5664:	080a9519 	.word	0x080a9519
 80a5668:	080a9552 	.word	0x080a9552

080a566c <__cxa_atexit>:
 80a566c:	b510      	push	{r4, lr}
 80a566e:	4c05      	ldr	r4, [pc, #20]	; (80a5684 <__cxa_atexit+0x18>)
 80a5670:	4613      	mov	r3, r2
 80a5672:	b12c      	cbz	r4, 80a5680 <__cxa_atexit+0x14>
 80a5674:	460a      	mov	r2, r1
 80a5676:	4601      	mov	r1, r0
 80a5678:	2002      	movs	r0, #2
 80a567a:	f3af 8000 	nop.w
 80a567e:	bd10      	pop	{r4, pc}
 80a5680:	4620      	mov	r0, r4
 80a5682:	bd10      	pop	{r4, pc}
 80a5684:	00000000 	.word	0x00000000

080a5688 <localtime>:
 80a5688:	b538      	push	{r3, r4, r5, lr}
 80a568a:	4b07      	ldr	r3, [pc, #28]	; (80a56a8 <localtime+0x20>)
 80a568c:	4605      	mov	r5, r0
 80a568e:	681c      	ldr	r4, [r3, #0]
 80a5690:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a5692:	b91b      	cbnz	r3, 80a569c <localtime+0x14>
 80a5694:	2024      	movs	r0, #36	; 0x24
 80a5696:	f7fc fce9 	bl	80a206c <malloc>
 80a569a:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a569c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a569e:	4628      	mov	r0, r5
 80a56a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a56a4:	f000 b802 	b.w	80a56ac <localtime_r>
 80a56a8:	200000b4 	.word	0x200000b4

080a56ac <localtime_r>:
 80a56ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a56b0:	460c      	mov	r4, r1
 80a56b2:	4680      	mov	r8, r0
 80a56b4:	f001 fa44 	bl	80a6b40 <__gettzinfo>
 80a56b8:	4621      	mov	r1, r4
 80a56ba:	4607      	mov	r7, r0
 80a56bc:	4640      	mov	r0, r8
 80a56be:	f001 fa43 	bl	80a6b48 <gmtime_r>
 80a56c2:	6946      	ldr	r6, [r0, #20]
 80a56c4:	4604      	mov	r4, r0
 80a56c6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a56ca:	07b3      	lsls	r3, r6, #30
 80a56cc:	d105      	bne.n	80a56da <localtime_r+0x2e>
 80a56ce:	2264      	movs	r2, #100	; 0x64
 80a56d0:	fb96 f3f2 	sdiv	r3, r6, r2
 80a56d4:	fb02 6313 	mls	r3, r2, r3, r6
 80a56d8:	b94b      	cbnz	r3, 80a56ee <localtime_r+0x42>
 80a56da:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a56de:	fb96 f3f5 	sdiv	r3, r6, r5
 80a56e2:	fb05 6513 	mls	r5, r5, r3, r6
 80a56e6:	fab5 f385 	clz	r3, r5
 80a56ea:	095b      	lsrs	r3, r3, #5
 80a56ec:	e000      	b.n	80a56f0 <localtime_r+0x44>
 80a56ee:	2301      	movs	r3, #1
 80a56f0:	4a5f      	ldr	r2, [pc, #380]	; (80a5870 <localtime_r+0x1c4>)
 80a56f2:	2530      	movs	r5, #48	; 0x30
 80a56f4:	fb05 2503 	mla	r5, r5, r3, r2
 80a56f8:	f001 f852 	bl	80a67a0 <__tz_lock>
 80a56fc:	f001 f852 	bl	80a67a4 <_tzset_unlocked>
 80a5700:	4b5c      	ldr	r3, [pc, #368]	; (80a5874 <localtime_r+0x1c8>)
 80a5702:	681b      	ldr	r3, [r3, #0]
 80a5704:	b1f3      	cbz	r3, 80a5744 <localtime_r+0x98>
 80a5706:	687b      	ldr	r3, [r7, #4]
 80a5708:	429e      	cmp	r6, r3
 80a570a:	d105      	bne.n	80a5718 <localtime_r+0x6c>
 80a570c:	6839      	ldr	r1, [r7, #0]
 80a570e:	f8d8 3000 	ldr.w	r3, [r8]
 80a5712:	69fa      	ldr	r2, [r7, #28]
 80a5714:	b941      	cbnz	r1, 80a5728 <localtime_r+0x7c>
 80a5716:	e00a      	b.n	80a572e <localtime_r+0x82>
 80a5718:	4630      	mov	r0, r6
 80a571a:	f000 ff99 	bl	80a6650 <__tzcalc_limits>
 80a571e:	2800      	cmp	r0, #0
 80a5720:	d1f4      	bne.n	80a570c <localtime_r+0x60>
 80a5722:	f04f 33ff 	mov.w	r3, #4294967295
 80a5726:	e00d      	b.n	80a5744 <localtime_r+0x98>
 80a5728:	4293      	cmp	r3, r2
 80a572a:	db08      	blt.n	80a573e <localtime_r+0x92>
 80a572c:	e001      	b.n	80a5732 <localtime_r+0x86>
 80a572e:	4293      	cmp	r3, r2
 80a5730:	da07      	bge.n	80a5742 <localtime_r+0x96>
 80a5732:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a5734:	4293      	cmp	r3, r2
 80a5736:	bfac      	ite	ge
 80a5738:	2300      	movge	r3, #0
 80a573a:	2301      	movlt	r3, #1
 80a573c:	e002      	b.n	80a5744 <localtime_r+0x98>
 80a573e:	2300      	movs	r3, #0
 80a5740:	e000      	b.n	80a5744 <localtime_r+0x98>
 80a5742:	2301      	movs	r3, #1
 80a5744:	6223      	str	r3, [r4, #32]
 80a5746:	6a23      	ldr	r3, [r4, #32]
 80a5748:	203c      	movs	r0, #60	; 0x3c
 80a574a:	2b01      	cmp	r3, #1
 80a574c:	bf0c      	ite	eq
 80a574e:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a5750:	6a39      	ldrne	r1, [r7, #32]
 80a5752:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a5756:	fb91 f6f3 	sdiv	r6, r1, r3
 80a575a:	fb03 1316 	mls	r3, r3, r6, r1
 80a575e:	fb93 f2f0 	sdiv	r2, r3, r0
 80a5762:	fb00 3012 	mls	r0, r0, r2, r3
 80a5766:	6861      	ldr	r1, [r4, #4]
 80a5768:	6823      	ldr	r3, [r4, #0]
 80a576a:	1a89      	subs	r1, r1, r2
 80a576c:	68a2      	ldr	r2, [r4, #8]
 80a576e:	1a1b      	subs	r3, r3, r0
 80a5770:	1b92      	subs	r2, r2, r6
 80a5772:	2b3b      	cmp	r3, #59	; 0x3b
 80a5774:	6023      	str	r3, [r4, #0]
 80a5776:	6061      	str	r1, [r4, #4]
 80a5778:	60a2      	str	r2, [r4, #8]
 80a577a:	dd03      	ble.n	80a5784 <localtime_r+0xd8>
 80a577c:	3101      	adds	r1, #1
 80a577e:	6061      	str	r1, [r4, #4]
 80a5780:	3b3c      	subs	r3, #60	; 0x3c
 80a5782:	e004      	b.n	80a578e <localtime_r+0xe2>
 80a5784:	2b00      	cmp	r3, #0
 80a5786:	da03      	bge.n	80a5790 <localtime_r+0xe4>
 80a5788:	3901      	subs	r1, #1
 80a578a:	6061      	str	r1, [r4, #4]
 80a578c:	333c      	adds	r3, #60	; 0x3c
 80a578e:	6023      	str	r3, [r4, #0]
 80a5790:	6863      	ldr	r3, [r4, #4]
 80a5792:	2b3b      	cmp	r3, #59	; 0x3b
 80a5794:	dd03      	ble.n	80a579e <localtime_r+0xf2>
 80a5796:	3201      	adds	r2, #1
 80a5798:	60a2      	str	r2, [r4, #8]
 80a579a:	3b3c      	subs	r3, #60	; 0x3c
 80a579c:	e004      	b.n	80a57a8 <localtime_r+0xfc>
 80a579e:	2b00      	cmp	r3, #0
 80a57a0:	da03      	bge.n	80a57aa <localtime_r+0xfe>
 80a57a2:	3a01      	subs	r2, #1
 80a57a4:	60a2      	str	r2, [r4, #8]
 80a57a6:	333c      	adds	r3, #60	; 0x3c
 80a57a8:	6063      	str	r3, [r4, #4]
 80a57aa:	68a3      	ldr	r3, [r4, #8]
 80a57ac:	2b17      	cmp	r3, #23
 80a57ae:	dd22      	ble.n	80a57f6 <localtime_r+0x14a>
 80a57b0:	69e2      	ldr	r2, [r4, #28]
 80a57b2:	3b18      	subs	r3, #24
 80a57b4:	3201      	adds	r2, #1
 80a57b6:	61e2      	str	r2, [r4, #28]
 80a57b8:	69a2      	ldr	r2, [r4, #24]
 80a57ba:	60a3      	str	r3, [r4, #8]
 80a57bc:	3201      	adds	r2, #1
 80a57be:	2a06      	cmp	r2, #6
 80a57c0:	bfc8      	it	gt
 80a57c2:	2200      	movgt	r2, #0
 80a57c4:	61a2      	str	r2, [r4, #24]
 80a57c6:	68e2      	ldr	r2, [r4, #12]
 80a57c8:	6923      	ldr	r3, [r4, #16]
 80a57ca:	3201      	adds	r2, #1
 80a57cc:	60e2      	str	r2, [r4, #12]
 80a57ce:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a57d2:	428a      	cmp	r2, r1
 80a57d4:	dd46      	ble.n	80a5864 <localtime_r+0x1b8>
 80a57d6:	3301      	adds	r3, #1
 80a57d8:	2b0c      	cmp	r3, #12
 80a57da:	bf08      	it	eq
 80a57dc:	6963      	ldreq	r3, [r4, #20]
 80a57de:	eba2 0201 	sub.w	r2, r2, r1
 80a57e2:	60e2      	str	r2, [r4, #12]
 80a57e4:	bf05      	ittet	eq
 80a57e6:	3301      	addeq	r3, #1
 80a57e8:	2200      	moveq	r2, #0
 80a57ea:	6123      	strne	r3, [r4, #16]
 80a57ec:	6122      	streq	r2, [r4, #16]
 80a57ee:	bf04      	itt	eq
 80a57f0:	6163      	streq	r3, [r4, #20]
 80a57f2:	61e2      	streq	r2, [r4, #28]
 80a57f4:	e036      	b.n	80a5864 <localtime_r+0x1b8>
 80a57f6:	2b00      	cmp	r3, #0
 80a57f8:	da34      	bge.n	80a5864 <localtime_r+0x1b8>
 80a57fa:	69e2      	ldr	r2, [r4, #28]
 80a57fc:	3318      	adds	r3, #24
 80a57fe:	3a01      	subs	r2, #1
 80a5800:	61e2      	str	r2, [r4, #28]
 80a5802:	69a2      	ldr	r2, [r4, #24]
 80a5804:	60a3      	str	r3, [r4, #8]
 80a5806:	3a01      	subs	r2, #1
 80a5808:	bf48      	it	mi
 80a580a:	2206      	movmi	r2, #6
 80a580c:	61a2      	str	r2, [r4, #24]
 80a580e:	68e2      	ldr	r2, [r4, #12]
 80a5810:	3a01      	subs	r2, #1
 80a5812:	60e2      	str	r2, [r4, #12]
 80a5814:	bb32      	cbnz	r2, 80a5864 <localtime_r+0x1b8>
 80a5816:	6923      	ldr	r3, [r4, #16]
 80a5818:	3b01      	subs	r3, #1
 80a581a:	d401      	bmi.n	80a5820 <localtime_r+0x174>
 80a581c:	6123      	str	r3, [r4, #16]
 80a581e:	e01d      	b.n	80a585c <localtime_r+0x1b0>
 80a5820:	230b      	movs	r3, #11
 80a5822:	6123      	str	r3, [r4, #16]
 80a5824:	6963      	ldr	r3, [r4, #20]
 80a5826:	1e5a      	subs	r2, r3, #1
 80a5828:	f012 0f03 	tst.w	r2, #3
 80a582c:	6162      	str	r2, [r4, #20]
 80a582e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a5832:	d105      	bne.n	80a5840 <localtime_r+0x194>
 80a5834:	2164      	movs	r1, #100	; 0x64
 80a5836:	fb93 f2f1 	sdiv	r2, r3, r1
 80a583a:	fb01 3212 	mls	r2, r1, r2, r3
 80a583e:	b94a      	cbnz	r2, 80a5854 <localtime_r+0x1a8>
 80a5840:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a5844:	fb93 f2f1 	sdiv	r2, r3, r1
 80a5848:	fb01 3312 	mls	r3, r1, r2, r3
 80a584c:	fab3 f383 	clz	r3, r3
 80a5850:	095b      	lsrs	r3, r3, #5
 80a5852:	e000      	b.n	80a5856 <localtime_r+0x1aa>
 80a5854:	2301      	movs	r3, #1
 80a5856:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a585a:	61e3      	str	r3, [r4, #28]
 80a585c:	6923      	ldr	r3, [r4, #16]
 80a585e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a5862:	60e3      	str	r3, [r4, #12]
 80a5864:	f000 ff9d 	bl	80a67a2 <__tz_unlock>
 80a5868:	4620      	mov	r0, r4
 80a586a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a586e:	bf00      	nop
 80a5870:	080a96d8 	.word	0x080a96d8
 80a5874:	20000884 	.word	0x20000884

080a5878 <memcpy>:
 80a5878:	b510      	push	{r4, lr}
 80a587a:	1e43      	subs	r3, r0, #1
 80a587c:	440a      	add	r2, r1
 80a587e:	4291      	cmp	r1, r2
 80a5880:	d004      	beq.n	80a588c <memcpy+0x14>
 80a5882:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a5886:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a588a:	e7f8      	b.n	80a587e <memcpy+0x6>
 80a588c:	bd10      	pop	{r4, pc}

080a588e <memmove>:
 80a588e:	4288      	cmp	r0, r1
 80a5890:	b510      	push	{r4, lr}
 80a5892:	eb01 0302 	add.w	r3, r1, r2
 80a5896:	d801      	bhi.n	80a589c <memmove+0xe>
 80a5898:	1e42      	subs	r2, r0, #1
 80a589a:	e00b      	b.n	80a58b4 <memmove+0x26>
 80a589c:	4298      	cmp	r0, r3
 80a589e:	d2fb      	bcs.n	80a5898 <memmove+0xa>
 80a58a0:	1881      	adds	r1, r0, r2
 80a58a2:	1ad2      	subs	r2, r2, r3
 80a58a4:	42d3      	cmn	r3, r2
 80a58a6:	d004      	beq.n	80a58b2 <memmove+0x24>
 80a58a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80a58ac:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80a58b0:	e7f8      	b.n	80a58a4 <memmove+0x16>
 80a58b2:	bd10      	pop	{r4, pc}
 80a58b4:	4299      	cmp	r1, r3
 80a58b6:	d004      	beq.n	80a58c2 <memmove+0x34>
 80a58b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a58bc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80a58c0:	e7f8      	b.n	80a58b4 <memmove+0x26>
 80a58c2:	bd10      	pop	{r4, pc}

080a58c4 <memset>:
 80a58c4:	4603      	mov	r3, r0
 80a58c6:	4402      	add	r2, r0
 80a58c8:	4293      	cmp	r3, r2
 80a58ca:	d002      	beq.n	80a58d2 <memset+0xe>
 80a58cc:	f803 1b01 	strb.w	r1, [r3], #1
 80a58d0:	e7fa      	b.n	80a58c8 <memset+0x4>
 80a58d2:	4770      	bx	lr

080a58d4 <srand>:
 80a58d4:	b538      	push	{r3, r4, r5, lr}
 80a58d6:	4b12      	ldr	r3, [pc, #72]	; (80a5920 <srand+0x4c>)
 80a58d8:	4605      	mov	r5, r0
 80a58da:	681c      	ldr	r4, [r3, #0]
 80a58dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a58de:	b9d3      	cbnz	r3, 80a5916 <srand+0x42>
 80a58e0:	2018      	movs	r0, #24
 80a58e2:	f7fc fbc3 	bl	80a206c <malloc>
 80a58e6:	f243 330e 	movw	r3, #13070	; 0x330e
 80a58ea:	63a0      	str	r0, [r4, #56]	; 0x38
 80a58ec:	8003      	strh	r3, [r0, #0]
 80a58ee:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a58f2:	8043      	strh	r3, [r0, #2]
 80a58f4:	f241 2334 	movw	r3, #4660	; 0x1234
 80a58f8:	8083      	strh	r3, [r0, #4]
 80a58fa:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a58fe:	80c3      	strh	r3, [r0, #6]
 80a5900:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a5904:	8103      	strh	r3, [r0, #8]
 80a5906:	2305      	movs	r3, #5
 80a5908:	8143      	strh	r3, [r0, #10]
 80a590a:	230b      	movs	r3, #11
 80a590c:	8183      	strh	r3, [r0, #12]
 80a590e:	2201      	movs	r2, #1
 80a5910:	2300      	movs	r3, #0
 80a5912:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a5916:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5918:	2200      	movs	r2, #0
 80a591a:	611d      	str	r5, [r3, #16]
 80a591c:	615a      	str	r2, [r3, #20]
 80a591e:	bd38      	pop	{r3, r4, r5, pc}
 80a5920:	200000b4 	.word	0x200000b4

080a5924 <strchr>:
 80a5924:	b2c9      	uxtb	r1, r1
 80a5926:	4603      	mov	r3, r0
 80a5928:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a592c:	b11a      	cbz	r2, 80a5936 <strchr+0x12>
 80a592e:	4291      	cmp	r1, r2
 80a5930:	d1f9      	bne.n	80a5926 <strchr+0x2>
 80a5932:	4618      	mov	r0, r3
 80a5934:	4770      	bx	lr
 80a5936:	2900      	cmp	r1, #0
 80a5938:	bf0c      	ite	eq
 80a593a:	4618      	moveq	r0, r3
 80a593c:	2000      	movne	r0, #0
 80a593e:	4770      	bx	lr

080a5940 <strchrnul>:
 80a5940:	b510      	push	{r4, lr}
 80a5942:	4604      	mov	r4, r0
 80a5944:	f7ff ffee 	bl	80a5924 <strchr>
 80a5948:	b918      	cbnz	r0, 80a5952 <strchrnul+0x12>
 80a594a:	4620      	mov	r0, r4
 80a594c:	f000 fd28 	bl	80a63a0 <strlen>
 80a5950:	4420      	add	r0, r4
 80a5952:	bd10      	pop	{r4, pc}

080a5954 <strcmp>:
 80a5954:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a5958:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a595c:	2a01      	cmp	r2, #1
 80a595e:	bf28      	it	cs
 80a5960:	429a      	cmpcs	r2, r3
 80a5962:	d0f7      	beq.n	80a5954 <strcmp>
 80a5964:	1ad0      	subs	r0, r2, r3
 80a5966:	4770      	bx	lr

080a5968 <strcpy>:
 80a5968:	4603      	mov	r3, r0
 80a596a:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a596e:	f803 2b01 	strb.w	r2, [r3], #1
 80a5972:	2a00      	cmp	r2, #0
 80a5974:	d1f9      	bne.n	80a596a <strcpy+0x2>
 80a5976:	4770      	bx	lr

080a5978 <iso_year_adjust>:
 80a5978:	6941      	ldr	r1, [r0, #20]
 80a597a:	b510      	push	{r4, lr}
 80a597c:	078b      	lsls	r3, r1, #30
 80a597e:	d10c      	bne.n	80a599a <iso_year_adjust+0x22>
 80a5980:	f240 736c 	movw	r3, #1900	; 0x76c
 80a5984:	2900      	cmp	r1, #0
 80a5986:	bfa8      	it	ge
 80a5988:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a598c:	440b      	add	r3, r1
 80a598e:	2464      	movs	r4, #100	; 0x64
 80a5990:	fb93 f2f4 	sdiv	r2, r3, r4
 80a5994:	fb04 3312 	mls	r3, r4, r2, r3
 80a5998:	b983      	cbnz	r3, 80a59bc <iso_year_adjust+0x44>
 80a599a:	f240 736c 	movw	r3, #1900	; 0x76c
 80a599e:	2900      	cmp	r1, #0
 80a59a0:	bfa8      	it	ge
 80a59a2:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 80a59a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a59aa:	440b      	add	r3, r1
 80a59ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80a59b0:	fb02 3311 	mls	r3, r2, r1, r3
 80a59b4:	fab3 f283 	clz	r2, r3
 80a59b8:	0952      	lsrs	r2, r2, #5
 80a59ba:	e000      	b.n	80a59be <iso_year_adjust+0x46>
 80a59bc:	2201      	movs	r2, #1
 80a59be:	6983      	ldr	r3, [r0, #24]
 80a59c0:	69c1      	ldr	r1, [r0, #28]
 80a59c2:	005b      	lsls	r3, r3, #1
 80a59c4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80a59c8:	4413      	add	r3, r2
 80a59ca:	2b21      	cmp	r3, #33	; 0x21
 80a59cc:	dc0e      	bgt.n	80a59ec <iso_year_adjust+0x74>
 80a59ce:	2b20      	cmp	r3, #32
 80a59d0:	da2f      	bge.n	80a5a32 <iso_year_adjust+0xba>
 80a59d2:	2b0d      	cmp	r3, #13
 80a59d4:	dc02      	bgt.n	80a59dc <iso_year_adjust+0x64>
 80a59d6:	2b0a      	cmp	r3, #10
 80a59d8:	db05      	blt.n	80a59e6 <iso_year_adjust+0x6e>
 80a59da:	e02a      	b.n	80a5a32 <iso_year_adjust+0xba>
 80a59dc:	2b10      	cmp	r3, #16
 80a59de:	db26      	blt.n	80a5a2e <iso_year_adjust+0xb6>
 80a59e0:	2b11      	cmp	r3, #17
 80a59e2:	dd26      	ble.n	80a5a32 <iso_year_adjust+0xba>
 80a59e4:	3b1c      	subs	r3, #28
 80a59e6:	2b01      	cmp	r3, #1
 80a59e8:	d923      	bls.n	80a5a32 <iso_year_adjust+0xba>
 80a59ea:	e020      	b.n	80a5a2e <iso_year_adjust+0xb6>
 80a59ec:	f241 62c6 	movw	r2, #5830	; 0x16c6
 80a59f0:	4293      	cmp	r3, r2
 80a59f2:	dc0e      	bgt.n	80a5a12 <iso_year_adjust+0x9a>
 80a59f4:	f241 62c2 	movw	r2, #5826	; 0x16c2
 80a59f8:	4293      	cmp	r3, r2
 80a59fa:	da16      	bge.n	80a5a2a <iso_year_adjust+0xb2>
 80a59fc:	f241 62a2 	movw	r2, #5794	; 0x16a2
 80a5a00:	4293      	cmp	r3, r2
 80a5a02:	d012      	beq.n	80a5a2a <iso_year_adjust+0xb2>
 80a5a04:	db13      	blt.n	80a5a2e <iso_year_adjust+0xb6>
 80a5a06:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 80a5a0a:	3b12      	subs	r3, #18
 80a5a0c:	2b02      	cmp	r3, #2
 80a5a0e:	d90c      	bls.n	80a5a2a <iso_year_adjust+0xb2>
 80a5a10:	e00d      	b.n	80a5a2e <iso_year_adjust+0xb6>
 80a5a12:	f241 62d5 	movw	r2, #5845	; 0x16d5
 80a5a16:	4293      	cmp	r3, r2
 80a5a18:	d007      	beq.n	80a5a2a <iso_year_adjust+0xb2>
 80a5a1a:	f241 62d7 	movw	r2, #5847	; 0x16d7
 80a5a1e:	4293      	cmp	r3, r2
 80a5a20:	d003      	beq.n	80a5a2a <iso_year_adjust+0xb2>
 80a5a22:	f241 62d3 	movw	r2, #5843	; 0x16d3
 80a5a26:	4293      	cmp	r3, r2
 80a5a28:	d101      	bne.n	80a5a2e <iso_year_adjust+0xb6>
 80a5a2a:	2001      	movs	r0, #1
 80a5a2c:	bd10      	pop	{r4, pc}
 80a5a2e:	2000      	movs	r0, #0
 80a5a30:	bd10      	pop	{r4, pc}
 80a5a32:	f04f 30ff 	mov.w	r0, #4294967295
 80a5a36:	bd10      	pop	{r4, pc}

080a5a38 <strftime>:
 80a5a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5a3c:	460e      	mov	r6, r1
 80a5a3e:	b093      	sub	sp, #76	; 0x4c
 80a5a40:	461d      	mov	r5, r3
 80a5a42:	4607      	mov	r7, r0
 80a5a44:	4691      	mov	r9, r2
 80a5a46:	f000 fdf3 	bl	80a6630 <__get_current_time_locale>
 80a5a4a:	2300      	movs	r3, #0
 80a5a4c:	9306      	str	r3, [sp, #24]
 80a5a4e:	461c      	mov	r4, r3
 80a5a50:	1e73      	subs	r3, r6, #1
 80a5a52:	9003      	str	r0, [sp, #12]
 80a5a54:	9302      	str	r3, [sp, #8]
 80a5a56:	f899 3000 	ldrb.w	r3, [r9]
 80a5a5a:	2b00      	cmp	r3, #0
 80a5a5c:	f000 8492 	beq.w	80a6384 <strftime+0x94c>
 80a5a60:	2b25      	cmp	r3, #37	; 0x25
 80a5a62:	d008      	beq.n	80a5a76 <strftime+0x3e>
 80a5a64:	9a02      	ldr	r2, [sp, #8]
 80a5a66:	4294      	cmp	r4, r2
 80a5a68:	f080 8490 	bcs.w	80a638c <strftime+0x954>
 80a5a6c:	553b      	strb	r3, [r7, r4]
 80a5a6e:	f109 0901 	add.w	r9, r9, #1
 80a5a72:	3401      	adds	r4, #1
 80a5a74:	e7ef      	b.n	80a5a56 <strftime+0x1e>
 80a5a76:	f899 a001 	ldrb.w	sl, [r9, #1]
 80a5a7a:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 80a5a7e:	d007      	beq.n	80a5a90 <strftime+0x58>
 80a5a80:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a5a84:	d004      	beq.n	80a5a90 <strftime+0x58>
 80a5a86:	f109 0901 	add.w	r9, r9, #1
 80a5a8a:	f04f 0a00 	mov.w	sl, #0
 80a5a8e:	e001      	b.n	80a5a94 <strftime+0x5c>
 80a5a90:	f109 0902 	add.w	r9, r9, #2
 80a5a94:	f899 3000 	ldrb.w	r3, [r9]
 80a5a98:	3b31      	subs	r3, #49	; 0x31
 80a5a9a:	2b08      	cmp	r3, #8
 80a5a9c:	d808      	bhi.n	80a5ab0 <strftime+0x78>
 80a5a9e:	4648      	mov	r0, r9
 80a5aa0:	220a      	movs	r2, #10
 80a5aa2:	a90a      	add	r1, sp, #40	; 0x28
 80a5aa4:	f000 fdba 	bl	80a661c <strtoul>
 80a5aa8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80a5aac:	4680      	mov	r8, r0
 80a5aae:	e001      	b.n	80a5ab4 <strftime+0x7c>
 80a5ab0:	f04f 0800 	mov.w	r8, #0
 80a5ab4:	f899 3000 	ldrb.w	r3, [r9]
 80a5ab8:	2b45      	cmp	r3, #69	; 0x45
 80a5aba:	d001      	beq.n	80a5ac0 <strftime+0x88>
 80a5abc:	2b4f      	cmp	r3, #79	; 0x4f
 80a5abe:	d101      	bne.n	80a5ac4 <strftime+0x8c>
 80a5ac0:	f109 0901 	add.w	r9, r9, #1
 80a5ac4:	f899 0000 	ldrb.w	r0, [r9]
 80a5ac8:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80a5acc:	2b55      	cmp	r3, #85	; 0x55
 80a5ace:	f200 845d 	bhi.w	80a638c <strftime+0x954>
 80a5ad2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a5ad6:	044a      	.short	0x044a
 80a5ad8:	045b045b 	.word	0x045b045b
 80a5adc:	045b045b 	.word	0x045b045b
 80a5ae0:	045b045b 	.word	0x045b045b
 80a5ae4:	045b045b 	.word	0x045b045b
 80a5ae8:	045b045b 	.word	0x045b045b
 80a5aec:	045b045b 	.word	0x045b045b
 80a5af0:	045b045b 	.word	0x045b045b
 80a5af4:	045b045b 	.word	0x045b045b
 80a5af8:	045b045b 	.word	0x045b045b
 80a5afc:	045b045b 	.word	0x045b045b
 80a5b00:	045b045b 	.word	0x045b045b
 80a5b04:	045b045b 	.word	0x045b045b
 80a5b08:	045b045b 	.word	0x045b045b
 80a5b0c:	006f045b 	.word	0x006f045b
 80a5b10:	00d400a1 	.word	0x00d400a1
 80a5b14:	045b011a 	.word	0x045b011a
 80a5b18:	01a0013f 	.word	0x01a0013f
 80a5b1c:	022d0226 	.word	0x022d0226
 80a5b20:	045b045b 	.word	0x045b045b
 80a5b24:	0260045b 	.word	0x0260045b
 80a5b28:	045b045b 	.word	0x045b045b
 80a5b2c:	045b0268 	.word	0x045b0268
 80a5b30:	031c0296 	.word	0x031c0296
 80a5b34:	033a0324 	.word	0x033a0324
 80a5b38:	03850342 	.word	0x03850342
 80a5b3c:	039f00c6 	.word	0x039f00c6
 80a5b40:	045b041f 	.word	0x045b041f
 80a5b44:	045b045b 	.word	0x045b045b
 80a5b48:	045b045b 	.word	0x045b045b
 80a5b4c:	0056045b 	.word	0x0056045b
 80a5b50:	00ba0089 	.word	0x00ba0089
 80a5b54:	010c010c 	.word	0x010c010c
 80a5b58:	0171045b 	.word	0x0171045b
 80a5b5c:	045b0089 	.word	0x045b0089
 80a5b60:	0226023d 	.word	0x0226023d
 80a5b64:	025d022d 	.word	0x025d022d
 80a5b68:	045b0262 	.word	0x045b0262
 80a5b6c:	045b0268 	.word	0x045b0268
 80a5b70:	029b00be 	.word	0x029b00be
 80a5b74:	032d031e 	.word	0x032d031e
 80a5b78:	037e045b 	.word	0x037e045b
 80a5b7c:	039100c2 	.word	0x039100c2
 80a5b80:	03e7      	.short	0x03e7
 80a5b82:	69ab      	ldr	r3, [r5, #24]
 80a5b84:	9a03      	ldr	r2, [sp, #12]
 80a5b86:	3318      	adds	r3, #24
 80a5b88:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a5b8c:	4640      	mov	r0, r8
 80a5b8e:	f000 fc07 	bl	80a63a0 <strlen>
 80a5b92:	f108 38ff 	add.w	r8, r8, #4294967295
 80a5b96:	193b      	adds	r3, r7, r4
 80a5b98:	4420      	add	r0, r4
 80a5b9a:	4284      	cmp	r4, r0
 80a5b9c:	f000 83eb 	beq.w	80a6376 <strftime+0x93e>
 80a5ba0:	9a02      	ldr	r2, [sp, #8]
 80a5ba2:	4294      	cmp	r4, r2
 80a5ba4:	f080 83f2 	bcs.w	80a638c <strftime+0x954>
 80a5ba8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a5bac:	3401      	adds	r4, #1
 80a5bae:	f803 2b01 	strb.w	r2, [r3], #1
 80a5bb2:	e7f2      	b.n	80a5b9a <strftime+0x162>
 80a5bb4:	69ab      	ldr	r3, [r5, #24]
 80a5bb6:	9a03      	ldr	r2, [sp, #12]
 80a5bb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80a5bbc:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 80a5bc0:	4640      	mov	r0, r8
 80a5bc2:	f000 fbed 	bl	80a63a0 <strlen>
 80a5bc6:	f108 38ff 	add.w	r8, r8, #4294967295
 80a5bca:	193b      	adds	r3, r7, r4
 80a5bcc:	4420      	add	r0, r4
 80a5bce:	4284      	cmp	r4, r0
 80a5bd0:	f000 83d1 	beq.w	80a6376 <strftime+0x93e>
 80a5bd4:	9a02      	ldr	r2, [sp, #8]
 80a5bd6:	4294      	cmp	r4, r2
 80a5bd8:	f080 83d8 	bcs.w	80a638c <strftime+0x954>
 80a5bdc:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a5be0:	3401      	adds	r4, #1
 80a5be2:	f803 2b01 	strb.w	r2, [r3], #1
 80a5be6:	e7f2      	b.n	80a5bce <strftime+0x196>
 80a5be8:	692b      	ldr	r3, [r5, #16]
 80a5bea:	9a03      	ldr	r2, [sp, #12]
 80a5bec:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a5bf0:	4640      	mov	r0, r8
 80a5bf2:	f000 fbd5 	bl	80a63a0 <strlen>
 80a5bf6:	f108 38ff 	add.w	r8, r8, #4294967295
 80a5bfa:	193b      	adds	r3, r7, r4
 80a5bfc:	4420      	add	r0, r4
 80a5bfe:	4284      	cmp	r4, r0
 80a5c00:	f000 83b9 	beq.w	80a6376 <strftime+0x93e>
 80a5c04:	9a02      	ldr	r2, [sp, #8]
 80a5c06:	4294      	cmp	r4, r2
 80a5c08:	f080 83c0 	bcs.w	80a638c <strftime+0x954>
 80a5c0c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a5c10:	3401      	adds	r4, #1
 80a5c12:	f803 2b01 	strb.w	r2, [r3], #1
 80a5c16:	e7f2      	b.n	80a5bfe <strftime+0x1c6>
 80a5c18:	692b      	ldr	r3, [r5, #16]
 80a5c1a:	9a03      	ldr	r2, [sp, #12]
 80a5c1c:	330c      	adds	r3, #12
 80a5c1e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a5c22:	4640      	mov	r0, r8
 80a5c24:	f000 fbbc 	bl	80a63a0 <strlen>
 80a5c28:	f108 38ff 	add.w	r8, r8, #4294967295
 80a5c2c:	193b      	adds	r3, r7, r4
 80a5c2e:	4420      	add	r0, r4
 80a5c30:	4284      	cmp	r4, r0
 80a5c32:	f000 83a0 	beq.w	80a6376 <strftime+0x93e>
 80a5c36:	9a02      	ldr	r2, [sp, #8]
 80a5c38:	4294      	cmp	r4, r2
 80a5c3a:	f080 83a7 	bcs.w	80a638c <strftime+0x954>
 80a5c3e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a5c42:	3401      	adds	r4, #1
 80a5c44:	f803 2b01 	strb.w	r2, [r3], #1
 80a5c48:	e7f2      	b.n	80a5c30 <strftime+0x1f8>
 80a5c4a:	9b03      	ldr	r3, [sp, #12]
 80a5c4c:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80a5c50:	e00a      	b.n	80a5c68 <strftime+0x230>
 80a5c52:	9b03      	ldr	r3, [sp, #12]
 80a5c54:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 80a5c58:	e006      	b.n	80a5c68 <strftime+0x230>
 80a5c5a:	9b03      	ldr	r3, [sp, #12]
 80a5c5c:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 80a5c60:	e002      	b.n	80a5c68 <strftime+0x230>
 80a5c62:	9b03      	ldr	r3, [sp, #12]
 80a5c64:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 80a5c68:	4640      	mov	r0, r8
 80a5c6a:	f000 fb99 	bl	80a63a0 <strlen>
 80a5c6e:	f898 3000 	ldrb.w	r3, [r8]
 80a5c72:	2b00      	cmp	r3, #0
 80a5c74:	f000 837f 	beq.w	80a6376 <strftime+0x93e>
 80a5c78:	462b      	mov	r3, r5
 80a5c7a:	4642      	mov	r2, r8
 80a5c7c:	e093      	b.n	80a5da6 <strftime+0x36e>
 80a5c7e:	49b6      	ldr	r1, [pc, #728]	; (80a5f58 <strftime+0x520>)
 80a5c80:	f8d5 b014 	ldr.w	fp, [r5, #20]
 80a5c84:	458b      	cmp	fp, r1
 80a5c86:	bfac      	ite	ge
 80a5c88:	2100      	movge	r1, #0
 80a5c8a:	2101      	movlt	r1, #1
 80a5c8c:	f1bb 0f00 	cmp.w	fp, #0
 80a5c90:	db04      	blt.n	80a5c9c <strftime+0x264>
 80a5c92:	2064      	movs	r0, #100	; 0x64
 80a5c94:	fb9b f0f0 	sdiv	r0, fp, r0
 80a5c98:	3013      	adds	r0, #19
 80a5c9a:	e008      	b.n	80a5cae <strftime+0x276>
 80a5c9c:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 80a5ca0:	9107      	str	r1, [sp, #28]
 80a5ca2:	f000 ff05 	bl	80a6ab0 <abs>
 80a5ca6:	2364      	movs	r3, #100	; 0x64
 80a5ca8:	fb90 f0f3 	sdiv	r0, r0, r3
 80a5cac:	9907      	ldr	r1, [sp, #28]
 80a5cae:	f1ba 0f00 	cmp.w	sl, #0
 80a5cb2:	d008      	beq.n	80a5cc6 <strftime+0x28e>
 80a5cb4:	2863      	cmp	r0, #99	; 0x63
 80a5cb6:	dd09      	ble.n	80a5ccc <strftime+0x294>
 80a5cb8:	4ba8      	ldr	r3, [pc, #672]	; (80a5f5c <strftime+0x524>)
 80a5cba:	4aa9      	ldr	r2, [pc, #676]	; (80a5f60 <strftime+0x528>)
 80a5cbc:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a5cc0:	bf18      	it	ne
 80a5cc2:	4613      	movne	r3, r2
 80a5cc4:	e003      	b.n	80a5cce <strftime+0x296>
 80a5cc6:	4ba6      	ldr	r3, [pc, #664]	; (80a5f60 <strftime+0x528>)
 80a5cc8:	4aa6      	ldr	r2, [pc, #664]	; (80a5f64 <strftime+0x52c>)
 80a5cca:	e001      	b.n	80a5cd0 <strftime+0x298>
 80a5ccc:	4ba4      	ldr	r3, [pc, #656]	; (80a5f60 <strftime+0x528>)
 80a5cce:	4aa6      	ldr	r2, [pc, #664]	; (80a5f68 <strftime+0x530>)
 80a5cd0:	f1b8 0f01 	cmp.w	r8, #1
 80a5cd4:	bf98      	it	ls
 80a5cd6:	f04f 0802 	movls.w	r8, #2
 80a5cda:	ebc1 0108 	rsb	r1, r1, r8
 80a5cde:	9001      	str	r0, [sp, #4]
 80a5ce0:	9100      	str	r1, [sp, #0]
 80a5ce2:	489d      	ldr	r0, [pc, #628]	; (80a5f58 <strftime+0x520>)
 80a5ce4:	49a1      	ldr	r1, [pc, #644]	; (80a5f6c <strftime+0x534>)
 80a5ce6:	4583      	cmp	fp, r0
 80a5ce8:	bfb8      	it	lt
 80a5cea:	460b      	movlt	r3, r1
 80a5cec:	e21d      	b.n	80a612a <strftime+0x6f2>
 80a5cee:	4aa0      	ldr	r2, [pc, #640]	; (80a5f70 <strftime+0x538>)
 80a5cf0:	49a0      	ldr	r1, [pc, #640]	; (80a5f74 <strftime+0x53c>)
 80a5cf2:	68eb      	ldr	r3, [r5, #12]
 80a5cf4:	2864      	cmp	r0, #100	; 0x64
 80a5cf6:	bf08      	it	eq
 80a5cf8:	460a      	moveq	r2, r1
 80a5cfa:	1b31      	subs	r1, r6, r4
 80a5cfc:	1938      	adds	r0, r7, r4
 80a5cfe:	f7fc f9ed 	bl	80a20dc <sniprintf>
 80a5d02:	2800      	cmp	r0, #0
 80a5d04:	f280 8302 	bge.w	80a630c <strftime+0x8d4>
 80a5d08:	e340      	b.n	80a638c <strftime+0x954>
 80a5d0a:	6968      	ldr	r0, [r5, #20]
 80a5d0c:	692b      	ldr	r3, [r5, #16]
 80a5d0e:	2800      	cmp	r0, #0
 80a5d10:	f103 0b01 	add.w	fp, r3, #1
 80a5d14:	eb07 0804 	add.w	r8, r7, r4
 80a5d18:	ebc4 0a06 	rsb	sl, r4, r6
 80a5d1c:	68eb      	ldr	r3, [r5, #12]
 80a5d1e:	db05      	blt.n	80a5d2c <strftime+0x2f4>
 80a5d20:	2264      	movs	r2, #100	; 0x64
 80a5d22:	fb90 f1f2 	sdiv	r1, r0, r2
 80a5d26:	fb02 0011 	mls	r0, r2, r1, r0
 80a5d2a:	e00a      	b.n	80a5d42 <strftime+0x30a>
 80a5d2c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5d30:	9307      	str	r3, [sp, #28]
 80a5d32:	f000 febd 	bl	80a6ab0 <abs>
 80a5d36:	2264      	movs	r2, #100	; 0x64
 80a5d38:	fb90 f1f2 	sdiv	r1, r0, r2
 80a5d3c:	fb01 0012 	mls	r0, r1, r2, r0
 80a5d40:	9b07      	ldr	r3, [sp, #28]
 80a5d42:	9001      	str	r0, [sp, #4]
 80a5d44:	9300      	str	r3, [sp, #0]
 80a5d46:	4651      	mov	r1, sl
 80a5d48:	465b      	mov	r3, fp
 80a5d4a:	4640      	mov	r0, r8
 80a5d4c:	4a8a      	ldr	r2, [pc, #552]	; (80a5f78 <strftime+0x540>)
 80a5d4e:	f7fc f9c5 	bl	80a20dc <sniprintf>
 80a5d52:	e7d6      	b.n	80a5d02 <strftime+0x2ca>
 80a5d54:	2325      	movs	r3, #37	; 0x25
 80a5d56:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a5d5a:	f1ba 0f00 	cmp.w	sl, #0
 80a5d5e:	d007      	beq.n	80a5d70 <strftime+0x338>
 80a5d60:	f1b8 0f05 	cmp.w	r8, #5
 80a5d64:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 80a5d68:	bf98      	it	ls
 80a5d6a:	f04f 0806 	movls.w	r8, #6
 80a5d6e:	e004      	b.n	80a5d7a <strftime+0x342>
 80a5d70:	232b      	movs	r3, #43	; 0x2b
 80a5d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80a5d76:	f04f 080a 	mov.w	r8, #10
 80a5d7a:	f1b8 0306 	subs.w	r3, r8, #6
 80a5d7e:	d102      	bne.n	80a5d86 <strftime+0x34e>
 80a5d80:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80a5d84:	e00a      	b.n	80a5d9c <strftime+0x364>
 80a5d86:	4a7d      	ldr	r2, [pc, #500]	; (80a5f7c <strftime+0x544>)
 80a5d88:	211e      	movs	r1, #30
 80a5d8a:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 80a5d8e:	f7fc f9a5 	bl	80a20dc <sniprintf>
 80a5d92:	2800      	cmp	r0, #0
 80a5d94:	ddf4      	ble.n	80a5d80 <strftime+0x348>
 80a5d96:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 80a5d9a:	4418      	add	r0, r3
 80a5d9c:	4978      	ldr	r1, [pc, #480]	; (80a5f80 <strftime+0x548>)
 80a5d9e:	f7ff fde3 	bl	80a5968 <strcpy>
 80a5da2:	462b      	mov	r3, r5
 80a5da4:	aa0a      	add	r2, sp, #40	; 0x28
 80a5da6:	1b31      	subs	r1, r6, r4
 80a5da8:	1938      	adds	r0, r7, r4
 80a5daa:	f7ff fe45 	bl	80a5a38 <strftime>
 80a5dae:	2800      	cmp	r0, #0
 80a5db0:	f340 82ec 	ble.w	80a638c <strftime+0x954>
 80a5db4:	4404      	add	r4, r0
 80a5db6:	e2de      	b.n	80a6376 <strftime+0x93e>
 80a5db8:	4628      	mov	r0, r5
 80a5dba:	f7ff fddd 	bl	80a5978 <iso_year_adjust>
 80a5dbe:	4680      	mov	r8, r0
 80a5dc0:	6968      	ldr	r0, [r5, #20]
 80a5dc2:	2800      	cmp	r0, #0
 80a5dc4:	db05      	blt.n	80a5dd2 <strftime+0x39a>
 80a5dc6:	2264      	movs	r2, #100	; 0x64
 80a5dc8:	fb90 f1f2 	sdiv	r1, r0, r2
 80a5dcc:	fb02 0011 	mls	r0, r2, r1, r0
 80a5dd0:	e008      	b.n	80a5de4 <strftime+0x3ac>
 80a5dd2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5dd6:	f000 fe6b 	bl	80a6ab0 <abs>
 80a5dda:	2264      	movs	r2, #100	; 0x64
 80a5ddc:	fb90 f3f2 	sdiv	r3, r0, r2
 80a5de0:	fb03 0012 	mls	r0, r3, r2, r0
 80a5de4:	f1b8 0f00 	cmp.w	r8, #0
 80a5de8:	da06      	bge.n	80a5df8 <strftime+0x3c0>
 80a5dea:	696a      	ldr	r2, [r5, #20]
 80a5dec:	4b65      	ldr	r3, [pc, #404]	; (80a5f84 <strftime+0x54c>)
 80a5dee:	429a      	cmp	r2, r3
 80a5df0:	bfb8      	it	lt
 80a5df2:	f04f 0801 	movlt.w	r8, #1
 80a5df6:	e006      	b.n	80a5e06 <strftime+0x3ce>
 80a5df8:	d005      	beq.n	80a5e06 <strftime+0x3ce>
 80a5dfa:	696a      	ldr	r2, [r5, #20]
 80a5dfc:	4b56      	ldr	r3, [pc, #344]	; (80a5f58 <strftime+0x520>)
 80a5dfe:	429a      	cmp	r2, r3
 80a5e00:	bfb8      	it	lt
 80a5e02:	f04f 38ff 	movlt.w	r8, #4294967295
 80a5e06:	2364      	movs	r3, #100	; 0x64
 80a5e08:	4440      	add	r0, r8
 80a5e0a:	fb90 f2f3 	sdiv	r2, r0, r3
 80a5e0e:	fb03 0012 	mls	r0, r3, r2, r0
 80a5e12:	4418      	add	r0, r3
 80a5e14:	e1f8      	b.n	80a6208 <strftime+0x7d0>
 80a5e16:	4b50      	ldr	r3, [pc, #320]	; (80a5f58 <strftime+0x520>)
 80a5e18:	6969      	ldr	r1, [r5, #20]
 80a5e1a:	4628      	mov	r0, r5
 80a5e1c:	4299      	cmp	r1, r3
 80a5e1e:	bfac      	ite	ge
 80a5e20:	2300      	movge	r3, #0
 80a5e22:	2301      	movlt	r3, #1
 80a5e24:	9108      	str	r1, [sp, #32]
 80a5e26:	9307      	str	r3, [sp, #28]
 80a5e28:	f7ff fda6 	bl	80a5978 <iso_year_adjust>
 80a5e2c:	9908      	ldr	r1, [sp, #32]
 80a5e2e:	4683      	mov	fp, r0
 80a5e30:	2900      	cmp	r1, #0
 80a5e32:	db04      	blt.n	80a5e3e <strftime+0x406>
 80a5e34:	2364      	movs	r3, #100	; 0x64
 80a5e36:	fb91 f3f3 	sdiv	r3, r1, r3
 80a5e3a:	3313      	adds	r3, #19
 80a5e3c:	e008      	b.n	80a5e50 <strftime+0x418>
 80a5e3e:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 80a5e42:	9108      	str	r1, [sp, #32]
 80a5e44:	f000 fe34 	bl	80a6ab0 <abs>
 80a5e48:	2364      	movs	r3, #100	; 0x64
 80a5e4a:	fb90 f3f3 	sdiv	r3, r0, r3
 80a5e4e:	9908      	ldr	r1, [sp, #32]
 80a5e50:	6968      	ldr	r0, [r5, #20]
 80a5e52:	2800      	cmp	r0, #0
 80a5e54:	db06      	blt.n	80a5e64 <strftime+0x42c>
 80a5e56:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a5e5a:	fb90 fcfe 	sdiv	ip, r0, lr
 80a5e5e:	fb0e 001c 	mls	r0, lr, ip, r0
 80a5e62:	e00d      	b.n	80a5e80 <strftime+0x448>
 80a5e64:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a5e68:	9109      	str	r1, [sp, #36]	; 0x24
 80a5e6a:	9308      	str	r3, [sp, #32]
 80a5e6c:	f000 fe20 	bl	80a6ab0 <abs>
 80a5e70:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a5e74:	fb90 fcfe 	sdiv	ip, r0, lr
 80a5e78:	fb0c 001e 	mls	r0, ip, lr, r0
 80a5e7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a5e7e:	9b08      	ldr	r3, [sp, #32]
 80a5e80:	f1bb 0f00 	cmp.w	fp, #0
 80a5e84:	da08      	bge.n	80a5e98 <strftime+0x460>
 80a5e86:	6969      	ldr	r1, [r5, #20]
 80a5e88:	4a3e      	ldr	r2, [pc, #248]	; (80a5f84 <strftime+0x54c>)
 80a5e8a:	4291      	cmp	r1, r2
 80a5e8c:	da0a      	bge.n	80a5ea4 <strftime+0x46c>
 80a5e8e:	f04f 0b01 	mov.w	fp, #1
 80a5e92:	f8cd b01c 	str.w	fp, [sp, #28]
 80a5e96:	e005      	b.n	80a5ea4 <strftime+0x46c>
 80a5e98:	d004      	beq.n	80a5ea4 <strftime+0x46c>
 80a5e9a:	4a2f      	ldr	r2, [pc, #188]	; (80a5f58 <strftime+0x520>)
 80a5e9c:	4291      	cmp	r1, r2
 80a5e9e:	bfb8      	it	lt
 80a5ea0:	f04f 3bff 	movlt.w	fp, #4294967295
 80a5ea4:	eb0b 0200 	add.w	r2, fp, r0
 80a5ea8:	1c50      	adds	r0, r2, #1
 80a5eaa:	d102      	bne.n	80a5eb2 <strftime+0x47a>
 80a5eac:	3b01      	subs	r3, #1
 80a5eae:	2263      	movs	r2, #99	; 0x63
 80a5eb0:	e003      	b.n	80a5eba <strftime+0x482>
 80a5eb2:	2a64      	cmp	r2, #100	; 0x64
 80a5eb4:	bf04      	itt	eq
 80a5eb6:	3301      	addeq	r3, #1
 80a5eb8:	2200      	moveq	r2, #0
 80a5eba:	2064      	movs	r0, #100	; 0x64
 80a5ebc:	fb00 2303 	mla	r3, r0, r3, r2
 80a5ec0:	9a07      	ldr	r2, [sp, #28]
 80a5ec2:	b142      	cbz	r2, 80a5ed6 <strftime+0x49e>
 80a5ec4:	222d      	movs	r2, #45	; 0x2d
 80a5ec6:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 80a5eca:	f1b8 0f00 	cmp.w	r8, #0
 80a5ece:	d013      	beq.n	80a5ef8 <strftime+0x4c0>
 80a5ed0:	f108 38ff 	add.w	r8, r8, #4294967295
 80a5ed4:	e010      	b.n	80a5ef8 <strftime+0x4c0>
 80a5ed6:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a5eda:	d110      	bne.n	80a5efe <strftime+0x4c6>
 80a5edc:	f242 720f 	movw	r2, #9999	; 0x270f
 80a5ee0:	4293      	cmp	r3, r2
 80a5ee2:	d90c      	bls.n	80a5efe <strftime+0x4c6>
 80a5ee4:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80a5ee8:	f1b8 0f00 	cmp.w	r8, #0
 80a5eec:	d1f0      	bne.n	80a5ed0 <strftime+0x498>
 80a5eee:	aa12      	add	r2, sp, #72	; 0x48
 80a5ef0:	2125      	movs	r1, #37	; 0x25
 80a5ef2:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 80a5ef6:	e00a      	b.n	80a5f0e <strftime+0x4d6>
 80a5ef8:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 80a5efc:	e000      	b.n	80a5f00 <strftime+0x4c8>
 80a5efe:	aa0a      	add	r2, sp, #40	; 0x28
 80a5f00:	2125      	movs	r1, #37	; 0x25
 80a5f02:	7011      	strb	r1, [r2, #0]
 80a5f04:	f1ba 0f00 	cmp.w	sl, #0
 80a5f08:	d101      	bne.n	80a5f0e <strftime+0x4d6>
 80a5f0a:	1c50      	adds	r0, r2, #1
 80a5f0c:	e002      	b.n	80a5f14 <strftime+0x4dc>
 80a5f0e:	2130      	movs	r1, #48	; 0x30
 80a5f10:	1c90      	adds	r0, r2, #2
 80a5f12:	7051      	strb	r1, [r2, #1]
 80a5f14:	491c      	ldr	r1, [pc, #112]	; (80a5f88 <strftime+0x550>)
 80a5f16:	9307      	str	r3, [sp, #28]
 80a5f18:	f7ff fd26 	bl	80a5968 <strcpy>
 80a5f1c:	9b07      	ldr	r3, [sp, #28]
 80a5f1e:	9300      	str	r3, [sp, #0]
 80a5f20:	e1ac      	b.n	80a627c <strftime+0x844>
 80a5f22:	4a14      	ldr	r2, [pc, #80]	; (80a5f74 <strftime+0x53c>)
 80a5f24:	4912      	ldr	r1, [pc, #72]	; (80a5f70 <strftime+0x538>)
 80a5f26:	68ab      	ldr	r3, [r5, #8]
 80a5f28:	286b      	cmp	r0, #107	; 0x6b
 80a5f2a:	bf08      	it	eq
 80a5f2c:	460a      	moveq	r2, r1
 80a5f2e:	e6e4      	b.n	80a5cfa <strftime+0x2c2>
 80a5f30:	68a9      	ldr	r1, [r5, #8]
 80a5f32:	230c      	movs	r3, #12
 80a5f34:	b131      	cbz	r1, 80a5f44 <strftime+0x50c>
 80a5f36:	4299      	cmp	r1, r3
 80a5f38:	bf16      	itet	ne
 80a5f3a:	fb91 f2f3 	sdivne	r2, r1, r3
 80a5f3e:	460b      	moveq	r3, r1
 80a5f40:	fb03 1312 	mlsne	r3, r3, r2, r1
 80a5f44:	4a0a      	ldr	r2, [pc, #40]	; (80a5f70 <strftime+0x538>)
 80a5f46:	490b      	ldr	r1, [pc, #44]	; (80a5f74 <strftime+0x53c>)
 80a5f48:	2849      	cmp	r0, #73	; 0x49
 80a5f4a:	bf08      	it	eq
 80a5f4c:	460a      	moveq	r2, r1
 80a5f4e:	e6d4      	b.n	80a5cfa <strftime+0x2c2>
 80a5f50:	69eb      	ldr	r3, [r5, #28]
 80a5f52:	4a0e      	ldr	r2, [pc, #56]	; (80a5f8c <strftime+0x554>)
 80a5f54:	3301      	adds	r3, #1
 80a5f56:	e6d0      	b.n	80a5cfa <strftime+0x2c2>
 80a5f58:	fffff894 	.word	0xfffff894
 80a5f5c:	080a9747 	.word	0x080a9747
 80a5f60:	080a946f 	.word	0x080a946f
 80a5f64:	080a9738 	.word	0x080a9738
 80a5f68:	080a973f 	.word	0x080a973f
 80a5f6c:	080a6cf4 	.word	0x080a6cf4
 80a5f70:	080a9749 	.word	0x080a9749
 80a5f74:	080a9757 	.word	0x080a9757
 80a5f78:	080a974d 	.word	0x080a974d
 80a5f7c:	080a975c 	.word	0x080a975c
 80a5f80:	080a9760 	.word	0x080a9760
 80a5f84:	fffff895 	.word	0xfffff895
 80a5f88:	080a9768 	.word	0x080a9768
 80a5f8c:	080a976c 	.word	0x080a976c
 80a5f90:	692b      	ldr	r3, [r5, #16]
 80a5f92:	3301      	adds	r3, #1
 80a5f94:	e13c      	b.n	80a6210 <strftime+0x7d8>
 80a5f96:	686b      	ldr	r3, [r5, #4]
 80a5f98:	e13a      	b.n	80a6210 <strftime+0x7d8>
 80a5f9a:	9b02      	ldr	r3, [sp, #8]
 80a5f9c:	429c      	cmp	r4, r3
 80a5f9e:	f080 81f5 	bcs.w	80a638c <strftime+0x954>
 80a5fa2:	230a      	movs	r3, #10
 80a5fa4:	e1e5      	b.n	80a6372 <strftime+0x93a>
 80a5fa6:	68ab      	ldr	r3, [r5, #8]
 80a5fa8:	9a03      	ldr	r2, [sp, #12]
 80a5faa:	2b0b      	cmp	r3, #11
 80a5fac:	bfcc      	ite	gt
 80a5fae:	23a4      	movgt	r3, #164	; 0xa4
 80a5fb0:	23a0      	movle	r3, #160	; 0xa0
 80a5fb2:	4413      	add	r3, r2
 80a5fb4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80a5fb8:	4640      	mov	r0, r8
 80a5fba:	f000 f9f1 	bl	80a63a0 <strlen>
 80a5fbe:	4642      	mov	r2, r8
 80a5fc0:	4bb1      	ldr	r3, [pc, #708]	; (80a6288 <strftime+0x850>)
 80a5fc2:	1939      	adds	r1, r7, r4
 80a5fc4:	f8d3 e000 	ldr.w	lr, [r3]
 80a5fc8:	4420      	add	r0, r4
 80a5fca:	4284      	cmp	r4, r0
 80a5fcc:	f000 81d3 	beq.w	80a6376 <strftime+0x93e>
 80a5fd0:	9b02      	ldr	r3, [sp, #8]
 80a5fd2:	429c      	cmp	r4, r3
 80a5fd4:	f080 81da 	bcs.w	80a638c <strftime+0x954>
 80a5fd8:	f899 3000 	ldrb.w	r3, [r9]
 80a5fdc:	3401      	adds	r4, #1
 80a5fde:	2b50      	cmp	r3, #80	; 0x50
 80a5fe0:	7813      	ldrb	r3, [r2, #0]
 80a5fe2:	d10a      	bne.n	80a5ffa <strftime+0x5c2>
 80a5fe4:	eb0e 0c03 	add.w	ip, lr, r3
 80a5fe8:	f89c c001 	ldrb.w	ip, [ip, #1]
 80a5fec:	f00c 0c03 	and.w	ip, ip, #3
 80a5ff0:	f1bc 0f01 	cmp.w	ip, #1
 80a5ff4:	bf08      	it	eq
 80a5ff6:	3320      	addeq	r3, #32
 80a5ff8:	b2db      	uxtb	r3, r3
 80a5ffa:	f801 3b01 	strb.w	r3, [r1], #1
 80a5ffe:	3201      	adds	r2, #1
 80a6000:	e7e3      	b.n	80a5fca <strftime+0x592>
 80a6002:	686b      	ldr	r3, [r5, #4]
 80a6004:	4aa1      	ldr	r2, [pc, #644]	; (80a628c <strftime+0x854>)
 80a6006:	9300      	str	r3, [sp, #0]
 80a6008:	68ab      	ldr	r3, [r5, #8]
 80a600a:	e139      	b.n	80a6280 <strftime+0x848>
 80a600c:	6a2b      	ldr	r3, [r5, #32]
 80a600e:	2b00      	cmp	r3, #0
 80a6010:	db17      	blt.n	80a6042 <strftime+0x60a>
 80a6012:	f000 fbc5 	bl	80a67a0 <__tz_lock>
 80a6016:	9b06      	ldr	r3, [sp, #24]
 80a6018:	b91b      	cbnz	r3, 80a6022 <strftime+0x5ea>
 80a601a:	f000 fbc3 	bl	80a67a4 <_tzset_unlocked>
 80a601e:	2301      	movs	r3, #1
 80a6020:	9306      	str	r3, [sp, #24]
 80a6022:	f000 fd8d 	bl	80a6b40 <__gettzinfo>
 80a6026:	6a2b      	ldr	r3, [r5, #32]
 80a6028:	221c      	movs	r2, #28
 80a602a:	2b00      	cmp	r3, #0
 80a602c:	bfd4      	ite	le
 80a602e:	2300      	movle	r3, #0
 80a6030:	2301      	movgt	r3, #1
 80a6032:	fb02 0003 	mla	r0, r2, r3, r0
 80a6036:	6a03      	ldr	r3, [r0, #32]
 80a6038:	f1c3 0800 	rsb	r8, r3, #0
 80a603c:	f000 fbb1 	bl	80a67a2 <__tz_unlock>
 80a6040:	e001      	b.n	80a6046 <strftime+0x60e>
 80a6042:	f04f 0800 	mov.w	r8, #0
 80a6046:	f8d5 e014 	ldr.w	lr, [r5, #20]
 80a604a:	ebc4 0c06 	rsb	ip, r4, r6
 80a604e:	4670      	mov	r0, lr
 80a6050:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 80a6054:	ea4f 71e0 	mov.w	r1, r0, asr #31
 80a6058:	f141 33ff 	adc.w	r3, r1, #4294967295
 80a605c:	2a00      	cmp	r2, #0
 80a605e:	f173 0b00 	sbcs.w	fp, r3, #0
 80a6062:	eb07 0a04 	add.w	sl, r7, r4
 80a6066:	da03      	bge.n	80a6070 <strftime+0x638>
 80a6068:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 80a606c:	f141 33ff 	adc.w	r3, r1, #4294967295
 80a6070:	0891      	lsrs	r1, r2, #2
 80a6072:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 80a6076:	109b      	asrs	r3, r3, #2
 80a6078:	9104      	str	r1, [sp, #16]
 80a607a:	9305      	str	r3, [sp, #20]
 80a607c:	f10e 31ff 	add.w	r1, lr, #4294967295
 80a6080:	2364      	movs	r3, #100	; 0x64
 80a6082:	fb91 f1f3 	sdiv	r1, r1, r3
 80a6086:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80a608a:	1a52      	subs	r2, r2, r1
 80a608c:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 80a6090:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 80a6094:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a6098:	fb90 f1f1 	sdiv	r1, r0, r1
 80a609c:	1852      	adds	r2, r2, r1
 80a609e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a60a2:	f240 116d 	movw	r1, #365	; 0x16d
 80a60a6:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 80a60aa:	fb01 fe0e 	mul.w	lr, r1, lr
 80a60ae:	69e9      	ldr	r1, [r5, #28]
 80a60b0:	eb12 020e 	adds.w	r2, r2, lr
 80a60b4:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 80a60b8:	1852      	adds	r2, r2, r1
 80a60ba:	f04f 0e18 	mov.w	lr, #24
 80a60be:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a60c2:	fba2 010e 	umull	r0, r1, r2, lr
 80a60c6:	fb0e 1103 	mla	r1, lr, r3, r1
 80a60ca:	68ab      	ldr	r3, [r5, #8]
 80a60cc:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 80a60d0:	18c0      	adds	r0, r0, r3
 80a60d2:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a60d6:	fba0 230e 	umull	r2, r3, r0, lr
 80a60da:	fb0e 3301 	mla	r3, lr, r1, r3
 80a60de:	6869      	ldr	r1, [r5, #4]
 80a60e0:	1852      	adds	r2, r2, r1
 80a60e2:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 80a60e6:	fba2 010e 	umull	r0, r1, r2, lr
 80a60ea:	fb0e 1103 	mla	r1, lr, r3, r1
 80a60ee:	682b      	ldr	r3, [r5, #0]
 80a60f0:	4a67      	ldr	r2, [pc, #412]	; (80a6290 <strftime+0x858>)
 80a60f2:	18c0      	adds	r0, r0, r3
 80a60f4:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 80a60f8:	ebb0 0008 	subs.w	r0, r0, r8
 80a60fc:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 80a6100:	e9cd 0100 	strd	r0, r1, [sp]
 80a6104:	4661      	mov	r1, ip
 80a6106:	4650      	mov	r0, sl
 80a6108:	f7fb ffe8 	bl	80a20dc <sniprintf>
 80a610c:	e5f9      	b.n	80a5d02 <strftime+0x2ca>
 80a610e:	682b      	ldr	r3, [r5, #0]
 80a6110:	e07e      	b.n	80a6210 <strftime+0x7d8>
 80a6112:	9b02      	ldr	r3, [sp, #8]
 80a6114:	429c      	cmp	r4, r3
 80a6116:	f080 8139 	bcs.w	80a638c <strftime+0x954>
 80a611a:	2309      	movs	r3, #9
 80a611c:	e129      	b.n	80a6372 <strftime+0x93a>
 80a611e:	682b      	ldr	r3, [r5, #0]
 80a6120:	4a5c      	ldr	r2, [pc, #368]	; (80a6294 <strftime+0x85c>)
 80a6122:	9301      	str	r3, [sp, #4]
 80a6124:	686b      	ldr	r3, [r5, #4]
 80a6126:	9300      	str	r3, [sp, #0]
 80a6128:	68ab      	ldr	r3, [r5, #8]
 80a612a:	1b31      	subs	r1, r6, r4
 80a612c:	1938      	adds	r0, r7, r4
 80a612e:	e60e      	b.n	80a5d4e <strftime+0x316>
 80a6130:	9b02      	ldr	r3, [sp, #8]
 80a6132:	429c      	cmp	r4, r3
 80a6134:	f080 812a 	bcs.w	80a638c <strftime+0x954>
 80a6138:	69ab      	ldr	r3, [r5, #24]
 80a613a:	1c62      	adds	r2, r4, #1
 80a613c:	b90b      	cbnz	r3, 80a6142 <strftime+0x70a>
 80a613e:	2337      	movs	r3, #55	; 0x37
 80a6140:	e000      	b.n	80a6144 <strftime+0x70c>
 80a6142:	3330      	adds	r3, #48	; 0x30
 80a6144:	553b      	strb	r3, [r7, r4]
 80a6146:	4614      	mov	r4, r2
 80a6148:	e115      	b.n	80a6376 <strftime+0x93e>
 80a614a:	69eb      	ldr	r3, [r5, #28]
 80a614c:	69aa      	ldr	r2, [r5, #24]
 80a614e:	3307      	adds	r3, #7
 80a6150:	1a9b      	subs	r3, r3, r2
 80a6152:	2207      	movs	r2, #7
 80a6154:	fb93 f3f2 	sdiv	r3, r3, r2
 80a6158:	e05a      	b.n	80a6210 <strftime+0x7d8>
 80a615a:	4628      	mov	r0, r5
 80a615c:	f7ff fc0c 	bl	80a5978 <iso_year_adjust>
 80a6160:	69aa      	ldr	r2, [r5, #24]
 80a6162:	b10a      	cbz	r2, 80a6168 <strftime+0x730>
 80a6164:	1e53      	subs	r3, r2, #1
 80a6166:	e000      	b.n	80a616a <strftime+0x732>
 80a6168:	2306      	movs	r3, #6
 80a616a:	2800      	cmp	r0, #0
 80a616c:	dc2f      	bgt.n	80a61ce <strftime+0x796>
 80a616e:	69ea      	ldr	r2, [r5, #28]
 80a6170:	d101      	bne.n	80a6176 <strftime+0x73e>
 80a6172:	320a      	adds	r2, #10
 80a6174:	e03b      	b.n	80a61ee <strftime+0x7b6>
 80a6176:	f240 716b 	movw	r1, #1899	; 0x76b
 80a617a:	1a9a      	subs	r2, r3, r2
 80a617c:	696b      	ldr	r3, [r5, #20]
 80a617e:	2b00      	cmp	r3, #0
 80a6180:	bfb4      	ite	lt
 80a6182:	4608      	movlt	r0, r1
 80a6184:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 80a6188:	4418      	add	r0, r3
 80a618a:	0781      	lsls	r1, r0, #30
 80a618c:	d107      	bne.n	80a619e <strftime+0x766>
 80a618e:	f04f 0e64 	mov.w	lr, #100	; 0x64
 80a6192:	4601      	mov	r1, r0
 80a6194:	fb90 f0fe 	sdiv	r0, r0, lr
 80a6198:	fb0e 1110 	mls	r1, lr, r0, r1
 80a619c:	b981      	cbnz	r1, 80a61c0 <strftime+0x788>
 80a619e:	f240 716b 	movw	r1, #1899	; 0x76b
 80a61a2:	2b00      	cmp	r3, #0
 80a61a4:	bfa8      	it	ge
 80a61a6:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 80a61aa:	4419      	add	r1, r3
 80a61ac:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80a61b0:	fb91 f0f3 	sdiv	r0, r1, r3
 80a61b4:	fb03 1110 	mls	r1, r3, r0, r1
 80a61b8:	fab1 f181 	clz	r1, r1
 80a61bc:	0949      	lsrs	r1, r1, #5
 80a61be:	e000      	b.n	80a61c2 <strftime+0x78a>
 80a61c0:	2101      	movs	r1, #1
 80a61c2:	1a52      	subs	r2, r2, r1
 80a61c4:	2a05      	cmp	r2, #5
 80a61c6:	bfb4      	ite	lt
 80a61c8:	2335      	movlt	r3, #53	; 0x35
 80a61ca:	2334      	movge	r3, #52	; 0x34
 80a61cc:	e020      	b.n	80a6210 <strftime+0x7d8>
 80a61ce:	2301      	movs	r3, #1
 80a61d0:	e01e      	b.n	80a6210 <strftime+0x7d8>
 80a61d2:	9b02      	ldr	r3, [sp, #8]
 80a61d4:	429c      	cmp	r4, r3
 80a61d6:	f080 80d9 	bcs.w	80a638c <strftime+0x954>
 80a61da:	69ab      	ldr	r3, [r5, #24]
 80a61dc:	3330      	adds	r3, #48	; 0x30
 80a61de:	e0c8      	b.n	80a6372 <strftime+0x93a>
 80a61e0:	69aa      	ldr	r2, [r5, #24]
 80a61e2:	b10a      	cbz	r2, 80a61e8 <strftime+0x7b0>
 80a61e4:	1e53      	subs	r3, r2, #1
 80a61e6:	e000      	b.n	80a61ea <strftime+0x7b2>
 80a61e8:	2306      	movs	r3, #6
 80a61ea:	69ea      	ldr	r2, [r5, #28]
 80a61ec:	3207      	adds	r2, #7
 80a61ee:	1ad2      	subs	r2, r2, r3
 80a61f0:	2307      	movs	r3, #7
 80a61f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80a61f6:	e00b      	b.n	80a6210 <strftime+0x7d8>
 80a61f8:	6968      	ldr	r0, [r5, #20]
 80a61fa:	2800      	cmp	r0, #0
 80a61fc:	da03      	bge.n	80a6206 <strftime+0x7ce>
 80a61fe:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80a6202:	f000 fc55 	bl	80a6ab0 <abs>
 80a6206:	2364      	movs	r3, #100	; 0x64
 80a6208:	fb90 f2f3 	sdiv	r2, r0, r3
 80a620c:	fb02 0313 	mls	r3, r2, r3, r0
 80a6210:	4a21      	ldr	r2, [pc, #132]	; (80a6298 <strftime+0x860>)
 80a6212:	e572      	b.n	80a5cfa <strftime+0x2c2>
 80a6214:	696b      	ldr	r3, [r5, #20]
 80a6216:	4a21      	ldr	r2, [pc, #132]	; (80a629c <strftime+0x864>)
 80a6218:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 80a621c:	4293      	cmp	r3, r2
 80a621e:	da05      	bge.n	80a622c <strftime+0x7f4>
 80a6220:	232d      	movs	r3, #45	; 0x2d
 80a6222:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a6226:	f1cb 0b00 	rsb	fp, fp, #0
 80a622a:	e008      	b.n	80a623e <strftime+0x806>
 80a622c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 80a6230:	d10d      	bne.n	80a624e <strftime+0x816>
 80a6232:	f242 730f 	movw	r3, #9999	; 0x270f
 80a6236:	459b      	cmp	fp, r3
 80a6238:	d911      	bls.n	80a625e <strftime+0x826>
 80a623a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 80a623e:	f1b8 0f00 	cmp.w	r8, #0
 80a6242:	d001      	beq.n	80a6248 <strftime+0x810>
 80a6244:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6248:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 80a624c:	e000      	b.n	80a6250 <strftime+0x818>
 80a624e:	ab0a      	add	r3, sp, #40	; 0x28
 80a6250:	2225      	movs	r2, #37	; 0x25
 80a6252:	701a      	strb	r2, [r3, #0]
 80a6254:	f1ba 0f00 	cmp.w	sl, #0
 80a6258:	d108      	bne.n	80a626c <strftime+0x834>
 80a625a:	1c58      	adds	r0, r3, #1
 80a625c:	e009      	b.n	80a6272 <strftime+0x83a>
 80a625e:	f1b8 0f00 	cmp.w	r8, #0
 80a6262:	d1f4      	bne.n	80a624e <strftime+0x816>
 80a6264:	2325      	movs	r3, #37	; 0x25
 80a6266:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80a626a:	ab0a      	add	r3, sp, #40	; 0x28
 80a626c:	2230      	movs	r2, #48	; 0x30
 80a626e:	1c98      	adds	r0, r3, #2
 80a6270:	705a      	strb	r2, [r3, #1]
 80a6272:	490b      	ldr	r1, [pc, #44]	; (80a62a0 <strftime+0x868>)
 80a6274:	f7ff fb78 	bl	80a5968 <strcpy>
 80a6278:	f8cd b000 	str.w	fp, [sp]
 80a627c:	4643      	mov	r3, r8
 80a627e:	aa0a      	add	r2, sp, #40	; 0x28
 80a6280:	1b31      	subs	r1, r6, r4
 80a6282:	1938      	adds	r0, r7, r4
 80a6284:	e03f      	b.n	80a6306 <strftime+0x8ce>
 80a6286:	bf00      	nop
 80a6288:	20000050 	.word	0x20000050
 80a628c:	080a977b 	.word	0x080a977b
 80a6290:	080a9771 	.word	0x080a9771
 80a6294:	080a9776 	.word	0x080a9776
 80a6298:	080a9757 	.word	0x080a9757
 80a629c:	fffff894 	.word	0xfffff894
 80a62a0:	080a9768 	.word	0x080a9768
 80a62a4:	6a2b      	ldr	r3, [r5, #32]
 80a62a6:	2b00      	cmp	r3, #0
 80a62a8:	db65      	blt.n	80a6376 <strftime+0x93e>
 80a62aa:	f000 fa79 	bl	80a67a0 <__tz_lock>
 80a62ae:	9b06      	ldr	r3, [sp, #24]
 80a62b0:	b91b      	cbnz	r3, 80a62ba <strftime+0x882>
 80a62b2:	f000 fa77 	bl	80a67a4 <_tzset_unlocked>
 80a62b6:	2301      	movs	r3, #1
 80a62b8:	9306      	str	r3, [sp, #24]
 80a62ba:	f000 fc41 	bl	80a6b40 <__gettzinfo>
 80a62be:	6a2b      	ldr	r3, [r5, #32]
 80a62c0:	221c      	movs	r2, #28
 80a62c2:	2b00      	cmp	r3, #0
 80a62c4:	bfd4      	ite	le
 80a62c6:	2300      	movle	r3, #0
 80a62c8:	2301      	movgt	r3, #1
 80a62ca:	fb02 0003 	mla	r0, r2, r3, r0
 80a62ce:	6a03      	ldr	r3, [r0, #32]
 80a62d0:	eb07 0a04 	add.w	sl, r7, r4
 80a62d4:	f1c3 0800 	rsb	r8, r3, #0
 80a62d8:	f000 fa63 	bl	80a67a2 <__tz_unlock>
 80a62dc:	233c      	movs	r3, #60	; 0x3c
 80a62de:	fb98 f0f3 	sdiv	r0, r8, r3
 80a62e2:	9307      	str	r3, [sp, #28]
 80a62e4:	f000 fcc6 	bl	80a6c74 <labs>
 80a62e8:	9b07      	ldr	r3, [sp, #28]
 80a62ea:	ebc4 0b06 	rsb	fp, r4, r6
 80a62ee:	fb90 f2f3 	sdiv	r2, r0, r3
 80a62f2:	fb02 0013 	mls	r0, r2, r3, r0
 80a62f6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a62fa:	9000      	str	r0, [sp, #0]
 80a62fc:	fb98 f3f3 	sdiv	r3, r8, r3
 80a6300:	4659      	mov	r1, fp
 80a6302:	4650      	mov	r0, sl
 80a6304:	4a24      	ldr	r2, [pc, #144]	; (80a6398 <strftime+0x960>)
 80a6306:	f7fb fee9 	bl	80a20dc <sniprintf>
 80a630a:	e4fa      	b.n	80a5d02 <strftime+0x2ca>
 80a630c:	4404      	add	r4, r0
 80a630e:	42a6      	cmp	r6, r4
 80a6310:	d831      	bhi.n	80a6376 <strftime+0x93e>
 80a6312:	e03b      	b.n	80a638c <strftime+0x954>
 80a6314:	6a2b      	ldr	r3, [r5, #32]
 80a6316:	2b00      	cmp	r3, #0
 80a6318:	db2d      	blt.n	80a6376 <strftime+0x93e>
 80a631a:	f000 fa41 	bl	80a67a0 <__tz_lock>
 80a631e:	9b06      	ldr	r3, [sp, #24]
 80a6320:	b91b      	cbnz	r3, 80a632a <strftime+0x8f2>
 80a6322:	f000 fa3f 	bl	80a67a4 <_tzset_unlocked>
 80a6326:	2301      	movs	r3, #1
 80a6328:	9306      	str	r3, [sp, #24]
 80a632a:	6a2b      	ldr	r3, [r5, #32]
 80a632c:	4a1b      	ldr	r2, [pc, #108]	; (80a639c <strftime+0x964>)
 80a632e:	2b00      	cmp	r3, #0
 80a6330:	bfd4      	ite	le
 80a6332:	2300      	movle	r3, #0
 80a6334:	2301      	movgt	r3, #1
 80a6336:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 80a633a:	4640      	mov	r0, r8
 80a633c:	f000 f830 	bl	80a63a0 <strlen>
 80a6340:	f108 38ff 	add.w	r8, r8, #4294967295
 80a6344:	193b      	adds	r3, r7, r4
 80a6346:	4420      	add	r0, r4
 80a6348:	4284      	cmp	r4, r0
 80a634a:	d00b      	beq.n	80a6364 <strftime+0x92c>
 80a634c:	9a02      	ldr	r2, [sp, #8]
 80a634e:	4294      	cmp	r4, r2
 80a6350:	d205      	bcs.n	80a635e <strftime+0x926>
 80a6352:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 80a6356:	3401      	adds	r4, #1
 80a6358:	f803 2b01 	strb.w	r2, [r3], #1
 80a635c:	e7f4      	b.n	80a6348 <strftime+0x910>
 80a635e:	f000 fa20 	bl	80a67a2 <__tz_unlock>
 80a6362:	e013      	b.n	80a638c <strftime+0x954>
 80a6364:	f000 fa1d 	bl	80a67a2 <__tz_unlock>
 80a6368:	e005      	b.n	80a6376 <strftime+0x93e>
 80a636a:	9b02      	ldr	r3, [sp, #8]
 80a636c:	429c      	cmp	r4, r3
 80a636e:	d20d      	bcs.n	80a638c <strftime+0x954>
 80a6370:	2325      	movs	r3, #37	; 0x25
 80a6372:	553b      	strb	r3, [r7, r4]
 80a6374:	3401      	adds	r4, #1
 80a6376:	f899 3000 	ldrb.w	r3, [r9]
 80a637a:	b11b      	cbz	r3, 80a6384 <strftime+0x94c>
 80a637c:	f109 0901 	add.w	r9, r9, #1
 80a6380:	f7ff bb69 	b.w	80a5a56 <strftime+0x1e>
 80a6384:	b126      	cbz	r6, 80a6390 <strftime+0x958>
 80a6386:	2300      	movs	r3, #0
 80a6388:	553b      	strb	r3, [r7, r4]
 80a638a:	e001      	b.n	80a6390 <strftime+0x958>
 80a638c:	2000      	movs	r0, #0
 80a638e:	e000      	b.n	80a6392 <strftime+0x95a>
 80a6390:	4620      	mov	r0, r4
 80a6392:	b013      	add	sp, #76	; 0x4c
 80a6394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6398:	080a9785 	.word	0x080a9785
 80a639c:	200000b8 	.word	0x200000b8

080a63a0 <strlen>:
 80a63a0:	4603      	mov	r3, r0
 80a63a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a63a6:	2a00      	cmp	r2, #0
 80a63a8:	d1fb      	bne.n	80a63a2 <strlen+0x2>
 80a63aa:	1a18      	subs	r0, r3, r0
 80a63ac:	3801      	subs	r0, #1
 80a63ae:	4770      	bx	lr

080a63b0 <strncmp>:
 80a63b0:	b530      	push	{r4, r5, lr}
 80a63b2:	b182      	cbz	r2, 80a63d6 <strncmp+0x26>
 80a63b4:	1e45      	subs	r5, r0, #1
 80a63b6:	3901      	subs	r1, #1
 80a63b8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a63bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a63c0:	42a3      	cmp	r3, r4
 80a63c2:	d106      	bne.n	80a63d2 <strncmp+0x22>
 80a63c4:	43ec      	mvns	r4, r5
 80a63c6:	4414      	add	r4, r2
 80a63c8:	42e0      	cmn	r0, r4
 80a63ca:	d001      	beq.n	80a63d0 <strncmp+0x20>
 80a63cc:	2b00      	cmp	r3, #0
 80a63ce:	d1f3      	bne.n	80a63b8 <strncmp+0x8>
 80a63d0:	461c      	mov	r4, r3
 80a63d2:	1b18      	subs	r0, r3, r4
 80a63d4:	bd30      	pop	{r4, r5, pc}
 80a63d6:	4610      	mov	r0, r2
 80a63d8:	bd30      	pop	{r4, r5, pc}

080a63da <strrchr>:
 80a63da:	b538      	push	{r3, r4, r5, lr}
 80a63dc:	4603      	mov	r3, r0
 80a63de:	460d      	mov	r5, r1
 80a63e0:	b141      	cbz	r1, 80a63f4 <strrchr+0x1a>
 80a63e2:	2400      	movs	r4, #0
 80a63e4:	4629      	mov	r1, r5
 80a63e6:	4618      	mov	r0, r3
 80a63e8:	f7ff fa9c 	bl	80a5924 <strchr>
 80a63ec:	b130      	cbz	r0, 80a63fc <strrchr+0x22>
 80a63ee:	1c43      	adds	r3, r0, #1
 80a63f0:	4604      	mov	r4, r0
 80a63f2:	e7f7      	b.n	80a63e4 <strrchr+0xa>
 80a63f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a63f8:	f7ff ba94 	b.w	80a5924 <strchr>
 80a63fc:	4620      	mov	r0, r4
 80a63fe:	bd38      	pop	{r3, r4, r5, pc}

080a6400 <_strtol_r>:
 80a6400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6404:	460f      	mov	r7, r1
 80a6406:	4680      	mov	r8, r0
 80a6408:	483f      	ldr	r0, [pc, #252]	; (80a6508 <_strtol_r+0x108>)
 80a640a:	f8d0 9000 	ldr.w	r9, [r0]
 80a640e:	463d      	mov	r5, r7
 80a6410:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a6414:	eb09 0004 	add.w	r0, r9, r4
 80a6418:	7840      	ldrb	r0, [r0, #1]
 80a641a:	f000 0008 	and.w	r0, r0, #8
 80a641e:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a6422:	b108      	cbz	r0, 80a6428 <_strtol_r+0x28>
 80a6424:	462f      	mov	r7, r5
 80a6426:	e7f2      	b.n	80a640e <_strtol_r+0xe>
 80a6428:	2c2d      	cmp	r4, #45	; 0x2d
 80a642a:	d103      	bne.n	80a6434 <_strtol_r+0x34>
 80a642c:	1cbd      	adds	r5, r7, #2
 80a642e:	787c      	ldrb	r4, [r7, #1]
 80a6430:	2601      	movs	r6, #1
 80a6432:	e003      	b.n	80a643c <_strtol_r+0x3c>
 80a6434:	2c2b      	cmp	r4, #43	; 0x2b
 80a6436:	bf04      	itt	eq
 80a6438:	787c      	ldrbeq	r4, [r7, #1]
 80a643a:	1cbd      	addeq	r5, r7, #2
 80a643c:	b113      	cbz	r3, 80a6444 <_strtol_r+0x44>
 80a643e:	2b10      	cmp	r3, #16
 80a6440:	d10a      	bne.n	80a6458 <_strtol_r+0x58>
 80a6442:	e05b      	b.n	80a64fc <_strtol_r+0xfc>
 80a6444:	2c30      	cmp	r4, #48	; 0x30
 80a6446:	d157      	bne.n	80a64f8 <_strtol_r+0xf8>
 80a6448:	7828      	ldrb	r0, [r5, #0]
 80a644a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a644e:	2858      	cmp	r0, #88	; 0x58
 80a6450:	d14d      	bne.n	80a64ee <_strtol_r+0xee>
 80a6452:	786c      	ldrb	r4, [r5, #1]
 80a6454:	2310      	movs	r3, #16
 80a6456:	3502      	adds	r5, #2
 80a6458:	2e00      	cmp	r6, #0
 80a645a:	bf14      	ite	ne
 80a645c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a6460:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a6464:	fbbc faf3 	udiv	sl, ip, r3
 80a6468:	2700      	movs	r7, #0
 80a646a:	4638      	mov	r0, r7
 80a646c:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a6470:	eb09 0e04 	add.w	lr, r9, r4
 80a6474:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a6478:	f01e 0f04 	tst.w	lr, #4
 80a647c:	d001      	beq.n	80a6482 <_strtol_r+0x82>
 80a647e:	3c30      	subs	r4, #48	; 0x30
 80a6480:	e00b      	b.n	80a649a <_strtol_r+0x9a>
 80a6482:	f01e 0e03 	ands.w	lr, lr, #3
 80a6486:	d01b      	beq.n	80a64c0 <_strtol_r+0xc0>
 80a6488:	f1be 0f01 	cmp.w	lr, #1
 80a648c:	bf0c      	ite	eq
 80a648e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a6492:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a6496:	ebce 0404 	rsb	r4, lr, r4
 80a649a:	42a3      	cmp	r3, r4
 80a649c:	dd10      	ble.n	80a64c0 <_strtol_r+0xc0>
 80a649e:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a64a2:	d00a      	beq.n	80a64ba <_strtol_r+0xba>
 80a64a4:	4550      	cmp	r0, sl
 80a64a6:	d806      	bhi.n	80a64b6 <_strtol_r+0xb6>
 80a64a8:	d101      	bne.n	80a64ae <_strtol_r+0xae>
 80a64aa:	4564      	cmp	r4, ip
 80a64ac:	dc03      	bgt.n	80a64b6 <_strtol_r+0xb6>
 80a64ae:	fb03 4000 	mla	r0, r3, r0, r4
 80a64b2:	2701      	movs	r7, #1
 80a64b4:	e001      	b.n	80a64ba <_strtol_r+0xba>
 80a64b6:	f04f 37ff 	mov.w	r7, #4294967295
 80a64ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a64be:	e7d7      	b.n	80a6470 <_strtol_r+0x70>
 80a64c0:	1c7b      	adds	r3, r7, #1
 80a64c2:	d10c      	bne.n	80a64de <_strtol_r+0xde>
 80a64c4:	2e00      	cmp	r6, #0
 80a64c6:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a64ca:	bf14      	ite	ne
 80a64cc:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a64d0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a64d4:	f8c8 3000 	str.w	r3, [r8]
 80a64d8:	b92a      	cbnz	r2, 80a64e6 <_strtol_r+0xe6>
 80a64da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a64de:	b106      	cbz	r6, 80a64e2 <_strtol_r+0xe2>
 80a64e0:	4240      	negs	r0, r0
 80a64e2:	b172      	cbz	r2, 80a6502 <_strtol_r+0x102>
 80a64e4:	b107      	cbz	r7, 80a64e8 <_strtol_r+0xe8>
 80a64e6:	1e69      	subs	r1, r5, #1
 80a64e8:	6011      	str	r1, [r2, #0]
 80a64ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a64ee:	2430      	movs	r4, #48	; 0x30
 80a64f0:	2b00      	cmp	r3, #0
 80a64f2:	d1b1      	bne.n	80a6458 <_strtol_r+0x58>
 80a64f4:	2308      	movs	r3, #8
 80a64f6:	e7af      	b.n	80a6458 <_strtol_r+0x58>
 80a64f8:	230a      	movs	r3, #10
 80a64fa:	e7ad      	b.n	80a6458 <_strtol_r+0x58>
 80a64fc:	2c30      	cmp	r4, #48	; 0x30
 80a64fe:	d0a3      	beq.n	80a6448 <_strtol_r+0x48>
 80a6500:	e7aa      	b.n	80a6458 <_strtol_r+0x58>
 80a6502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6506:	bf00      	nop
 80a6508:	20000050 	.word	0x20000050

080a650c <strtol>:
 80a650c:	4613      	mov	r3, r2
 80a650e:	460a      	mov	r2, r1
 80a6510:	4601      	mov	r1, r0
 80a6512:	4802      	ldr	r0, [pc, #8]	; (80a651c <strtol+0x10>)
 80a6514:	6800      	ldr	r0, [r0, #0]
 80a6516:	f7ff bf73 	b.w	80a6400 <_strtol_r>
 80a651a:	bf00      	nop
 80a651c:	200000b4 	.word	0x200000b4

080a6520 <_strtoul_r>:
 80a6520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a6524:	460e      	mov	r6, r1
 80a6526:	4680      	mov	r8, r0
 80a6528:	483b      	ldr	r0, [pc, #236]	; (80a6618 <_strtoul_r+0xf8>)
 80a652a:	f8d0 9000 	ldr.w	r9, [r0]
 80a652e:	4635      	mov	r5, r6
 80a6530:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a6534:	eb09 0004 	add.w	r0, r9, r4
 80a6538:	7840      	ldrb	r0, [r0, #1]
 80a653a:	f000 0008 	and.w	r0, r0, #8
 80a653e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a6542:	b108      	cbz	r0, 80a6548 <_strtoul_r+0x28>
 80a6544:	462e      	mov	r6, r5
 80a6546:	e7f2      	b.n	80a652e <_strtoul_r+0xe>
 80a6548:	2c2d      	cmp	r4, #45	; 0x2d
 80a654a:	d103      	bne.n	80a6554 <_strtoul_r+0x34>
 80a654c:	1cb5      	adds	r5, r6, #2
 80a654e:	7874      	ldrb	r4, [r6, #1]
 80a6550:	2701      	movs	r7, #1
 80a6552:	e003      	b.n	80a655c <_strtoul_r+0x3c>
 80a6554:	2c2b      	cmp	r4, #43	; 0x2b
 80a6556:	bf04      	itt	eq
 80a6558:	7874      	ldrbeq	r4, [r6, #1]
 80a655a:	1cb5      	addeq	r5, r6, #2
 80a655c:	b113      	cbz	r3, 80a6564 <_strtoul_r+0x44>
 80a655e:	2b10      	cmp	r3, #16
 80a6560:	d10a      	bne.n	80a6578 <_strtoul_r+0x58>
 80a6562:	e053      	b.n	80a660c <_strtoul_r+0xec>
 80a6564:	2c30      	cmp	r4, #48	; 0x30
 80a6566:	d14f      	bne.n	80a6608 <_strtoul_r+0xe8>
 80a6568:	7828      	ldrb	r0, [r5, #0]
 80a656a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a656e:	2858      	cmp	r0, #88	; 0x58
 80a6570:	d145      	bne.n	80a65fe <_strtoul_r+0xde>
 80a6572:	786c      	ldrb	r4, [r5, #1]
 80a6574:	2310      	movs	r3, #16
 80a6576:	3502      	adds	r5, #2
 80a6578:	f04f 3cff 	mov.w	ip, #4294967295
 80a657c:	fbbc fcf3 	udiv	ip, ip, r3
 80a6580:	fb03 fa0c 	mul.w	sl, r3, ip
 80a6584:	2600      	movs	r6, #0
 80a6586:	ea6f 0a0a 	mvn.w	sl, sl
 80a658a:	4630      	mov	r0, r6
 80a658c:	eb09 0e04 	add.w	lr, r9, r4
 80a6590:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a6594:	f01e 0f04 	tst.w	lr, #4
 80a6598:	d001      	beq.n	80a659e <_strtoul_r+0x7e>
 80a659a:	3c30      	subs	r4, #48	; 0x30
 80a659c:	e00b      	b.n	80a65b6 <_strtoul_r+0x96>
 80a659e:	f01e 0e03 	ands.w	lr, lr, #3
 80a65a2:	d01a      	beq.n	80a65da <_strtoul_r+0xba>
 80a65a4:	f1be 0f01 	cmp.w	lr, #1
 80a65a8:	bf0c      	ite	eq
 80a65aa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a65ae:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a65b2:	ebce 0404 	rsb	r4, lr, r4
 80a65b6:	42a3      	cmp	r3, r4
 80a65b8:	dd0f      	ble.n	80a65da <_strtoul_r+0xba>
 80a65ba:	2e00      	cmp	r6, #0
 80a65bc:	db08      	blt.n	80a65d0 <_strtoul_r+0xb0>
 80a65be:	4560      	cmp	r0, ip
 80a65c0:	d806      	bhi.n	80a65d0 <_strtoul_r+0xb0>
 80a65c2:	d101      	bne.n	80a65c8 <_strtoul_r+0xa8>
 80a65c4:	4554      	cmp	r4, sl
 80a65c6:	dc03      	bgt.n	80a65d0 <_strtoul_r+0xb0>
 80a65c8:	fb03 4000 	mla	r0, r3, r0, r4
 80a65cc:	2601      	movs	r6, #1
 80a65ce:	e001      	b.n	80a65d4 <_strtoul_r+0xb4>
 80a65d0:	f04f 36ff 	mov.w	r6, #4294967295
 80a65d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a65d8:	e7d8      	b.n	80a658c <_strtoul_r+0x6c>
 80a65da:	2e00      	cmp	r6, #0
 80a65dc:	da07      	bge.n	80a65ee <_strtoul_r+0xce>
 80a65de:	2322      	movs	r3, #34	; 0x22
 80a65e0:	f8c8 3000 	str.w	r3, [r8]
 80a65e4:	f04f 30ff 	mov.w	r0, #4294967295
 80a65e8:	b92a      	cbnz	r2, 80a65f6 <_strtoul_r+0xd6>
 80a65ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a65ee:	b107      	cbz	r7, 80a65f2 <_strtoul_r+0xd2>
 80a65f0:	4240      	negs	r0, r0
 80a65f2:	b172      	cbz	r2, 80a6612 <_strtoul_r+0xf2>
 80a65f4:	b106      	cbz	r6, 80a65f8 <_strtoul_r+0xd8>
 80a65f6:	1e69      	subs	r1, r5, #1
 80a65f8:	6011      	str	r1, [r2, #0]
 80a65fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a65fe:	2430      	movs	r4, #48	; 0x30
 80a6600:	2b00      	cmp	r3, #0
 80a6602:	d1b9      	bne.n	80a6578 <_strtoul_r+0x58>
 80a6604:	2308      	movs	r3, #8
 80a6606:	e7b7      	b.n	80a6578 <_strtoul_r+0x58>
 80a6608:	230a      	movs	r3, #10
 80a660a:	e7b5      	b.n	80a6578 <_strtoul_r+0x58>
 80a660c:	2c30      	cmp	r4, #48	; 0x30
 80a660e:	d0ab      	beq.n	80a6568 <_strtoul_r+0x48>
 80a6610:	e7b2      	b.n	80a6578 <_strtoul_r+0x58>
 80a6612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6616:	bf00      	nop
 80a6618:	20000050 	.word	0x20000050

080a661c <strtoul>:
 80a661c:	4613      	mov	r3, r2
 80a661e:	460a      	mov	r2, r1
 80a6620:	4601      	mov	r1, r0
 80a6622:	4802      	ldr	r0, [pc, #8]	; (80a662c <strtoul+0x10>)
 80a6624:	6800      	ldr	r0, [r0, #0]
 80a6626:	f7ff bf7b 	b.w	80a6520 <_strtoul_r>
 80a662a:	bf00      	nop
 80a662c:	200000b4 	.word	0x200000b4

080a6630 <__get_current_time_locale>:
 80a6630:	4b04      	ldr	r3, [pc, #16]	; (80a6644 <__get_current_time_locale+0x14>)
 80a6632:	4a05      	ldr	r2, [pc, #20]	; (80a6648 <__get_current_time_locale+0x18>)
 80a6634:	6818      	ldr	r0, [r3, #0]
 80a6636:	4b05      	ldr	r3, [pc, #20]	; (80a664c <__get_current_time_locale+0x1c>)
 80a6638:	2800      	cmp	r0, #0
 80a663a:	bf14      	ite	ne
 80a663c:	4610      	movne	r0, r2
 80a663e:	4618      	moveq	r0, r3
 80a6640:	4770      	bx	lr
 80a6642:	bf00      	nop
 80a6644:	20000768 	.word	0x20000768
 80a6648:	2000076c 	.word	0x2000076c
 80a664c:	080a98c4 	.word	0x080a98c4

080a6650 <__tzcalc_limits>:
 80a6650:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6654:	4604      	mov	r4, r0
 80a6656:	f000 fa73 	bl	80a6b40 <__gettzinfo>
 80a665a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a665e:	429c      	cmp	r4, r3
 80a6660:	f340 8096 	ble.w	80a6790 <__tzcalc_limits+0x140>
 80a6664:	f240 156d 	movw	r5, #365	; 0x16d
 80a6668:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a666c:	18e3      	adds	r3, r4, r3
 80a666e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a6672:	109b      	asrs	r3, r3, #2
 80a6674:	fb05 3502 	mla	r5, r5, r2, r3
 80a6678:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a667c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a6680:	fb92 f3f3 	sdiv	r3, r2, r3
 80a6684:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a6688:	442b      	add	r3, r5
 80a668a:	18a5      	adds	r5, r4, r2
 80a668c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6690:	fb94 f7f2 	sdiv	r7, r4, r2
 80a6694:	fb95 f5f2 	sdiv	r5, r5, r2
 80a6698:	fb02 4717 	mls	r7, r2, r7, r4
 80a669c:	441d      	add	r5, r3
 80a669e:	2364      	movs	r3, #100	; 0x64
 80a66a0:	fb94 f6f3 	sdiv	r6, r4, r3
 80a66a4:	fab7 fe87 	clz	lr, r7
 80a66a8:	4601      	mov	r1, r0
 80a66aa:	fb03 4616 	mls	r6, r3, r6, r4
 80a66ae:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a66b2:	9301      	str	r3, [sp, #4]
 80a66b4:	f004 0303 	and.w	r3, r4, #3
 80a66b8:	6044      	str	r4, [r0, #4]
 80a66ba:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a66be:	9300      	str	r3, [sp, #0]
 80a66c0:	f04f 0c07 	mov.w	ip, #7
 80a66c4:	7a0b      	ldrb	r3, [r1, #8]
 80a66c6:	2b4a      	cmp	r3, #74	; 0x4a
 80a66c8:	d10e      	bne.n	80a66e8 <__tzcalc_limits+0x98>
 80a66ca:	694b      	ldr	r3, [r1, #20]
 80a66cc:	9a00      	ldr	r2, [sp, #0]
 80a66ce:	18ec      	adds	r4, r5, r3
 80a66d0:	b902      	cbnz	r2, 80a66d4 <__tzcalc_limits+0x84>
 80a66d2:	b906      	cbnz	r6, 80a66d6 <__tzcalc_limits+0x86>
 80a66d4:	b927      	cbnz	r7, 80a66e0 <__tzcalc_limits+0x90>
 80a66d6:	2b3b      	cmp	r3, #59	; 0x3b
 80a66d8:	bfd4      	ite	le
 80a66da:	2300      	movle	r3, #0
 80a66dc:	2301      	movgt	r3, #1
 80a66de:	e000      	b.n	80a66e2 <__tzcalc_limits+0x92>
 80a66e0:	2300      	movs	r3, #0
 80a66e2:	4423      	add	r3, r4
 80a66e4:	3b01      	subs	r3, #1
 80a66e6:	e03f      	b.n	80a6768 <__tzcalc_limits+0x118>
 80a66e8:	2b44      	cmp	r3, #68	; 0x44
 80a66ea:	d102      	bne.n	80a66f2 <__tzcalc_limits+0xa2>
 80a66ec:	694b      	ldr	r3, [r1, #20]
 80a66ee:	442b      	add	r3, r5
 80a66f0:	e03a      	b.n	80a6768 <__tzcalc_limits+0x118>
 80a66f2:	9b00      	ldr	r3, [sp, #0]
 80a66f4:	b92b      	cbnz	r3, 80a6702 <__tzcalc_limits+0xb2>
 80a66f6:	2e00      	cmp	r6, #0
 80a66f8:	bf0c      	ite	eq
 80a66fa:	46f0      	moveq	r8, lr
 80a66fc:	f04f 0801 	movne.w	r8, #1
 80a6700:	e000      	b.n	80a6704 <__tzcalc_limits+0xb4>
 80a6702:	46f0      	mov	r8, lr
 80a6704:	46a9      	mov	r9, r5
 80a6706:	4b24      	ldr	r3, [pc, #144]	; (80a6798 <__tzcalc_limits+0x148>)
 80a6708:	2230      	movs	r2, #48	; 0x30
 80a670a:	fb02 3808 	mla	r8, r2, r8, r3
 80a670e:	68cc      	ldr	r4, [r1, #12]
 80a6710:	f1a8 0a04 	sub.w	sl, r8, #4
 80a6714:	2301      	movs	r3, #1
 80a6716:	42a3      	cmp	r3, r4
 80a6718:	da04      	bge.n	80a6724 <__tzcalc_limits+0xd4>
 80a671a:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a671e:	3301      	adds	r3, #1
 80a6720:	44d9      	add	r9, fp
 80a6722:	e7f8      	b.n	80a6716 <__tzcalc_limits+0xc6>
 80a6724:	f109 0304 	add.w	r3, r9, #4
 80a6728:	fb93 fbfc 	sdiv	fp, r3, ip
 80a672c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a6730:	ebca 0a03 	rsb	sl, sl, r3
 80a6734:	694b      	ldr	r3, [r1, #20]
 80a6736:	2c01      	cmp	r4, #1
 80a6738:	bfb8      	it	lt
 80a673a:	2401      	movlt	r4, #1
 80a673c:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a6740:	690b      	ldr	r3, [r1, #16]
 80a6742:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a6746:	f103 33ff 	add.w	r3, r3, #4294967295
 80a674a:	f104 34ff 	add.w	r4, r4, #4294967295
 80a674e:	bf48      	it	mi
 80a6750:	f10a 0a07 	addmi.w	sl, sl, #7
 80a6754:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a6758:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a675c:	4453      	add	r3, sl
 80a675e:	42a3      	cmp	r3, r4
 80a6760:	db01      	blt.n	80a6766 <__tzcalc_limits+0x116>
 80a6762:	3b07      	subs	r3, #7
 80a6764:	e7fb      	b.n	80a675e <__tzcalc_limits+0x10e>
 80a6766:	444b      	add	r3, r9
 80a6768:	698c      	ldr	r4, [r1, #24]
 80a676a:	4a0c      	ldr	r2, [pc, #48]	; (80a679c <__tzcalc_limits+0x14c>)
 80a676c:	fb02 4303 	mla	r3, r2, r3, r4
 80a6770:	6a0c      	ldr	r4, [r1, #32]
 80a6772:	4423      	add	r3, r4
 80a6774:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a6778:	9b01      	ldr	r3, [sp, #4]
 80a677a:	4299      	cmp	r1, r3
 80a677c:	d1a2      	bne.n	80a66c4 <__tzcalc_limits+0x74>
 80a677e:	69c3      	ldr	r3, [r0, #28]
 80a6780:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a6782:	4293      	cmp	r3, r2
 80a6784:	bfac      	ite	ge
 80a6786:	2300      	movge	r3, #0
 80a6788:	2301      	movlt	r3, #1
 80a678a:	6003      	str	r3, [r0, #0]
 80a678c:	2001      	movs	r0, #1
 80a678e:	e000      	b.n	80a6792 <__tzcalc_limits+0x142>
 80a6790:	2000      	movs	r0, #0
 80a6792:	b003      	add	sp, #12
 80a6794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6798:	080a96d8 	.word	0x080a96d8
 80a679c:	00015180 	.word	0x00015180

080a67a0 <__tz_lock>:
 80a67a0:	4770      	bx	lr

080a67a2 <__tz_unlock>:
 80a67a2:	4770      	bx	lr

080a67a4 <_tzset_unlocked>:
 80a67a4:	4b01      	ldr	r3, [pc, #4]	; (80a67ac <_tzset_unlocked+0x8>)
 80a67a6:	6818      	ldr	r0, [r3, #0]
 80a67a8:	f000 b802 	b.w	80a67b0 <_tzset_unlocked_r>
 80a67ac:	200000b4 	.word	0x200000b4

080a67b0 <_tzset_unlocked_r>:
 80a67b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a67b4:	b08d      	sub	sp, #52	; 0x34
 80a67b6:	4607      	mov	r7, r0
 80a67b8:	f000 f9c2 	bl	80a6b40 <__gettzinfo>
 80a67bc:	49b0      	ldr	r1, [pc, #704]	; (80a6a80 <_tzset_unlocked_r+0x2d0>)
 80a67be:	4604      	mov	r4, r0
 80a67c0:	4638      	mov	r0, r7
 80a67c2:	f000 f9b5 	bl	80a6b30 <_getenv_r>
 80a67c6:	4eaf      	ldr	r6, [pc, #700]	; (80a6a84 <_tzset_unlocked_r+0x2d4>)
 80a67c8:	4605      	mov	r5, r0
 80a67ca:	b960      	cbnz	r0, 80a67e6 <_tzset_unlocked_r+0x36>
 80a67cc:	4bae      	ldr	r3, [pc, #696]	; (80a6a88 <_tzset_unlocked_r+0x2d8>)
 80a67ce:	4aaf      	ldr	r2, [pc, #700]	; (80a6a8c <_tzset_unlocked_r+0x2dc>)
 80a67d0:	6018      	str	r0, [r3, #0]
 80a67d2:	4baf      	ldr	r3, [pc, #700]	; (80a6a90 <_tzset_unlocked_r+0x2e0>)
 80a67d4:	6018      	str	r0, [r3, #0]
 80a67d6:	4baf      	ldr	r3, [pc, #700]	; (80a6a94 <_tzset_unlocked_r+0x2e4>)
 80a67d8:	6830      	ldr	r0, [r6, #0]
 80a67da:	601a      	str	r2, [r3, #0]
 80a67dc:	605a      	str	r2, [r3, #4]
 80a67de:	f7fb fc4d 	bl	80a207c <free>
 80a67e2:	6035      	str	r5, [r6, #0]
 80a67e4:	e148      	b.n	80a6a78 <_tzset_unlocked_r+0x2c8>
 80a67e6:	6831      	ldr	r1, [r6, #0]
 80a67e8:	b979      	cbnz	r1, 80a680a <_tzset_unlocked_r+0x5a>
 80a67ea:	6830      	ldr	r0, [r6, #0]
 80a67ec:	f7fb fc46 	bl	80a207c <free>
 80a67f0:	4628      	mov	r0, r5
 80a67f2:	f7ff fdd5 	bl	80a63a0 <strlen>
 80a67f6:	1c41      	adds	r1, r0, #1
 80a67f8:	4638      	mov	r0, r7
 80a67fa:	f7fb fc87 	bl	80a210c <_malloc_r>
 80a67fe:	6030      	str	r0, [r6, #0]
 80a6800:	b148      	cbz	r0, 80a6816 <_tzset_unlocked_r+0x66>
 80a6802:	4629      	mov	r1, r5
 80a6804:	f7ff f8b0 	bl	80a5968 <strcpy>
 80a6808:	e005      	b.n	80a6816 <_tzset_unlocked_r+0x66>
 80a680a:	f7ff f8a3 	bl	80a5954 <strcmp>
 80a680e:	2800      	cmp	r0, #0
 80a6810:	f000 8132 	beq.w	80a6a78 <_tzset_unlocked_r+0x2c8>
 80a6814:	e7e9      	b.n	80a67ea <_tzset_unlocked_r+0x3a>
 80a6816:	782b      	ldrb	r3, [r5, #0]
 80a6818:	ae0a      	add	r6, sp, #40	; 0x28
 80a681a:	2b3a      	cmp	r3, #58	; 0x3a
 80a681c:	bf08      	it	eq
 80a681e:	3501      	addeq	r5, #1
 80a6820:	4633      	mov	r3, r6
 80a6822:	4a9d      	ldr	r2, [pc, #628]	; (80a6a98 <_tzset_unlocked_r+0x2e8>)
 80a6824:	499d      	ldr	r1, [pc, #628]	; (80a6a9c <_tzset_unlocked_r+0x2ec>)
 80a6826:	4628      	mov	r0, r5
 80a6828:	f7fb fc48 	bl	80a20bc <siscanf>
 80a682c:	2800      	cmp	r0, #0
 80a682e:	f340 8123 	ble.w	80a6a78 <_tzset_unlocked_r+0x2c8>
 80a6832:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6834:	18ef      	adds	r7, r5, r3
 80a6836:	5ceb      	ldrb	r3, [r5, r3]
 80a6838:	2b2d      	cmp	r3, #45	; 0x2d
 80a683a:	d103      	bne.n	80a6844 <_tzset_unlocked_r+0x94>
 80a683c:	3701      	adds	r7, #1
 80a683e:	f04f 35ff 	mov.w	r5, #4294967295
 80a6842:	e003      	b.n	80a684c <_tzset_unlocked_r+0x9c>
 80a6844:	2b2b      	cmp	r3, #43	; 0x2b
 80a6846:	bf08      	it	eq
 80a6848:	3701      	addeq	r7, #1
 80a684a:	2501      	movs	r5, #1
 80a684c:	f10d 0a20 	add.w	sl, sp, #32
 80a6850:	f10d 0b1e 	add.w	fp, sp, #30
 80a6854:	f04f 0800 	mov.w	r8, #0
 80a6858:	9603      	str	r6, [sp, #12]
 80a685a:	f8cd a008 	str.w	sl, [sp, #8]
 80a685e:	9601      	str	r6, [sp, #4]
 80a6860:	f8cd b000 	str.w	fp, [sp]
 80a6864:	4633      	mov	r3, r6
 80a6866:	aa07      	add	r2, sp, #28
 80a6868:	498d      	ldr	r1, [pc, #564]	; (80a6aa0 <_tzset_unlocked_r+0x2f0>)
 80a686a:	4638      	mov	r0, r7
 80a686c:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a6870:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a6874:	f7fb fc22 	bl	80a20bc <siscanf>
 80a6878:	4540      	cmp	r0, r8
 80a687a:	f340 80fd 	ble.w	80a6a78 <_tzset_unlocked_r+0x2c8>
 80a687e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a6882:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a6886:	213c      	movs	r1, #60	; 0x3c
 80a6888:	fb01 3302 	mla	r3, r1, r2, r3
 80a688c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a6890:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a6894:	fb01 3302 	mla	r3, r1, r2, r3
 80a6898:	435d      	muls	r5, r3
 80a689a:	4b7f      	ldr	r3, [pc, #508]	; (80a6a98 <_tzset_unlocked_r+0x2e8>)
 80a689c:	6225      	str	r5, [r4, #32]
 80a689e:	4d7d      	ldr	r5, [pc, #500]	; (80a6a94 <_tzset_unlocked_r+0x2e4>)
 80a68a0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a6aac <_tzset_unlocked_r+0x2fc>
 80a68a4:	602b      	str	r3, [r5, #0]
 80a68a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a68a8:	464a      	mov	r2, r9
 80a68aa:	441f      	add	r7, r3
 80a68ac:	497b      	ldr	r1, [pc, #492]	; (80a6a9c <_tzset_unlocked_r+0x2ec>)
 80a68ae:	4633      	mov	r3, r6
 80a68b0:	4638      	mov	r0, r7
 80a68b2:	f7fb fc03 	bl	80a20bc <siscanf>
 80a68b6:	4540      	cmp	r0, r8
 80a68b8:	dc08      	bgt.n	80a68cc <_tzset_unlocked_r+0x11c>
 80a68ba:	682b      	ldr	r3, [r5, #0]
 80a68bc:	6a22      	ldr	r2, [r4, #32]
 80a68be:	606b      	str	r3, [r5, #4]
 80a68c0:	4b71      	ldr	r3, [pc, #452]	; (80a6a88 <_tzset_unlocked_r+0x2d8>)
 80a68c2:	601a      	str	r2, [r3, #0]
 80a68c4:	4b72      	ldr	r3, [pc, #456]	; (80a6a90 <_tzset_unlocked_r+0x2e0>)
 80a68c6:	f8c3 8000 	str.w	r8, [r3]
 80a68ca:	e0d5      	b.n	80a6a78 <_tzset_unlocked_r+0x2c8>
 80a68cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a68ce:	f8c5 9004 	str.w	r9, [r5, #4]
 80a68d2:	18fd      	adds	r5, r7, r3
 80a68d4:	5cfb      	ldrb	r3, [r7, r3]
 80a68d6:	2b2d      	cmp	r3, #45	; 0x2d
 80a68d8:	d103      	bne.n	80a68e2 <_tzset_unlocked_r+0x132>
 80a68da:	3501      	adds	r5, #1
 80a68dc:	f04f 37ff 	mov.w	r7, #4294967295
 80a68e0:	e003      	b.n	80a68ea <_tzset_unlocked_r+0x13a>
 80a68e2:	2b2b      	cmp	r3, #43	; 0x2b
 80a68e4:	bf08      	it	eq
 80a68e6:	3501      	addeq	r5, #1
 80a68e8:	2701      	movs	r7, #1
 80a68ea:	2300      	movs	r3, #0
 80a68ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a68f0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a68f4:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a68f8:	930a      	str	r3, [sp, #40]	; 0x28
 80a68fa:	9603      	str	r6, [sp, #12]
 80a68fc:	f8cd a008 	str.w	sl, [sp, #8]
 80a6900:	9601      	str	r6, [sp, #4]
 80a6902:	f8cd b000 	str.w	fp, [sp]
 80a6906:	4633      	mov	r3, r6
 80a6908:	aa07      	add	r2, sp, #28
 80a690a:	4965      	ldr	r1, [pc, #404]	; (80a6aa0 <_tzset_unlocked_r+0x2f0>)
 80a690c:	4628      	mov	r0, r5
 80a690e:	f7fb fbd5 	bl	80a20bc <siscanf>
 80a6912:	2800      	cmp	r0, #0
 80a6914:	dc04      	bgt.n	80a6920 <_tzset_unlocked_r+0x170>
 80a6916:	6a23      	ldr	r3, [r4, #32]
 80a6918:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a691c:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a691e:	e00e      	b.n	80a693e <_tzset_unlocked_r+0x18e>
 80a6920:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a6924:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a6928:	213c      	movs	r1, #60	; 0x3c
 80a692a:	fb01 3302 	mla	r3, r1, r2, r3
 80a692e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a6932:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a6936:	fb01 3302 	mla	r3, r1, r2, r3
 80a693a:	435f      	muls	r7, r3
 80a693c:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a693e:	4627      	mov	r7, r4
 80a6940:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a6942:	f04f 0900 	mov.w	r9, #0
 80a6946:	441d      	add	r5, r3
 80a6948:	782b      	ldrb	r3, [r5, #0]
 80a694a:	2b2c      	cmp	r3, #44	; 0x2c
 80a694c:	bf08      	it	eq
 80a694e:	3501      	addeq	r5, #1
 80a6950:	f895 8000 	ldrb.w	r8, [r5]
 80a6954:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a6958:	d126      	bne.n	80a69a8 <_tzset_unlocked_r+0x1f8>
 80a695a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a695e:	9302      	str	r3, [sp, #8]
 80a6960:	ab09      	add	r3, sp, #36	; 0x24
 80a6962:	9300      	str	r3, [sp, #0]
 80a6964:	9603      	str	r6, [sp, #12]
 80a6966:	9601      	str	r6, [sp, #4]
 80a6968:	4633      	mov	r3, r6
 80a696a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a696e:	494d      	ldr	r1, [pc, #308]	; (80a6aa4 <_tzset_unlocked_r+0x2f4>)
 80a6970:	4628      	mov	r0, r5
 80a6972:	f7fb fba3 	bl	80a20bc <siscanf>
 80a6976:	2803      	cmp	r0, #3
 80a6978:	d17e      	bne.n	80a6a78 <_tzset_unlocked_r+0x2c8>
 80a697a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a697e:	1e4b      	subs	r3, r1, #1
 80a6980:	2b0b      	cmp	r3, #11
 80a6982:	d879      	bhi.n	80a6a78 <_tzset_unlocked_r+0x2c8>
 80a6984:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a6988:	1e53      	subs	r3, r2, #1
 80a698a:	2b04      	cmp	r3, #4
 80a698c:	d874      	bhi.n	80a6a78 <_tzset_unlocked_r+0x2c8>
 80a698e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a6992:	2b06      	cmp	r3, #6
 80a6994:	d870      	bhi.n	80a6a78 <_tzset_unlocked_r+0x2c8>
 80a6996:	f887 8008 	strb.w	r8, [r7, #8]
 80a699a:	60f9      	str	r1, [r7, #12]
 80a699c:	613a      	str	r2, [r7, #16]
 80a699e:	617b      	str	r3, [r7, #20]
 80a69a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a69a2:	eb05 0803 	add.w	r8, r5, r3
 80a69a6:	e02a      	b.n	80a69fe <_tzset_unlocked_r+0x24e>
 80a69a8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a69ac:	bf06      	itte	eq
 80a69ae:	4643      	moveq	r3, r8
 80a69b0:	3501      	addeq	r5, #1
 80a69b2:	2344      	movne	r3, #68	; 0x44
 80a69b4:	220a      	movs	r2, #10
 80a69b6:	a90b      	add	r1, sp, #44	; 0x2c
 80a69b8:	4628      	mov	r0, r5
 80a69ba:	9305      	str	r3, [sp, #20]
 80a69bc:	f7ff fe2e 	bl	80a661c <strtoul>
 80a69c0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a69c4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a69c8:	4545      	cmp	r5, r8
 80a69ca:	9b05      	ldr	r3, [sp, #20]
 80a69cc:	d114      	bne.n	80a69f8 <_tzset_unlocked_r+0x248>
 80a69ce:	234d      	movs	r3, #77	; 0x4d
 80a69d0:	f1b9 0f00 	cmp.w	r9, #0
 80a69d4:	d107      	bne.n	80a69e6 <_tzset_unlocked_r+0x236>
 80a69d6:	7223      	strb	r3, [r4, #8]
 80a69d8:	2303      	movs	r3, #3
 80a69da:	60e3      	str	r3, [r4, #12]
 80a69dc:	2302      	movs	r3, #2
 80a69de:	6123      	str	r3, [r4, #16]
 80a69e0:	f8c4 9014 	str.w	r9, [r4, #20]
 80a69e4:	e00b      	b.n	80a69fe <_tzset_unlocked_r+0x24e>
 80a69e6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a69ea:	230b      	movs	r3, #11
 80a69ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80a69ee:	2301      	movs	r3, #1
 80a69f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a69f2:	2300      	movs	r3, #0
 80a69f4:	6323      	str	r3, [r4, #48]	; 0x30
 80a69f6:	e002      	b.n	80a69fe <_tzset_unlocked_r+0x24e>
 80a69f8:	b280      	uxth	r0, r0
 80a69fa:	723b      	strb	r3, [r7, #8]
 80a69fc:	6178      	str	r0, [r7, #20]
 80a69fe:	2302      	movs	r3, #2
 80a6a00:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a6a04:	2300      	movs	r3, #0
 80a6a06:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a6a0a:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a6a0e:	930a      	str	r3, [sp, #40]	; 0x28
 80a6a10:	f898 3000 	ldrb.w	r3, [r8]
 80a6a14:	2b2f      	cmp	r3, #47	; 0x2f
 80a6a16:	d10b      	bne.n	80a6a30 <_tzset_unlocked_r+0x280>
 80a6a18:	9603      	str	r6, [sp, #12]
 80a6a1a:	f8cd a008 	str.w	sl, [sp, #8]
 80a6a1e:	9601      	str	r6, [sp, #4]
 80a6a20:	f8cd b000 	str.w	fp, [sp]
 80a6a24:	4633      	mov	r3, r6
 80a6a26:	aa07      	add	r2, sp, #28
 80a6a28:	491f      	ldr	r1, [pc, #124]	; (80a6aa8 <_tzset_unlocked_r+0x2f8>)
 80a6a2a:	4640      	mov	r0, r8
 80a6a2c:	f7fb fb46 	bl	80a20bc <siscanf>
 80a6a30:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a6a34:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a6a38:	213c      	movs	r1, #60	; 0x3c
 80a6a3a:	fb01 3302 	mla	r3, r1, r2, r3
 80a6a3e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a6a42:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a6a46:	fb01 3302 	mla	r3, r1, r2, r3
 80a6a4a:	61bb      	str	r3, [r7, #24]
 80a6a4c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a6a4e:	f109 0901 	add.w	r9, r9, #1
 80a6a52:	f1b9 0f02 	cmp.w	r9, #2
 80a6a56:	4445      	add	r5, r8
 80a6a58:	f107 071c 	add.w	r7, r7, #28
 80a6a5c:	f47f af74 	bne.w	80a6948 <_tzset_unlocked_r+0x198>
 80a6a60:	6860      	ldr	r0, [r4, #4]
 80a6a62:	f7ff fdf5 	bl	80a6650 <__tzcalc_limits>
 80a6a66:	6a22      	ldr	r2, [r4, #32]
 80a6a68:	4b07      	ldr	r3, [pc, #28]	; (80a6a88 <_tzset_unlocked_r+0x2d8>)
 80a6a6a:	601a      	str	r2, [r3, #0]
 80a6a6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a6a6e:	1a9b      	subs	r3, r3, r2
 80a6a70:	4a07      	ldr	r2, [pc, #28]	; (80a6a90 <_tzset_unlocked_r+0x2e0>)
 80a6a72:	bf18      	it	ne
 80a6a74:	2301      	movne	r3, #1
 80a6a76:	6013      	str	r3, [r2, #0]
 80a6a78:	b00d      	add	sp, #52	; 0x34
 80a6a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6a7e:	bf00      	nop
 80a6a80:	080a99c0 	.word	0x080a99c0
 80a6a84:	20000880 	.word	0x20000880
 80a6a88:	20000888 	.word	0x20000888
 80a6a8c:	080a99c3 	.word	0x080a99c3
 80a6a90:	20000884 	.word	0x20000884
 80a6a94:	200000b8 	.word	0x200000b8
 80a6a98:	20000873 	.word	0x20000873
 80a6a9c:	080a99c7 	.word	0x080a99c7
 80a6aa0:	080a99ea 	.word	0x080a99ea
 80a6aa4:	080a99d6 	.word	0x080a99d6
 80a6aa8:	080a99e9 	.word	0x080a99e9
 80a6aac:	20000868 	.word	0x20000868

080a6ab0 <abs>:
 80a6ab0:	2800      	cmp	r0, #0
 80a6ab2:	bfb8      	it	lt
 80a6ab4:	4240      	neglt	r0, r0
 80a6ab6:	4770      	bx	lr

080a6ab8 <_findenv_r>:
 80a6ab8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a6abc:	4607      	mov	r7, r0
 80a6abe:	468b      	mov	fp, r1
 80a6ac0:	4690      	mov	r8, r2
 80a6ac2:	f000 f8db 	bl	80a6c7c <__env_lock>
 80a6ac6:	4b19      	ldr	r3, [pc, #100]	; (80a6b2c <_findenv_r+0x74>)
 80a6ac8:	681d      	ldr	r5, [r3, #0]
 80a6aca:	469a      	mov	sl, r3
 80a6acc:	b13d      	cbz	r5, 80a6ade <_findenv_r+0x26>
 80a6ace:	465c      	mov	r4, fp
 80a6ad0:	4623      	mov	r3, r4
 80a6ad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a6ad6:	b142      	cbz	r2, 80a6aea <_findenv_r+0x32>
 80a6ad8:	2a3d      	cmp	r2, #61	; 0x3d
 80a6ada:	461c      	mov	r4, r3
 80a6adc:	d1f8      	bne.n	80a6ad0 <_findenv_r+0x18>
 80a6ade:	4638      	mov	r0, r7
 80a6ae0:	f000 f8cd 	bl	80a6c7e <__env_unlock>
 80a6ae4:	2000      	movs	r0, #0
 80a6ae6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6aea:	ebcb 0404 	rsb	r4, fp, r4
 80a6aee:	46a9      	mov	r9, r5
 80a6af0:	f859 0b04 	ldr.w	r0, [r9], #4
 80a6af4:	2800      	cmp	r0, #0
 80a6af6:	d0f2      	beq.n	80a6ade <_findenv_r+0x26>
 80a6af8:	4622      	mov	r2, r4
 80a6afa:	4659      	mov	r1, fp
 80a6afc:	f7ff fc58 	bl	80a63b0 <strncmp>
 80a6b00:	b988      	cbnz	r0, 80a6b26 <_findenv_r+0x6e>
 80a6b02:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a6b06:	191e      	adds	r6, r3, r4
 80a6b08:	5d1b      	ldrb	r3, [r3, r4]
 80a6b0a:	2b3d      	cmp	r3, #61	; 0x3d
 80a6b0c:	d10b      	bne.n	80a6b26 <_findenv_r+0x6e>
 80a6b0e:	f8da 3000 	ldr.w	r3, [sl]
 80a6b12:	4638      	mov	r0, r7
 80a6b14:	1aed      	subs	r5, r5, r3
 80a6b16:	10ad      	asrs	r5, r5, #2
 80a6b18:	f8c8 5000 	str.w	r5, [r8]
 80a6b1c:	f000 f8af 	bl	80a6c7e <__env_unlock>
 80a6b20:	1c70      	adds	r0, r6, #1
 80a6b22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a6b26:	464d      	mov	r5, r9
 80a6b28:	e7e1      	b.n	80a6aee <_findenv_r+0x36>
 80a6b2a:	bf00      	nop
 80a6b2c:	20000100 	.word	0x20000100

080a6b30 <_getenv_r>:
 80a6b30:	b507      	push	{r0, r1, r2, lr}
 80a6b32:	aa01      	add	r2, sp, #4
 80a6b34:	f7ff ffc0 	bl	80a6ab8 <_findenv_r>
 80a6b38:	b003      	add	sp, #12
 80a6b3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a6b40 <__gettzinfo>:
 80a6b40:	4800      	ldr	r0, [pc, #0]	; (80a6b44 <__gettzinfo+0x4>)
 80a6b42:	4770      	bx	lr
 80a6b44:	200000c0 	.word	0x200000c0

080a6b48 <gmtime_r>:
 80a6b48:	6802      	ldr	r2, [r0, #0]
 80a6b4a:	4b46      	ldr	r3, [pc, #280]	; (80a6c64 <gmtime_r+0x11c>)
 80a6b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a6b4e:	fb92 f4f3 	sdiv	r4, r2, r3
 80a6b52:	fb03 2214 	mls	r2, r3, r4, r2
 80a6b56:	2a00      	cmp	r2, #0
 80a6b58:	bfbc      	itt	lt
 80a6b5a:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a6b5e:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a6b62:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a6b66:	fb92 f3f0 	sdiv	r3, r2, r0
 80a6b6a:	fb00 2213 	mls	r2, r0, r3, r2
 80a6b6e:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a6b72:	608b      	str	r3, [r1, #8]
 80a6b74:	fb92 f3f0 	sdiv	r3, r2, r0
 80a6b78:	fb00 2213 	mls	r2, r0, r3, r2
 80a6b7c:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a6b80:	bfac      	ite	ge
 80a6b82:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a6b86:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a6b8a:	604b      	str	r3, [r1, #4]
 80a6b8c:	600a      	str	r2, [r1, #0]
 80a6b8e:	2307      	movs	r3, #7
 80a6b90:	1ce2      	adds	r2, r4, #3
 80a6b92:	fb92 f3f3 	sdiv	r3, r2, r3
 80a6b96:	4d34      	ldr	r5, [pc, #208]	; (80a6c68 <gmtime_r+0x120>)
 80a6b98:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a6b9c:	fb94 f5f5 	sdiv	r5, r4, r5
 80a6ba0:	1ad3      	subs	r3, r2, r3
 80a6ba2:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a6ba6:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a6baa:	618b      	str	r3, [r1, #24]
 80a6bac:	4b2f      	ldr	r3, [pc, #188]	; (80a6c6c <gmtime_r+0x124>)
 80a6bae:	4830      	ldr	r0, [pc, #192]	; (80a6c70 <gmtime_r+0x128>)
 80a6bb0:	fb03 4405 	mla	r4, r3, r5, r4
 80a6bb4:	fbb4 f2f2 	udiv	r2, r4, r2
 80a6bb8:	fbb4 f3f7 	udiv	r3, r4, r7
 80a6bbc:	fbb4 f0f0 	udiv	r0, r4, r0
 80a6bc0:	4422      	add	r2, r4
 80a6bc2:	1ad2      	subs	r2, r2, r3
 80a6bc4:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a6bc8:	1a13      	subs	r3, r2, r0
 80a6bca:	f240 126d 	movw	r2, #365	; 0x16d
 80a6bce:	fbb3 f6f6 	udiv	r6, r3, r6
 80a6bd2:	fbb3 f0f2 	udiv	r0, r3, r2
 80a6bd6:	fbb3 f3f7 	udiv	r3, r3, r7
 80a6bda:	4434      	add	r4, r6
 80a6bdc:	1ae3      	subs	r3, r4, r3
 80a6bde:	fb02 3310 	mls	r3, r2, r0, r3
 80a6be2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a6be6:	2499      	movs	r4, #153	; 0x99
 80a6be8:	3202      	adds	r2, #2
 80a6bea:	fbb2 f2f4 	udiv	r2, r2, r4
 80a6bee:	4354      	muls	r4, r2
 80a6bf0:	1ca6      	adds	r6, r4, #2
 80a6bf2:	2405      	movs	r4, #5
 80a6bf4:	fbb6 f4f4 	udiv	r4, r6, r4
 80a6bf8:	2a0a      	cmp	r2, #10
 80a6bfa:	bf34      	ite	cc
 80a6bfc:	2602      	movcc	r6, #2
 80a6bfe:	f06f 0609 	mvncs.w	r6, #9
 80a6c02:	4416      	add	r6, r2
 80a6c04:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6c08:	fb02 0505 	mla	r5, r2, r5, r0
 80a6c0c:	1c5f      	adds	r7, r3, #1
 80a6c0e:	2e01      	cmp	r6, #1
 80a6c10:	bf98      	it	ls
 80a6c12:	3501      	addls	r5, #1
 80a6c14:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a6c18:	eba7 0704 	sub.w	r7, r7, r4
 80a6c1c:	d302      	bcc.n	80a6c24 <gmtime_r+0xdc>
 80a6c1e:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a6c22:	e014      	b.n	80a6c4e <gmtime_r+0x106>
 80a6c24:	0782      	lsls	r2, r0, #30
 80a6c26:	d105      	bne.n	80a6c34 <gmtime_r+0xec>
 80a6c28:	2464      	movs	r4, #100	; 0x64
 80a6c2a:	fbb0 f2f4 	udiv	r2, r0, r4
 80a6c2e:	fb04 0212 	mls	r2, r4, r2, r0
 80a6c32:	b94a      	cbnz	r2, 80a6c48 <gmtime_r+0x100>
 80a6c34:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a6c38:	fbb0 f4f2 	udiv	r4, r0, r2
 80a6c3c:	fb02 0014 	mls	r0, r2, r4, r0
 80a6c40:	fab0 f280 	clz	r2, r0
 80a6c44:	0952      	lsrs	r2, r2, #5
 80a6c46:	e000      	b.n	80a6c4a <gmtime_r+0x102>
 80a6c48:	2201      	movs	r2, #1
 80a6c4a:	333b      	adds	r3, #59	; 0x3b
 80a6c4c:	441a      	add	r2, r3
 80a6c4e:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a6c52:	2300      	movs	r3, #0
 80a6c54:	61ca      	str	r2, [r1, #28]
 80a6c56:	614d      	str	r5, [r1, #20]
 80a6c58:	610e      	str	r6, [r1, #16]
 80a6c5a:	60cf      	str	r7, [r1, #12]
 80a6c5c:	620b      	str	r3, [r1, #32]
 80a6c5e:	4608      	mov	r0, r1
 80a6c60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a6c62:	bf00      	nop
 80a6c64:	00015180 	.word	0x00015180
 80a6c68:	00023ab1 	.word	0x00023ab1
 80a6c6c:	fffdc54f 	.word	0xfffdc54f
 80a6c70:	00023ab0 	.word	0x00023ab0

080a6c74 <labs>:
 80a6c74:	2800      	cmp	r0, #0
 80a6c76:	bfb8      	it	lt
 80a6c78:	4240      	neglt	r0, r0
 80a6c7a:	4770      	bx	lr

080a6c7c <__env_lock>:
 80a6c7c:	4770      	bx	lr

080a6c7e <__env_unlock>:
 80a6c7e:	4770      	bx	lr

080a6c80 <dynalib_user>:
 80a6c80:	0021 080a 0061 080a 008d 080a 0091 080a     !...a...........
 80a6c90:	0000 0000                                   ....

080a6c94 <_ZTVN5spark10LogHandlerE>:
	...
 80a6ca4:	00a9 080a 00cd 080a                         ........

080a6cac <_ZTVN5spark16SerialLogHandlerE>:
	...
 80a6cb4:	00fd 080a 0131 080a 3ad9 080a 00cf 080a     ....1....:......

080a6cc4 <_ZTV17SerialDebugOutput>:
	...
 80a6ccc:	0145 080a 0159 080a 3ad9 080a 00cf 080a     E...Y....:......
 80a6cdc:	2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d 2d2d     ----------------
 80a6cec:	2d2d 2d2d 2d2d 2d2d 002d 6554 706d 7320     ---------.Temp s
 80a6cfc:	6e65 6f73 2072 6177 6574 2072 7369 7220     ensor water is r
 80a6d0c:	6165 7964 202e 6554 706d 6920 3a73 4c00     eady. Temp is:.L
 80a6d1c:	6769 7468 6920 2073 6572 6461 0079 6e49     ight is ready.In
 80a6d2c:	7320 7465 7075 7420 6d65 2070 6e61 2064      setup temp and 
 80a6d3c:	7568 696d 6964 7974 5400 6d65 2070 6e61     humidity.Temp an
 80a6d4c:	2064 7568 696d 6964 7974 7320 6e65 6f73     d humidity senso
 80a6d5c:	2072 6572 6461 2e79 5420 6d65 2070 7369     r ready. Temp is
 80a6d6c:	003a 504d 3655 3530 2030 6f63 6e6e 6365     :.MPU6050 connec
 80a6d7c:	6974 6e6f 7320 6375 6563 7373 7566 006c     tion successful.
 80a6d8c:	504d 3655 3530 2030 6f63 6e6e 6365 6974     MPU6050 connecti
 80a6d9c:	6e6f 6620 6961 656c 0064 5453 5241 4954     on failed.STARTI
 80a6dac:	474e 5300 7265 6169 206c 6674 2074 7369     NG.Serial tft is
 80a6dbc:	7220 6165 7964 2500 3a48 4d25 2520 0059      ready.%H:%M %Y.
 80a6dcc:	7861 003a 7961 003a 7a61 003a 3625 0064     ax:.ay:.az:.%6d.
 80a6ddc:	6157 6576 0073 6157 6574 3a72 4100 7269     Waves.Water:.Air
 80a6dec:	003a 7548 3a6d 0000                         :.Hum:..

080a6df4 <_ZTV12Adafruit_GFX>:
	...
 80a6e04:	0de1 080a 3e05 080a 00a9 080a 0c35 080a     .....>......5...
 80a6e14:	0d55 080a 0d71 080a 0cf5 080a 0d8b 080a     U...q...........
 80a6e24:	0dc3 080a 0ddf 080a 107b 080a               ........{...

080a6e30 <_ZTV15Adafruit_ST7735>:
	...
 80a6e38:	10d7 080a 10d9 080a 0de1 080a 3e05 080a     .............>..
 80a6e48:	14d9 080a 0c35 080a 133f 080a 13b9 080a     ....5...?.......
 80a6e58:	0cf5 080a 1431 080a 10bb 080a 1153 080a     ....1.......S...
 80a6e68:	107b 080a                                   {...

080a6e6c <_ZL4Gcmd>:
 80a6e6c:	0113 3280 8011 2664 0401 02b1 140b 02c0     ...2..d&........
 80a6e7c:	0008 01c1 c505 4102 c730 c101 01ec 3a1b     .......A0......:
 80a6e8c:	5581 2a64 0004 0000 2b7f 0004 0000 369f     .Ud*.....+.....6
 80a6e9c:	c801 01b7 f200 0001 8fe0 2428 3122 0e2b     ..........($"1+.
 80a6eac:	a553 1642 1218 141a 3203 8fe1 1b17 0e1d     S.B......2......
 80a6ebc:	1114 a52c 093d 2d27 2b25 323c 8013 290a     ..,.=.'-%+<2...)
 80a6ecc:	ff80                                        ..

080a6ece <glcdfontBitmaps>:
 80a6ece:	ff00 0000 0000 0000 0000 f870 f8a8 88d8     ..........p.....
 80a6ede:	0070 f870 f8a8 d888 0070 5000 f8f8 70f8     p.p.....p..P...p
 80a6eee:	0020 2000 f870 70f8 0020 5070 a8f8 20f8      .. p..p .pP... 
 80a6efe:	0070 7020 f8f8 20f8 0070 0000 7020 2070     p. p... p... pp 
 80a6f0e:	0000 f8f8 88d8 d888 f8f8 0000 5020 2050     ............ PP 
 80a6f1e:	0000 f8f8 a8d8 d8a8 f8f8 3800 6818 a0a0     ...........8.h..
 80a6f2e:	0040 8870 7088 f820 0020 4878 4078 4040     @.p..p . .xHx@@@
 80a6f3e:	00c0 4878 4878 5848 00c0 a820 d870 70d8     ..xHxHHX.. .p..p
 80a6f4e:	20a8 c080 f8f0 c0f0 0080 1808 f878 1878     . ..........x.x.
 80a6f5e:	0008 7020 20a8 70a8 0020 d8d8 d8d8 00d8     .. p. .p .......
 80a6f6e:	00d8 a878 68a8 2828 0028 4830 2850 4810     ..x..h(((.0HP(.H
 80a6f7e:	3048 0000 0000 f800 00f8 7020 20a8 70a8     H0........ p. .p
 80a6f8e:	f820 2000 a870 2020 0020 2000 2020 70a8      .. p.   ..   .p
 80a6f9e:	0020 2000 f810 2010 0000 2000 f840 2040      .. ... ... @.@ 
 80a6fae:	0000 8000 8080 00f8 0000 5000 f8f8 0050     ...........P..P.
 80a6fbe:	0000 2000 7020 f8f8 0000 f800 70f8 2020     ...  p.......p  
	...
 80a6fd6:	0000 2020 2020 0020 0020 5050 0050 0000     ..     . .PPP...
 80a6fe6:	0000 5050 50f8 50f8 0050 7820 70a0 f028     ..PP.P.PP. x.p(.
 80a6ff6:	0020 c8c0 2010 9840 0018 a040 40a0 90a8      .... @...@..@..
 80a7006:	0068 3030 4020 0000 0000 2010 4040 2040     h.00 @..... @@@ 
 80a7016:	0010 2040 1010 2010 0040 a820 f870 a870     ..@ ... @. .p.p.
 80a7026:	0020 2000 f820 2020 0000 0000 0000 3030      ..  .  ......00
 80a7036:	4020 0000 f800 0000 0000 0000 0000 3000      @.............0
 80a7046:	0030 0800 2010 8040 0000 8870 a898 88c8     0.... @...p.....
 80a7056:	0070 6020 2020 2020 0070 8870 7008 8080     p. `    p.p..p..
 80a7066:	00f8 08f8 3010 8808 0070 3010 9050 10f8     .....0..p..0P...
 80a7076:	0010 80f8 08f0 8808 0070 4038 f080 8888     ........p.8@....
 80a7086:	0070 08f8 1008 4020 0080 8870 7088 8888     p..... @..p..p..
 80a7096:	0070 8870 7888 1008 00e0 0000 0020 0020     p.p..x...... . .
 80a70a6:	0000 0000 0020 2020 0040 1008 4020 1020     .... .  @... @ .
 80a70b6:	0008 0000 00f8 00f8 0000 2040 0810 2010     ..........@ ... 
 80a70c6:	0040 8870 3008 0020 0020 8870 b8a8 80b0     @.p..0 . .p.....
 80a70d6:	0078 5020 8888 88f8 0088 88f0 f088 8888     x. P............
 80a70e6:	00f0 8870 8080 8880 0070 88f0 8888 8888     ..p.....p.......
 80a70f6:	00f0 80f8 f080 8080 00f8 80f8 f080 8080     ................
 80a7106:	0080 8878 8080 8898 0078 8888 f888 8888     ..x.....x.......
 80a7116:	0088 2070 2020 2020 0070 1038 1010 9010     ..p     p.8.....
 80a7126:	0060 9088 c0a0 90a0 0088 8080 8080 8080     `...............
 80a7136:	00f8 d888 a8a8 88a8 0088 8888 a8c8 8898     ................
 80a7146:	0088 8870 8888 8888 0070 88f0 f088 8080     ..p.....p.......
 80a7156:	0080 8870 8888 90a8 0068 88f0 f088 90a0     ..p.....h.......
 80a7166:	0088 8870 7080 8808 0070 a8f8 2020 2020     ..p..p..p...    
 80a7176:	0020 8888 8888 8888 0070 8888 8888 5088      .......p......P
 80a7186:	0020 8888 a888 a8a8 0050 8888 2050 8850      .......P...P P.
 80a7196:	0088 8888 2050 2020 0020 08f8 7010 8040     ....P    ....p@.
 80a71a6:	00f8 4078 4040 4040 0078 8000 2040 0810     ..x@@@@@x...@ ..
 80a71b6:	0000 0878 0808 0808 0078 5020 0088 0000     ..x.....x. P....
	...
 80a71ce:	00f8 6060 1020 0000 0000 0000 1060 9070     ..`` .......`.p.
 80a71de:	0078 8080 c8b0 c888 00b0 0000 8870 8880     x...........p...
 80a71ee:	0070 0808 9868 9888 0068 0000 8870 80f8     p...h...h...p...
 80a71fe:	0070 2810 7020 2020 0020 0000 9870 6898     p..( p   ...p..h
 80a720e:	7008 8080 c8b0 8888 0088 0020 2060 2020     .p........ .`   
 80a721e:	0070 0010 1010 9010 0060 8080 a090 a0c0     p.......`.......
 80a722e:	0090 2060 2020 2020 0070 0000 a8d0 a8a8     ..`     p.......
 80a723e:	00a8 0000 c8b0 8888 0088 0000 8870 8888     ............p...
 80a724e:	0070 0000 c8b0 b0c8 8080 0000 9868 6898     p...........h..h
 80a725e:	0808 0000 c8b0 8080 0080 0000 8078 0870     ............x.p.
 80a726e:	00f0 2020 20f8 2820 0010 0000 8888 9888     ..  .  (........
 80a727e:	0068 0000 8888 5088 0020 0000 8888 a8a8     h......P .......
 80a728e:	0050 0000 5088 5020 0088 0000 8888 0878     P....P P......x.
 80a729e:	7088 0000 10f8 4020 00f8 2010 4020 2020     .p.... @...  @  
 80a72ae:	0010 2020 0020 2020 0020 2040 1020 2020     ..   .   .@  .  
 80a72be:	0040 a840 0010 0000 0000 7020 88d8 f888     @.@....... p....
 80a72ce:	0000 8870 8080 7088 6010 8800 8800 9888     ..p....p.`......
 80a72de:	0068 0018 8870 80f8 0078 00f8 1060 9070     h...p...x...`.p.
 80a72ee:	0078 0088 1060 9070 0078 00c0 1060 9070     x...`.p.x...`.p.
 80a72fe:	0078 0030 1060 9070 0078 7800 c0c0 1078     x.0.`.p.x..x..x.
 80a730e:	0030 00f8 8870 80f8 0078 0088 8870 80f8     0...p...x...p...
 80a731e:	0078 00c0 8870 80f8 0078 0028 1030 1010     x...p...x.(.0...
 80a732e:	0038 4830 1030 1010 0038 0060 1030 1010     8.0H0...8.`.0...
 80a733e:	0038 0050 5020 f888 8888 0020 5020 f888     8.P. P.... . P..
 80a734e:	8888 0030 80f0 80e0 00f0 0000 1078 9078     ..0.........x.x.
 80a735e:	0078 5038 f890 9090 0098 8870 7000 8888     x.8P......p..p..
 80a736e:	0070 8800 7000 8888 0070 c000 7000 8888     p....p..p....p..
 80a737e:	0070 8870 8800 9888 0068 c000 8800 9888     p.p.....h.......
 80a738e:	0068 0048 4848 3848 7008 0088 8870 8888     h.H.HHH8.p..p...
 80a739e:	0070 0088 8888 8888 0070 2020 a0f8 f8a0     p.......p.  ....
 80a73ae:	2020 5830 e048 4840 00f8 d8d8 f870 f820       0XH.@H....p. .
 80a73be:	2020 90e0 e090 b890 9090 2818 7020 2020       .........( p  
 80a73ce:	c0a0 0018 1060 9070 0078 0018 1030 1010     ....`.p.x...0...
 80a73de:	0038 1800 7000 8888 0070 1800 8800 9888     8....p..p.......
 80a73ee:	0068 7800 7000 4848 0048 00f8 e8c8 98b8     h..x.pHHH.......
 80a73fe:	0088 9070 7890 f800 0000 8870 7088 f800     ..p..x....p..p..
 80a740e:	0000 0020 6020 8880 0070 0000 f800 8080     .. . `..p.......
 80a741e:	0000 0000 f800 0808 0000 8880 b890 9848     ..............H.
 80a742e:	3820 8880 a890 b858 0808 2020 2000 2020      8....X...  .   
 80a743e:	0020 2800 a050 2850 0000 a000 2850 a050      ..(P.P(....P(P.
 80a744e:	0000 8820 8820 8820 8820 a850 a850 a850     .. . . . .P.P.P.
 80a745e:	a850 1010 1010 1010 1010 1010 1010 10f0     P...............
 80a746e:	1010 1010 10f0 10f0 1010 2828 2828 28e8     ..........((((.(
 80a747e:	2828 0000 0000 28f8 2828 0000 10f0 10f0     ((.....(((......
 80a748e:	1010 2828 08e8 28e8 2828 2828 2828 2828     ..((...(((((((((
 80a749e:	2828 0000 08f8 28e8 2828 2828 08e8 00f8     ((.....(((((....
 80a74ae:	0000 2828 2828 00f8 0000 1010 10f0 00f0     ..((((..........
 80a74be:	0000 0000 0000 10f0 1010 1010 1010 0018     ................
 80a74ce:	0000 1010 1010 00f8 0000 0000 0000 10f8     ................
 80a74de:	1010 1010 1010 1018 1010 0000 0000 00f8     ................
 80a74ee:	0000 1010 1010 10f8 1010 1010 1018 1018     ................
 80a74fe:	1010 2828 2828 2828 2828 2828 2028 0038     ..((((((((((( 8.
 80a750e:	0000 0000 2038 2828 2828 2828 00e8 00f8     ....8 ((((((....
 80a751e:	0000 0000 00f8 28e8 2828 2828 2028 2828     .......(((((( ((
 80a752e:	2828 0000 00f8 00f8 0000 2828 00e8 28e8     ((........((...(
 80a753e:	2828 1010 00f8 00f8 0000 2828 2828 00f8     ((........((((..
 80a754e:	0000 0000 00f8 10f8 1010 0000 0000 28f8     ...............(
 80a755e:	2828 2828 2828 0038 0000 1010 1018 0018     ((((((8.........
 80a756e:	0000 0000 1018 1018 1010 0000 0000 2838     ..............8(
 80a757e:	2828 2828 2828 28f8 2828 1010 10f8 10f8     ((((((.(((......
 80a758e:	1010 1010 1010 00f0 0000 0000 0000 1018     ................
 80a759e:	1010 f8f8 f8f8 f8f8 f8f8 0000 0000 f8f8     ................
 80a75ae:	f8f8 e0e0 e0e0 e0e0 e0e0 1818 1818 1818     ................
 80a75be:	1818 f8f8 f8f8 0000 0000 0000 9068 9090     ............h...
 80a75ce:	0068 7000 f098 f098 0080 f800 8098 8080     h..p............
 80a75de:	0080 f800 5050 5050 0050 88f8 2040 8840     ....PPPPP...@ @.
 80a75ee:	00f8 0000 9078 9090 0060 5000 5050 6850     ....x...`..PPPPh
 80a75fe:	00c0 f800 20a0 2020 0020 20f8 8870 7088     .....    .. p..p
 80a760e:	f820 5020 f888 5088 0020 5020 8888 5050      . P...P . P..PP
 80a761e:	00d8 4030 7030 8888 0070 0000 7000 a8a8     ..0@0p..p....p..
 80a762e:	0070 7008 a898 c8a8 8070 8070 f080 8080     p..p....p.p.....
 80a763e:	0070 8870 8888 8888 0088 f800 f800 f800     p.p.............
 80a764e:	0000 2020 20f8 0020 00f8 2040 2010 0040     ..  .  ...@ . @.
 80a765e:	00f8 2010 2040 0010 00f8 2838 2020 2020     ... @ ....8(    
 80a766e:	2020 2020 2020 a020 e0a0 3030 f800 3000            ...00...0
 80a767e:	0030 e800 00b8 b8e8 0000 d870 70d8 0000     0.........p..p..
 80a768e:	0000 0000 3000 0030 0000 0000 0000 0030     .....00.......0.
 80a769e:	0000 2038 2020 a0a0 2060 4870 4848 0048     ..8   ..` pHHHH.
 80a76ae:	0000 1870 6030 0078 0000 0000 7878 7878     ..p.0`x.....xxxx
	...

080a76c8 <arial_8ptBitmaps>:
 80a76c8:	7f20 0000 0000 0000 0000 0000 8080 8080      ...............
 80a76d8:	8080 8000 0000 a0a0 00a0 0000 0000 0000     ................
 80a76e8:	2828 50f8 f850 a0a0 0000 a870 70a0 2828     ((.PP.....p..p((
 80a76f8:	70a8 0020 0062 0094 0094 0068 000b 8014     .p .b.....h.....
 80a7708:	8014 0023 0000 0000 4830 3048 8c50 7488     ..#.....0HH0P..t
 80a7718:	0000 8080 0080 0000 0000 0000 4020 8080     ............ @..
 80a7728:	8080 8080 2040 4080 2020 2020 2020 8040     ....@ .@      @.
 80a7738:	e040 a040 0000 0000 0000 0000 2020 20f8     @.@.........  . 
 80a7748:	0020 0000 0000 0000 0000 8000 8080 0000      ...............
 80a7758:	0000 e000 0000 0000 0000 0000 0000 8000     ................
 80a7768:	0000 2020 4040 4040 8080 0000 8870 8888     ..  @@@@....p...
 80a7778:	8888 7088 0000 6020 20a0 2020 2020 0000     ...p.. `.     ..
 80a7788:	8870 0808 2010 f840 0000 8870 3008 0808     p.... @...p..0..
 80a7798:	7088 0000 3010 5050 f890 1010 0000 4078     .p...0PP......x@
 80a77a8:	f080 0808 7088 0000 8870 f080 8888 7088     .....p..p......p
 80a77b8:	0000 10f8 2010 4020 4040 0000 8870 7088     .....  @@@..p..p
 80a77c8:	8888 7088 0000 8870 8888 0878 7088 0000     ...p..p...x..p..
 80a77d8:	0000 0080 0000 8000 0000 0000 0080 0000     ................
 80a77e8:	8000 8080 0000 7008 7080 0008 0000 0000     .......p.p......
 80a77f8:	f800 f800 0000 0000 0000 7080 7008 0080     ...........p.p..
 80a7808:	0000 8870 1008 2020 2000 0000 001f 8060     ..p...  . ....`.
 80a7818:	404d 4093 40a2 40a2 80a6 009b 4040 803f     M@.@.@.@....@@?.
 80a7828:	2810 2828 7c44 8282 0000 84f8 fc84 8484     .(((D|..........
 80a7838:	f884 0000 4438 8080 8080 3844 0000 88f0     ....8D....D8....
 80a7848:	8484 8484 f088 0000 80f8 f880 8080 f880     ................
 80a7858:	0000 80f8 f080 8080 8080 0000 4438 8082     ............8D..
 80a7868:	828e 3844 0000 8484 fc84 8484 8484 0000     ..D8............
 80a7878:	8080 8080 8080 8080 0000 1010 1010 9010     ................
 80a7888:	6090 0000 8884 b090 88d0 8488 0000 8080     .`..............
 80a7898:	8080 8080 f880 0000 c682 aac6 aaaa 9292     ................
 80a78a8:	0000 c484 a4a4 9494 848c 0000 4438 8282     ............8D..
 80a78b8:	8282 3844 0000 88f0 8888 80f0 8080 0000     ..D8............
 80a78c8:	4438 8282 9a82 3a44 0000 84f8 f884 8890     8D....D:........
 80a78d8:	8488 0000 8478 6080 0418 7884 0000 20f8     ....x..`...x... 
 80a78e8:	2020 2020 2020 0000 8484 8484 8484 7884           .........x
 80a78f8:	0000 8282 4444 2828 1010 0000 2084 208a     ....DD((..... . 
 80a7908:	404a 404a 4051 4051 8020 8020 0000 0000     J@J@Q@Q@ . .....
 80a7918:	4884 3048 4830 8448 0000 4482 2844 1010     .HH00HH....DD(..
 80a7928:	1010 0000 087c 1010 2020 fc40 0000 80c0     ....|...  @.....
 80a7938:	8080 8080 8080 c080 8080 4040 4040 2020     ..........@@@@  
 80a7948:	0000 40c0 4040 4040 4040 c040 5020 8850     ...@@@@@@@@. PP.
	...
 80a7964:	0000 fc00 4080 0000 0000 0000 0000 0000     .....@..........
 80a7974:	8870 8878 6898 0000 8080 c8b0 8888 b0c8     p.x..h..........
 80a7984:	0000 0000 8870 8080 7088 0000 0808 9868     ....p....p....h.
 80a7994:	8888 6898 0000 0000 8870 80f8 7088 0000     ...h....p....p..
 80a79a4:	4020 40e0 4040 4040 0000 0000 9868 8888      @.@@@@@....h...
 80a79b4:	6898 f008 8080 c8b0 8888 8888 0000 0080     .h..............
 80a79c4:	8080 8080 8080 0000 0040 4040 4040 4040     ........@.@@@@@@
 80a79d4:	8040 8080 a090 a0c0 90a0 0000 8080 8080     @...............
 80a79e4:	8080 8080 0000 0000 d2bc 9292 9292 0000     ................
 80a79f4:	0000 88f0 8888 8888 0000 0000 8870 8888     ............p...
 80a7a04:	7088 0000 0000 c8b0 8888 b0c8 8080 0000     .p..............
 80a7a14:	9868 8888 6898 0808 0000 c0a0 8080 8080     h....h..........
 80a7a24:	0000 0000 8870 1060 7088 0000 4040 40e0     ....p.`..p..@@.@
 80a7a34:	4040 6040 0000 0000 8888 8888 6898 0000     @@@`.........h..
 80a7a44:	0000 8888 5050 2020 0000 0000 0000 8088     ....PP  ........
 80a7a54:	8094 0055 0055 0022 0022 0000 0000 0000     ..U.U.".".......
 80a7a64:	5088 2020 8850 0000 0000 8888 5050 2020     .P  P.......PP  
 80a7a74:	4020 0000 10f8 2020 f840 0000 4020 4040      @....  @... @@@
 80a7a84:	4080 4040 2040 8080 8080 8080 8080 8080     .@@@@ ..........
 80a7a94:	4080 4040 4020 4040 8040 0000 e800 00b0     .@@@ @@@@.......
 80a7aa4:	0000 0000                                   ....

080a7aa8 <arial_8ptDescriptors>:
 80a7aa8:	0a02 0000 0a01 000a 0a03 0014 0a05 001e     ................
 80a7ab8:	0a05 0028 0a09 0032 0a06 0046 0a01 0050     ..(...2...F...P.
 80a7ac8:	0a03 005a 0a03 0064 0a03 006e 0a05 0078     ..Z...d...n...x.
 80a7ad8:	0a01 0082 0a03 008c 0a01 0096 0a03 00a0     ................
 80a7ae8:	0a05 00aa 0a03 00b4 0a05 00be 0a05 00c8     ................
 80a7af8:	0a05 00d2 0a05 00dc 0a05 00e6 0a05 00f0     ................
 80a7b08:	0a05 00fa 0a05 0104 0a01 010e 0a01 0118     ................
 80a7b18:	0a05 0122 0a05 012c 0a05 0136 0a05 0140     .."...,...6...@.
 80a7b28:	0a0a 014a 0a07 015e 0a06 0168 0a06 0172     ..J...^...h...r.
 80a7b38:	0a06 017c 0a05 0186 0a05 0190 0a07 019a     ..|.............
 80a7b48:	0a06 01a4 0a01 01ae 0a04 01b8 0a06 01c2     ................
 80a7b58:	0a05 01cc 0a07 01d6 0a06 01e0 0a07 01ea     ................
 80a7b68:	0a05 01f4 0a07 01fe 0a06 0208 0a06 0212     ................
 80a7b78:	0a05 021c 0a06 0226 0a07 0230 0a0b 023a     ......&...0...:.
 80a7b88:	0a06 024e 0a07 0258 0a06 0262 0a02 026c     ..N...X...b...l.
 80a7b98:	0a03 0276 0a02 0280 0a05 028a 0a06 0294     ..v.............
 80a7ba8:	0a02 029e 0a05 02a8 0a05 02b2 0a05 02bc     ................
 80a7bb8:	0a05 02c6 0a05 02d0 0a03 02da 0a05 02e4     ................
 80a7bc8:	0a05 02ee 0a01 02f8 0a02 0302 0a04 030c     ................
 80a7bd8:	0a01 0316 0a07 0320 0a05 032a 0a05 0334     ...... ...*...4.
 80a7be8:	0a05 033e 0a05 0348 0a03 0352 0a05 035c     ..>...H...R...\.
 80a7bf8:	0a03 0366 0a05 0370 0a05 037a 0a09 0384     ..f...p...z.....
 80a7c08:	0a05 0398 0a05 03a2 0a05 03ac 0a03 03b6     ................
 80a7c18:	0a01 03c0 0a03 03ca 0a05 03d4               ............

080a7c24 <centuryGothic_8ptBitmaps>:
 80a7c24:	7f20 0000 0000 0000 0000 0000 0000 8080      ...............
 80a7c34:	8080 8080 8000 0000 a000 00a0 0000 0000     ................
 80a7c44:	0000 0000 2828 28fc fc50 5050 0000 7020     ....((.(P.PP.. p
 80a7c54:	a0a8 3060 a828 2070 0020 947e 6898 1916     ..`0(.p  .~..h..
 80a7c64:	4629 0000 2000 5050 5420 8c88 0072 0000     )F... PP T..r...
 80a7c74:	8080 0000 0000 0000 0000 4000 8080 8080     ...........@....
 80a7c84:	8080 8080 0040 4080 4040 4040 4040 8040     ....@..@@@@@@@@.
 80a7c94:	4000 e0e0 0040 0000 0000 0000 2000 f820     .@..@........  .
 80a7ca4:	2020 0000 0000 0000 0000 0000 0000 8040       ............@.
 80a7cb4:	0000 0000 0000 00e0 0000 0000 0000 0000     ................
 80a7cc4:	0000 0000 0080 0000 2010 2020 4040 8040     .........   @@@.
 80a7cd4:	0080 2000 8850 8888 5088 0020 0000 40c0     ... P....P ....@
 80a7ce4:	4040 4040 4040 0000 7000 8888 1008 4020     @@@@@@...p.... @
 80a7cf4:	00f8 0000 8870 3008 8808 7088 0000 0800     ....p..0...p....
 80a7d04:	1808 4828 08fc 0008 0000 2038 7040 0808     ..(H......8 @p..
 80a7d14:	7088 0000 1000 4020 8870 8888 0070 0000     .p.... @p...p...
 80a7d24:	10f8 2010 4020 8040 0000 7000 8888 8870     ...  @@....p..p.
 80a7d34:	8888 0070 0000 8870 8888 1070 4020 0000     ..p...p...p. @..
 80a7d44:	0000 8000 0000 0000 0080 0000 0000 0040     ..............@.
 80a7d54:	0000 4000 0080 0000 0c00 8070 0c70 0000     ...@......p.p...
 80a7d64:	0000 0000 00fc fc00 0000 0000 0000 c000     ................
 80a7d74:	0438 c038 0000 0000 8870 7008 7880 2000     8.8.....p..p.x. 
 80a7d84:	0000 0000 003e 0041 809a 80a4 80a4 009b     ....>.A.........
 80a7d94:	0041 003e 0000 0000 1000 2828 4428 447c     A.>.......(((D|D
 80a7da4:	0082 0000 a0c0 e0a0 9090 e090 0000 3c00     ...............<
 80a7db4:	8042 8080 4280 003c 0000 88f0 8484 8484     B....B<.........
 80a7dc4:	f088 0000 f800 8080 80f8 8080 00f8 0000     ................
 80a7dd4:	80f0 f080 8080 8080 0000 3c00 8042 8780     ...........<B...
 80a7de4:	4281 003c 0000 8484 fc84 8484 8484 0000     .B<.............
 80a7df4:	8000 8080 8080 8080 0080 0000 1010 1010     ................
 80a7e04:	1010 6090 0000 8800 a090 c0c0 90a0 0088     ...`............
 80a7e14:	0000 8080 8080 8080 f080 0000 0000 0041     ..............A.
 80a7e24:	0041 80a2 80a2 80a4 8094 8094 8088 0000     A...............
 80a7e34:	0000 8400 c484 94a4 848c 0084 0000 423c     ..............<B
 80a7e44:	8181 8181 3c42 0000 f000 8888 80f0 8080     ....B<..........
 80a7e54:	0080 0000 423c 8181 8981 3d46 0000 f000     ....<B....F=....
 80a7e64:	8888 a0f0 9090 0088 0000 9060 4080 1020     ..........`..@ .
 80a7e74:	6090 0000 f800 2020 2020 2020 0020 0000     .`....       ...
 80a7e84:	8484 8484 8484 7884 0000 8200 4444 2844     .......x....DDD(
 80a7e94:	2828 0010 0000 8800 8880 5580 5500 5500     ((.........U.U.U
 80a7ea4:	5500 2200 2200 0000 0000 0000 8888 2050     .U."."........P 
 80a7eb4:	5020 8888 0000 8200 2844 1028 1010 0010      P......D((.....
 80a7ec4:	0000 10f8 2010 4020 f840 0000 c000 8080     .....  @@.......
 80a7ed4:	8080 8080 8080 00c0 4080 2040 1020 0808     .........@@  ...
 80a7ee4:	0004 c000 4040 4040 4040 4040 00c0 2810     ....@@@@@@@@...(
 80a7ef4:	4428 8244 0000 0000 0000 0000 0000 0000     (DD.............
 80a7f04:	0000 80fc 0040 0000 0000 0000 0000 0000     ....@...........
 80a7f14:	3a00 8246 4682 003a 0000 8080 c4b8 8282     .:F..F:.........
 80a7f24:	b8c4 0000 0000 3800 8044 4480 0038 0000     .......8D..D8...
 80a7f34:	0202 463a 8282 3a46 0000 0000 3800 fc44     ..:F..F:.....8D.
 80a7f44:	4480 0038 0000 4020 40e0 4040 4040 0000     .D8... @.@@@@@..
 80a7f54:	0000 3400 844c 4c84 8834 0070 8080 c8b0     ...4L..L4.p.....
 80a7f64:	8484 8484 0000 8000 8000 8080 8080 0080     ................
 80a7f74:	0000 0040 4040 4040 4040 8040 8000 9080     ..@.@@@@@@@.....
 80a7f84:	c0a0 a0c0 0090 0000 8080 8080 8080 8080     ................
	...
 80a7f9c:	00b3 80cc 8088 8088 8088 8088 0000 0000     ................
 80a7fac:	0000 b000 84c8 8484 0084 0000 0000 4830     ..............0H
 80a7fbc:	8484 3048 0000 0000 b800 82c4 c482 80b8     ..H0............
 80a7fcc:	0080 0000 463a 8282 3a46 0202 0000 a000     ....:F..F:......
 80a7fdc:	80c0 8080 0080 0000 0000 8060 2040 40a0     ..........`.@ .@
 80a7fec:	0000 4000 e040 4040 4040 0040 0000 0000     ...@@.@@@@@.....
 80a7ffc:	8484 8484 3048 0000 0000 8200 4444 2828     ....H0......DD((
 80a800c:	0010 0000 0000 0000 8800 8980 5500 5500     .............U.U
 80a801c:	2200 2200 0000 0000 0000 0000 5088 2020     .".".........P  
 80a802c:	8850 0000 0000 8800 5048 3050 2020 0040     P.......HPP0  @.
 80a803c:	0000 10f8 2020 f840 0000 6000 4040 8040     ....  @....`@@@.
 80a804c:	4040 4040 0060 8080 8080 8080 8080 8080     @@@@`...........
 80a805c:	c000 4040 2040 4040 4040 00c0 0000 6400     ..@@@ @@@@.....d
 80a806c:	0098 0000 0000                              ......

080a8072 <comicSansMS_8ptBitmaps>:
 80a8072:	7f20 0000 0000 0000 0000 0000 0000 8080      ...............
 80a8082:	8080 8080 0080 0080 0000 a000 a0a0 0000     ................
	...
 80a809a:	0011 0011 807f 0022 0022 00ff 0044 0044     ......"."...D.D.
 80a80aa:	0000 0000 0000 7820 a0a0 2870 2828 20f0     ...... x..p(((. 
 80a80ba:	0020 0002 0066 0094 009c 0068 001b 8014      ...f.....h.....
 80a80ca:	8034 0023 0000 0000 0000 1800 3028 d474     4.#.........(0t.
 80a80da:	888c 0074 0000 8000 8080 0000 0000 0000     ..t.............
 80a80ea:	0000 4020 8040 8080 8080 4080 0020 4080     .. @@......@ ..@
 80a80fa:	2040 2020 2020 4020 0080 2000 70f8 00d0     @      @... .p..
	...
 80a8112:	2000 f820 2020 0000 0000 0000 0000 0000     .  .  ..........
 80a8122:	0000 8040 0000 0000 0000 0000 00e0 0000     ..@.............
	...
 80a813a:	0000 0080 0000 1008 1010 4020 8040 0080     .......... @@...
 80a814a:	0000 7000 8888 8888 8888 0070 0000 4000     ...p......p....@
 80a815a:	40c0 4040 4040 00e0 0000 7000 0888 2010     .@@@@@.....p... 
 80a816a:	8040 00f8 0000 7000 0888 0870 8808 0070     @......p..p...p.
 80a817a:	0000 0800 2818 4828 08fc 0008 0000 f800     .....((H........
 80a818a:	f080 0888 8808 0070 0000 1000 4020 88f0     ......p..... @..
 80a819a:	8888 0070 0000 fc00 1008 2010 2020 0040     ..p........   @.
 80a81aa:	0000 7000 8888 8870 8888 0070 0000 7000     ...p..p...p....p
 80a81ba:	8888 7888 2010 00c0 0000 0000 8000 0000     ...x. ..........
 80a81ca:	8000 0000 0000 0000 4000 0000 0000 8040     .........@....@.
 80a81da:	0000 0000 2000 8040 2040 0000 0000 0000     ..... @.@ ......
 80a81ea:	f000 0000 00f0 0000 0000 0000 8000 2040     ..............@ 
 80a81fa:	8040 0000 0000 f000 0808 2010 0040 0040     @.......... @.@.
 80a820a:	0000 003e 0041 809c 80b6 80a6 009b 0080     ..>.A...........
 80a821a:	0041 003e 0000 0000 0000 0800 1408 3c24     A.>...........$<
 80a822a:	4244 0082 0000 f000 8888 f090 8888 00f0     DB..............
 80a823a:	0000 1c00 4024 8080 8480 0078 0000 c000     ....$@....x.....
 80a824a:	88b0 8484 8884 00f0 0000 f800 8080 80f8     ................
 80a825a:	8080 00f8 0000 f800 8080 80f0 8080 0080     ................
 80a826a:	0000 1c00 4022 be80 8482 0078 0000 8400     ...."@....x.....
 80a827a:	8484 84fc 8484 0084 0000 f800 2020 2020     ............    
 80a828a:	2020 00f8 0000 3e00 0808 0808 8888 0078       .....>......x.
 80a829a:	0000 8800 a090 c0c0 90a0 0088 0000 8000     ................
 80a82aa:	8080 8080 8080 00f0 0000 0000 0022 0022     ............".".
 80a82ba:	0022 0055 0055 0055 8088 8088 0000 0000     ".U.U.U.........
 80a82ca:	0000 8200 a2c2 92a2 868a 0082 0000 3c00     ...............<
 80a82da:	8242 8282 8482 0078 0000 e000 9090 9090     B.....x.........
 80a82ea:	80e0 0080 0000 3c00 8142 8181 4a91 033e     .......<B....J>.
 80a82fa:	0001 e000 9090 e090 90a0 0088 0000 3c00     ...............<
 80a830a:	4040 0438 8404 0078 0000 fe00 1010 1010     @@8...x.........
 80a831a:	1010 0010 0000 8400 8484 8484 8484 0078     ..............x.
 80a832a:	0000 8800 8888 5050 5050 0020 0000 0000     ......PPPP .....
 80a833a:	2084 2084 404a 404a 8052 8052 8022 0021     . . J@J@R.R.".!.
 80a834a:	0000 0000 0000 8200 2844 1010 4428 0082     ........D(..(D..
 80a835a:	0000 8400 4848 3028 2010 0020 0000 fe00     ....HH(0.  .....
 80a836a:	0804 2010 8040 00fe 0000 80e0 8080 8080     ... @...........
 80a837a:	8080 8080 00e0 8000 4080 2040 2020 1010     .........@@   ..
 80a838a:	0000 20e0 2020 2020 2020 2020 00e0 6060     ...         ..``
 80a839a:	0090 0000 0000 0000 0000 0000 0000 0000     ................
 80a83aa:	0000 0000 00fe 4080 0000 0000 0000 0000     .......@........
 80a83ba:	0000 0000 3800 8848 8888 0074 0000 8080     .....8H...t.....
 80a83ca:	f080 8888 8888 00f0 0000 0000 3000 8048     .............0H.
 80a83da:	8880 0070 0000 0808 7808 8888 8888 0078     ..p......x....x.
 80a83ea:	0000 0000 7000 9088 88e0 0070 0000 2018     .....p....p.... 
 80a83fa:	f820 2020 2020 0020 0000 0000 3000 8848      .     ......0H.
 80a840a:	8888 0878 e010 8080 b080 88c8 8888 0088     ..x.............
 80a841a:	0000 8000 8000 8080 8080 0080 0000 1000     ................
 80a842a:	1000 1010 1010 1010 6090 8080 8880 a090     .........`......
 80a843a:	90e0 0088 0000 8080 8080 8080 8080 0080     ................
 80a844a:	0000 0000 a400 92da 9292 0092 0000 0000     ................
 80a845a:	b000 88c8 8888 0088 0000 0000 7000 8888     .............p..
 80a846a:	8888 0070 0000 0000 f000 8888 8888 80f0     ..p.............
 80a847a:	8080 0000 3800 8848 8888 0878 0808 0000     .....8H...x.....
 80a848a:	e000 80a0 8080 0080 0000 0000 7000 4080     .............p.@
 80a849a:	1020 00e0 0000 4000 e040 4040 4040 0040      ......@@.@@@@@.
 80a84aa:	0000 0000 8800 8888 8888 0078 0000 0000     ..........x.....
 80a84ba:	8800 5088 2050 0020 0000 0000 9200 b492     ...PP  .........
 80a84ca:	54b4 0048 0000 0000 8400 3048 4830 0084     .TH.......H00H..
 80a84da:	0000 0000 8400 4888 3050 2020 4040 0000     .......HP0  @@..
 80a84ea:	f000 2010 8040 00f0 0000 4030 4040 c040     ... @.....0@@@@.
 80a84fa:	4040 4040 0030 8080 8080 8080 8080 8080     @@@@0...........
 80a850a:	0080 20c0 2020 3020 2020 2020 00c0 0000     ...    0    ....
 80a851a:	6400 98e4 0000 0000 0000                    .d........

080a8524 <comicSansMS_8ptDescriptors>:
 80a8524:	0c02 0000 0c01 000c 0c03 0018 0c09 0024     ..............$.
 80a8534:	0c05 003c 0c09 0048 0c06 0060 0c01 006c     ..<...H...`...l.
 80a8544:	0c03 0078 0c03 0084 0c05 0090 0c05 009c     ..x.............
 80a8554:	0c02 00a8 0c03 00b4 0c01 00c0 0c05 00cc     ................
 80a8564:	0c05 00d8 0c03 00e4 0c05 00f0 0c05 00fc     ................
 80a8574:	0c06 0108 0c05 0114 0c05 0120 0c06 012c     .......... ...,.
 80a8584:	0c05 0138 0c05 0144 0c01 0150 0c02 015c     ..8...D...P...\.
 80a8594:	0c03 0168 0c04 0174 0c03 0180 0c05 018c     ..h...t.........
 80a85a4:	0c09 0198 0c07 01b0 0c05 01bc 0c06 01c8     ................
 80a85b4:	0c06 01d4 0c05 01e0 0c05 01ec 0c07 01f8     ................
 80a85c4:	0c06 0204 0c05 0210 0c07 021c 0c05 0228     ..............(.
 80a85d4:	0c04 0234 0c09 0240 0c07 0258 0c07 0264     ..4...@...X...d.
 80a85e4:	0c04 0270 0c08 027c 0c05 0288 0c06 0294     ..p...|.........
 80a85f4:	0c07 02a0 0c06 02ac 0c05 02b8 0c0b 02c4     ................
 80a8604:	0c07 02dc 0c06 02e8 0c07 02f4 0c03 0300     ................
 80a8614:	0c04 030c 0c03 0318 0c04 0324 0c07 0330     ..........$...0.
 80a8624:	0c02 033c 0c06 0348 0c05 0354 0c05 0360     ..<...H...T...`.
 80a8634:	0c05 036c 0c05 0378 0c05 0384 0c05 0390     ..l...x.........
 80a8644:	0c05 039c 0c01 03a8 0c04 03b4 0c05 03c0     ................
 80a8654:	0c01 03cc 0c07 03d8 0c05 03e4 0c05 03f0     ................
 80a8664:	0c05 03fc 0c05 0408 0c03 0414 0c04 0420     .............. .
 80a8674:	0c03 042c 0c05 0438 0c05 0444 0c07 0450     ..,...8...D...P.
 80a8684:	0c06 045c 0c06 0468 0c04 0474 0c04 0480     ..\...h...t.....
 80a8694:	0c01 048c 0c04 0498 0c06 04a4               ............

080a86a0 <centuryGothic_8ptDescriptors>:
 80a86a0:	0b02 0000 0b01 000b 0b03 0016 0b06 0021     ..............!.
 80a86b0:	0b05 002c 0b08 0037 0b07 0042 0b01 004d     ..,...7...B...M.
 80a86c0:	0b02 0058 0b02 0063 0b03 006e 0b05 0079     ..X...c...n...y.
 80a86d0:	0b02 0084 0b03 008f 0b01 009a 0b04 00a5     ................
 80a86e0:	0b05 00b0 0b02 00bb 0b05 00c6 0b05 00d1     ................
 80a86f0:	0b06 00dc 0b05 00e7 0b05 00f2 0b05 00fd     ................
 80a8700:	0b05 0108 0b05 0113 0b01 011e 0b02 0129     ..............).
 80a8710:	0b06 0134 0b06 013f 0b06 014a 0b05 0155     ..4...?...J...U.
 80a8720:	0b09 0160 0b07 0176 0b04 0181 0b07 018c     ..`...v.........
 80a8730:	0b06 0197 0b05 01a2 0b04 01ad 0b08 01b8     ................
 80a8740:	0b06 01c3 0b01 01ce 0b04 01d9 0b05 01e4     ................
 80a8750:	0b04 01ef 0b09 01fa 0b06 0210 0b08 021b     ................
 80a8760:	0b05 0226 0b08 0231 0b05 023c 0b04 0247     ..&...1...<...G.
 80a8770:	0b05 0252 0b06 025d 0b07 0268 0b09 0273     ..R...]...h...s.
 80a8780:	0b05 0289 0b07 0294 0b05 029f 0b02 02aa     ................
 80a8790:	0b06 02b5 0b02 02c0 0b07 02cb 0b06 02d6     ................
 80a87a0:	0b02 02e1 0b07 02ec 0b07 02f7 0b06 0302     ................
 80a87b0:	0b07 030d 0b06 0318 0b03 0323 0b06 032e     ..........#.....
 80a87c0:	0b06 0339 0b01 0344 0b02 034f 0b04 035a     ..9...D...O...Z.
 80a87d0:	0b01 0365 0b09 0370 0b06 0386 0b06 0391     ..e...p.........
 80a87e0:	0b07 039c 0b07 03a7 0b03 03b2 0b03 03bd     ................
 80a87f0:	0b03 03c8 0b06 03d3 0b07 03de 0b09 03e9     ................
 80a8800:	0b05 03ff 0b05 040a 0b05 0415 0b03 0420     .............. .
 80a8810:	0b01 042b 0b03 0436 0b06 0441               ..+...6...A.

080a881c <glcdfontDescriptors>:
 80a881c:	0805 0000 0805 0008 0805 0010 0805 0018     ................
 80a882c:	0805 0020 0805 0028 0805 0030 0805 0038     .. ...(...0...8.
 80a883c:	0805 0040 0805 0048 0805 0050 0805 0058     ..@...H...P...X.
 80a884c:	0805 0060 0805 0068 0805 0070 0805 0078     ..`...h...p...x.
 80a885c:	0805 0080 0805 0088 0805 0090 0805 0098     ................
 80a886c:	0805 00a0 0805 00a8 0805 00b0 0805 00b8     ................
 80a887c:	0805 00c0 0805 00c8 0805 00d0 0805 00d8     ................
 80a888c:	0805 00e0 0805 00e8 0805 00f0 0805 00f8     ................
 80a889c:	0805 0100 0805 0108 0805 0110 0805 0118     ................
 80a88ac:	0805 0120 0805 0128 0805 0130 0805 0138     .. ...(...0...8.
 80a88bc:	0805 0140 0805 0148 0805 0150 0805 0158     ..@...H...P...X.
 80a88cc:	0805 0160 0805 0168 0805 0170 0805 0178     ..`...h...p...x.
 80a88dc:	0805 0180 0805 0188 0805 0190 0805 0198     ................
 80a88ec:	0805 01a0 0805 01a8 0805 01b0 0805 01b8     ................
 80a88fc:	0805 01c0 0805 01c8 0805 01d0 0805 01d8     ................
 80a890c:	0805 01e0 0805 01e8 0805 01f0 0805 01f8     ................
 80a891c:	0805 0200 0805 0208 0805 0210 0805 0218     ................
 80a892c:	0805 0220 0805 0228 0805 0230 0805 0238     .. ...(...0...8.
 80a893c:	0805 0240 0805 0248 0805 0250 0805 0258     ..@...H...P...X.
 80a894c:	0805 0260 0805 0268 0805 0270 0805 0278     ..`...h...p...x.
 80a895c:	0805 0280 0805 0288 0805 0290 0805 0298     ................
 80a896c:	0805 02a0 0805 02a8 0805 02b0 0805 02b8     ................
 80a897c:	0805 02c0 0805 02c8 0805 02d0 0805 02d8     ................
 80a898c:	0805 02e0 0805 02e8 0805 02f0 0805 02f8     ................
 80a899c:	0805 0300 0805 0308 0805 0310 0805 0318     ................
 80a89ac:	0805 0320 0805 0328 0805 0330 0805 0338     .. ...(...0...8.
 80a89bc:	0805 0340 0805 0348 0805 0350 0805 0358     ..@...H...P...X.
 80a89cc:	0805 0360 0805 0368 0805 0370 0805 0378     ..`...h...p...x.
 80a89dc:	0805 0380 0805 0388 0805 0390 0805 0398     ................
 80a89ec:	0805 03a0 0805 03a8 0805 03b0 0805 03b8     ................
 80a89fc:	0805 03c0 0805 03c8 0805 03d0 0805 03d8     ................
 80a8a0c:	0805 03e0 0805 03e8 0805 03f0 0805 03f8     ................
 80a8a1c:	0805 0400 0805 0408 0805 0410 0805 0418     ................
 80a8a2c:	0805 0420 0805 0428 0805 0430 0805 0438     .. ...(...0...8.
 80a8a3c:	0805 0440 0805 0448 0805 0450 0805 0458     ..@...H...P...X.
 80a8a4c:	0805 0460 0805 0468 0805 0470 0805 0478     ..`...h...p...x.
 80a8a5c:	0805 0480 0805 0488 0805 0490 0805 0498     ................
 80a8a6c:	0805 04a0 0805 04a8 0805 04b0 0805 04b8     ................
 80a8a7c:	0805 04c0 0805 04c8 0805 04d0 0805 04d8     ................
 80a8a8c:	0805 04e0 0805 04e8 0805 04f0 0805 04f8     ................
 80a8a9c:	0805 0500 0805 0508 0805 0510 0805 0518     ................
 80a8aac:	0805 0520 0805 0528 0805 0530 0805 0538     .. ...(...0...8.
 80a8abc:	0805 0540 0805 0548 0805 0550 0805 0558     ..@...H...P...X.
 80a8acc:	0805 0560 0805 0568 0805 0570 0805 0578     ..`...h...p...x.
 80a8adc:	0805 0580 0805 0588 0805 0590 0805 0598     ................
 80a8aec:	0805 05a0 0805 05a8 0805 05b0 0805 05b8     ................
 80a8afc:	0805 05c0 0805 05c8 0805 05d0 0805 05d8     ................
 80a8b0c:	0805 05e0 0805 05e8 0805 05f0 0805 05f8     ................
 80a8b1c:	0805 0600 0805 0608 0805 0610 0805 0618     ................
 80a8b2c:	0805 0620 0805 0628 0805 0630 0805 0638     .. ...(...0...8.
 80a8b3c:	0805 0640 0805 0648 0805 0650 0805 0658     ..@...H...P...X.
 80a8b4c:	0805 0660 0805 0668 0805 0670 0805 0678     ..`...h...p...x.
 80a8b5c:	0805 0680 0805 0688 0805 0690 0805 0698     ................
 80a8b6c:	0805 06a0 0805 06a8 0805 06b0 0805 06b8     ................
 80a8b7c:	0805 06c0 0805 06c8 0805 06d0 0805 06d8     ................
 80a8b8c:	0805 06e0 0805 06e8 0805 06f0 0805 06f8     ................
 80a8b9c:	0805 0700 0805 0708 0805 0710 0805 0718     ................
 80a8bac:	0805 0720 0805 0728 0805 0730 0805 0738     .. ...(...0...8.
 80a8bbc:	0805 0740 0805 0748 0805 0750 0805 0758     ..@...H...P...X.
 80a8bcc:	0805 0760 0805 0768 0805 0770 0805 0778     ..`...h...p...x.
 80a8bdc:	0805 0780 0805 0788 0805 0790 0805 0798     ................
 80a8bec:	0805 07a0 0805 07a8 0805 07b0 0805 07b8     ................
 80a8bfc:	0805 07c0 0805 07c8 0805 07d0 0805 07d8     ................
 80a8c0c:	0805 07e0 0805 07e8 0805 07f0 0805 07f8     ................

080a8c1c <timesNewRoman_8ptDescriptors>:
 80a8c1c:	0c02 0000 0c01 000c 0c03 0018 0c06 0024     ..............$.
 80a8c2c:	0c05 0030 0c09 003c 0c08 0054 0c01 0060     ..0...<...T...`.
 80a8c3c:	0c03 006c 0c03 0078 0c05 0084 0c05 0090     ..l...x.........
 80a8c4c:	0c02 009c 0c03 00a8 0c01 00b4 0c03 00c0     ................
 80a8c5c:	0c05 00cc 0c03 00d8 0c05 00e4 0c05 00f0     ................
 80a8c6c:	0c05 00fc 0c05 0108 0c05 0114 0c05 0120     .............. .
 80a8c7c:	0c05 012c 0c05 0138 0c01 0144 0c02 0150     ..,...8...D...P.
 80a8c8c:	0c05 015c 0c05 0168 0c05 0174 0c04 0180     ..\...h...t.....
 80a8c9c:	0c09 018c 0c07 01a4 0c06 01b0 0c06 01bc     ................
 80a8cac:	0c07 01c8 0c06 01d4 0c06 01e0 0c07 01ec     ................
 80a8cbc:	0c07 01f8 0c03 0204 0c04 0210 0c08 021c     ................
 80a8ccc:	0c06 0228 0c09 0234 0c07 024c 0c07 0258     ..(...4...L...X.
 80a8cdc:	0c06 0264 0c07 0270 0c07 027c 0c04 0288     ..d...p...|.....
 80a8cec:	0c07 0294 0c07 02a0 0c07 02ac 0c0b 02b8     ................
 80a8cfc:	0c07 02d0 0c07 02dc 0c06 02e8 0c03 02f4     ................
 80a8d0c:	0c03 0300 0c03 030c 0c04 0318 0c06 0324     ..............$.
 80a8d1c:	0c02 0330 0c05 033c 0c05 0348 0c04 0354     ..0...<...H...T.
 80a8d2c:	0c05 0360 0c04 036c 0c05 0378 0c05 0384     ..`...l...x.....
 80a8d3c:	0c06 0390 0c03 039c 0c03 03a8 0c05 03b4     ................
 80a8d4c:	0c03 03c0 0c09 03cc 0c06 03e4 0c05 03f0     ................
 80a8d5c:	0c05 03fc 0c05 0408 0c04 0414 0c03 0420     .............. .
 80a8d6c:	0c03 042c 0c06 0438 0c06 0444 0c08 0450     ..,...8...D...P.
 80a8d7c:	0c05 045c 0c06 0468 0c05 0474 0c03 0480     ..\...h...t.....
 80a8d8c:	0c01 048c 0c03 0498 0c05 04a4               ............

080a8d98 <timesNewRoman_8ptBitmaps>:
 80a8d98:	7f20 0000 0000 0000 0000 0000 0000 8000      ...............
 80a8da8:	8080 8080 0080 0080 0000 a000 a0a0 0000     ................
 80a8db8:	0000 0000 0000 2400 4824 48fc 90fc 0090     .......$$H.H....
 80a8dc8:	0000 7020 a0a8 3060 a828 2070 0000 0000     .. p..`0(.p ....
 80a8dd8:	0041 00a2 00a4 0048 0009 8012 8022 0041     A.....H.....".A.
 80a8de8:	0000 0000 0000 1c00 2824 d233 8994 0076     ........$(3...v.
 80a8df8:	0000 8000 8080 0000 0000 0000 0000 2000     ............... 
 80a8e08:	8040 8080 8080 4080 0020 8000 2040 2020     @......@ ...@   
 80a8e18:	2020 4020 0080 2000 70a8 20a8 0000 0000        @... .p. ....
 80a8e28:	0000 0000 2000 f820 2020 0000 0000 0000     .....  .  ......
 80a8e38:	0000 0000 0000 40c0 0080 0000 0000 0000     .......@........
 80a8e48:	00e0 0000 0000 0000 0000 0000 0000 0080     ................
 80a8e58:	0000 2000 4020 4040 8040 0080 0000 7000     ...  @@@@......p
 80a8e68:	8888 8888 8888 0070 0000 c000 4040 4040     ......p.....@@@@
 80a8e78:	4040 00e0 0000 7000 0888 1008 4820 00f8     @@.....p.... H..
 80a8e88:	0000 7000 0888 0830 0808 00f0 0000 1000     ...p..0.........
 80a8e98:	5030 9050 10f8 0010 0000 3800 6040 0810     0PP........8@`..
 80a8ea8:	0808 00f0 0000 1800 4060 c8b0 8888 0070     ........`@....p.
 80a8eb8:	0000 7800 0888 1010 2010 0020 0000 7000     ...x.....  ....p
 80a8ec8:	8888 5070 8888 0070 0000 7000 8888 7888     ..pP..p....p...x
 80a8ed8:	3010 00c0 0000 0000 0000 0080 0000 0080     .0..............
 80a8ee8:	0000 0000 0000 0080 0000 40c0 0080 0000     ...........@....
 80a8ef8:	0800 8070 0870 0000 0000 0000 0000 00f8     ..p.p...........
 80a8f08:	00f8 0000 0000 0000 8000 0870 8070 0000     ..........p.p...
 80a8f18:	0000 6000 1090 4020 0040 0040 0000 0000     ...`.. @@.@.....
 80a8f28:	001e 0021 804e 8092 80a4 80a4 00a7 0098     ..!.N...........
 80a8f38:	8040 0021 001e 1000 2810 2828 447c 00ee     @.!......(((|D..
 80a8f48:	0000 f800 4444 4478 4444 00f8 0000 3c00     ....DDxDDD.....<
 80a8f58:	8044 8080 4480 0038 0000 f800 4244 4242     D....D8.....DBBB
 80a8f68:	4442 00f8 0000 fc00 5044 5070 4440 00fc     BD......DPpP@D..
 80a8f78:	0000 fc00 5044 5070 4040 00e0 0000 3c00     ....DPpP@@.....<
 80a8f88:	8044 8e80 4484 0038 0000 ee00 4444 447c     D....D8.....DD|D
 80a8f98:	4444 00ee 0000 e000 4040 4040 4040 00e0     DD......@@@@@@..
 80a8fa8:	0000 7000 2020 2020 2020 00c0 0000 ee00     ...p      ......
 80a8fb8:	5048 5060 4448 00ef 0000 e000 4040 4040     HP`PHD......@@@@
 80a8fc8:	4440 00fc 0000 0000 80e3 0063 0063 0055     @D........c.c.U.
 80a8fd8:	0055 0055 0049 80eb 0000 0000 0000 ce00     U.U.I...........
 80a8fe8:	6444 5454 444c 00e4 0000 3800 8244 8282     DdTTLD.....8D...
 80a8ff8:	4482 0038 0000 f800 4444 7844 4040 00e0     .D8.....DDDx@@..
 80a9008:	0000 3800 8244 8282 4482 0838 0006 f800     ...8D....D8.....
 80a9018:	4444 5078 4848 00e6 0000 7000 8090 2040     DDxPHH.....p..@ 
 80a9028:	9010 00e0 0000 fe00 1092 1010 1010 0038     ..............8.
 80a9038:	0000 ee00 4444 4444 4444 0038 0000 ee00     ....DDDDDD8.....
 80a9048:	4444 2828 1028 0010 0000 0000 e0ee 4044     DD(((.........D@
 80a9058:	4044 8024 802a 802a 0011 0011 0000 0000     D@$.*.*.........
 80a9068:	0000 ee00 2844 1010 4428 00ee 0000 ee00     ....D(..(D......
 80a9078:	2844 1028 1010 0038 0000 fc00 1088 2020     D((...8.......  
 80a9088:	8440 00fc 0000 e000 8080 8080 8080 8080     @...............
 80a9098:	00e0 8000 4080 4040 2040 0020 0000 e000     .....@@@@  .....
 80a90a8:	2020 2020 2020 2020 00e0 6000 9060 0090             ...``...
	...
 80a90c8:	00fc 8000 0040 0000 0000 0000 0000 0000     ....@...........
 80a90d8:	0000 1060 9070 0078 0000 c000 4040 4870     ..`.p.x.....@@pH
 80a90e8:	4848 0030 0000 0000 0000 9070 8080 0070     HH0.......p...p.
 80a90f8:	0000 3000 1010 9070 9090 0078 0000 0000     ...0..p...x.....
 80a9108:	0000 9060 80f0 0070 0000 3800 4048 40e0     ..`...p....8H@.@
 80a9118:	4040 00e0 0000 0000 0000 9078 8060 88f0     @@........x.`...
 80a9128:	0070 c000 4040 6858 4848 00ec 0000 4000     p...@@XhHH.....@
 80a9138:	0000 40c0 4040 00e0 0000 2000 0000 2060     ...@@@..... ..` 
 80a9148:	2020 2020 00c0 c000 4040 5058 5060 00d8         ....@@XP`P..
 80a9158:	0000 c000 4040 4040 4040 00e0 0000 0000     ....@@@@@@......
 80a9168:	0000 0000 0000 00db 006d 0049 0049 80ed     ........m.I.I...
	...
 80a9180:	0000 68d8 4848 00ec 0000 0000 0000 8870     ...hHH........p.
 80a9190:	8888 0070 0000 0000 0000 48f0 4848 4070     ..p........HHHp@
 80a91a0:	00e0 0000 0000 9070 9090 1070 0038 0000     ......p...p.8...
 80a91b0:	0000 60d0 4040 00e0 0000 0000 0000 8060     ...`@@........`.
 80a91c0:	2060 00c0 0000 0000 4040 40e0 4040 0060     ` ......@@.@@@`.
 80a91d0:	0000 0000 0000 48d8 4848 003c 0000 0000     .......HHH<.....
 80a91e0:	0000 48dc 2050 0020 0000 0000 0000 4adb     ...HP  ........J
 80a91f0:	245a 0024 0000 0000 0000 50d8 5020 00d8     Z$$........P P..
 80a9200:	0000 0000 0000 48dc 3050 2020 00c0 0000     .......HP0  ....
 80a9210:	0000 90f8 4820 00f8 0000 2000 4040 8040     .... H..... @@@.
 80a9220:	4040 4040 0020 8000 8080 8080 8080 8080     @@@@ ...........
 80a9230:	0080 8000 4040 2040 4040 4040 0080 0000     ....@@@ @@@@....
 80a9240:	0000 e800 00b8 0000 0000 2e30 0030 6166     ..........0.0.fa
 80a9250:	736c 0065 7274 6575 2500 0075 6725 6e00     lse.true.%u.%g.n
 80a9260:	6c75 006c 2575 3430 0078 0000               ull.u%04x...

080a926c <_ZTVN5spark12NetworkClassE>:
	...
 80a9274:	250b 080a 2515 080a 251f 080a 2529 080a     .%...%...%..)%..
 80a9284:	2533 080a 253f 080a 254b 080a 2557 080a     3%..?%..K%..W%..
 80a9294:	255f 080a 2569 080a 2575 080a               _%..i%..u%..

080a92a0 <_ZTVN5spark9WiFiClassE>:
	...
 80a92a8:	267b 080a 2671 080a 2667 080a 25d9 080a     {&..q&..g&...%..
 80a92b8:	265b 080a 264f 080a 2643 080a 263b 080a     [&..O&..C&..;&..
 80a92c8:	2631 080a 2627 080a 25e3 080a               1&..'&...%..

080a92d4 <_ZTV8SPIClass>:
	...
 80a92dc:	2699 080a 269b 080a                         .&...&..

080a92e4 <_ZL14clock_divisors>:
 80a92e4:	0800 1810 2820 3830                         .... (08

080a92ec <_ZTV7TwoWire>:
	...
 80a92f4:	27af 080a 27f9 080a 27d1 080a 27b1 080a     .'...'...'...'..
 80a9304:	27d9 080a 27e1 080a 27e9 080a 27f1 080a     .'...'...'...'..

080a9314 <_ZTV9USBSerial>:
	...
 80a931c:	2873 080a 28c3 080a 28d1 080a 3e05 080a     s(...(...(...>..
 80a932c:	28af 080a 2875 080a 288b 080a 28bd 080a     .(..u(...(...(..
 80a933c:	28a1 080a 286f 080a                         .(..o(..

080a9344 <_ZTV9IPAddress>:
	...
 80a934c:	2a2d 080a 2a1d 080a 2a1f 080a 2b25 3330     -*...*...*..%+03
 80a935c:	3a64 3025 7532 2500 2d59 6d25 252d 5464     d:%02u.%Y-%m-%dT
 80a936c:	4825 253a 3a4d 5325 7a25 6100 6373 6974     %H:%M:%S%z.ascti
 80a937c:	656d 0000                                   me..

080a9380 <_ZTVN5spark16JSONStreamWriterE>:
	...
 80a9388:	2e87 080a 2ead 080a 2e61 080a 214b 080a     ........a...K!..

080a9398 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
 80a93a0:	333d 080a 3351 080a 3c8d 080a 2e69 080a     =3..Q3...<..i...

080a93b0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
 80a93b8:	2e83 080a 2ec9 080a 3235 080a 2ed7 080a     ........52......
 80a93c8:	6162 6475 5300 7265 6169 006c 5355 5342     baud.Serial.USBS
 80a93d8:	7265 6169 316c 7400 7079 0065 6170 6172     erial1.type.para
 80a93e8:	006d 6d63 0064 6469 6800 646e 7300 7274     m.cmd.id.hnd.str
 80a93f8:	006d 6966 746c 6c00 6c76 6100 6464 6148     m.filt.lvl.addHa
 80a9408:	646e 656c 0072 6572 6f6d 6576 6148 646e     ndler.removeHand
 80a9418:	656c 0072 6e65 6d75 6148 646e 656c 7372     ler.enumHandlers
 80a9428:	4a00 4f53 534e 7274 6165 4c6d 676f 6148     .JSONStreamLogHa
 80a9438:	646e 656c 0072 7061 0070 3025 3031 2075     ndler.app.%010u 
 80a9448:	5d00 0020 202c 2800 3a29 0020 5b20 6300     .] ., .(): . [.c
 80a9458:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
 80a9468:	2073 203d 0d00 000a 6e6c 6600 006e 6f63     s = ....ln.fn.co
 80a9478:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
 80a9488:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
 80a9498:	7272 726f 7000 6e61 6369 6100 6c6c 0000     rror.panic.all..

080a94a8 <_ZTVN5spark16StreamLogHandlerE>:
	...
 80a94b0:	3311 080a 3329 080a 3ad9 080a 00cf 080a     .3..)3...:......

080a94c0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
 80a94c8:	2e85 080a 2ebb 080a 3a01 080a 2e6b 080a     .........:..k...
 80a94d8:	616e 006e 766f 0066 002e 6e69 0066 0000     nan.ovf...inf...

080a94e8 <_ZTV11USARTSerial>:
	...
 80a94f0:	4129 080a 4179 080a 4187 080a 3e05 080a     )A..yA...A...>..
 80a9500:	413d 080a 415f 080a 414b 080a 4173 080a     =A.._A..KA..sA..
 80a9510:	412b 080a 412f 080a                         +A../A..

080a9518 <_ZSt7nothrow>:
	...

080a9519 <day_name.4723>:
 80a9519:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a9529:	6972 6153 4a74                                   riSat

080a952e <mon_name.4724>:
 80a952e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a953e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a954e:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80a955e:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80a956e:	6425 000a                                   %d..

080a9572 <_ctype_>:
 80a9572:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a9582:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a9592:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a95a2:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a95b2:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a95c2:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a95d2:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a95e2:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a95f2:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a9674 <__sf_fake_stdin>:
	...

080a9694 <__sf_fake_stdout>:
	...

080a96b4 <__sf_fake_stderr>:
	...
 80a96d4:	0043 0000                                   C...

080a96d8 <__month_lengths>:
 80a96d8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a96e8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a96f8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a9708:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a9718:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a9728:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a9738:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 80a9748:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 80a9758:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 80a9768:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 80a9778:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 80a9788:	6c33 2564 322e 646c 4c00 5f43 4954 454d     3ld%.2ld.LC_TIME
 80a9798:	4a00 6e61 4600 6265 4d00 7261 4100 7270     .Jan.Feb.Mar.Apr
 80a97a8:	4d00 7961 4a00 6e75 4a00 6c75 4100 6775     .May.Jun.Jul.Aug
 80a97b8:	5300 7065 4f00 7463 4e00 766f 4400 6365     .Sep.Oct.Nov.Dec
 80a97c8:	4a00 6e61 6175 7972 4600 6265 7572 7261     .January.Februar
 80a97d8:	0079 614d 6372 0068 7041 6972 006c 754a     y.March.April.Ju
 80a97e8:	656e 4a00 6c75 0079 7541 7567 7473 5300     ne.July.August.S
 80a97f8:	7065 6574 626d 7265 4f00 7463 626f 7265     eptember.October
 80a9808:	4e00 766f 6d65 6562 0072 6544 6563 626d     .November.Decemb
 80a9818:	7265 5300 6e75 4d00 6e6f 5400 6575 5700     er.Sun.Mon.Tue.W
 80a9828:	6465 5400 7568 4600 6972 5300 7461 5300     ed.Thu.Fri.Sat.S
 80a9838:	6e75 6164 0079 6f4d 646e 7961 5400 6575     unday.Monday.Tue
 80a9848:	6473 7961 5700 6465 656e 6473 7961 5400     sday.Wednesday.T
 80a9858:	7568 7372 6164 0079 7246 6469 7961 5300     hursday.Friday.S
 80a9868:	7461 7275 6164 0079 4825 253a 3a4d 5325     aturday.%H:%M:%S
 80a9878:	2500 2f6d 6425 252f 0079 6125 2520 2062     .%m/%d/%y.%a %b 
 80a9888:	6525 2520 3a48 4d25 253a 2053 5925 4100     %e %H:%M:%S %Y.A
 80a9898:	004d 4d50 2500 2061 6225 2520 2065 4825     M.PM.%a %b %e %H
 80a98a8:	253a 3a4d 5325 2520 205a 5925 2500 3a49     :%M:%S %Z %Y.%I:
 80a98b8:	4d25 253a 2053 7025 0000 0000               %M:%S %p....

080a98c4 <_C_time_locale>:
 80a98c4:	9799 080a 979d 080a 97a1 080a 97a5 080a     ................
 80a98d4:	97a9 080a 97ad 080a 97b1 080a 97b5 080a     ................
 80a98e4:	97b9 080a 97bd 080a 97c1 080a 97c5 080a     ................
 80a98f4:	97c9 080a 97d1 080a 97da 080a 97e0 080a     ................
 80a9904:	97a9 080a 97e6 080a 97eb 080a 97f0 080a     ................
 80a9914:	97f7 080a 9801 080a 9809 080a 9812 080a     ................
 80a9924:	981b 080a 981f 080a 9823 080a 9827 080a     ........#...'...
 80a9934:	982b 080a 982f 080a 9833 080a 9837 080a     +.../...3...7...
 80a9944:	983e 080a 9845 080a 984d 080a 9857 080a     >...E...M...W...
 80a9954:	9860 080a 9867 080a 9870 080a 9879 080a     `...g...p...y...
 80a9964:	9882 080a 9897 080a 989a 080a 989d 080a     ................
 80a9974:	97c9 080a 97d1 080a 97da 080a 97e0 080a     ................
 80a9984:	97a9 080a 97e6 080a 97eb 080a 97f0 080a     ................
 80a9994:	97f7 080a 9801 080a 9809 080a 9812 080a     ................
 80a99a4:	93eb 080a 98b5 080a 946f 080a 946f 080a     ........o...o...
 80a99b4:	946f 080a 946f 080a 946f 080a 5a54 4700     o...o...o...TZ.G
 80a99c4:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80a99d4:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 80a99e4:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 80a99f4:	3a6e 6825 2575 006e                         n:%hu%n.

080a99fc <link_const_variable_data_end>:
 80a99fc:	080a0441 	.word	0x080a0441
 80a9a00:	080a0559 	.word	0x080a0559
 80a9a04:	080a05e5 	.word	0x080a05e5
 80a9a08:	080a0679 	.word	0x080a0679
 80a9a0c:	080a0a09 	.word	0x080a0a09
 80a9a10:	080a0c31 	.word	0x080a0c31
 80a9a14:	080a10b7 	.word	0x080a10b7
 80a9a18:	080a15a1 	.word	0x080a15a1
 80a9a1c:	080a15a5 	.word	0x080a15a5
 80a9a20:	080a1789 	.word	0x080a1789
 80a9a24:	080a19f1 	.word	0x080a19f1
 80a9a28:	080a1b5d 	.word	0x080a1b5d
 80a9a2c:	080a25c5 	.word	0x080a25c5
 80a9a30:	080a2685 	.word	0x080a2685
 80a9a34:	080a2c59 	.word	0x080a2c59
 80a9a38:	080a2e4d 	.word	0x080a2e4d
 80a9a3c:	080a3ac9 	.word	0x080a3ac9
 80a9a40:	080a4241 	.word	0x080a4241
 80a9a44:	080a43a1 	.word	0x080a43a1
 80a9a48:	080a43d1 	.word	0x080a43d1
 80a9a4c:	080a4549 	.word	0x080a4549
 80a9a50:	080a45cd 	.word	0x080a45cd
 80a9a54:	080a4691 	.word	0x080a4691
 80a9a58:	080a4755 	.word	0x080a4755

080a9a5c <link_constructors_end>:
 80a9a5c:	00000000 	.word	0x00000000
